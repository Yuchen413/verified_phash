Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: cnn_4layer_b4
  path: cifar_cnn_b_adv4.model
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 13
  end: 14
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.00784313725
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 256
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 60
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 50
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 18:27:56 2023 on zeratul
Sequential(
  (0): ZeroPad2d((1, 2, 1, 2))
  (1): Conv2d(3, 32, kernel_size=(5, 5), stride=(2, 2))
  (2): ReLU()
  (3): Conv2d(32, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (4): ReLU()
  (5): Flatten()
  (6): Linear(in_features=8192, out_features=250, bias=True)
  (7): ReLU()
  (8): Linear(in_features=250, out_features=10, bias=True)
)
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308714)
############################
Internal results will be saved to Verified_ret_[cnn_4layer_b4]_start=13_end=14_iter=20_b=256_timeout=60_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 13 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-69.58036041, -68.23901367, -72.20265961, -73.98355865, -74.29905701,
         -74.83489990, -73.73512268, -76.19071960, -70.38563538, -71.32450104]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-67.19230652, -66.62995148, -69.75311279, -71.67196655, -71.79543304,
          -72.52542877, -71.40586853, -73.78379059, -68.02364349, -69.39717865],
         [-67.19230652, -66.62995148, -69.75311279, -71.67196655, -71.79543304,
          -72.52542877, -71.40586853, -73.78379059, -68.02364349, -69.39717865]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.56235504, 3.12316132, 5.04201508, 5.16548157, 5.89547729,
          4.77591705, 7.15383911, 1.39369202, 2.76722717]]], device='cuda:0')
number of violation:  0
Attack finished in 2.2965 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundConstant(name=/9, inputs=[])
  (/10): BoundConcat(name=/10, inputs=[/9])
  (/11): BoundConstant(name=/11, inputs=[])
  (/12): BoundShape(name=/12, inputs=[/10])
  (/13): BoundGather(name=/13, inputs=[/12, /11])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundConstant(name=/15, inputs=[])
  (/16): BoundMul(name=/16, inputs=[/14, /15])
  (/17): BoundSub(name=/17, inputs=[/16, /13])
  (/18): BoundCast(name=/18, inputs=[/10])
  (/19): BoundConstantOfShape(name=/19, inputs=[/17])
  (/20): BoundConcat(name=/20, inputs=[/18, /19])
  (/21): BoundConstant(name=/21, inputs=[])
  (/22): BoundReshape(name=/22, inputs=[/20, /21])
  (/23): BoundConstant(name=/23, inputs=[])
  (/24): BoundConstant(name=/24, inputs=[])
  (/25): BoundConstant(name=/25, inputs=[])
  (/26): BoundConstant(name=/26, inputs=[])
  (/27): BoundSlice(name=/27, inputs=[/22, /24, /25, /23, /26])
  (/28): BoundTranspose(name=/28, inputs=[/27])
  (/29): BoundConstant(name=/29, inputs=[])
  (/30): BoundReshape(name=/30, inputs=[/28, /29])
  (/31): BoundCast(name=/31, inputs=[/30])
  (/32): BoundConstant(name=/32, inputs=[])
  (/input): BoundPad(name=/input, inputs=[/input.1, /31, /32])
  (/input.4): BoundConv(name=/input.4, inputs=[/input, /1, /2])
  (/input.8): BoundRelu(name=/input.8, inputs=[/input.4])
  (/input.12): BoundConv(name=/input.12, inputs=[/input.8, /3, /4])
  (/37): BoundRelu(name=/37, inputs=[/input.12])
  (/38): BoundShape(name=/38, inputs=[/37])
  (/39): BoundConstant(name=/39, inputs=[])
  (/40): BoundGather(name=/40, inputs=[/38, /39])
  (/41): BoundConstant(name=/41, inputs=[])
  (/42): BoundUnsqueeze(name=/42, inputs=[/40])
  (/43): BoundUnsqueeze(name=/43, inputs=[/41])
  (/44): BoundConcat(name=/44, inputs=[/42, /43])
  (/45): BoundReshape(name=/45, inputs=[/37, /44])
  (/input.16): BoundLinear(name=/input.16, inputs=[/45, /5, /6])
  (/47): BoundRelu(name=/47, inputs=[/input.16])
  (/48): BoundLinear(name=/48, inputs=[/47, /7, /8])
)
Model prediction is: tensor([[-69.58036041, -68.23901367, -72.20265961, -73.98355865, -74.29905701,
         -74.83489990, -73.73512268, -76.19071960, -70.38563538, -71.32450104]],
       device='cuda:0')
layer /input.8 using sparse-features alpha with shape [1364]; unstable size 1364; total size 8192 (torch.Size([1, 32, 16, 16]))
layer /input.8 start_node /input.12 using sparse-spec alpha with unstable size 480 total_size 8192 output_shape (128, 8, 8)
layer /input.8 start_node /input.16 using sparse-spec alpha with unstable size 32 total_size 250 output_shape torch.Size([250])
layer /input.8 start_node /48 using full alpha with unstable size None total_size 9 output_shape 9
layer /37 using sparse-features alpha with shape [480]; unstable size 480; total size 8192 (torch.Size([1, 128, 8, 8]))
layer /37 start_node /input.16 using sparse-spec alpha with unstable size 32 total_size 250 output_shape torch.Size([250])
layer /37 start_node /48 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using sparse-features alpha with shape [32]; unstable size 32; total size 250 (torch.Size([1, 250]))
layer /47 start_node /48 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.50704956,  1.63922596,  3.68693066,  3.40120506,  4.48710823,
          3.38283539,  5.03883743,  0.34705257,  2.01091790]], device='cuda:0') None
best_l after optimization: 24.19083023071289
alpha/beta optimization time: 8.285271883010864
initial alpha-CROWN bounds: tensor([[-0.44245434,  1.71654987,  3.76597738,  3.49993229,  4.56639624,
          3.45605946,  5.15339947,  0.41723156,  2.05773950]], device='cuda:0')
Worst class: (+ rhs) -0.44245433807373047
Split layers:
  BoundConv(name=/input.12, inputs=[/input.8, /3, /4]): [(BoundRelu(name=/37, inputs=[/input.12]), 0)]
  BoundLinear(name=/input.16, inputs=[/45, /5, /6]): [(BoundRelu(name=/47, inputs=[/input.16]), 0)]
  BoundConv(name=/input.4, inputs=[/input, /1, /2]): [(BoundRelu(name=/input.8, inputs=[/input.4]), 0)]
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 32, 16, 16]), torch.Size([1, 9, 128, 8, 8]), torch.Size([1, 9, 250])]

Properties batch 0, size 1
Remaining timeout: 42.99518060684204
##### Instance 0 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.44245434]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundConstant(name=/9, inputs=[])
  (/10): BoundConcat(name=/10, inputs=[/9])
  (/11): BoundConstant(name=/11, inputs=[])
  (/12): BoundShape(name=/12, inputs=[/10])
  (/13): BoundGather(name=/13, inputs=[/12, /11])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundConstant(name=/15, inputs=[])
  (/16): BoundMul(name=/16, inputs=[/14, /15])
  (/17): BoundSub(name=/17, inputs=[/16, /13])
  (/18): BoundCast(name=/18, inputs=[/10])
  (/19): BoundConstantOfShape(name=/19, inputs=[/17])
  (/20): BoundConcat(name=/20, inputs=[/18, /19])
  (/21): BoundConstant(name=/21, inputs=[])
  (/22): BoundReshape(name=/22, inputs=[/20, /21])
  (/23): BoundConstant(name=/23, inputs=[])
  (/24): BoundConstant(name=/24, inputs=[])
  (/25): BoundConstant(name=/25, inputs=[])
  (/26): BoundConstant(name=/26, inputs=[])
  (/27): BoundSlice(name=/27, inputs=[/22, /24, /25, /23, /26])
  (/28): BoundTranspose(name=/28, inputs=[/27])
  (/29): BoundConstant(name=/29, inputs=[])
  (/30): BoundReshape(name=/30, inputs=[/28, /29])
  (/31): BoundCast(name=/31, inputs=[/30])
  (/32): BoundConstant(name=/32, inputs=[])
  (/input): BoundPad(name=/input, inputs=[/input.1, /31, /32])
  (/input.4): BoundConv(name=/input.4, inputs=[/input, /1, /2])
  (/input.8): BoundRelu(name=/input.8, inputs=[/input.4])
  (/input.12): BoundConv(name=/input.12, inputs=[/input.8, /3, /4])
  (/37): BoundRelu(name=/37, inputs=[/input.12])
  (/38): BoundShape(name=/38, inputs=[/37])
  (/39): BoundConstant(name=/39, inputs=[])
  (/40): BoundGather(name=/40, inputs=[/38, /39])
  (/41): BoundConstant(name=/41, inputs=[])
  (/42): BoundUnsqueeze(name=/42, inputs=[/40])
  (/43): BoundUnsqueeze(name=/43, inputs=[/41])
  (/44): BoundConcat(name=/44, inputs=[/42, /43])
  (/45): BoundReshape(name=/45, inputs=[/37, /44])
  (/input.16): BoundLinear(name=/input.16, inputs=[/45, /5, /6])
  (/47): BoundRelu(name=/47, inputs=[/input.16])
  (/48): BoundLinear(name=/48, inputs=[/47, /7, /8])
)
Model prediction is: tensor([-69.58036041, -68.23901367, -72.20265961, -73.98355865, -74.29905701,
        -74.83489990, -73.73512268, -76.19071960, -70.38563538, -71.32450104],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /input.8 start_node /48 with alignment adjustment
setting alpha for layer /37 start_node /48 with alignment adjustment
setting alpha for layer /47 start_node /48 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 32, 16, 16]), torch.Size([1, 1, 128, 8, 8]), torch.Size([1, 1, 250])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.44245434]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input.12,/input.16,/input.4,/48
Split layers:
  BoundLinear(name=/input.16, inputs=[/45, /5, /6]): [(BoundRelu(name=/47, inputs=[/input.16]), 0)]
  BoundConv(name=/input.4, inputs=[/input, /1, /2]): [(BoundRelu(name=/input.8, inputs=[/input.4]), 0)]
  BoundConv(name=/input.12, inputs=[/input.8, /3, /4]): [(BoundRelu(name=/37, inputs=[/input.12]), 0)]
Keeping slopes for these layers: ['/48']
Keeping slopes for these layers: ['/48']
Node /input.8 input 0: size torch.Size([32, 16, 16]) unstable 1364
Node /37 input 0: size torch.Size([128, 8, 8]) unstable 469
Node /47 input 0: size torch.Size([250]) unstable 32
-----------------
# of unstable neurons: 1865
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.16, 28] 
split level 1: [/input.16, 54] 
split level 2: [/input.16, 95] 
split level 3: [/input.16, 18] 
pruning_in_iteration open status: True
ratio of positive domain = 14 / 16 = 0.875
pruning-in-iteration extra time: 0.014460563659667969
Time: prepare 0.0013    beta_bound 1.0310    bound 1.0311    transfer 0.0006    finalize 0.0016    func 1.0346    
Accumulated time: func 1.0346    prepare 0.0024    bound 1.0311    beta_bound 1.0310    transfer 0.0006    finalize 0.0016    
batch bounding time:  1.0348806381225586
Current worst splitting domains lb-rhs (depth):
-0.11890 (4), -0.11489 (4), 
length of domains: 2
Time: pickout 0.0010    decision 0.4779    set_bounds 0.0009    solve 1.0349    add 0.0014    
Accumulated time: pickout 0.0010    decision 0.4779    set_bounds 0.0009    solve 1.0349    add 0.0014    
Current (lb-rhs): -0.11890316009521484
2 domains visited
Cumulative time: 1.7076506614685059

BaB round 2
batch: 2
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.16, 31] [/input.16, 31] 
split level 1: [/input.16, 145] [/input.16, 145] 
split level 2: [/input.16, 97] [/input.16, 97] 
pruning_in_iteration open status: True
ratio of positive domain = 8 / 16 = 0.5
pruning-in-iteration extra time: 0.01283121109008789
Time: prepare 0.0014    beta_bound 0.4871    bound 0.4871    transfer 0.0006    finalize 0.0015    func 0.4908    
Accumulated time: func 1.5254    prepare 0.0043    bound 1.5183    beta_bound 1.5181    transfer 0.0013    finalize 0.0031    
batch bounding time:  0.49085164070129395
Current worst splitting domains lb-rhs (depth):
-0.02066 (7), -0.01983 (7), -0.01760 (7), -0.01695 (7), -0.00819 (7), -0.00786 (7), -0.00644 (7), -0.00619 (7), 
length of domains: 8
Time: pickout 0.0009    decision 0.0334    set_bounds 0.0008    solve 0.4909    add 0.0017    
Accumulated time: pickout 0.0019    decision 0.5113    set_bounds 0.0018    solve 1.5258    add 0.0031    
Current (lb-rhs): -0.020658493041992188
10 domains visited
Cumulative time: 2.2357571125030518

BaB round 3
batch: 8
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.16, 171] [/input.16, 171] [/input.16, 171] [/input.16, 171] [/input.16, 171] [/input.16, 171] [/input.16, 171] [/input.16, 171] 
pruning_in_iteration open status: True
ratio of positive domain = 14 / 16 = 0.875
pruning-in-iteration extra time: 0.014004707336425781
Time: prepare 0.0015    beta_bound 0.4933    bound 0.4933    transfer 0.0007    finalize 0.0015    func 0.4970    
Accumulated time: func 2.0224    prepare 0.0063    bound 2.0116    beta_bound 2.0113    transfer 0.0019    finalize 0.0045    
batch bounding time:  0.49704551696777344
Current worst splitting domains lb-rhs (depth):
-0.00146 (8), -0.00083 (8), 
length of domains: 2
Time: pickout 0.0008    decision 0.0413    set_bounds 0.0007    solve 0.4971    add 0.0010    
Accumulated time: pickout 0.0027    decision 0.5526    set_bounds 0.0025    solve 2.0229    add 0.0041    
Current (lb-rhs): -0.001461029052734375
12 domains visited
Cumulative time: 2.777045965194702

BaB round 4
batch: 2
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/input.12, 6819] [/input.12, 6819] 
split level 1: [/input.16, 24] [/input.16, 24] 
split level 2: [/input.16, 212] [/input.16, 212] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 16 / 16 = 1.0
pruning-in-iteration extra time: 0.00011515617370605469
Time: prepare 0.0017    beta_bound 0.0116    bound 0.0116    transfer 0.0005    finalize 0.0017    func 0.0155    
Accumulated time: func 2.0379    prepare 0.0084    bound 2.0232    beta_bound 2.0229    transfer 0.0024    finalize 0.0062    
batch bounding time:  0.015584707260131836
length of domains: 0
Time: pickout 0.0008    decision 0.0331    set_bounds 0.0010    solve 0.0156    add 0.0001    
Accumulated time: pickout 0.0036    decision 0.5857    set_bounds 0.0035    solve 2.0385    add 0.0042    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
12 domains visited
Cumulative time: 2.8280184268951416


Properties batch 1, size 1
Remaining timeout: 39.90077471733093
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.7165498733520508.

Properties batch 2, size 1
Remaining timeout: 39.814478635787964
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.765977382659912.

Properties batch 3, size 1
Remaining timeout: 39.75535321235657
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.499932289123535.

Properties batch 4, size 1
Remaining timeout: 39.69670295715332
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.566396236419678.

Properties batch 5, size 1
Remaining timeout: 39.63697695732117
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.456059455871582.

Properties batch 6, size 1
Remaining timeout: 39.57707929611206
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 5.153399467468262.

Properties batch 7, size 1
Remaining timeout: 39.51737904548645
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.41723155975341797.

Properties batch 8, size 1
Remaining timeout: 39.45840382575989
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.057739496231079.
Result: safe in 20.6012 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):20.600994570651217, max time: 20.601200580596924
mean time for verified SAFE instances(total 1): 20.601200580596924, max time: 20.601200580596924
safe (total 1), index: [0]
