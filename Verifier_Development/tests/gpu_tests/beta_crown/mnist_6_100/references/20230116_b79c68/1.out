Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_6_100
  path: mnist_6_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 5
  end: 6
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Sun Jan 15 23:00:42 2023 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_6_100]_start=5_end=6_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-4.36576319, 10.45044041,  1.05107117, -2.95799756,  0.61751634,
         -2.66855454, -2.13231540,  1.12672389,  1.28850794, -2.20466328]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [45]; unstable size 45; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 66 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [66]; unstable size 66; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using full alpha with shape torch.Size([100]); unstable size 95; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-48.45146561, -49.23908234, -48.25524139, -47.35989380, -48.15966797,
         -39.10931396, -43.14004135, -44.70190811, -54.42058563]],
       device='cuda:0') None
best_l after optimization: -271.8879089355469 with beta sum per layer: []
alpha/beta optimization time: 6.935928583145142
initial alpha-CROWN bounds: tensor([[-30.65382385, -30.07028961, -30.44609451, -31.66740990, -31.07925224,
         -24.11128426, -28.01081657, -30.05672836, -35.79222107]],
       device='cuda:0')
Worst class: (+ rhs) -35.79222106933594
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.36576319, 10.45044041,  1.05107117, -2.95799756,  0.61751634,
         -2.66855454, -2.13231540,  1.12672389,  1.28850794, -2.20466328]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.71480060,  8.03563881,  2.08464670, -2.39962363,  0.54556519,
          -2.70880437, -2.10341263,  1.31160808,  0.84514666, -2.34338331],
         [-3.71480060,  8.03563881,  2.08464670, -2.39962363,  0.54556519,
          -2.70880437, -2.10341263,  1.31160808,  0.84514666, -2.34338331]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[11.75043964,  5.95099211, 10.43526268,  7.49007368, 10.74444294,
          10.13905144,  6.72403049,  7.19049215, 10.37902260]]],
       device='cuda:0')
number of violation:  0
Attack finished in 0.7513 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [45]; unstable size 45; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 66 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [66]; unstable size 66; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using full alpha with shape torch.Size([100]); unstable size 95; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_3', 'lay4_96', 'lay4_4', 'lay4_19', 'lay4_5', 'lay4_61', 'lay4_87', 'lay4_1', 'lay4_78', 'lay4_68', 'lay4_99', 'lay4_15', 'lay4_31', 'lay4_49', 'lay4_43', 'lay4_93', 'lay4_2', 'lay4_67', 'lay4_12', 'lay4_70', 'lay4_30', 'lay4_28', 'lay4_71', 'lay4_92', 'lay4_18', 'lay4_58', 'lay4_26', 'lay4_82', 'lay4_34', 'lay4_10', 'lay4_66', 'lay4_40', 'lay4_56', 'lay4_23', 'lay4_21', 'lay4_24', 'lay4_38', 'lay4_53', 'lay4_79', 'lay4_76', 'lay4_33', 'lay4_22', 'lay4_52', 'lay4_41', 'lay4_95', 'lay4_36', 'lay4_8', 'lay4_80', 'lay4_75', 'lay4_11', 'lay4_81', 'lay4_89', 'lay4_7', 'lay4_9', 'lay4_83', 'lay4_63', 'lay4_74', 'lay4_57', 'lay4_13', 'lay4_72', 'lay4_51', 'lay4_54', 'lay4_84', 'lay4_86', 'lay4_32'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/data_utils.py:255: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6793s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6678s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7069s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.3441s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2712s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-1.1695572686614732,0.058591717460021495] (2,-1; 2,-1), time: 3.7660s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_31, [-inf,inf]=>[-0.6388513348424645,0.8325808119510197] (2,-1; 2,-1), time: 3.8963s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-0.5380726057440213,0.43513445778860416] (2,-1; 2,-1), time: 3.3534s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-0.4751512406546207,0.5610016566739565] (2,-1; 2,-1), time: 4.1644s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8587s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.10674863403049692,0.9426263981030563] (2,-1; 2,-1), time: 4.0793s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[-0.6024802988094583,0.5702756527717284] (2,-1; 2,-1), time: 5.0767s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.8123112587679951,0.46033026746646644] (2,-1; 2,-1), time: 5.0788s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_5, [-inf,inf]=>[-1.083931398307507,0.12375565306074701] (2,-1; 2,-1), time: 5.3402s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-0.883343197084384,0.12075346754703772] (2,-1; 2,-1), time: 5.3457s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6533s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2486s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-1.3437942689153553,0.011967852380717695] (2,-1; 2,-1), time: 6.0355s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5582s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.44435299086108243,0.523308511424201] (2,-1; 2,-1), time: 6.6439s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-inf,-0.0005560862011909046] (-1,-1; 2,-1), time: 2.7632s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.9645518236043783,0.1046928084830668] (2,-1; 2,-1), time: 6.0801s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_3, [-inf,inf]=>[-0.39400237255301107,0.6741382484282449] (2,-1; 2,-1), time: 7.0277s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0106s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3635s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.1981s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.3926862940653599,0.4162409312890454] (2,-1; 2,-1), time: 8.8922s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-1.0345684030205806,0.1950773552964412] (2,-1; 2,-1), time: 4.2360s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_10, [-inf,inf]=>[-1.2570906810285818,0.22573964056946053] (2,-1; 2,-1), time: 4.4042s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8734s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[-0.6979401775973727,0.20195781859945203] (2,-1; 2,-1), time: 6.8440s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[-0.11549397346611077,1.038833492660375] (2,-1; 2,-1), time: 5.0270s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1205s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.6119786491010865,0.3773530886501196] (2,-1; 2,-1), time: 5.0617s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_21, [-inf,inf]=>[-0.7012428067447535,0.24740060835944905] (2,-1; 2,-1), time: 5.9236s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-0.18853022056171784,1.0384310525975928] (2,-1; 2,-1), time: 7.2325s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2800s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.5367921928729877,0.365986180741689] (2,-1; 2,-1), time: 5.9833s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_61, [-inf,inf]=>[-0.6067352826236425,0.9020121359199633] (2,-1; 2,-1), time: 12.8670s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_56, [-inf,inf]=>[-0.10358378625765888,0.5883150228921546] (2,-1; 2,-1), time: 6.8439s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-0.3810496411725626,0.5838151566544897] (2,-1; 2,-1), time: 6.1999s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2719s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_66, [-inf,inf]=>[1e-05,0.9316063565907462] (15,-1; 2,-1), time: 7.7400s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.9178331719919619,0.05964581546776098] (2,-1; 2,-1), time: 9.2240s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_7, [-inf,inf]=>[-0.3005714400395654,0.8764611414080482] (2,-1; 2,-1), time: 1.7067s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-0.1989201523481297,0.8897163785762388] (2,-1; 2,-1), time: 6.7935s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[1e-05,1.5839559286231284] (15,-1; 2,-1), time: 1.1222s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.4912925085997347,0.5493396341512469] (2,-1; 2,-1), time: 5.7471s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3298s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_95, [-inf,inf]=>[-0.9356494431106502,0.28902924577636235] (2,-1; 2,-1), time: 5.2830s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_22, [-inf,inf]=>[-0.675272468173766,0.21710186511967694] (2,-1; 2,-1), time: 6.3745s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.4578004537165309,0.4884062356706193] (2,-1; 2,-1), time: 4.8176s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4234s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[1e-05,1.0812002687995501] (15,-1; 2,-1), time: 2.9283s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_89, [-inf,inf]=>[-0.24008805984568266,0.753997694888557] (2,-1; 2,-1), time: 4.9687s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[-0.5603132988432639,0.2802942557339376] (2,-1; 2,-1), time: 4.6503s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_11, [-inf,inf]=>[-0.05836305611400755,1.1017143284905786] (2,-1; 2,-1), time: 5.6539s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-0.3452722883653501,0.44590722658393744] (2,-1; 2,-1), time: 6.0067s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.28783625514682,1.252915530592917] (2,-1; 2,-1), time: 4.9652s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_83, [-inf,inf]=>[-0.6244125139360285,0.44711696070042656] (2,-1; 2,-1), time: 5.2467s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_72, [-inf,inf]=>[-0.45344378627373394,0.2793769599699899] (2,-1; 2,-1), time: 4.8641s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[-0.3592824803505243,1.2283258615984933] (2,-1; 2,-1), time: 6.0547s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_84, [-inf,inf]=>[-0.7271897824747167,0.2514344181858907] (2,-1; 2,-1), time: 5.0447s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[-0.772340331809776,0.1797569269287126] (2,-1; 2,-1), time: 6.4355s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_51, [-inf,inf]=>[-0.9643636059520645,0.016244161333748522] (2,-1; 2,-1), time: 5.6317s, #vars: 1075, #constrs: 335, improved: True
PGD done for relu layer 2
MIP improved 65 nodes out of 65 unstable nodes, lb improved 21.130748748779297, ub improved 19.568431854248047, time 21.0091
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_51', 'lay6_53', 'lay6_79', 'lay6_98', 'lay6_34', 'lay6_89', 'lay6_75', 'lay6_7', 'lay6_10', 'lay6_70', 'lay6_3', 'lay6_36', 'lay6_18', 'lay6_96', 'lay6_37', 'lay6_26', 'lay6_9', 'lay6_77', 'lay6_44', 'lay6_54', 'lay6_60', 'lay6_97', 'lay6_2', 'lay6_45', 'lay6_49', 'lay6_61', 'lay6_91', 'lay6_17', 'lay6_82', 'lay6_46', 'lay6_20', 'lay6_35', 'lay6_33', 'lay6_58', 'lay6_12', 'lay6_57', 'lay6_4', 'lay6_99', 'lay6_71', 'lay6_22', 'lay6_59', 'lay6_31', 'lay6_8', 'lay6_16', 'lay6_87', 'lay6_30', 'lay6_40', 'lay6_80', 'lay6_64', 'lay6_14', 'lay6_48', 'lay6_27', 'lay6_13', 'lay6_73', 'lay6_67', 'lay6_25', 'lay6_42', 'lay6_50', 'lay6_23', 'lay6_86', 'lay6_76', 'lay6_93', 'lay6_72', 'lay6_81', 'lay6_43', 'lay6_83', 'lay6_88', 'lay6_0', 'lay6_62', 'lay6_95', 'lay6_65', 'lay6_11', 'lay6_90', 'lay6_32', 'lay6_56', 'lay6_68', 'lay6_92', 'lay6_69', 'lay6_52', 'lay6_29', 'lay6_55', 'lay6_38', 'lay6_21', 'lay6_28', 'lay6_85', 'lay6_78', 'lay6_94', 'lay6_6', 'lay6_5', 'lay6_15', 'lay6_39', 'lay6_84', 'lay6_24', 'lay6_41', 'lay6_19'] filter: 1.0
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3038s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3305s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3689s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7219s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2664s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.2009s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.8332s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2927s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7973s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.4513s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8427s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.2318s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6642s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.7868s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-0.8941054393843823,0.19170360030915404] (2,-1; 2,-1), time: 17.2937s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2354s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.3964s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.9401230502731299,0.027116129786348853] (2,-1; 9,-1), time: 24.7461s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.9508970769852626,0.1890180128584482] (2,-1; 9,-1), time: 19.6155s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-0.9658943136790061,0.14742443670288163] (2,-1; 9,-1), time: 23.5809s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-1.233751320734168,0.03776908718466057] (9,-1; 9,-1), time: 30.0165s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-0.5280967787768688,0.7876995064370801] (9,-1; 9,-1), time: 30.0148s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-0.4110642653720826,0.352950468986379] (9,-1; 9,-1), time: 30.0182s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.6962627601962809,0.2797654193160195] (9,-1; 9,-1), time: 30.0293s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-0.25670729121752495,0.3501002240239394] (9,-1; 9,-1), time: 30.0195s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-0.5792359190099938,0.21512246182538008] (9,-1; 9,-1), time: 30.0267s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.31542319810139,0.7573260519883108] (9,-1; 9,-1), time: 30.0141s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.8100702504847727,0.22151087771511296] (9,-1; 9,-1), time: 30.0269s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2370s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.5749706189880565,0.6078893342004991] (9,-1; 9,-1), time: 30.0104s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2464s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0438s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2667s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1629s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5095s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6221s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.5702s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-0.5542588301772162,0.5118071416595109] (9,-1; 2,-1), time: 22.1844s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-0.8934276004129701,0.09851840093929502] (9,-1; 9,-1), time: 30.0105s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-0.9336196972096807,0.16272238188405821] (9,-1; 9,-1), time: 30.0084s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[-1.1898090911944754,0.04851701956053551] (2,-1; 9,-1), time: 20.7049s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-0.5075589660783669,0.6587169488518746] (9,-1; 2,-1), time: 21.0375s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-0.11659528577669094,0.8443866132286445] (9,-1; 9,-1), time: 30.0094s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.6036s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5768s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-1.1208483965180407,0.1658738154249702] (2,-1; 9,-1), time: 23.8844s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-0.48102878354596323,0.39091355979090997] (9,-1; 9,-1), time: 30.0170s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.29173481810536944,0.5820436235462738] (2,-1; 2,-1), time: 16.6515s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.735129502565953,0.06524024013086802] (9,-1; 9,-1), time: 30.0105s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_59, [-inf,inf]=>[-0.7258681895674446,1.1357759086997343] (9,-1; 9,-1), time: 30.0094s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.610018351933469,0.12169564494439081] (9,-1; 9,-1), time: 30.0108s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-0.49113154230964357,0.4815734331866547] (9,-1; 9,-1), time: 30.0150s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[1e-05,1.0631350201189098] (15,-1; 9,-1), time: 29.7392s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-0.09660736206126444,0.8896471371949185] (9,-1; 9,-1), time: 30.0105s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_48, [-inf,inf]=>[-0.585600586740866,0.017334376805364503] (9,-1; 9,-1), time: 30.0125s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5110s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.9021s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_13, [-inf,inf]=>[-0.7893891555032326,0.29952161824644885] (9,-1; 9,-1), time: 30.0082s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[1e-05,1.6732596127534698] (15,-1; 9,-1), time: 15.5984s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.7040785255531878,0.30036810982433987] (9,-1; 2,-1), time: 26.7907s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-1.0056678298850457,0.09215834265218084] (9,-1; 9,-1), time: 30.0219s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[1e-05,0.8689399884828238] (15,-1; 2,-1), time: 10.2369s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[1e-05,1.1672457275850223] (15,-1; 2,-1), time: 10.3716s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2497s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-0.2035194005232889,0.49935936775756246] (9,-1; 9,-1), time: 30.0110s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[1e-05,1.3830696423764124] (15,-1; 2,-1), time: 9.9329s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[1e-05,1.206597664074518] (15,-1; 9,-1), time: 16.2025s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-0.39247083002338806,0.47546105770375263] (9,-1; 9,-1), time: 30.0114s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[1e-05,1.2178888381469606] (15,-1; 9,-1), time: 18.1728s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_56, [-inf,inf]=>[1e-05,1.6458041147219504] (15,-1; 9,-1), time: 15.6277s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-0.1257139077154394,0.8967458678054034] (9,-1; 9,-1), time: 30.0108s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-0.24396005860494044,1.1213766173253412] (9,-1; 2,-1), time: 21.5427s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-0.5729709520644852,0.226347560800655] (9,-1; 9,-1), time: 30.0151s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.9928978511144173,0.010462412493554197] (9,-1; 9,-1), time: 30.0089s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[1e-05,0.9725937888380715] (15,-1; 9,-1), time: 19.7322s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.41902660429971156,0.328917814755698] (9,-1; 9,-1), time: 30.0106s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[1e-05,1.9298350890862948] (15,-1; 9,-1), time: 15.2095s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[1e-05,1.224640678596728] (15,-1; 9,-1), time: 15.2554s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.18875442737173176,0.7240574936978985] (9,-1; 9,-1), time: 30.0090s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[1e-05,1.537111262658095] (15,-1; 2,-1), time: 4.8179s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[1e-05,1.5839785102977688] (15,-1; 9,-1), time: 15.6264s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-0.42213672625448373,0.40609976013147636] (9,-1; 9,-1), time: 30.0094s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[1e-05,1.4980863380641916] (15,-1; 9,-1), time: 15.2638s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[1e-05,1.7732146769720643] (15,-1; 9,-1), time: 15.2040s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[1e-05,1.8389165151431588] (15,-1; 2,-1), time: 8.4400s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[1e-05,2.198259235914943] (15,-1; 2,-1), time: 11.3397s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.3344824080640183,0.7065534295530773] (9,-1; 9,-1), time: 30.0101s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[1e-05,1.5687753958809894] (15,-1; 2,-1), time: 10.8664s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[1e-05,0.8705737207658671] (15,-1; 9,-1), time: 29.7568s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[1e-05,1.0501901939975649] (15,-1; 9,-1), time: 15.5346s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[1e-05,0.8691050046785677] (15,-1; 9,-1), time: 18.5332s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.32125845169923645,0.38000125090986114] (9,-1; 9,-1), time: 30.1423s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[1e-05,1.4894313004049304] (15,-1; 9,-1), time: 15.2055s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-0.24466781001485627,0.6281411927115091] (9,-1; 9,-1), time: 30.0948s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[-0.15759538778300616,0.5919165376375037] (9,-1; 9,-1), time: 30.0086s, #vars: 1261, #constrs: 564, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(4, -1), (68, -1), (99, -1), (93, -1), (70, -1), (30, -1), (28, -1), (71, -1), (58, -1), (34, -1), (66, 1), (40, -1), (23, -1), (79, -1), (41, -1), (36, -1), (75, -1), (9, -1), (13, 1), (54, 1), (86, -1), (32, -1)]
best_l after optimization: -87.2571792602539 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 7.129911661148071
alpha-CROWN with intermediate bounds by MIP: tensor([[ -8.33432770, -11.41155243,  -9.46700382, -10.70446968,  -9.06458664,
          -6.67218399, -10.12701225, -10.10985947, -11.36618423]],
       device='cuda:0') None
MIP improved 95 nodes out of 95 unstable nodes, lb improved 47.565059661865234, ub improved 62.73066329956055, time 120.9193
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_12', 'lay8_72', 'lay8_76', 'lay8_30', 'lay8_14', 'lay8_90', 'lay8_49', 'lay8_13', 'lay8_61', 'lay8_21', 'lay8_3', 'lay8_91', 'lay8_92', 'lay8_48', 'lay8_20', 'lay8_89', 'lay8_82', 'lay8_23', 'lay8_68', 'lay8_35', 'lay8_59', 'lay8_26', 'lay8_7', 'lay8_45', 'lay8_52', 'lay8_94', 'lay8_81', 'lay8_46', 'lay8_56', 'lay8_85', 'lay8_64', 'lay8_67', 'lay8_87', 'lay8_70', 'lay8_62', 'lay8_42', 'lay8_0', 'lay8_71', 'lay8_1', 'lay8_18', 'lay8_10', 'lay8_98', 'lay8_9', 'lay8_2', 'lay8_29', 'lay8_25', 'lay8_47', 'lay8_60', 'lay8_74', 'lay8_79', 'lay8_84', 'lay8_43', 'lay8_17', 'lay8_8', 'lay8_41', 'lay8_24', 'lay8_75', 'lay8_57', 'lay8_16', 'lay8_99', 'lay8_77', 'lay8_37', 'lay8_93', 'lay8_88', 'lay8_50', 'lay8_97', 'lay8_80', 'lay8_5', 'lay8_53', 'lay8_55', 'lay8_58', 'lay8_63', 'lay8_95', 'lay8_54', 'lay8_40', 'lay8_78', 'lay8_19', 'lay8_51', 'lay8_69', 'lay8_22', 'lay8_6', 'lay8_38', 'lay8_32', 'lay8_44', 'lay8_15', 'lay8_33', 'lay8_73', 'lay8_34', 'lay8_4', 'lay8_66', 'lay8_65', 'lay8_86', 'lay8_27', 'lay8_83', 'lay8_11', 'lay8_96', 'lay8_28', 'lay8_39', 'lay8_36', 'lay8_31'] filter: 1.0
Solving MIP for lay8_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.2022s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9633s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3489s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[1e-05,1.3468426146300299] (15,-1; 9,-1), time: 15.3034s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-1.5234088231521816,0.11503264598767361] (9,-1; 9,-1), time: 30.0286s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-0.8226228943068611,0.07365855752579333] (9,-1; 9,-1), time: 30.0232s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.8279685056352972,0.25369681537357386] (9,-1; 9,-1), time: 30.0280s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_72, [-inf,inf]=>[-1.2497612994814,0.40649502638720153] (9,-1; 9,-1), time: 30.0382s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.5598600878989012,0.6139298561295027] (9,-1; 9,-1), time: 30.0436s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[-0.8974892391412268,0.08849062108721586] (9,-1; 9,-1), time: 30.0380s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.14624594230135987,1.1196776194994404] (9,-1; 9,-1), time: 30.0613s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-1.3091554153129932,0.20023957306666043] (9,-1; 9,-1), time: 30.0740s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-0.8437081772558449,0.12478879178386452] (9,-1; 9,-1), time: 30.1407s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.7008488002600604,0.5440064338598332] (9,-1; 9,-1), time: 30.1415s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-1.0531990420088815,0.01821913523247995] (9,-1; 9,-1), time: 30.1725s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-1.0871787773472854,0.8097388578415704] (9,-1; 9,-1), time: 30.2100s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-1.061981636120532,0.10776640398496316] (9,-1; 9,-1), time: 30.2966s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3355s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-1.152506680790195,0.04756636753326833] (9,-1; 9,-1), time: 30.4074s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2963s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8729s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1086s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0218s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-0.7030249508113989,0.29047292613787723] (9,-1; 9,-1), time: 30.0087s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-0.12711454571341946,0.7961816118588454] (9,-1; 9,-1), time: 30.0220s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-0.3455141361413831,1.2951905496329912] (9,-1; 9,-1), time: 30.0165s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.17605359085135516,0.9647786919173196] (9,-1; 9,-1), time: 30.0364s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.6341041383195417,0.3526910498974191] (9,-1; 9,-1), time: 30.0205s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.6311517726042182,0.1949699179101737] (9,-1; 9,-1), time: 30.0278s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[-0.6433946203011711,0.7079374824612873] (9,-1; 9,-1), time: 30.0181s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-0.7517673976537376,0.059168101293588383] (9,-1; 9,-1), time: 30.0212s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-0.9223379284683535,0.10667032642423845] (9,-1; 9,-1), time: 30.0189s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.059907230867011545,1.040622579830371] (9,-1; 9,-1), time: 30.0145s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2676s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2864s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3178s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2925s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-0.18197725150056449,0.8036109929214588] (9,-1; 9,-1), time: 30.1282s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-1.102472499386083,0.16241182516562677] (9,-1; 9,-1), time: 30.2199s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-1.083992988164214,0.42950940351748645] (9,-1; 9,-1), time: 30.4372s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3376s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-0.2513532525322348,1.5067755871871487] (9,-1; 9,-1), time: 30.4363s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8668s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2812s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3188s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-0.2756237711715267,0.6021895967934717] (9,-1; 9,-1), time: 30.0117s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-1.119553817465712,0.17245336074705284] (9,-1; 9,-1), time: 30.2191s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-0.6965266722700589,0.7785465132116465] (9,-1; 9,-1), time: 30.0509s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-0.6978048337453616,0.4974566271460029] (9,-1; 9,-1), time: 30.0263s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[1e-05,2.641348784319164] (15,-1; 9,-1), time: 15.3437s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[1e-05,2.9060037695456606] (15,-1; 9,-1), time: 15.3059s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3395s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[1e-05,1.7001566608313308] (15,-1; 9,-1), time: 23.0581s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[-0.16287851009921223,1.408880137621409] (9,-1; 9,-1), time: 30.0725s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-1.213077671676677,0.1174110068502814] (9,-1; 9,-1), time: 30.1776s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-1.004665188368274,0.4135202540002236] (9,-1; 9,-1), time: 30.0192s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.6928290519034939,0.2986670826967982] (9,-1; 9,-1), time: 30.2094s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.562473843584812,0.5928050626746091] (9,-1; 9,-1), time: 30.0251s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-0.4942829998783383,0.22801011000335403] (9,-1; 9,-1), time: 30.0154s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-0.7314067180014502,0.6172466067119806] (9,-1; 9,-1), time: 30.0253s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-0.20383057631290052,0.6297558459874916] (9,-1; 9,-1), time: 30.0281s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9155s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-0.46137212181519216,1.4733570425502203] (9,-1; 9,-1), time: 30.3981s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[1e-05,1.424132159992898] (15,-1; 9,-1), time: 16.3985s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-0.9723850016319169,0.05253580222341865] (9,-1; 9,-1), time: 30.5206s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-0.857320427518513,0.32181030641677816] (9,-1; 9,-1), time: 30.0245s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-0.9420888634994887,0.2130323352700055] (9,-1; 9,-1), time: 30.0183s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[1e-05,2.221602293809873] (15,-1; 9,-1), time: 15.3613s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[-1.1403182556269935,0.1621345120731725] (9,-1; 9,-1), time: 30.0138s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[1e-05,1.8095124791620336] (15,-1; 9,-1), time: 15.3242s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-0.45151696385381046,0.412680566452967] (9,-1; 9,-1), time: 30.3311s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[1e-05,1.7912704297732864] (15,-1; 9,-1), time: 15.3068s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[1e-05,2.04556167885811] (15,-1; 9,-1), time: 15.3877s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[1e-05,2.1812261593797877] (15,-1; 9,-1), time: 16.1488s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[1e-05,1.477429479043159] (15,-1; 9,-1), time: 16.4497s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,1.567676988685115] (15,-1; 9,-1), time: 15.2947s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[1e-05,4.266466958555248] (15,-1; 9,-1), time: 15.4803s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8479s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[1e-05,1.292797883990173] (15,-1; 9,-1), time: 18.7530s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[-0.3393856549298285,1.0047390570825738] (9,-1; 9,-1), time: 30.0523s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-1.1152399858221176,0.025361420551816134] (9,-1; 9,-1), time: 30.0111s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-1.1004270371738227,0.013514042502131651] (9,-1; 9,-1), time: 30.3233s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[1e-05,3.020917650471333] (15,-1; 9,-1), time: 15.2914s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[1e-05,2.0438821229364073] (15,-1; 9,-1), time: 15.3911s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[1e-05,3.0710762955549975] (15,-1; 9,-1), time: 15.3527s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[1e-05,3.3127226431964343] (15,-1; 9,-1), time: 15.3086s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-0.1909189695922867,0.9800646277449859] (9,-1; 9,-1), time: 30.0138s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-0.9610390424919917,0.14152248869588605] (9,-1; 9,-1), time: 30.0138s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[1e-05,1.378277939718083] (15,-1; 9,-1), time: 15.3492s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[1e-05,1.1441682863250495] (15,-1; 9,-1), time: 21.0320s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-0.4916271219227558,0.9287846980039279] (9,-1; 9,-1), time: 30.0176s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[1e-05,2.49728133254034] (15,-1; 9,-1), time: 15.3017s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[1e-05,2.7527896594713996] (15,-1; 9,-1), time: 15.3432s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[1e-05,3.832336505786953] (15,-1; 9,-1), time: 15.5920s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[1e-05,1.98300395209056] (15,-1; 9,-1), time: 15.2834s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-0.18299384528638027,0.7234792590455579] (9,-1; 9,-1), time: 30.0745s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.2562074393931023,1.3212241924727142] (9,-1; 9,-1), time: 30.0191s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[1e-05,3.3254783229831926] (15,-1; 9,-1), time: 15.3631s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-1.0694034882304915,0.1477571324175335] (9,-1; 9,-1), time: 30.5591s, #vars: 1449, #constrs: 796, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-0.13593617083280754,0.7022987686540451] (9,-1; 9,-1), time: 30.0936s, #vars: 1449, #constrs: 796, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(53, -1), (89, -1), (7, -1), (70, -1), (3, -1), (26, -1), (9, -1), (77, -1), (44, -1), (60, -1), (2, -1), (45, -1), (61, -1), (91, -1), (46, -1), (20, -1), (4, -1), (31, -1), (8, -1), (87, -1), (30, -1), (40, -1), (80, -1), (64, 1), (27, -1), (50, -1), (86, -1), (76, 1), (43, 1), (83, 1), (0, 1), (62, -1), (95, -1), (11, 1), (90, 1), (56, 1), (92, 1), (52, -1), (29, 1), (55, 1), (38, 1), (28, 1), (78, 1), (94, 1), (6, 1), (5, 1), (15, 1), (39, 1), (24, 1), (41, 1), (19, 1)]
best_l after optimization: -9.470571517944336 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 4.565305233001709
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.12448597, -3.51707411, -0.44991970, -2.23223305,  0.13135815,
          0.73768520, -2.48502254, -1.73407555, -1.04577637]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 129.9718017578125, ub improved 154.7110137939453, time 140.7765
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_2', 'lay10_24', 'lay10_11', 'lay10_58', 'lay10_49', 'lay10_3', 'lay10_69', 'lay10_34', 'lay10_44', 'lay10_43', 'lay10_61', 'lay10_64', 'lay10_40', 'lay10_27', 'lay10_13', 'lay10_17', 'lay10_78', 'lay10_67', 'lay10_6', 'lay10_79', 'lay10_87', 'lay10_99', 'lay10_30', 'lay10_74', 'lay10_51', 'lay10_7', 'lay10_97', 'lay10_31', 'lay10_86', 'lay10_90', 'lay10_25', 'lay10_71', 'lay10_47', 'lay10_63', 'lay10_45', 'lay10_18', 'lay10_91', 'lay10_15', 'lay10_9', 'lay10_33', 'lay10_42', 'lay10_19', 'lay10_81', 'lay10_12', 'lay10_26', 'lay10_53', 'lay10_35', 'lay10_88', 'lay10_41', 'lay10_36', 'lay10_39', 'lay10_14', 'lay10_80', 'lay10_66', 'lay10_46', 'lay10_95', 'lay10_37', 'lay10_60', 'lay10_70', 'lay10_55', 'lay10_68', 'lay10_57', 'lay10_10', 'lay10_75', 'lay10_77', 'lay10_32', 'lay10_83', 'lay10_4', 'lay10_54', 'lay10_16', 'lay10_23', 'lay10_82', 'lay10_65', 'lay10_1', 'lay10_5', 'lay10_48', 'lay10_8', 'lay10_89', 'lay10_85', 'lay10_0', 'lay10_73', 'lay10_72', 'lay10_84', 'lay10_38', 'lay10_98', 'lay10_21', 'lay10_94', 'lay10_20', 'lay10_93', 'lay10_28', 'lay10_92', 'lay10_56', 'lay10_62', 'lay10_59', 'lay10_76', 'lay10_96', 'lay10_22', 'lay10_52', 'lay10_29', 'lay10_50'] filter: 1.0
Solving MIP for lay10_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3957s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4201s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4346s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4493s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5038s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5069s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2560s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3246s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4443s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4356s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2563s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.9237s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.2574s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-1.858684062997292,0.06075215134882008] (9,-1; 9,-1), time: 30.0114s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-1.4861350085196252,0.17488783808166708] (9,-1; 9,-1), time: 30.0156s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-1.9455779845722585,0.0046019270454722445] (9,-1; 9,-1), time: 30.0191s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-0.5878388942805497,0.7092310080601804] (9,-1; 9,-1), time: 30.0222s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-1.2286905330772397,0.23055417018709534] (9,-1; 9,-1), time: 30.0501s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-1.170482432302242,0.4966328022803193] (9,-1; 9,-1), time: 30.1974s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[-0.8557679039042801,0.25241749010963577] (9,-1; 9,-1), time: 30.0239s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-0.4012849014325814,1.4651620965197132] (9,-1; 9,-1), time: 30.0471s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-1.2297821735685608,0.6678889953746551] (9,-1; 9,-1), time: 30.0224s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[-0.15351557656835213,1.1283084736286242] (9,-1; 9,-1), time: 30.0117s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4507s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[-1.0578217261851546,0.09341368653854097] (9,-1; 9,-1), time: 30.0419s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4198s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-1.5653502301922926,0.1644505390472773] (9,-1; 9,-1), time: 30.0099s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1914s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-0.9281587362880163,0.6600948455481208] (9,-1; 9,-1), time: 30.0161s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-0.8303684454069059,0.5147638488712027] (9,-1; 9,-1), time: 30.0109s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2735s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-0.7720780215418864,1.1230372738310552] (9,-1; 9,-1), time: 30.0278s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8736s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8413s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-0.5069905606275661,1.0688212777318022] (9,-1; 9,-1), time: 30.0360s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[1e-05,1.6207982686836497] (15,-1; 9,-1), time: 29.3112s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-1.5243421787537126,0.3716220154148731] (9,-1; 9,-1), time: 30.0265s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[-0.7601758485565944,0.5099983256277458] (9,-1; 9,-1), time: 30.0185s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[-0.34303967549000747,1.8881420406840723] (9,-1; 9,-1), time: 30.0220s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[-0.8390876669209723,0.4553195731938717] (9,-1; 9,-1), time: 30.0098s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-0.40509112160252136,1.112840509767112] (9,-1; 9,-1), time: 30.0179s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-1.1276663270148872,0.005163950087568351] (9,-1; 9,-1), time: 30.0144s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.676844684719895,0.5081851676442009] (9,-1; 9,-1), time: 30.0142s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[-0.21818713966069847,1.0941859831082636] (9,-1; 9,-1), time: 30.0096s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-0.92000658754178,0.555045734311704] (9,-1; 9,-1), time: 30.0103s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4465s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[-0.24615471880143563,1.6109876556444263] (9,-1; 9,-1), time: 30.0134s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4507s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-1.3416891020244643,0.5675392011722947] (9,-1; 9,-1), time: 30.0100s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8911s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-0.4529456126508114,0.7373553091282177] (9,-1; 9,-1), time: 30.1297s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-1.19185944982142,0.32418958335788617] (9,-1; 9,-1), time: 30.0313s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-0.9119574965201827,0.5888917433303228] (9,-1; 9,-1), time: 30.0142s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-1.732745132762587,0.11817729263284256] (9,-1; 9,-1), time: 30.0243s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[1e-05,1.443868630836353] (15,-1; 9,-1), time: 16.2395s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[1e-05,1.9979834709294302] (15,-1; 9,-1), time: 15.4648s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 14.1344s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[1e-05,2.0909092818541586] (15,-1; 9,-1), time: 18.9514s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.9096s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.3325631348181432,1.06626898347621] (9,-1; 9,-1), time: 30.0215s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-1.416646690578765,0.3719579972298081] (9,-1; 9,-1), time: 30.0149s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-0.3986894975096638,0.7139455441137492] (9,-1; 9,-1), time: 30.0135s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-1.1462785607026367,0.08537292719667025] (9,-1; 9,-1), time: 30.0140s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.8874722098888884,0.33963883624856633] (9,-1; 9,-1), time: 30.0144s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-0.11064734410131774,1.631458361537866] (9,-1; 9,-1), time: 30.0092s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[1e-05,2.0439234336873415] (15,-1; 9,-1), time: 15.3642s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-0.3397484227803412,0.8225390203294085] (9,-1; 9,-1), time: 30.0096s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-0.4544014714492815,0.7824817265826656] (9,-1; 9,-1), time: 30.0114s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-0.1193196080389155,1.7999545687934582] (9,-1; 9,-1), time: 30.0223s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[1e-05,1.9299056185987413] (15,-1; 9,-1), time: 16.5459s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-1.5520130334102602,0.027888324262873097] (9,-1; 9,-1), time: 30.0163s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[1e-05,3.5178240987298355] (15,-1; 9,-1), time: 15.4463s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-1.0006847457422103,0.461158957853654] (9,-1; 9,-1), time: 30.0100s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-0.42126914637456464,0.5530449572684655] (9,-1; 9,-1), time: 30.0113s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[1e-05,2.5747674925575055] (15,-1; 9,-1), time: 15.4685s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[1e-05,2.1041276575254586] (15,-1; 9,-1), time: 15.4905s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[1e-05,3.9769199494719487] (15,-1; 9,-1), time: 15.4772s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[1e-05,5.373819733300512] (15,-1; 9,-1), time: 15.4589s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1614s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[1e-05,2.2631921354644478] (15,-1; 9,-1), time: 15.3799s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[1e-05,2.0377429315426525] (15,-1; 9,-1), time: 17.4805s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[1e-05,2.445598185016187] (15,-1; 9,-1), time: 15.3759s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[1e-05,1.7980859558859306] (15,-1; 9,-1), time: 23.7376s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.5994859243307377,0.6908732893565731] (9,-1; 9,-1), time: 30.0326s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-0.2688608585215024,1.0423274786768602] (9,-1; 9,-1), time: 30.0281s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[1e-05,1.8277595359749645] (15,-1; 9,-1), time: 25.7005s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-0.21184665558708277,1.0658742650189914] (9,-1; 9,-1), time: 30.0142s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-0.2260136144675345,1.4143999257910191] (9,-1; 9,-1), time: 30.0288s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[1e-05,3.2812042020835706] (15,-1; 9,-1), time: 15.4146s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-1.7798980775541047,0.16930236797010415] (9,-1; 9,-1), time: 30.0170s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-0.42492788897555533,0.6592479042272711] (9,-1; 9,-1), time: 30.0088s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-0.4809439012229138,0.6758311387787335] (9,-1; 9,-1), time: 30.0226s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[1e-05,3.970902421701909] (15,-1; 9,-1), time: 15.4302s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[1e-05,4.000584762240099] (15,-1; 9,-1), time: 15.3735s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[1e-05,2.1735895059731813] (15,-1; 9,-1), time: 15.4718s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[1e-05,4.1507400842972] (15,-1; 9,-1), time: 15.3966s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[1e-05,4.017100120473576] (15,-1; 9,-1), time: 15.4594s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[1e-05,2.2638159745563726] (15,-1; 9,-1), time: 15.3954s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-0.2981317058768418,0.8612873799182434] (9,-1; 9,-1), time: 30.0117s, #vars: 1661, #constrs: 1064, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-0.14198877801599982,1.254227497477102] (9,-1; 9,-1), time: 30.0090s, #vars: 1661, #constrs: 1064, improved: True
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(49, -1), (61, 1), (82, -1), (23, -1), (7, -1), (52, -1), (85, -1), (62, -1), (0, -1), (98, -1), (9, -1), (2, -1), (25, -1), (60, -1), (74, 1), (79, -1), (43, 1), (24, -1), (99, -1), (88, 1), (50, 1), (97, -1), (53, 1), (55, -1), (63, 1), (95, 1), (54, 1), (19, 1), (51, 1), (69, 1), (22, 1), (38, 1), (15, 1), (33, 1), (73, 1), (34, 1), (65, 1), (27, -1), (83, 1), (96, 1), (28, 1), (39, 1), (36, 1), (31, 1)]
best_l after optimization: 12.537429809570312 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 4.567776203155518
alpha-CROWN with intermediate bounds by MIP: tensor([[ 3.65291595, -1.22594547,  2.00050735,  0.45644999,  2.72525406,
          2.68987036, -0.25072479,  0.57283783,  1.91626453]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 314.8248596191406, ub improved 392.07476806640625, time 146.4776
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=10, bias=True) 5 12 torch.Size([9, 1])
MIP finished with 430.8503725528717s
Run final alpha-CROWN after MIP solving on layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
best_l after optimization: 20.050458908081055 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 4.328627347946167
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 4.33088827, -0.36620474,  3.01518869,  1.31699371,  3.62685728,
          3.39048624,  0.47433424,  1.39486408,  2.86705112]], device='cuda:0') None
refined global lb: tensor([[ 4.33088827],
        [-0.36620474],
        [ 3.01518869],
        [ 1.31699371],
        [ 3.62685728],
        [ 3.39048624],
        [ 0.47433424],
        [ 1.39486408],
        [ 2.86705112]], device='cuda:0') min: tensor(-0.36620474, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 453.43641543388367
##### Instance 0 first 10 spec matrices: [[[-1.  1.  0.  0.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.330888271331787.

Properties batch 1, size 1
Remaining timeout: 453.36729192733765
##### Instance 0 first 10 spec matrices: [[[ 0.  1. -1.  0.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.36620474]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.36576319, 10.45044041,  1.05107117, -2.95799756,  0.61751634,
        -2.66855454, -2.13231540,  1.12672389,  1.28850794, -2.20466328],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /22 start_node /31 with alignment adjustment
setting alpha for layer /24 start_node /31 with alignment adjustment
setting alpha for layer /26 start_node /31 with alignment adjustment
setting alpha for layer /28 start_node /31 with alignment adjustment
setting alpha for layer /30 start_node /31 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.36620474]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/31']
Keeping slopes for these layers: ['/31']
layer 0 name BoundLinear(name="/input") size torch.Size([100]) unstable 45
layer 1 name BoundLinear(name="/input.3") size torch.Size([100]) unstable 43
layer 2 name BoundLinear(name="/input.7") size torch.Size([100]) unstable 44
layer 3 name BoundLinear(name="/input.11") size torch.Size([100]) unstable 56
layer 4 name BoundLinear(name="/input.15") size torch.Size([100]) unstable 52
-----------------
# of unstable neurons: 240
-----------------

batch:  torch.Size([1, 100]) pre split depth:  6
post split depth:  6
splitting decisions: 
split level 0: [3, 90] 
split level 1: [0, 21] 
split level 2: [4, 78] 
split level 3: [4, 27] 
split level 4: [4, 6] 
split level 5: [4, 97] 

all verified at 4th iter
pruning_in_iteration open status: True
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.0028400421142578125
Time: prepare 0.0124    beta_bound 0.2757    bound 0.2757    transfer 0.0005    finalize 0.0101    func 0.2988    
Accumulated time: func 0.2988    prepare 0.0175    bound 0.2757    beta_bound 0.2757    transfer 0.0005    finalize 0.0101    
batch bounding time:  0.2988598346710205
length of domains: 0
Time: pickout 0.0012    decision 0.2499    solve 0.3074    add 0.0019    
Accumulated time: pickout 0.0012    decision 0.2499    solve 0.3074    add 0.0019    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.5777997970581055


Properties batch 2, size 1
Remaining timeout: 452.6959013938904
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0. -1.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.015188694000244.

Properties batch 3, size 1
Remaining timeout: 452.65176129341125
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0.  0. -1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.3169937133789062.

Properties batch 4, size 1
Remaining timeout: 452.6116290092468
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0.  0.  0. -1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.626857280731201.

Properties batch 5, size 1
Remaining timeout: 452.5716073513031
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0.  0.  0.  0. -1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.390486240386963.

Properties batch 6, size 1
Remaining timeout: 452.53159379959106
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0.  0.  0.  0.  0. -1.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.4743342399597168.

Properties batch 7, size 1
Remaining timeout: 452.4916286468506
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0.  0.  0.  0.  0.  0. -1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.3948640823364258.

Properties batch 8, size 1
Remaining timeout: 452.45161390304565
##### Instance 0 first 10 spec matrices: [[[ 0.  1.  0.  0.  0.  0.  0.  0.  0. -1.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.867051124572754.
Result: safe in 447.5886 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):447.58409165442947, max time: 447.58856749534607
mean time for verified SAFE instances(total 1): 447.58856749534607, max time: 447.58856749534607
safe (total 1), index: [0]
