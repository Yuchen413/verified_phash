Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_6_100
  path: mnist_6_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 4
  end: 5
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Sun Jan 15 22:55:19 2023 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_6_100]_start=4_end=5_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-1.33794570, -1.49482882, -0.54522431, -2.72489309,  6.67754793,
          0.05568242, -2.42807031,  0.42011374, -0.43017653,  3.95283222]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [36]; unstable size 36; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 56 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [56]; unstable size 56; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [81]; unstable size 81; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-18.15694618, -19.67528725, -17.41659546, -20.64155769, -20.80030060,
         -15.61868095, -17.59779930, -21.88947678, -18.15885544]],
       device='cuda:0') None
best_l after optimization: -120.32130432128906 with beta sum per layer: []
alpha/beta optimization time: 5.992575645446777
initial alpha-CROWN bounds: tensor([[-13.05826569, -13.10800838, -12.52560616, -14.87453938, -14.89958286,
         -10.13888836, -12.60933876, -15.56225777, -13.54481506]],
       device='cuda:0')
Worst class: (+ rhs) -15.562257766723633
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.33794570, -1.49482882, -0.54522431, -2.72489309,  6.67754793,
          0.05568242, -2.42807031,  0.42011374, -0.43017653,  3.95283222]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.36642337, -1.23839819, -0.85797793, -2.05224299,  5.37845755,
           0.14592859, -2.38998985,  0.33958894, -0.15600207,  3.94958782],
         [-1.36642337, -1.23839819, -0.85797793, -2.05224299,  5.37845755,
           0.14592859, -2.38998985,  0.33958894, -0.15600207,  3.94958782]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[6.74488068, 6.61685562, 6.23643541, 7.43070030, 5.23252916,
          7.76844740, 5.03886843, 5.53445959, 1.42886972]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6706 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [36]; unstable size 36; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 56 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [56]; unstable size 56; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [81]; unstable size 81; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_79', 'lay4_31', 'lay4_83', 'lay4_26', 'lay4_49', 'lay4_69', 'lay4_24', 'lay4_94', 'lay4_22', 'lay4_99', 'lay4_10', 'lay4_20', 'lay4_81', 'lay4_33', 'lay4_12', 'lay4_68', 'lay4_32', 'lay4_93', 'lay4_41', 'lay4_84', 'lay4_37', 'lay4_64', 'lay4_60', 'lay4_27', 'lay4_46', 'lay4_96', 'lay4_78', 'lay4_80', 'lay4_55', 'lay4_67', 'lay4_42', 'lay4_38', 'lay4_40', 'lay4_76', 'lay4_0', 'lay4_8', 'lay4_66', 'lay4_62', 'lay4_86', 'lay4_21', 'lay4_48', 'lay4_13', 'lay4_74', 'lay4_23', 'lay4_34', 'lay4_18', 'lay4_51', 'lay4_52', 'lay4_6', 'lay4_16', 'lay4_25', 'lay4_45', 'lay4_43', 'lay4_54', 'lay4_71'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/data_utils.py:255: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1821s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2208s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2852s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-0.5584160069859675,0.47423359774236395] (2,-1; 2,-1), time: 1.3412s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_83, [-inf,inf]=>[-0.46964263047318894,0.5570792044253446] (2,-1; 2,-1), time: 1.4689s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2073s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-0.5948753705343106,0.5324596003139282] (2,-1; 2,-1), time: 1.5865s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_22, [-inf,inf]=>[-0.6345989204705125,0.49819485336185876] (2,-1; 2,-1), time: 1.7565s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.8168371220665699,0.18581433663196822] (2,-1; 2,-1), time: 1.7781s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-1.0134213672272023,0.36563764083539263] (2,-1; 2,-1), time: 1.7861s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_10, [-inf,inf]=>[-1.060562277791769,0.3635960249486424] (2,-1; 2,-1), time: 1.9014s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1793s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3773s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[-0.5797922461361159,0.4166211036950406] (2,-1; 2,-1), time: 1.9857s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[-1.0367254831400985,0.012678011102429054] (2,-1; 2,-1), time: 1.8279s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.9057525176233854,0.3615988914030769] (2,-1; 2,-1), time: 2.0567s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1595s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.6665894093809773,0.3746812568398042] (2,-1; 2,-1), time: 2.1047s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-0.8586843070785352,0.041043831205157276] (2,-1; 2,-1), time: 2.1983s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-1.0100206434266852,0.11779215628203632] (2,-1; 2,-1), time: 2.0418s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_31, [-inf,inf]=>[-1.4009257769037042,0.09046643579747393] (2,-1; 2,-1), time: 2.3672s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[1e-05,1.224844992636143] (15,-1; 2,-1), time: 1.1461s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7512s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1691s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1599s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[1e-05,1.024551147886739] (15,-1; 2,-1), time: 1.1633s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1723s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-0.8681204301991986,0.1835907079004963] (2,-1; 2,-1), time: 2.9136s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-0.7463211078700565,0.47636432442145926] (2,-1; 2,-1), time: 0.9132s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-1.1186429910210356,0.0574694055169801] (2,-1; 2,-1), time: 1.0627s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-1.2090343181979177,0.035080362002211374] (2,-1; 2,-1), time: 1.1942s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-0.5313119882422994,0.4774525743496526] (2,-1; 2,-1), time: 1.1537s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-1.345911444688012,0.046329157471260006] (2,-1; 2,-1), time: 0.6667s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.6455157431885091,0.37042428863912913] (2,-1; 2,-1), time: 1.4051s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-0.7266345010435591,0.016582555991168098] (2,-1; 2,-1), time: 2.0820s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[1e-05,1.2790274503294092] (15,-1; 2,-1), time: 1.3721s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-0.7632351309087892,0.3135031946957688] (2,-1; 2,-1), time: 1.9055s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-1.0565585525252472,0.0014190211103841943] (2,-1; 2,-1), time: 2.0664s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1797s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.06305387547205708,1.5501126884875462] (2,-1; 2,-1), time: 0.5624s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[1e-05,1.0632920108044484] (15,-1; 2,-1), time: 0.7503s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_21, [-inf,inf]=>[-0.7787720746423614,0.2735045465397471] (2,-1; 2,-1), time: 1.8822s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[-1.4962849845955102,0.017588259900752932] (2,-1; 2,-1), time: 1.5981s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_62, [-inf,inf]=>[-0.8384590884153479,0.22718168617744736] (2,-1; 2,-1), time: 2.0234s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.7036740991444946,0.18205593040911908] (2,-1; 2,-1), time: 2.4850s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[1e-05,1.3917403313712264] (15,-1; 2,-1), time: 1.2359s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-0.593639864645205,0.4585170105484442] (2,-1; 2,-1), time: 1.8868s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_51, [-inf,inf]=>[-0.8268965739550314,0.12950563989043112] (2,-1; 2,-1), time: 1.6624s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.03813228708039146,0.906709111060654] (2,-1; 2,-1), time: 1.9116s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_25, [-inf,inf]=>[-0.8621902759123165,0.4921200918198933] (2,-1; 2,-1), time: 1.5134s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_0, [-inf,inf]=>[-0.6011356135683175,0.23781174016982573] (2,-1; 2,-1), time: 3.0498s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.30714804361552467,0.7939476540396195] (2,-1; 2,-1), time: 2.1675s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-0.11439045536939292,1.0192509930468638] (2,-1; 2,-1), time: 2.9215s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-0.07650331225510563,0.6791092682666049] (2,-1; 2,-1), time: 2.9246s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-0.4990022693882171,0.6222236721414819] (2,-1; 2,-1), time: 2.4419s, #vars: 1057, #constrs: 308, improved: True
PGD done for relu layer 2
MIP improved 55 nodes out of 55 unstable nodes, lb improved 12.92011833190918, ub improved 12.38734245300293, time 7.7807
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_10', 'lay6_65', 'lay6_75', 'lay6_93', 'lay6_68', 'lay6_89', 'lay6_44', 'lay6_83', 'lay6_28', 'lay6_94', 'lay6_37', 'lay6_9', 'lay6_61', 'lay6_81', 'lay6_91', 'lay6_95', 'lay6_4', 'lay6_8', 'lay6_1', 'lay6_35', 'lay6_76', 'lay6_40', 'lay6_98', 'lay6_72', 'lay6_97', 'lay6_15', 'lay6_46', 'lay6_64', 'lay6_12', 'lay6_49', 'lay6_25', 'lay6_2', 'lay6_90', 'lay6_26', 'lay6_14', 'lay6_87', 'lay6_30', 'lay6_0', 'lay6_11', 'lay6_82', 'lay6_84', 'lay6_52', 'lay6_27', 'lay6_17', 'lay6_80', 'lay6_3', 'lay6_66', 'lay6_21', 'lay6_79', 'lay6_77', 'lay6_50', 'lay6_67', 'lay6_36', 'lay6_86', 'lay6_96', 'lay6_55', 'lay6_74', 'lay6_19', 'lay6_42', 'lay6_16', 'lay6_70', 'lay6_20', 'lay6_6', 'lay6_54', 'lay6_41', 'lay6_24', 'lay6_38', 'lay6_47', 'lay6_43', 'lay6_78', 'lay6_33', 'lay6_32', 'lay6_29', 'lay6_45', 'lay6_60', 'lay6_88', 'lay6_5', 'lay6_62'] filter: 1.0
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2144s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4520s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4645s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2324s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4778s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5326s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5542s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9458s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0200s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8604s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4576s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0566s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.3998s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[1e-05,0.9427567865987475] (15,-1; 2,-1), time: 5.9673s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.6403s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-0.3393888093009473,0.3175378218203584] (2,-1; 2,-1), time: 10.4698s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[1e-05,0.6118806482410805] (15,-1; 2,-1), time: 7.6826s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5765s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[1e-05,0.9088776283561547] (15,-1; 2,-1), time: 11.1228s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2177s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2427s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-0.2247381847510473,0.33146850624842733] (2,-1; 2,-1), time: 12.3042s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-0.1999410119901481,0.3812483447103733] (2,-1; 2,-1), time: 13.0717s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[1e-05,1.1640080242280384] (15,-1; 2,-1), time: 11.8929s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.6083374342809555,0.23052929830104377] (2,-1; 2,-1), time: 9.0186s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3060s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.5222196962898839,0.12009774838981921] (2,-1; 2,-1), time: 16.7278s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2409s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-0.4072278995810488,0.2661661123726615] (2,-1; 2,-1), time: 17.0980s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.5220642405376962,0.15156684374155774] (9,-1; 2,-1), time: 19.0798s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[-0.7825509105842412,0.05272156205563969] (2,-1; 9,-1), time: 19.2339s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.4001148386140548,0.2578013639606336] (2,-1; 9,-1), time: 20.0714s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.7735s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6245s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2731s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.0190s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-0.4339700666788913,0.5647061159365944] (2,-1; 9,-1), time: 18.4404s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-0.4093903668986021,0.4171120287089479] (2,-1; 2,-1), time: 11.4797s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-0.33335863052658,0.21898566685350407] (9,-1; 2,-1), time: 21.3544s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2330s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2281s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4838s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2132s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[1e-05,2.3718289744207857] (15,-1; 2,-1), time: 3.9640s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[1e-05,1.6893697412895436] (15,-1; 2,-1), time: 5.1668s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[-0.09936833195451611,0.5876027561231735] (2,-1; 2,-1), time: 13.5173s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.3566s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.4753205183668831,0.21858503753529931] (2,-1; 9,-1), time: 20.2604s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2061s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.8219s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.5959s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1532s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2149s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.21817023947594716,0.5171535364144865] (2,-1; 2,-1), time: 17.9942s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.28193870222175255,0.19371831890549807] (2,-1; 2,-1), time: 9.7753s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-0.21958527792951804,0.2803489718011542] (9,-1; 9,-1), time: 30.0343s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[1e-05,1.227100956588471] (15,-1; 2,-1), time: 4.1216s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[1e-05,0.9842283810682759] (15,-1; 2,-1), time: 7.8619s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[1e-05,1.152978463079367] (15,-1; 2,-1), time: 5.7432s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.9622s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-0.3708404680257225,0.31029758184735545] (2,-1; 2,-1), time: 19.1929s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[1e-05,1.0914214905670518] (15,-1; 2,-1), time: 2.4255s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[1e-05,0.7234630408681637] (15,-1; 2,-1), time: 12.9370s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-0.1869812386517687,0.5603620331137592] (2,-1; 2,-1), time: 16.9955s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-0.48055794205617525,0.04242587870877705] (9,-1; 2,-1), time: 23.6099s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[1e-05,1.7062936459717426] (15,-1; 2,-1), time: 3.8121s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[1e-05,0.7772078590930446] (15,-1; 2,-1), time: 5.6430s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[1e-05,0.8628793563828788] (15,-1; 2,-1), time: 4.3754s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[1e-05,1.0831629687321058] (15,-1; 2,-1), time: 5.1165s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[1e-05,0.7812174476212166] (15,-1; 2,-1), time: 5.4798s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[1e-05,1.0581051542736222] (15,-1; 2,-1), time: 9.5406s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-0.11082425821926019,0.8814725357601206] (2,-1; 2,-1), time: 8.7971s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[1e-05,0.51213914269036] (15,-1; 2,-1), time: 12.7382s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[1e-05,0.9489800918111364] (15,-1; 9,-1), time: 20.1764s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[1e-05,0.7749479120766345] (15,-1; 9,-1), time: 15.1810s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-0.3567925914880406,0.2672589744769575] (2,-1; 2,-1), time: 19.3779s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-0.031808812022062365,0.4171509613239918] (9,-1; 2,-1), time: 20.1520s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-0.11214839410753787,0.44681772542301695] (9,-1; 2,-1), time: 20.0661s, #vars: 1233, #constrs: 522, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(99, -1), (81, -1), (68, -1), (41, 1), (84, -1), (64, 1), (60, -1), (27, -1), (46, -1), (78, -1), (8, 1), (66, -1), (86, -1), (48, -1), (16, 1), (45, 1), (54, -1)]
best_l after optimization: -31.677474975585938 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.119264364242554
alpha-CROWN with intermediate bounds by MIP: tensor([[-2.85189533, -3.10444260, -2.30968618, -2.87442398, -4.43168640,
         -1.08868074, -3.88261032, -5.18732882, -5.94672108]], device='cuda:0') None
MIP improved 78 nodes out of 78 unstable nodes, lb improved 20.04768180847168, ub improved 33.907867431640625, time 52.2126
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_7', 'lay8_87', 'lay8_91', 'lay8_80', 'lay8_68', 'lay8_76', 'lay8_90', 'lay8_57', 'lay8_79', 'lay8_64', 'lay8_3', 'lay8_14', 'lay8_46', 'lay8_95', 'lay8_8', 'lay8_66', 'lay8_86', 'lay8_51', 'lay8_98', 'lay8_1', 'lay8_84', 'lay8_92', 'lay8_75', 'lay8_37', 'lay8_0', 'lay8_60', 'lay8_30', 'lay8_62', 'lay8_65', 'lay8_74', 'lay8_31', 'lay8_17', 'lay8_50', 'lay8_24', 'lay8_4', 'lay8_2', 'lay8_78', 'lay8_70', 'lay8_21', 'lay8_48', 'lay8_77', 'lay8_88', 'lay8_82', 'lay8_25', 'lay8_73', 'lay8_54', 'lay8_23', 'lay8_93', 'lay8_63', 'lay8_96', 'lay8_81', 'lay8_49', 'lay8_45', 'lay8_67', 'lay8_99', 'lay8_6', 'lay8_32', 'lay8_40', 'lay8_19', 'lay8_94', 'lay8_13', 'lay8_43', 'lay8_56', 'lay8_39', 'lay8_58', 'lay8_97', 'lay8_71', 'lay8_28', 'lay8_59', 'lay8_41', 'lay8_52', 'lay8_20', 'lay8_53', 'lay8_85', 'lay8_34', 'lay8_22', 'lay8_36', 'lay8_35', 'lay8_61', 'lay8_15', 'lay8_47', 'lay8_27', 'lay8_12', 'lay8_33', 'lay8_55', 'lay8_11', 'lay8_16', 'lay8_89', 'lay8_29', 'lay8_10', 'lay8_83', 'lay8_18', 'lay8_26', 'lay8_9', 'lay8_42', 'lay8_5', 'lay8_38', 'lay8_69'] filter: 1.0
Solving MIP for lay8_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3380s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3495s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3852s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3882s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3956s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4523s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2907s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3383s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7963s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2348s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7176s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2938s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3015s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.0814s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.3143s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2808s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.7195s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6587s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5686s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3170s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[1e-05,0.8974245787609868] (15,-1; 9,-1), time: 15.3008s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-0.4163960004731544,0.4028397762689603] (2,-1; 9,-1), time: 26.6974s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3094s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[-0.8372391340721922,0.2404757550841194] (2,-1; 9,-1), time: 29.1972s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.4338690019562888,0.17580628253737263] (9,-1; 9,-1), time: 30.0145s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.2777144097145609,0.45587877476975747] (9,-1; 9,-1), time: 30.0160s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-0.6914298054571575,0.13450283176263075] (9,-1; 9,-1), time: 30.0168s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.31147472358348466,0.2469226036270046] (9,-1; 9,-1), time: 30.0180s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-0.4827324792114682,0.27674613608116777] (9,-1; 9,-1), time: 30.0230s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.012277794255876887,0.628018611651668] (9,-1; 9,-1), time: 30.0233s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3303s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.616517908154499,0.1773860676455559] (9,-1; 9,-1), time: 30.0158s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3770s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.4097309468910666,0.1404932151366953] (9,-1; 9,-1), time: 30.0129s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.3126418319792565,0.6017693782519602] (9,-1; 9,-1), time: 30.0182s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4938s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.26127132235803235,0.44909079128428975] (9,-1; 9,-1), time: 30.0125s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.2107697072992856,0.659951502493754] (9,-1; 9,-1), time: 30.0140s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-0.02056301475513293,0.545262097755603] (9,-1; 2,-1), time: 27.7635s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2999s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.5524000908854209,0.23941772554678806] (9,-1; 9,-1), time: 30.0113s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3632s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[1e-05,0.6507086506094295] (15,-1; 9,-1), time: 15.4180s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[1e-05,1.6111205900623253] (15,-1; 9,-1), time: 15.3116s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-0.6411169791050355,0.06760090583237076] (9,-1; 9,-1), time: 30.1660s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[1e-05,0.9175932018016416] (15,-1; 9,-1), time: 15.7998s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.31793671131605455,0.42322537501433305] (9,-1; 9,-1), time: 30.0156s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7648s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-0.26865716880627083,0.36913702926429487] (9,-1; 9,-1), time: 30.0172s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.3753370976969704,0.2444893061075279] (9,-1; 9,-1), time: 30.0178s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-0.2321579652693433,0.465399760285375] (9,-1; 9,-1), time: 30.0276s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-0.4279251629716863,0.5010270152865223] (9,-1; 9,-1), time: 30.0437s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-0.27478553487698704,0.2757334304064305] (9,-1; 9,-1), time: 30.0262s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3763s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-0.6987474849414018,0.3919164982442104] (9,-1; 9,-1), time: 30.0271s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.09023970072719374,0.5417656040459017] (9,-1; 9,-1), time: 30.0322s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.2416972827026348,0.2502311242515964] (9,-1; 9,-1), time: 30.0340s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3362s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1503s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[1e-05,1.1748016593255044] (15,-1; 9,-1), time: 15.3092s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-0.08076298510893988,0.6758597487681595] (9,-1; 2,-1), time: 28.2108s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4433s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.0332s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-0.3292195959003478,0.1872860334219869] (9,-1; 9,-1), time: 30.0137s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3495s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-0.13010625795614345,0.468674659221979] (9,-1; 9,-1), time: 30.0252s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3493s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.36544703167338655,0.2707113670291681] (9,-1; 2,-1), time: 25.5240s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[1e-05,0.9489725191560637] (15,-1; 9,-1), time: 15.3593s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.5685230320354506,0.012418722067898196] (9,-1; 9,-1), time: 30.0565s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[1e-05,0.8144983015009863] (15,-1; 9,-1), time: 15.8142s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.21393380596012584,0.32440272341778015] (9,-1; 9,-1), time: 30.0306s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[1e-05,0.9125879117297756] (15,-1; 9,-1), time: 15.9159s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4003s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[1e-05,0.8930622536923664] (15,-1; 9,-1), time: 15.4866s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[1e-05,0.9684986603724193] (15,-1; 9,-1), time: 15.3350s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[1e-05,2.7435385074526426] (15,-1; 2,-1), time: 10.0823s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[1e-05,1.6878864200618413] (15,-1; 9,-1), time: 15.2853s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2777s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,0.6449361698684732] (15,-1; 9,-1), time: 20.5232s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[1e-05,1.911746773402625] (15,-1; 2,-1), time: 12.4878s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-0.46266407943241356,0.09141063063667111] (9,-1; 9,-1), time: 30.0149s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-0.23285643371379253,0.23540934651199574] (9,-1; 9,-1), time: 30.0193s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[-0.20635893202873937,0.23122834918079183] (9,-1; 9,-1), time: 30.0139s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[1e-05,0.7663262693384495] (15,-1; 2,-1), time: 14.9383s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[1e-05,0.873590911497426] (15,-1; 9,-1), time: 15.2929s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-0.294510708780763,0.4286290461609016] (9,-1; 9,-1), time: 30.0148s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[1e-05,1.2307683035825976] (15,-1; 9,-1), time: 15.4092s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[1e-05,1.6913175292507663] (15,-1; 9,-1), time: 15.2967s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[1e-05,1.9862376142458946] (15,-1; 9,-1), time: 15.2397s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-0.4875188388192812,0.03624874850491722] (9,-1; 9,-1), time: 30.0086s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[1e-05,1.5926008257291249] (15,-1; 9,-1), time: 15.3016s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[1e-05,1.865106908420406] (15,-1; 9,-1), time: 15.2803s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-0.09908598276220866,0.4285664971697087] (9,-1; 9,-1), time: 30.0178s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[1e-05,1.09742255290281] (15,-1; 9,-1), time: 15.2433s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[1e-05,1.3978013770738849] (15,-1; 9,-1), time: 15.2913s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-0.6774026416388379,0.002079413442771887] (9,-1; 9,-1), time: 30.0098s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-0.4977531895205585,0.05319011757207358] (9,-1; 9,-1), time: 30.0120s, #vars: 1381, #constrs: 694, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(10, -1), (65, -1), (93, 1), (44, -1), (94, -1), (37, 1), (61, -1), (95, -1), (4, -1), (8, -1), (35, -1), (76, -1), (98, -1), (72, -1), (97, -1), (15, -1), (64, 1), (12, 1), (2, -1), (90, -1), (14, -1), (82, -1), (84, -1), (52, -1), (27, -1), (17, -1), (3, 1), (66, -1), (79, 1), (77, -1), (50, 1), (67, 1), (86, -1), (96, -1), (55, -1), (74, -1), (19, -1), (42, 1), (16, -1), (70, 1), (20, 1), (6, -1), (54, 1), (41, 1), (24, -1), (38, -1), (47, -1), (43, 1), (33, 1), (29, 1), (45, 1), (88, 1), (5, 1), (62, 1)]
best_l after optimization: 5.003506660461426 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.114062309265137
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.41724563,  1.29625225,  1.55965757,  1.65415955,  0.04180193,
          2.53219557, -0.20654464, -0.83415031, -2.45711088]], device='cuda:0') None
MIP improved 98 nodes out of 98 unstable nodes, lb improved 48.5591926574707, ub improved 76.69017791748047, time 107.7095
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_13', 'lay10_64', 'lay10_45', 'lay10_83', 'lay10_65', 'lay10_36', 'lay10_25', 'lay10_72', 'lay10_12', 'lay10_54', 'lay10_43', 'lay10_55', 'lay10_10', 'lay10_53', 'lay10_41', 'lay10_23', 'lay10_82', 'lay10_69', 'lay10_4', 'lay10_57', 'lay10_15', 'lay10_92', 'lay10_89', 'lay10_44', 'lay10_42', 'lay10_78', 'lay10_75', 'lay10_11', 'lay10_1', 'lay10_61', 'lay10_17', 'lay10_31', 'lay10_20', 'lay10_5', 'lay10_91', 'lay10_24', 'lay10_35', 'lay10_94', 'lay10_46', 'lay10_21', 'lay10_49', 'lay10_56', 'lay10_50', 'lay10_77', 'lay10_22', 'lay10_6', 'lay10_93', 'lay10_2', 'lay10_39', 'lay10_34', 'lay10_86', 'lay10_80', 'lay10_18', 'lay10_76', 'lay10_3', 'lay10_85', 'lay10_27', 'lay10_9', 'lay10_48', 'lay10_99', 'lay10_52', 'lay10_70', 'lay10_73', 'lay10_7', 'lay10_96', 'lay10_60', 'lay10_66', 'lay10_62', 'lay10_40', 'lay10_14', 'lay10_98', 'lay10_67', 'lay10_81', 'lay10_32', 'lay10_68', 'lay10_33', 'lay10_29', 'lay10_8', 'lay10_47', 'lay10_97', 'lay10_87', 'lay10_16', 'lay10_30', 'lay10_58', 'lay10_0', 'lay10_79', 'lay10_88', 'lay10_19', 'lay10_90', 'lay10_95', 'lay10_38', 'lay10_71', 'lay10_26', 'lay10_37', 'lay10_63', 'lay10_74', 'lay10_28', 'lay10_51', 'lay10_59', 'lay10_84'] filter: 1.0
Solving MIP for lay10_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4366s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4698s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5175s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0010s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5221s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2963s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5739s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4433s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.0324s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.7819s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.3504s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.5452s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-0.5655863942770947,0.26809443639676406] (9,-1; 9,-1), time: 30.0315s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-0.3448879003539923,0.6048102479114928] (9,-1; 9,-1), time: 30.0446s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[-0.7530976051224682,0.3575093909070341] (9,-1; 9,-1), time: 30.0451s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-0.8669653566310644,0.03597985873435943] (9,-1; 9,-1), time: 30.0503s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-0.59743386086751,0.26074683519041675] (9,-1; 9,-1), time: 30.1963s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-0.870008667657431,0.1837115936745025] (9,-1; 9,-1), time: 30.2440s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2889s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-0.6523650763693944,0.2353861329573902] (9,-1; 9,-1), time: 30.3887s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-0.34326870696810236,0.5164334828160123] (9,-1; 9,-1), time: 30.0324s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-0.5085881351093868,0.20747088842737188] (9,-1; 9,-1), time: 30.0615s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3542s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3009s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.4870737295137617,0.12176860125554456] (9,-1; 9,-1), time: 30.0488s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-0.8842487512157121,0.13510078387418903] (9,-1; 9,-1), time: 30.1861s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-1.1764108225382608,0.013666381013507785] (9,-1; 9,-1), time: 30.0272s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3221s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.1651s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3126s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.8808699321523868,0.047982500782184453] (9,-1; 9,-1), time: 30.2892s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-0.5268706313495102,0.4450371867081084] (9,-1; 9,-1), time: 30.0113s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-0.4644558909749728,0.34882824713727645] (9,-1; 9,-1), time: 30.0221s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.3451s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0377s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-0.1832627628834007,0.6295143438875417] (9,-1; 9,-1), time: 30.1717s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4205s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[1e-05,2.5255148511531806] (15,-1; 9,-1), time: 15.3838s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-1.0141725559994081,0.28837469692804435] (9,-1; 9,-1), time: 30.0347s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-0.29021635535291146,0.6060904224105246] (9,-1; 9,-1), time: 30.0861s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.23907968756588677,0.40836443136775274] (9,-1; 9,-1), time: 30.0244s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-0.22923007792666364,0.8812835686634182] (9,-1; 9,-1), time: 30.2594s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-0.5668994603034812,0.3273953986637189] (9,-1; 9,-1), time: 30.0377s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-0.5522658645792227,0.5587203450817515] (9,-1; 9,-1), time: 30.0184s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3566s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-0.6246030873715578,0.49951760787459426] (9,-1; 9,-1), time: 30.0254s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3314s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3775s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-0.8534911538487012,0.3941483598453718] (9,-1; 9,-1), time: 30.2108s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3755s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-0.6138832044850074,0.23069536539272897] (9,-1; 9,-1), time: 30.2603s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3103s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-0.2543878107317388,0.24806397868500654] (9,-1; 9,-1), time: 30.0085s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.2994s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-0.36890291457991414,0.2636303853022942] (9,-1; 9,-1), time: 30.0172s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3077s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-0.7259049166903926,0.16205269074079096] (9,-1; 9,-1), time: 30.0275s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-0.33211266515194,0.4468570728433344] (9,-1; 9,-1), time: 30.4405s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-0.5307556434888315,0.4101185597284436] (9,-1; 9,-1), time: 30.0263s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-0.6939540074621626,0.02905374604164255] (9,-1; 9,-1), time: 30.0205s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[1e-05,1.5322880230313443] (15,-1; 9,-1), time: 15.3063s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[1e-05,1.9437483345486768] (15,-1; 9,-1), time: 15.3496s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-0.22119564778312623,0.5021528266533276] (9,-1; 9,-1), time: 30.0318s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[1e-05,0.9876192230930452] (15,-1; 9,-1), time: 15.3289s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[1e-05,2.6398944708542085] (15,-1; 9,-1), time: 15.3016s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-0.6174178970556343,0.45408455942068054] (9,-1; 9,-1), time: 30.0134s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,0.8211797263459589] (15,-1; 9,-1), time: 21.1387s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-0.5275104997466428,0.2526911046133685] (9,-1; 9,-1), time: 30.0155s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-0.1912718722396567,0.6615754237093445] (9,-1; 9,-1), time: 30.0097s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3664s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-0.09568603833200003,0.6294972417267104] (9,-1; 9,-1), time: 30.0177s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-0.5694825200737115,0.06899116268250202] (9,-1; 9,-1), time: 30.3276s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3017s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-0.4499043434178435,0.45152529064642755] (9,-1; 9,-1), time: 30.0165s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-0.6133269087939967,0.19227338423026266] (9,-1; 9,-1), time: 30.0106s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[1e-05,1.4287783343358422] (15,-1; 9,-1), time: 15.3068s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.6015417987990176,0.3133846268292613] (9,-1; 9,-1), time: 30.0168s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-0.6354003635716301,0.34145521909642307] (9,-1; 9,-1), time: 30.0165s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3122s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[1e-05,2.215918323153593] (15,-1; 9,-1), time: 15.3176s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-0.39690922067576545,0.23557123630788818] (9,-1; 9,-1), time: 30.2302s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[1e-05,1.674736081245153] (15,-1; 9,-1), time: 15.3505s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3489s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3227s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[1e-05,1.0433667119822612] (15,-1; 9,-1), time: 15.2984s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[1e-05,1.520319884885543] (15,-1; 9,-1), time: 15.3455s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[1e-05,1.5123998938434358] (15,-1; 9,-1), time: 15.3030s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[1e-05,1.451516475520078] (15,-1; 9,-1), time: 15.3112s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[1e-05,2.340670235237473] (15,-1; 9,-1), time: 15.3857s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-0.3951294897854054,0.2689394967795391] (9,-1; 9,-1), time: 30.0186s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[1e-05,1.8569755116689166] (15,-1; 9,-1), time: 15.4038s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[1e-05,1.9867126681274827] (15,-1; 9,-1), time: 15.3027s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[1e-05,0.860523920620473] (15,-1; 9,-1), time: 21.5205s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[1e-05,2.441415998418546] (15,-1; 9,-1), time: 15.4438s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[1e-05,1.5257949052088458] (15,-1; 9,-1), time: 15.3560s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-0.5999547446675698,0.3782612062399819] (9,-1; 9,-1), time: 30.0096s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[1e-05,1.3866165902936087] (15,-1; 9,-1), time: 15.3453s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-0.2342848178979395,0.5914792646842191] (9,-1; 9,-1), time: 30.0224s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[1e-05,1.660934317563701] (15,-1; 9,-1), time: 15.3043s, #vars: 1559, #constrs: 911, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-0.04517848877417766,0.6959204574263776] (9,-1; 9,-1), time: 30.0179s, #vars: 1559, #constrs: 911, improved: True
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(7, -1), (87, -1), (68, -1), (90, -1), (79, -1), (46, -1), (95, -1), (66, -1), (86, -1), (51, -1), (98, -1), (75, -1), (37, 1), (0, -1), (60, -1), (62, -1), (65, -1), (31, -1), (17, -1), (24, -1), (4, -1), (70, -1), (48, -1), (77, -1), (25, -1), (23, 1), (81, 1), (49, 1), (99, -1), (32, -1), (43, 1), (56, -1), (39, -1), (58, 1), (97, -1), (59, 1), (41, -1), (52, 1), (53, -1), (85, 1), (22, 1), (36, -1), (35, 1), (15, -1), (47, 1), (27, -1), (12, 1), (55, 1), (16, 1), (89, -1), (29, 1), (10, 1), (18, 1), (26, 1), (9, -1), (42, 1), (5, 1), (38, 1), (69, 1)]
best_l after optimization: 15.976162910461426 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 7.025176525115967
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.74913192,  2.60766459,  2.67167830,  2.94332075,  1.36415124,
          3.58634615,  0.92224455,  0.53000975, -1.39838421]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 127.36202239990234, ub improved 188.72061157226562, time 132.4434
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=10, bias=True) 5 12 torch.Size([9, 1])
MIP finished with 301.7622661590576s
Run final alpha-CROWN after MIP solving on layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
best_l after optimization: 21.33266258239746 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 4.996250629425049
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 3.33570480,  3.12564898,  3.18400383,  3.65132761,  1.95149326,
          4.05825615,  1.45187521,  1.33613753, -0.76178455]], device='cuda:0') None
refined global lb: tensor([[ 3.33570480],
        [ 3.12564898],
        [ 3.18400383],
        [ 3.65132761],
        [ 1.95149326],
        [ 4.05825615],
        [ 1.45187521],
        [ 1.33613753],
        [-0.76178455]], device='cuda:0') min: tensor(-0.76178455, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 583.3225152492523
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.335704803466797.

Properties batch 1, size 1
Remaining timeout: 583.2391681671143
##### Instance 0 first 10 spec matrices: [[[ 0. -1.  0.  0.  1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.1256489753723145.

Properties batch 2, size 1
Remaining timeout: 583.1862845420837
##### Instance 0 first 10 spec matrices: [[[ 0.  0. -1.  0.  1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.1840038299560547.

Properties batch 3, size 1
Remaining timeout: 583.1343958377838
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0. -1.  1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.651327610015869.

Properties batch 4, size 1
Remaining timeout: 583.0823953151703
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  1. -1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.951493263244629.

Properties batch 5, size 1
Remaining timeout: 583.0303425788879
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  1.  0. -1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.058256149291992.

Properties batch 6, size 1
Remaining timeout: 582.9776158332825
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  1.  0.  0. -1.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.4518752098083496.

Properties batch 7, size 1
Remaining timeout: 582.9249794483185
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  1.  0.  0.  0. -1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.3361375331878662.

Properties batch 8, size 1
Remaining timeout: 582.8710780143738
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  1.  0.  0.  0.  0. -1.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.76178455]], device='cuda:0') need to verify.
Model prediction is: tensor([-1.33794570, -1.49482882, -0.54522431, -2.72489309,  6.67754793,
         0.05568242, -2.42807031,  0.42011374, -0.43017653,  3.95283222],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /22 start_node /31 with alignment adjustment
setting alpha for layer /24 start_node /31 with alignment adjustment
setting alpha for layer /26 start_node /31 with alignment adjustment
setting alpha for layer /28 start_node /31 with alignment adjustment
setting alpha for layer /30 start_node /31 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.76178455]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/31']
Keeping slopes for these layers: ['/31']
layer 0 name BoundLinear(name="/input") size torch.Size([100]) unstable 36
layer 1 name BoundLinear(name="/input.3") size torch.Size([100]) unstable 38
layer 2 name BoundLinear(name="/input.7") size torch.Size([100]) unstable 24
layer 3 name BoundLinear(name="/input.11") size torch.Size([100]) unstable 39
layer 4 name BoundLinear(name="/input.15") size torch.Size([100]) unstable 46
-----------------
# of unstable neurons: 183
-----------------

batch:  torch.Size([1, 100]) pre split depth:  6
post split depth:  6
splitting decisions: 
split level 0: [4, 24] 
split level 1: [4, 12] 
split level 2: [4, 78] 
split level 3: [0, 38] 
split level 4: [4, 31] 
split level 5: [4, 46] 
pruning_in_iteration open status: True
ratio of positive domain = 30 / 64 = 0.46875
pruning-in-iteration extra time: 0.01187753677368164
Time: prepare 0.0127    beta_bound 0.5280    bound 0.5281    transfer 0.0005    finalize 0.0101    func 0.5516    
Accumulated time: func 0.5516    prepare 0.0181    bound 0.5281    beta_bound 0.5280    transfer 0.0005    finalize 0.0101    
batch bounding time:  0.5516934394836426
Current worst splitting domains lb-rhs (depth):
-0.73406 (6), -0.70139 (6), -0.51419 (6), -0.51062 (6), -0.48077 (6), -0.47153 (6), -0.40601 (6), -0.39049 (6), -0.36613 (6), -0.36119 (6), -0.34156 (6), -0.33669 (6), -0.30993 (6), -0.30395 (6), -0.28221 (6), -0.24620 (6), -0.23317 (6), -0.19966 (6), -0.19528 (6), -0.18746 (6), 
length of domains: 34
Time: pickout 0.0013    decision 0.2602    solve 0.5606    add 0.0043    
Accumulated time: pickout 0.0013    decision 0.2602    solve 0.5606    add 0.0043    
Current (lb-rhs): -0.7340624332427979
34 domains visited
Cumulative time: 0.8437657356262207

batch:  torch.Size([34, 100]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [0, 41] [0, 41] [0, 92] [0, 41] [0, 92] [0, 41] [0, 41] [0, 92] [0, 41] [0, 92] 
pruning_in_iteration open status: True
ratio of positive domain = 33 / 68 = 0.4852941176470589
pruning-in-iteration extra time: 0.014172792434692383
Time: prepare 0.0125    beta_bound 0.3430    bound 0.3431    transfer 0.0006    finalize 0.0112    func 0.3675    
Accumulated time: func 0.9191    prepare 0.0344    bound 0.8712    beta_bound 0.8711    transfer 0.0011    finalize 0.0214    
batch bounding time:  0.36766481399536133
Current worst splitting domains lb-rhs (depth):
-0.63505 (7), -0.59798 (7), -0.40575 (7), -0.36910 (7), -0.36694 (7), -0.32641 (7), -0.31216 (7), -0.27930 (7), -0.27474 (7), -0.23774 (7), -0.23723 (7), -0.21112 (7), -0.20391 (7), -0.19171 (7), -0.16590 (7), -0.16501 (7), -0.14751 (7), -0.13264 (7), -0.13078 (7), -0.11504 (7), 
length of domains: 35
Time: pickout 0.0016    decision 0.0315    solve 0.3678    add 0.0041    
Accumulated time: pickout 0.0030    decision 0.2916    solve 0.9285    add 0.0084    
Current (lb-rhs): -0.6350502967834473
69 domains visited
Cumulative time: 1.2496833801269531

batch:  torch.Size([35, 100]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [0, 92] [0, 41] [1, 79] [0, 92] [0, 41] [0, 7] [0, 92] [0, 7] [0, 92] [0, 41] 
pruning_in_iteration open status: True
ratio of positive domain = 42 / 70 = 0.6
pruning-in-iteration extra time: 0.0158998966217041
Time: prepare 0.0135    beta_bound 0.3485    bound 0.3486    transfer 0.0005    finalize 0.0117    func 0.3744    
Accumulated time: func 1.2935    prepare 0.0523    bound 1.2199    beta_bound 1.2196    transfer 0.0016    finalize 0.0330    
batch bounding time:  0.3745393753051758
Current worst splitting domains lb-rhs (depth):
-0.50507 (8), -0.46617 (8), -0.38110 (8), -0.35038 (8), -0.34018 (8), -0.29761 (8), -0.24503 (8), -0.24066 (8), -0.20706 (8), -0.20670 (8), -0.19997 (8), -0.16409 (8), -0.16237 (8), -0.14618 (8), -0.12935 (8), -0.12695 (8), -0.12536 (8), -0.11648 (8), -0.10345 (8), -0.08806 (8), 
length of domains: 28
Time: pickout 0.0017    decision 0.0339    solve 0.3746    add 0.0034    
Accumulated time: pickout 0.0046    decision 0.3255    solve 1.3031    add 0.0118    
Current (lb-rhs): -0.5050685405731201
97 domains visited
Cumulative time: 1.6641666889190674

batch:  torch.Size([28, 100]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [1, 79] [1, 79] [0, 7] [0, 7] [3, 80] [0, 7] [3, 80] [0, 7] [0, 99] [0, 99] 
pruning_in_iteration open status: True
ratio of positive domain = 31 / 56 = 0.5535714285714286
pruning-in-iteration extra time: 0.015998363494873047
Time: prepare 0.0112    beta_bound 0.3541    bound 0.3542    transfer 0.0006    finalize 0.0093    func 0.3753    
Accumulated time: func 1.6688    prepare 0.0675    bound 1.5741    beta_bound 1.5737    transfer 0.0022    finalize 0.0423    
batch bounding time:  0.37545251846313477
Current worst splitting domains lb-rhs (depth):
-0.44310 (9), -0.40175 (9), -0.31093 (9), -0.28119 (9), -0.28075 (9), -0.23806 (9), -0.17743 (9), -0.17573 (9), -0.14445 (9), -0.14305 (9), -0.13614 (9), -0.10534 (9), -0.10237 (9), -0.09348 (9), -0.08549 (9), -0.07897 (9), -0.06529 (9), -0.06524 (9), -0.05957 (9), -0.05701 (9), 
length of domains: 25
Time: pickout 0.0016    decision 0.0318    solve 0.3755    add 0.0053    
Accumulated time: pickout 0.0063    decision 0.3573    solve 1.6786    add 0.0172    
Current (lb-rhs): -0.4430992603302002
122 domains visited
Cumulative time: 2.0791242122650146

batch:  torch.Size([25, 100]) pre split depth:  2
post split depth:  2
splitting decisions: 
split level 0: [1, 49] [1, 79] [0, 7] [1, 79] [1, 79] [1, 79] [1, 79] [1, 79] [1, 79] [1, 49] 
split level 1: [0, 33] [1, 49] [0, 33] [4, 91] [4, 91] [1, 49] [1, 49] [4, 91] [4, 91] [0, 33] 
pruning_in_iteration open status: True
ratio of positive domain = 75 / 100 = 0.75
pruning-in-iteration extra time: 0.01611781120300293
Time: prepare 0.0176    beta_bound 0.3588    bound 0.3589    transfer 0.0006    finalize 0.0167    func 0.3939    
Accumulated time: func 2.0627    prepare 0.0892    bound 1.9330    beta_bound 1.9325    transfer 0.0028    finalize 0.0590    
batch bounding time:  0.39404892921447754
Current worst splitting domains lb-rhs (depth):
-0.28956 (11), -0.24787 (11), -0.24160 (11), -0.19705 (11), -0.16623 (11), -0.14439 (11), -0.13597 (11), -0.12101 (11), -0.11679 (11), -0.11214 (11), -0.11006 (11), -0.09094 (11), -0.07970 (11), -0.07732 (11), -0.04563 (11), -0.04558 (11), -0.04467 (11), -0.03721 (11), -0.02599 (11), -0.02298 (11), 
length of domains: 25
Time: pickout 0.0014    decision 0.0348    solve 0.4019    add 0.0039    
Accumulated time: pickout 0.0077    decision 0.3921    solve 2.0805    add 0.0211    
Current (lb-rhs): -0.28955864906311035
147 domains visited
Cumulative time: 2.5218706130981445

batch:  torch.Size([25, 100]) pre split depth:  2
post split depth:  2
splitting decisions: 
split level 0: [0, 99] [0, 99] [0, 99] [2, 30] [0, 99] [2, 30] [0, 7] [0, 7] [0, 99] [0, 99] 
split level 1: [1, 79] [0, 33] [1, 79] [0, 33] [0, 33] [0, 33] [0, 33] [0, 33] [1, 79] [0, 33] 
pruning_in_iteration open status: True
ratio of positive domain = 94 / 100 = 0.94
pruning-in-iteration extra time: 0.016124725341796875
Time: prepare 0.0179    beta_bound 0.3618    bound 0.3619    transfer 0.0005    finalize 0.0167    func 0.3972    
Accumulated time: func 2.4599    prepare 0.1110    bound 2.2948    beta_bound 2.2943    transfer 0.0033    finalize 0.0757    
batch bounding time:  0.39733338356018066
Current worst splitting domains lb-rhs (depth):
-0.16634 (13), -0.11256 (13), -0.07463 (13), -0.06604 (13), -0.01608 (13), -0.00680 (13), 
length of domains: 6
Time: pickout 0.0014    decision 0.0345    solve 0.4051    add 0.0046    
Accumulated time: pickout 0.0091    decision 0.4266    solve 2.4855    add 0.0257    
Current (lb-rhs): -0.166337251663208
153 domains visited
Cumulative time: 2.972182512283325

batch:  torch.Size([6, 100]) pre split depth:  4
post split depth:  4
splitting decisions: 
split level 0: [2, 30] [2, 30] [2, 30] [2, 30] [3, 80] [0, 54] 
split level 1: [3, 80] [0, 54] [3, 80] [0, 54] [0, 94] [3, 80] 
split level 2: [4, 91] [0, 33] [4, 91] [3, 80] [4, 91] [4, 91] 
split level 3: [1, 69] [4, 91] [1, 69] [4, 91] [0, 82] [1, 69] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 96 / 96 = 1.0
pruning-in-iteration extra time: 0.00011849403381347656
Time: prepare 0.0189    beta_bound 0.0105    bound 0.0106    transfer 0.0003    finalize 0.0156    func 0.0455    
Accumulated time: func 2.5055    prepare 0.1346    bound 2.3054    beta_bound 2.3048    transfer 0.0036    finalize 0.0913    
batch bounding time:  0.04587745666503906
length of domains: 0
Time: pickout 0.0015    decision 0.0391    solve 0.0579    add 0.0019    
Accumulated time: pickout 0.0105    decision 0.4657    solve 2.5435    add 0.0275    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
153 domains visited
Cumulative time: 3.0735368728637695

Result: safe in 320.3092 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):320.3059781535973, max time: 320.3091812133789
mean time for verified SAFE instances(total 1): 320.3091812133789, max time: 320.3091812133789
safe (total 1), index: [0]
