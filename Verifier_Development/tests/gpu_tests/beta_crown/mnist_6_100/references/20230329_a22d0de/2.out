Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_6_100
  path: mnist_6_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 14
  end: 15
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 17:08:50 2023 on zeratul
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226457)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_6_100]_start=14_end=15_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundShape(name=/13, inputs=[/0])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundGather(name=/15, inputs=[/13, /14])
  (/16): BoundConstant(name=/16, inputs=[])
  (/17): BoundUnsqueeze(name=/17, inputs=[/15])
  (/18): BoundUnsqueeze(name=/18, inputs=[/16])
  (/19): BoundConcat(name=/19, inputs=[/17, /18])
  (/20): BoundReshape(name=/20, inputs=[/0, /19])
  (/input): BoundLinear(name=/input, inputs=[/20, /1, /2])
  (/22): BoundRelu(name=/22, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/22, /3, /4])
  (/24): BoundRelu(name=/24, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/24, /5, /6])
  (/26): BoundRelu(name=/26, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/26, /7, /8])
  (/28): BoundRelu(name=/28, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/28, /9, /10])
  (/30): BoundRelu(name=/30, inputs=[/input.15])
  (/31): BoundLinear(name=/31, inputs=[/30, /11, /12])
)
Model prediction is: tensor([[-4.69696093, 12.18417549,  0.73592341, -2.52385235,  0.45228222,
         -2.92379093, -2.54813862,  0.77546304,  1.91816485, -2.26292157]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [36]; unstable size 36; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 47 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using sparse-spec alpha with unstable size 84 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [47]; unstable size 47; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using sparse-spec alpha with unstable size 84 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [69]; unstable size 69; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using sparse-spec alpha with unstable size 84 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using sparse-features alpha with shape [84]; unstable size 84; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ -4.68077469, -10.24038315, -11.75966835,  -8.31491470,  -7.69062614,
          -3.74286461,  -8.07211685,  -8.87877655, -10.21748161]],
       device='cuda:0') None
best_l after optimization: -39.03758239746094
alpha/beta optimization time: 7.775031089782715
initial alpha-CROWN bounds: tensor([[-0.99298573, -5.85390472, -6.88400650, -4.66888428, -3.63144493,
         -0.96174049, -4.78282166, -5.25109577, -6.01069832]], device='cuda:0')
Worst class: (+ rhs) -6.884006500244141
Split layers:
  BoundLinear(name=/input.15, inputs=[/28, /9, /10]): [(BoundRelu(name=/30, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.3, inputs=[/22, /3, /4]): [(BoundRelu(name=/24, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.7, inputs=[/24, /5, /6]): [(BoundRelu(name=/26, inputs=[/input.7]), 0)]
  BoundLinear(name=/input, inputs=[/20, /1, /2]): [(BoundRelu(name=/22, inputs=[/input]), 0)]
  BoundLinear(name=/input.11, inputs=[/26, /7, /8]): [(BoundRelu(name=/28, inputs=[/input.11]), 0)]
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.69696093, 12.18417549,  0.73592341, -2.52385235,  0.45228222,
         -2.92379093, -2.54813862,  0.77546304,  1.91816485, -2.26292157]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.70370913,  9.46528816,  0.47224158, -1.40187454,  0.36905846,
          -2.27861381, -2.45576859,  0.70448852,  1.81107748, -1.48167753],
         [-3.70370913,  9.46528816,  0.47224158, -1.40187454,  0.36905846,
          -2.27861381, -2.45576859,  0.70448852,  1.81107748, -1.48167753]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[13.16899681,  8.99304676, 10.86716270,  9.09622955, 11.74390221,
          11.92105675,  8.76079941,  7.65421057, 10.94696617]]],
       device='cuda:0')
number of violation:  0
Attack finished in 0.8213 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [36]; unstable size 36; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 47 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using sparse-spec alpha with unstable size 84 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [47]; unstable size 47; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using sparse-spec alpha with unstable size 84 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [69]; unstable size 69; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using sparse-spec alpha with unstable size 84 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using sparse-features alpha with shape [84]; unstable size 84; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2024-02-29
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_79', 'lay4_19', 'lay4_67', 'lay4_70', 'lay4_14', 'lay4_99', 'lay4_2', 'lay4_68', 'lay4_28', 'lay4_3', 'lay4_1', 'lay4_58', 'lay4_23', 'lay4_30', 'lay4_61', 'lay4_41', 'lay4_81', 'lay4_12', 'lay4_15', 'lay4_52', 'lay4_38', 'lay4_80', 'lay4_49', 'lay4_55', 'lay4_89', 'lay4_76', 'lay4_77', 'lay4_40', 'lay4_9', 'lay4_26', 'lay4_37', 'lay4_7', 'lay4_20', 'lay4_85', 'lay4_75', 'lay4_8', 'lay4_95', 'lay4_56', 'lay4_45', 'lay4_51', 'lay4_64', 'lay4_33', 'lay4_63', 'lay4_54', 'lay4_74', 'lay4_84', 'lay4_32'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/Verifier_Development/complete_verifier/data_utils.py:257: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2835s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[1e-05,1.0851369837839098] (15,-1; 2,-1), time: 0.8679s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_61, [-inf,inf]=>[-1.5138133750987346,0.03945910737078315] (2,-1; 2,-1), time: 1.0855s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-1.192518693782752,0.05844847114406486] (2,-1; 2,-1), time: 1.6775s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[-0.33942229408989943,0.8772332364809217] (2,-1; 2,-1), time: 1.8157s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[-1.2496090185378603,0.3187674173228903] (2,-1; 2,-1), time: 1.5936s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-1.0705355958691325,0.056814171619129536] (2,-1; 2,-1), time: 1.9926s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_14, [-inf,inf]=>[-0.8213512218586199,0.20045968686566812] (2,-1; 2,-1), time: 2.1350s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3203s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-inf,-0.024684776101218553] (-1,-1; 2,-1), time: 0.5557s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-0.7682797376472095,0.08808667674444061] (2,-1; 2,-1), time: 2.5844s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2728s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2935s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.47291101319798784,0.6367904371904787] (2,-1; 2,-1), time: 3.0604s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-0.5621450777527343,0.6056064757557785] (2,-1; 2,-1), time: 3.1392s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-0.41416231724222696,0.5441161569265187] (2,-1; 2,-1), time: 3.1983s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.8369099898426384,0.20156854463049295] (2,-1; 2,-1), time: 2.3503s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2442s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-0.201024546988049,0.863528131987789] (2,-1; 2,-1), time: 3.3453s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2665s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-0.2925595185901557,0.7901325059125425] (2,-1; 2,-1), time: 3.4358s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-0.2245849552570837,0.6668146528021379] (2,-1; 2,-1), time: 3.4950s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-0.13772428194112651,0.6948197653144309] (2,-1; 2,-1), time: 3.6038s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_30, [-inf,inf]=>[-0.8766556739630734,0.04512649226783723] (2,-1; 2,-1), time: 3.8883s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.811824696125925,0.3305298857734624] (2,-1; 2,-1), time: 2.7986s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-0.7587712221412184,0.2750761127730118] (2,-1; 2,-1), time: 1.3283s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.16160956959408773,0.9887584553486289] (2,-1; 2,-1), time: 2.2895s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2295s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2349s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2834s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[-0.7648232425875611,0.023404995263471118] (2,-1; 2,-1), time: 1.9034s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.13294768881239863,0.7764928425025457] (2,-1; 2,-1), time: 1.4116s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[1e-05,0.9443504864515603] (15,-1; 2,-1), time: 0.9577s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_84, [-inf,inf]=>[1e-05,1.4890311371559886] (15,-1; 2,-1), time: 0.7217s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-0.8945941647053295,0.07870225764952385] (2,-1; 2,-1), time: 1.7809s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-0.19199010078362783,0.5918918066321102] (2,-1; 2,-1), time: 3.3102s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[1e-05,1.0463412857330883] (15,-1; 2,-1), time: 1.1250s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-0.7380169223262087,0.3321403851919068] (2,-1; 2,-1), time: 3.1574s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_7, [-inf,inf]=>[-0.7990543982439114,0.23900292605328194] (2,-1; 2,-1), time: 2.2921s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.6988248085225635,0.18242615569660847] (2,-1; 2,-1), time: 3.2533s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[-0.8267596210555922,0.01733896353064733] (2,-1; 2,-1), time: 2.2435s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_85, [-inf,inf]=>[-0.6113565919727297,0.3860720542012497] (2,-1; 2,-1), time: 2.7060s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-0.6865853172668809,0.18234829055778745] (2,-1; 2,-1), time: 2.8204s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_95, [-inf,inf]=>[-0.5914493537769587,0.7166815373171005] (2,-1; 2,-1), time: 2.7834s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[1e-05,0.9562458236982829] (15,-1; 2,-1), time: 2.3282s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_56, [-inf,inf]=>[-0.4944323533757862,0.1230926374762717] (2,-1; 2,-1), time: 3.3632s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[-0.7325113953548685,0.4037242158332141] (2,-1; 2,-1), time: 2.2197s, #vars: 1057, #constrs: 308, improved: True
PGD done for relu layer 2
MIP improved 47 nodes out of 47 unstable nodes, lb improved 9.985952377319336, ub improved 10.128717422485352, time 8.9830
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_51', 'lay6_79', 'lay6_98', 'lay6_54', 'lay6_34', 'lay6_3', 'lay6_75', 'lay6_89', 'lay6_97', 'lay6_44', 'lay6_31', 'lay6_73', 'lay6_96', 'lay6_61', 'lay6_69', 'lay6_37', 'lay6_80', 'lay6_99', 'lay6_45', 'lay6_59', 'lay6_91', 'lay6_14', 'lay6_2', 'lay6_16', 'lay6_22', 'lay6_42', 'lay6_0', 'lay6_67', 'lay6_17', 'lay6_72', 'lay6_30', 'lay6_46', 'lay6_23', 'lay6_40', 'lay6_12', 'lay6_27', 'lay6_18', 'lay6_8', 'lay6_36', 'lay6_90', 'lay6_81', 'lay6_88', 'lay6_53', 'lay6_13', 'lay6_25', 'lay6_4', 'lay6_57', 'lay6_35', 'lay6_71', 'lay6_62', 'lay6_65', 'lay6_56', 'lay6_64', 'lay6_21', 'lay6_6', 'lay6_83', 'lay6_48', 'lay6_28', 'lay6_92', 'lay6_29', 'lay6_52', 'lay6_43', 'lay6_32', 'lay6_85', 'lay6_24', 'lay6_84'] filter: 1.0
Solving MIP for lay6_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7033s, #vars: 1221, #constrs: 504, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7066s, #vars: 1221, #constrs: 504, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(3, -1), (1, 1), (38, -1), (49, -1), (89, -1), (77, -1), (26, -1), (37, -1), (51, -1), (64, -1), (33, -1), (63, 1), (54, 1), (74, 1), (84, 1)]

all verified at 4th iter
best_l after optimization: 19.127197265625
beta sum per layer: []
alpha/beta optimization time: 0.332871675491333
alpha-CROWN with intermediate bounds by MIP: tensor([[5.41018867, 0.36124229, 0.16880417, 1.48742580, 3.34708405, 5.17749691,
         1.04293060, 0.49261379, 1.63941002]], device='cuda:0') None
min of alpha-CROWN bounds 0.16880416870117188>=0, verified!
MIP finished with 12.85351014137268s
Run final alpha-CROWN after MIP solving on layer 5 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])

all verified at 0th iter
best_l after optimization: 19.127199172973633
beta sum per layer: []
alpha/beta optimization time: 0.04282093048095703
alpha-CROWN with intermediate bounds improved by MIP: tensor([[5.41018963, 0.36124325, 0.16880417, 1.48742580, 3.34708405, 5.17749786,
         1.04293060, 0.49261379, 1.63941002]], device='cuda:0') None
Split layers:
  BoundLinear(name=/input.15, inputs=[/28, /9, /10]): [(BoundRelu(name=/30, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.3, inputs=[/22, /3, /4]): [(BoundRelu(name=/24, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.7, inputs=[/24, /5, /6]): [(BoundRelu(name=/26, inputs=[/input.7]), 0)]
  BoundLinear(name=/input, inputs=[/20, /1, /2]): [(BoundRelu(name=/22, inputs=[/input]), 0)]
  BoundLinear(name=/input.11, inputs=[/26, /7, /8]): [(BoundRelu(name=/28, inputs=[/input.11]), 0)]
refined global lb: tensor([[5.41018963],
        [0.36124325],
        [0.16880417],
        [1.48742580],
        [3.34708405],
        [5.17749786],
        [1.04293060],
        [0.49261379],
        [1.63941002]], device='cuda:0') min: tensor(0.16880417, device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
Result: safe-incomplete-refine in 28.0777 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):28.077440821355946, max time: 28.07772159576416
mean time for verified SAFE instances(total 1): 28.07772159576416, max time: 28.07772159576416
safe-incomplete-refine (total 1), index: [0]
