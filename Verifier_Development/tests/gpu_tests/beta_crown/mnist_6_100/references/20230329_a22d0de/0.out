Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_6_100
  path: mnist_6_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 4
  end: 5
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 16:55:10 2023 on zeratul
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226457)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_6_100]_start=4_end=5_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundShape(name=/13, inputs=[/0])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundGather(name=/15, inputs=[/13, /14])
  (/16): BoundConstant(name=/16, inputs=[])
  (/17): BoundUnsqueeze(name=/17, inputs=[/15])
  (/18): BoundUnsqueeze(name=/18, inputs=[/16])
  (/19): BoundConcat(name=/19, inputs=[/17, /18])
  (/20): BoundReshape(name=/20, inputs=[/0, /19])
  (/input): BoundLinear(name=/input, inputs=[/20, /1, /2])
  (/22): BoundRelu(name=/22, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/22, /3, /4])
  (/24): BoundRelu(name=/24, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/24, /5, /6])
  (/26): BoundRelu(name=/26, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/26, /7, /8])
  (/28): BoundRelu(name=/28, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/28, /9, /10])
  (/30): BoundRelu(name=/30, inputs=[/input.15])
  (/31): BoundLinear(name=/31, inputs=[/30, /11, /12])
)
Model prediction is: tensor([[-1.33794570, -1.49482870, -0.54522431, -2.72489262,  6.67754793,
          0.05568251, -2.42807031,  0.42011362, -0.43017635,  3.95283222]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [36]; unstable size 36; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 56 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [56]; unstable size 56; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [81]; unstable size 81; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-18.15694427, -19.67528534, -17.41659737, -20.64155960, -20.80030060,
         -15.61867905, -17.59779739, -21.88947868, -18.15885544]],
       device='cuda:0') None
best_l after optimization: -120.32137298583984
alpha/beta optimization time: 5.9307451248168945
initial alpha-CROWN bounds: tensor([[-13.05827141, -13.10799789, -12.52560616, -14.87458229, -14.89960957,
         -10.13888359, -12.60935020, -15.56225967, -13.54481506]],
       device='cuda:0')
Worst class: (+ rhs) -15.562259674072266
Split layers:
  BoundLinear(name=/input.15, inputs=[/28, /9, /10]): [(BoundRelu(name=/30, inputs=[/input.15]), 0)]
  BoundLinear(name=/input, inputs=[/20, /1, /2]): [(BoundRelu(name=/22, inputs=[/input]), 0)]
  BoundLinear(name=/input.7, inputs=[/24, /5, /6]): [(BoundRelu(name=/26, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.11, inputs=[/26, /7, /8]): [(BoundRelu(name=/28, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.3, inputs=[/22, /3, /4]): [(BoundRelu(name=/24, inputs=[/input.3]), 0)]
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.33794570, -1.49482870, -0.54522431, -2.72489262,  6.67754793,
          0.05568251, -2.42807031,  0.42011362, -0.43017635,  3.95283222]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.36649597, -1.23835838, -0.85794830, -2.05226254,  5.37860584,
           0.14584443, -2.39002275,  0.33969960, -0.15613082,  3.94973612],
         [-1.36649597, -1.23835838, -0.85794830, -2.05226254,  5.37860584,
           0.14584443, -2.39002275,  0.33969960, -0.15613082,  3.94973612]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[6.74510193, 6.61696434, 6.23655415, 7.43086815, 5.23276138,
          7.76862860, 5.03890610, 5.53473663, 1.42886972]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7937 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [36]; unstable size 36; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 56 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [56]; unstable size 56; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 81 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [81]; unstable size 81; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2024-02-29
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_79', 'lay4_31', 'lay4_83', 'lay4_26', 'lay4_49', 'lay4_69', 'lay4_24', 'lay4_94', 'lay4_22', 'lay4_99', 'lay4_10', 'lay4_20', 'lay4_81', 'lay4_33', 'lay4_12', 'lay4_68', 'lay4_32', 'lay4_93', 'lay4_41', 'lay4_84', 'lay4_37', 'lay4_64', 'lay4_60', 'lay4_27', 'lay4_46', 'lay4_96', 'lay4_78', 'lay4_80', 'lay4_55', 'lay4_67', 'lay4_42', 'lay4_38', 'lay4_40', 'lay4_76', 'lay4_0', 'lay4_8', 'lay4_66', 'lay4_62', 'lay4_86', 'lay4_21', 'lay4_48', 'lay4_13', 'lay4_74', 'lay4_23', 'lay4_34', 'lay4_18', 'lay4_51', 'lay4_52', 'lay4_6', 'lay4_16', 'lay4_25', 'lay4_45', 'lay4_43', 'lay4_54', 'lay4_71'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/Verifier_Development/complete_verifier/data_utils.py:257: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2618s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2807s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5504s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-0.556671150720323,0.47442547542527047] (2,-1; 2,-1), time: 1.9942s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_83, [-inf,inf]=>[-0.4689770452037649,0.5570792042645676] (2,-1; 2,-1), time: 2.0424s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_22, [-inf,inf]=>[-0.6356564369347831,0.4981948533609678] (2,-1; 2,-1), time: 2.2776s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2794s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[-1.03637244638426,0.012678011108585928] (2,-1; 2,-1), time: 2.0618s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-0.8632833374556527,0.04461044998029628] (2,-1; 2,-1), time: 2.6029s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-0.5916419926407164,0.5352979465371099] (2,-1; 2,-1), time: 2.6995s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.8165233401507286,0.1844005211702955] (2,-1; 2,-1), time: 2.7503s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_10, [-inf,inf]=>[-1.0621137958056337,0.3632050850400523] (2,-1; 2,-1), time: 2.7782s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.9086164425834797,0.3615717958849853] (2,-1; 2,-1), time: 2.8697s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5873s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2894s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-1.008058479943292,0.3671727256692993] (2,-1; 2,-1), time: 2.9668s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2584s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-1.018273261237939,0.11856032780235125] (2,-1; 2,-1), time: 2.9398s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.6673996354971445,0.3752596575384538] (2,-1; 2,-1), time: 3.2344s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[1e-05,1.2199560024959768] (15,-1; 2,-1), time: 1.7386s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_31, [-inf,inf]=>[-1.4100156537735526,0.09368012034781961] (2,-1; 2,-1), time: 3.4012s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[-0.581457606684079,0.4166211078655875] (2,-1; 2,-1), time: 3.5744s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2291s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3224s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-0.8662994662872577,0.18471616595224405] (2,-1; 2,-1), time: 3.7413s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[1e-05,1.0247888381426549] (15,-1; 2,-1), time: 1.5096s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2436s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2719s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-0.7463211094873958,0.4764343626126899] (2,-1; 2,-1), time: 1.3212s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-1.1172157473853674,0.05746940744567962] (2,-1; 2,-1), time: 1.6719s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-0.53131199218696,0.47745257744197306] (2,-1; 2,-1), time: 1.6551s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-1.3459114447840832,0.04632915748984313] (2,-1; 2,-1), time: 1.0253s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.6448072380350908,0.37323740802525024] (2,-1; 2,-1), time: 2.3617s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[1e-05,1.2790274542229036] (15,-1; 2,-1), time: 2.2285s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-0.725521348928226,0.01491501190202374] (2,-1; 2,-1), time: 3.5679s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-1.0566079335936371,0.004685665200427319] (2,-1; 2,-1), time: 2.7438s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-0.7617105418979342,0.3154092003840441] (2,-1; 2,-1), time: 3.2025s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-1.206902333406222,0.036987817661761374] (2,-1; 2,-1), time: 3.4097s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2581s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.038910237764241656,0.9088761554504281] (2,-1; 2,-1), time: 2.1974s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[-1.502287706719329,0.017780281340793333] (2,-1; 2,-1), time: 2.7747s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_62, [-inf,inf]=>[-0.8465282833215279,0.22894260764730476] (2,-1; 2,-1), time: 3.1019s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.7013482538025044,0.18354656210758538] (2,-1; 2,-1), time: 3.4814s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[1e-05,1.3900088995072484] (15,-1; 2,-1), time: 1.1756s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[1e-05,1.0632920110072106] (15,-1; 2,-1), time: 1.0886s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.06305387505120653,1.553242527501037] (2,-1; 2,-1), time: 0.8520s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_0, [-inf,inf]=>[-0.5985348866782297,0.23941253941151014] (2,-1; 2,-1), time: 3.7593s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_21, [-inf,inf]=>[-0.7733921520268439,0.2642965696803794] (2,-1; 2,-1), time: 3.4017s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_51, [-inf,inf]=>[-0.831725275411087,0.1295056407746629] (2,-1; 2,-1), time: 2.5123s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-0.5921689307033867,0.4578779109587] (2,-1; 2,-1), time: 3.3332s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.30714804734943363,0.7930747266868251] (2,-1; 2,-1), time: 2.8680s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_25, [-inf,inf]=>[-0.8669966550298116,0.4922231851662278] (2,-1; 2,-1), time: 2.3112s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-0.11621219368273354,1.0184307956320213] (2,-1; 2,-1), time: 4.1150s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-0.4996314473200306,0.6241329087407808] (2,-1; 2,-1), time: 2.3859s, #vars: 1057, #constrs: 308, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-0.06979750102131566,0.6798373208041005] (2,-1; 2,-1), time: 4.2275s, #vars: 1057, #constrs: 308, improved: True
PGD done for relu layer 2
MIP improved 55 nodes out of 55 unstable nodes, lb improved 12.902132034301758, ub improved 12.371904373168945, time 11.5041
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_10', 'lay6_65', 'lay6_75', 'lay6_93', 'lay6_68', 'lay6_89', 'lay6_44', 'lay6_83', 'lay6_28', 'lay6_94', 'lay6_37', 'lay6_9', 'lay6_61', 'lay6_81', 'lay6_91', 'lay6_95', 'lay6_4', 'lay6_8', 'lay6_1', 'lay6_35', 'lay6_76', 'lay6_40', 'lay6_98', 'lay6_72', 'lay6_97', 'lay6_15', 'lay6_46', 'lay6_64', 'lay6_12', 'lay6_49', 'lay6_25', 'lay6_2', 'lay6_90', 'lay6_26', 'lay6_14', 'lay6_87', 'lay6_30', 'lay6_0', 'lay6_11', 'lay6_82', 'lay6_84', 'lay6_52', 'lay6_27', 'lay6_17', 'lay6_80', 'lay6_3', 'lay6_66', 'lay6_21', 'lay6_79', 'lay6_77', 'lay6_50', 'lay6_67', 'lay6_36', 'lay6_86', 'lay6_96', 'lay6_55', 'lay6_74', 'lay6_19', 'lay6_42', 'lay6_16', 'lay6_70', 'lay6_20', 'lay6_6', 'lay6_54', 'lay6_41', 'lay6_24', 'lay6_38', 'lay6_47', 'lay6_43', 'lay6_78', 'lay6_33', 'lay6_32', 'lay6_29', 'lay6_45', 'lay6_60', 'lay6_88', 'lay6_5', 'lay6_62'] filter: 1.0
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3011s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7231s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8031s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3723s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3208s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6484s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7448s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2836s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.3956s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6773s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.2845s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2710s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-inf,-0.0002649579152577748] (-1,-1; 2,-1), time: 5.3989s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.3478s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[1e-05,0.9427243267781569] (15,-1; 2,-1), time: 9.1637s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-0.3390632454734026,0.31757362769437225] (2,-1; 2,-1), time: 12.7375s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[1e-05,0.9087548733584226] (15,-1; 2,-1), time: 12.8570s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3098s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6994s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2433s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-0.2249812665661008,0.33160680158729455] (2,-1; 2,-1), time: 14.8937s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[1e-05,0.6120870216474152] (15,-1; 2,-1), time: 10.6934s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[1e-05,1.1640606512598488] (15,-1; 2,-1), time: 12.9010s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.4003562331067314,0.2803452267214759] (2,-1; 9,-1), time: 19.0086s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[-0.7831623699676095,0.02107289334908819] (2,-1; 2,-1), time: 19.0358s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2485s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-0.4073882252775113,0.266216393509896] (2,-1; 2,-1), time: 20.1401s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2935s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.6089088888575445,0.2304933353720744] (2,-1; 2,-1), time: 11.5068s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-0.2090775878182301,0.3809753373545581] (9,-1; 2,-1), time: 20.8254s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.5214384216691185,0.13789061296004182] (2,-1; 9,-1), time: 21.0910s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.5243003625722946,0.15174626000754451] (9,-1; 2,-1), time: 21.5884s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7272s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.5354s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2210s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-0.43431196497086344,0.5867445639809797] (2,-1; 9,-1), time: 19.8378s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-0.40896841099260267,0.41704185142919464] (2,-1; 2,-1), time: 10.8179s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.1955s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3158s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2580s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-0.3425800667733677,0.21899072707499403] (9,-1; 2,-1), time: 23.7253s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6571s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2551s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[1e-05,2.3711575814943133] (15,-1; 2,-1), time: 4.5001s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.0838s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[-0.10140438581331959,0.5876935334187868] (2,-1; 2,-1), time: 12.9785s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.4753648310391217,0.18397779461779706] (2,-1; 2,-1), time: 19.9088s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2469s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[1e-05,1.6892343592009733] (15,-1; 2,-1), time: 5.8781s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-0.23384915436274653,0.29857977606749114] (9,-1; 9,-1), time: 30.0112s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.2675s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2393s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2396s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.4571s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[1e-05,1.1533881631410086] (15,-1; 2,-1), time: 6.2324s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.2824290863139402,0.1933974977295183] (2,-1; 2,-1), time: 12.1512s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[1e-05,1.227420472210336] (15,-1; 2,-1), time: 5.8658s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.2179285307640572,0.5216722496541716] (2,-1; 2,-1), time: 19.8199s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[1e-05,0.9845654989216683] (15,-1; 2,-1), time: 8.7980s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.9208s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-0.4893790505269238,0.04202302290246126] (9,-1; 2,-1), time: 23.0326s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[1e-05,1.0908603880124392] (15,-1; 2,-1), time: 3.9191s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[1e-05,0.7235501511113359] (15,-1; 2,-1), time: 13.4730s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[1e-05,1.7059061807545313] (15,-1; 2,-1), time: 3.7995s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-0.1869923202569065,0.5601418047268948] (2,-1; 2,-1), time: 18.1220s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-0.37080196169013063,0.31013897391148926] (2,-1; 2,-1), time: 22.0184s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[1e-05,0.5116626550370748] (15,-1; 2,-1), time: 11.3763s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[1e-05,0.7772236998376243] (15,-1; 2,-1), time: 6.6754s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[1e-05,0.8630196749225038] (15,-1; 2,-1), time: 4.9564s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-0.3567503864890507,0.26743253796012545] (2,-1; 2,-1), time: 16.7087s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[1e-05,1.083193585517237] (15,-1; 2,-1), time: 6.2766s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[1e-05,0.9592484240155539] (15,-1; 9,-1), time: 21.8771s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-0.11134599117772363,0.881746892822752] (2,-1; 2,-1), time: 9.1520s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[1e-05,0.781794956007344] (15,-1; 2,-1), time: 5.7864s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[1e-05,1.0581461682047653] (15,-1; 2,-1), time: 11.9498s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[1e-05,0.7801156308713415] (15,-1; 9,-1), time: 15.2050s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-0.03779132295529858,0.41738873251027575] (9,-1; 2,-1), time: 21.9067s, #vars: 1233, #constrs: 522, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-0.1320262028418995,0.4465449970306124] (9,-1; 2,-1), time: 20.4344s, #vars: 1233, #constrs: 522, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(99, -1), (81, -1), (68, -1), (41, 1), (84, -1), (64, 1), (60, -1), (27, -1), (46, -1), (78, -1), (8, 1), (66, -1), (86, -1), (48, -1), (16, 1), (45, 1), (54, -1)]
best_l after optimization: -31.79529571533203
beta sum per layer: []
alpha/beta optimization time: 6.969250917434692
alpha-CROWN with intermediate bounds by MIP: tensor([[-2.86712360, -3.11710691, -2.32372236, -2.89058161, -4.44580936,
         -1.10048294, -3.89309788, -5.20144892, -5.95592260]], device='cuda:0') None
MIP improved 78 nodes out of 78 unstable nodes, lb improved 19.97472381591797, ub improved 33.87456130981445, time 56.6565
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_7', 'lay8_87', 'lay8_91', 'lay8_80', 'lay8_68', 'lay8_76', 'lay8_90', 'lay8_57', 'lay8_79', 'lay8_64', 'lay8_3', 'lay8_14', 'lay8_46', 'lay8_95', 'lay8_8', 'lay8_66', 'lay8_86', 'lay8_51', 'lay8_98', 'lay8_1', 'lay8_84', 'lay8_92', 'lay8_75', 'lay8_37', 'lay8_0', 'lay8_60', 'lay8_30', 'lay8_62', 'lay8_65', 'lay8_74', 'lay8_31', 'lay8_17', 'lay8_50', 'lay8_24', 'lay8_4', 'lay8_2', 'lay8_78', 'lay8_70', 'lay8_21', 'lay8_48', 'lay8_77', 'lay8_88', 'lay8_82', 'lay8_25', 'lay8_73', 'lay8_54', 'lay8_23', 'lay8_93', 'lay8_63', 'lay8_96', 'lay8_81', 'lay8_49', 'lay8_45', 'lay8_67', 'lay8_99', 'lay8_6', 'lay8_32', 'lay8_40', 'lay8_19', 'lay8_94', 'lay8_13', 'lay8_43', 'lay8_56', 'lay8_39', 'lay8_58', 'lay8_97', 'lay8_71', 'lay8_28', 'lay8_59', 'lay8_41', 'lay8_52', 'lay8_20', 'lay8_53', 'lay8_85', 'lay8_34', 'lay8_22', 'lay8_36', 'lay8_35', 'lay8_61', 'lay8_15', 'lay8_47', 'lay8_27', 'lay8_12', 'lay8_33', 'lay8_55', 'lay8_11', 'lay8_16', 'lay8_89', 'lay8_29', 'lay8_10', 'lay8_83', 'lay8_18', 'lay8_26', 'lay8_9', 'lay8_42', 'lay8_5', 'lay8_38', 'lay8_69'] filter: 1.0
Solving MIP for lay8_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4095s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4022s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4221s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4647s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5536s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5574s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3999s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4016s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0945s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7851s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4121s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4306s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3593s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.8676s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.2228s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.5395s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4305s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2450s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9921s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5058s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[1e-05,0.9052078232020833] (15,-1; 9,-1), time: 15.3906s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[-0.8372489765989372,0.2477776230514101] (2,-1; 9,-1), time: 28.4576s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3577s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.464648574812733,0.18213248755386705] (9,-1; 9,-1), time: 30.0163s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-0.48835240863659884,0.3010273909621611] (9,-1; 9,-1), time: 30.0213s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.009807013518364292,0.6804411816634405] (9,-1; 9,-1), time: 30.0305s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-0.68270708461988,0.1370236142253436] (9,-1; 9,-1), time: 30.0552s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.33617912429786356,0.2515513956211217] (9,-1; 9,-1), time: 30.0995s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-0.4252095610490346,0.4063199840333497] (9,-1; 9,-1), time: 30.1715s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.2963487725034598,0.44362700139076877] (9,-1; 9,-1), time: 30.1809s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3639s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3667s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.43923720697692686,0.15549636087488275] (9,-1; 9,-1), time: 30.0201s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.3146909502674425,0.6362214118436188] (9,-1; 9,-1), time: 30.0328s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.6508204869967208,0.17466447995020887] (9,-1; 9,-1), time: 30.2912s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.2614283541474797,0.480900872980387] (9,-1; 9,-1), time: 30.0261s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5824s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.21195004860811575,0.6997720260431969] (9,-1; 9,-1), time: 30.0166s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.5428518915088122,0.2449181293395405] (9,-1; 9,-1), time: 30.0212s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3838s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-0.023100263207180238,0.5935899197277804] (9,-1; 9,-1), time: 30.2007s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4262s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[1e-05,0.6440885195200436] (15,-1; 9,-1), time: 15.3956s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[1e-05,1.6037646576057345] (15,-1; 9,-1), time: 15.3437s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-0.6411850209406152,0.07779446511706539] (9,-1; 9,-1), time: 30.0386s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[1e-05,0.9105095437328409] (15,-1; 9,-1), time: 15.9777s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.3191268679967815,0.42142517979504407] (9,-1; 9,-1), time: 30.0998s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1236s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-0.26700588789007,0.36612881343144926] (9,-1; 9,-1), time: 30.0385s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-0.42385354120576374,0.49434972373141567] (9,-1; 9,-1), time: 30.0216s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.3729454756691151,0.24137465649884432] (9,-1; 9,-1), time: 30.0222s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-0.23769700417638792,0.4632835568204974] (9,-1; 9,-1), time: 30.0282s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3284s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-0.2768346680584538,0.27562877021873705] (9,-1; 9,-1), time: 30.0178s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-0.6959307817272292,0.4042455197942466] (9,-1; 9,-1), time: 30.0135s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.08629587734320414,0.5366079809652943] (9,-1; 9,-1), time: 30.0134s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2802s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.24900685590354046,0.236418350963634] (9,-1; 9,-1), time: 30.1938s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4903s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[1e-05,1.1765146732650875] (15,-1; 9,-1), time: 15.3819s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-0.08508451325834747,0.6786291595347679] (9,-1; 9,-1), time: 30.0107s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3369s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.8852s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-0.34806765622218433,0.18616588614942584] (9,-1; 9,-1), time: 30.0109s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3638s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.36389242563271,0.27030493463723804] (9,-1; 2,-1), time: 24.8727s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-0.1286181304337201,0.4645611049135473] (9,-1; 9,-1), time: 30.0128s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4399s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[1e-05,0.9609447337926316] (15,-1; 9,-1), time: 15.4334s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.5673540241813118,0.012033432135465798] (9,-1; 9,-1), time: 30.0181s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[1e-05,0.8165630005010034] (15,-1; 9,-1), time: 16.1506s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.21276186713468603,0.32521343558151855] (9,-1; 9,-1), time: 30.0172s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[1e-05,0.9098076940381672] (15,-1; 9,-1), time: 15.8857s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3640s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[1e-05,0.8902226628820152] (15,-1; 9,-1), time: 15.3777s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[1e-05,0.9758279376870428] (15,-1; 9,-1), time: 15.4380s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[1e-05,2.7441129772705146] (15,-1; 2,-1), time: 11.3511s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[1e-05,1.715360907063882] (15,-1; 9,-1), time: 15.3775s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.0927s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,0.6497649908367333] (15,-1; 9,-1), time: 22.6747s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4146s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-0.4800638327202309,0.09407354441906675] (9,-1; 9,-1), time: 30.0182s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-0.22341988550809608,0.22968803576359278] (9,-1; 9,-1), time: 30.1483s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[-0.22299620943757312,0.2253325838943251] (9,-1; 9,-1), time: 30.0286s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[1e-05,0.8845230736301196] (15,-1; 9,-1), time: 15.3944s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[1e-05,1.2367181259182682] (15,-1; 9,-1), time: 15.4985s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[1e-05,1.9632955116319517] (15,-1; 9,-1), time: 15.3535s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-0.3016588652342862,0.44034653135952834] (9,-1; 9,-1), time: 30.0382s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[1e-05,0.8333962749711925] (15,-1; 9,-1), time: 16.4273s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[1e-05,1.708304600287018] (15,-1; 9,-1), time: 15.3529s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[1e-05,1.8511813528615004] (15,-1; 2,-1), time: 12.9874s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[1e-05,2.009162331734607] (15,-1; 9,-1), time: 15.2842s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-0.49932155409357437,0.03804958724623637] (9,-1; 9,-1), time: 30.0130s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[1e-05,1.6125051038571234] (15,-1; 9,-1), time: 15.3670s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[1e-05,1.133936166999387] (15,-1; 9,-1), time: 15.3572s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-0.10858621525496434,0.4404315840197282] (9,-1; 9,-1), time: 30.0127s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[1e-05,1.4223059413721006] (15,-1; 9,-1), time: 15.3103s, #vars: 1381, #constrs: 694, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-0.5034565822549174,0.05589110490977282] (9,-1; 9,-1), time: 30.0170s, #vars: 1381, #constrs: 694, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(10, -1), (65, -1), (93, 1), (44, -1), (94, -1), (37, 1), (61, -1), (95, -1), (4, -1), (8, -1), (35, -1), (76, -1), (98, -1), (72, -1), (97, -1), (15, -1), (64, 1), (12, 1), (2, -1), (90, -1), (14, -1), (82, -1), (84, -1), (52, -1), (27, -1), (17, -1), (3, 1), (66, -1), (79, 1), (77, -1), (50, 1), (67, 1), (86, -1), (96, -1), (55, -1), (74, -1), (19, -1), (42, 1), (16, -1), (70, 1), (20, 1), (6, -1), (54, 1), (41, 1), (24, -1), (38, -1), (47, -1), (43, 1), (33, 1), (29, 1), (45, 1), (88, 1), (5, 1), (62, 1)]
best_l after optimization: 4.839674949645996
beta sum per layer: []
alpha/beta optimization time: 7.181381464004517
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.39657664,  1.27924633,  1.54286599,  1.63247871,  0.02263880,
          2.51130247, -0.22543645, -0.85189247, -2.46810532]], device='cuda:0') None
MIP improved 98 nodes out of 98 unstable nodes, lb improved 47.63312911987305, ub improved 76.14849090576172, time 108.4958
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_13', 'lay10_64', 'lay10_45', 'lay10_83', 'lay10_65', 'lay10_36', 'lay10_25', 'lay10_72', 'lay10_12', 'lay10_54', 'lay10_43', 'lay10_55', 'lay10_10', 'lay10_53', 'lay10_41', 'lay10_23', 'lay10_82', 'lay10_69', 'lay10_4', 'lay10_57', 'lay10_15', 'lay10_92', 'lay10_89', 'lay10_44', 'lay10_42', 'lay10_78', 'lay10_75', 'lay10_11', 'lay10_1', 'lay10_61', 'lay10_17', 'lay10_31', 'lay10_20', 'lay10_5', 'lay10_91', 'lay10_24', 'lay10_35', 'lay10_94', 'lay10_46', 'lay10_21', 'lay10_49', 'lay10_56', 'lay10_50', 'lay10_77', 'lay10_22', 'lay10_6', 'lay10_93', 'lay10_2', 'lay10_39', 'lay10_34', 'lay10_86', 'lay10_80', 'lay10_18', 'lay10_76', 'lay10_3', 'lay10_85', 'lay10_27', 'lay10_9', 'lay10_48', 'lay10_99', 'lay10_52', 'lay10_70', 'lay10_73', 'lay10_7', 'lay10_96', 'lay10_60', 'lay10_66', 'lay10_62', 'lay10_40', 'lay10_14', 'lay10_98', 'lay10_67', 'lay10_81', 'lay10_32', 'lay10_68', 'lay10_33', 'lay10_29', 'lay10_8', 'lay10_47', 'lay10_97', 'lay10_87', 'lay10_16', 'lay10_30', 'lay10_58', 'lay10_0', 'lay10_79', 'lay10_88', 'lay10_19', 'lay10_90', 'lay10_95', 'lay10_38', 'lay10_71', 'lay10_26', 'lay10_37', 'lay10_63', 'lay10_74', 'lay10_28', 'lay10_51', 'lay10_59', 'lay10_84'] filter: 1.0
Solving MIP for lay10_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5665s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5781s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6128s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5111s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2862s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3261s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6567s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5612s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.3323s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.4546s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 14.0241s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[-0.7620834571111207,0.36570141976985965] (9,-1; 9,-1), time: 30.0253s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-0.6101571825529133,0.2793627075852632] (9,-1; 9,-1), time: 30.0230s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-0.8848616564723755,0.05069150473912417] (9,-1; 9,-1), time: 30.0307s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-0.8846330808948003,0.1914197030162084] (9,-1; 9,-1), time: 30.0278s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-0.566547428005149,0.2773546446159963] (9,-1; 9,-1), time: 30.0210s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-0.8241612243409192,0.005004839015379725] (9,-1; 9,-1), time: 30.0373s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-0.34028716171255724,0.6242260924560352] (9,-1; 9,-1), time: 30.0389s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-0.6563692034285543,0.22596818278146005] (9,-1; 9,-1), time: 30.0608s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4136s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5432s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-0.3501461114401684,0.5339756013475982] (9,-1; 9,-1), time: 30.0304s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-0.510181426834541,0.20350336002321784] (9,-1; 9,-1), time: 30.1215s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5214s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.48375786878956356,0.1270267112775264] (9,-1; 9,-1), time: 30.0437s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-1.1841620032549784,0.030607317785117084] (9,-1; 9,-1), time: 30.0323s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-0.9026840834555359,0.14161219659526797] (9,-1; 9,-1), time: 30.4055s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4438s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.8788954559172453,0.05789387544057263] (9,-1; 9,-1), time: 30.0546s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3947s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.7084s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-0.5268827753309971,0.45191629018875984] (9,-1; 9,-1), time: 30.2334s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-0.4745326271763353,0.34597047806703407] (9,-1; 9,-1), time: 30.0732s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 14.3803s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6457s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[1e-05,2.5019623734956364] (15,-1; 9,-1), time: 15.5924s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6147s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-0.23577397134343941,0.8676470644239461] (9,-1; 9,-1), time: 30.0289s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-1.0169806001527573,0.27442787605221725] (9,-1; 9,-1), time: 30.0300s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-0.18283092526417785,0.6340973230463139] (9,-1; 9,-1), time: 30.0464s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.24899435768227143,0.4086686460808472] (9,-1; 9,-1), time: 30.0469s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-0.2880243314186594,0.6137853703930514] (9,-1; 9,-1), time: 30.0707s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-0.5697366782310073,0.33698862677179975] (9,-1; 9,-1), time: 30.0590s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3925s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-0.5456342688738419,0.5675209678090588] (9,-1; 9,-1), time: 30.0226s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4534s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-0.623438241224589,0.5053040657102684] (9,-1; 9,-1), time: 30.0139s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4639s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-0.8573867948688889,0.38994063212420377] (9,-1; 9,-1), time: 30.0116s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-0.6301413188569246,0.19974500585037433] (9,-1; 9,-1), time: 30.0162s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4708s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4738s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-0.2737308289757729,0.26400874478815967] (9,-1; 9,-1), time: 30.0149s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-0.36709442958556987,0.25958896134232334] (9,-1; 9,-1), time: 30.0399s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-0.7285208480397798,0.17236265258298492] (9,-1; 9,-1), time: 30.0339s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.2365s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6063s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-0.32732440382917216,0.4406149780961089] (9,-1; 9,-1), time: 30.0428s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-0.5475538371008829,0.41262781227850454] (9,-1; 9,-1), time: 30.0167s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[1e-05,1.5370461731902483] (15,-1; 9,-1), time: 15.5152s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[1e-05,1.9543703301611979] (15,-1; 9,-1), time: 15.4909s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-0.7075466497223191,0.037904923537207064] (9,-1; 9,-1), time: 30.1809s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-0.6281837605249815,0.4887914235905799] (9,-1; 9,-1), time: 30.0291s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-0.22282208064426623,0.5410734445938981] (9,-1; 9,-1), time: 30.0442s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-0.5789255582942398,0.08653998245579297] (9,-1; 9,-1), time: 30.0680s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-0.5251770899771269,0.2711068620717692] (9,-1; 9,-1), time: 30.0973s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-0.21017691154908247,0.6577915010664754] (9,-1; 9,-1), time: 30.0156s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-0.11772035085173813,0.6347044558660573] (9,-1; 9,-1), time: 30.0508s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4828s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5375s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-0.44388952411313287,0.4637951158848558] (9,-1; 9,-1), time: 30.2537s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[1e-05,0.9863697445855765] (15,-1; 9,-1), time: 15.8035s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-0.6278648206004899,0.19717888150705679] (9,-1; 9,-1), time: 30.1593s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[1e-05,2.6438846406638223] (15,-1; 9,-1), time: 15.7610s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,0.837777590758751] (15,-1; 9,-1), time: 22.5849s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.5967082643920798,0.3266644593182631] (9,-1; 9,-1), time: 30.0114s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-0.6430903070662036,0.3292322692325693] (9,-1; 9,-1), time: 30.0509s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[1e-05,1.4362093172639496] (15,-1; 9,-1), time: 15.4487s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-0.4191815439398694,0.23047730452678644] (9,-1; 9,-1), time: 30.0595s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4745s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[1e-05,2.2111809678864223] (15,-1; 9,-1), time: 15.4764s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[1e-05,1.6764998437614516] (15,-1; 9,-1), time: 15.5167s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4834s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[1e-05,1.5079484736724313] (15,-1; 9,-1), time: 15.6401s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6907s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[1e-05,1.0614429350425143] (15,-1; 9,-1), time: 15.7979s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[1e-05,1.458523624281843] (15,-1; 9,-1), time: 15.4840s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-0.39382049143612025,0.2688185040629937] (9,-1; 9,-1), time: 30.1598s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[1e-05,1.5339978729191408] (15,-1; 9,-1), time: 16.1622s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[1e-05,2.332700763409693] (15,-1; 9,-1), time: 15.5585s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[1e-05,1.8373310469081587] (15,-1; 9,-1), time: 15.7357s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[1e-05,0.8565657467381034] (15,-1; 9,-1), time: 23.0227s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[1e-05,1.9888511320898596] (15,-1; 9,-1), time: 15.5617s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[1e-05,2.463351144520426] (15,-1; 9,-1), time: 15.5554s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-0.5995914157976157,0.3907883871546845] (9,-1; 9,-1), time: 30.0268s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-0.24924975415866793,0.5782992069321015] (9,-1; 9,-1), time: 30.0190s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[1e-05,1.5299940056479917] (15,-1; 9,-1), time: 15.6781s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[1e-05,1.4153258673797589] (15,-1; 9,-1), time: 15.4330s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[1e-05,1.6700237294335871] (15,-1; 9,-1), time: 15.3474s, #vars: 1557, #constrs: 908, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-0.039522229822544865,0.6990390346033938] (9,-1; 9,-1), time: 30.0301s, #vars: 1557, #constrs: 908, improved: True
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(7, -1), (87, -1), (68, -1), (90, -1), (79, -1), (46, -1), (95, -1), (66, -1), (86, -1), (51, -1), (98, -1), (75, -1), (37, 1), (0, -1), (60, -1), (62, -1), (65, -1), (31, -1), (17, -1), (24, -1), (4, -1), (70, -1), (48, -1), (77, -1), (25, -1), (23, 1), (81, 1), (49, 1), (99, -1), (32, -1), (43, 1), (56, -1), (39, -1), (58, 1), (97, -1), (59, 1), (41, -1), (52, 1), (53, -1), (85, 1), (22, 1), (36, -1), (35, 1), (15, -1), (47, 1), (27, -1), (12, 1), (55, 1), (11, -1), (16, 1), (89, -1), (29, 1), (10, 1), (18, 1), (26, 1), (9, -1), (42, 1), (5, 1), (38, 1), (69, 1)]
best_l after optimization: 15.638114929199219
beta sum per layer: []
alpha/beta optimization time: 6.867871522903442
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.70999098,  2.56969571,  2.63276744,  2.89954758,  1.33174753,
          3.55062580,  0.88059473,  0.49100733, -1.42786169]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 128.5823974609375, ub improved 188.3787078857422, time 136.6557
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=10, bias=True) 5 12 torch.Size([9, 1])
MIP finished with 314.95389676094055s
Run final alpha-CROWN after MIP solving on layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
best_l after optimization: 20.990158081054688
beta sum per layer: []
alpha/beta optimization time: 6.130659818649292
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 3.30722904,  3.07923126,  3.14149404,  3.60753536,  1.91938496,
          4.02385902,  1.41588628,  1.28680563, -0.79126668]], device='cuda:0') None
Split layers:
  BoundLinear(name=/input.15, inputs=[/28, /9, /10]): [(BoundRelu(name=/30, inputs=[/input.15]), 0)]
  BoundLinear(name=/input, inputs=[/20, /1, /2]): [(BoundRelu(name=/22, inputs=[/input]), 0)]
  BoundLinear(name=/input.7, inputs=[/24, /5, /6]): [(BoundRelu(name=/26, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.11, inputs=[/26, /7, /8]): [(BoundRelu(name=/28, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.3, inputs=[/22, /3, /4]): [(BoundRelu(name=/24, inputs=[/input.3]), 0)]
refined global lb: tensor([[ 3.30722904],
        [ 3.07923126],
        [ 3.14149404],
        [ 3.60753536],
        [ 1.91938496],
        [ 4.02385902],
        [ 1.41588628],
        [ 1.28680563],
        [-0.79126668]], device='cuda:0') min: tensor(-0.79126668, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 565.8136792182922
##### Instance 0 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.3072290420532227.

Properties batch 1, size 1
Remaining timeout: 565.6673483848572
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.0792312622070312.

Properties batch 2, size 1
Remaining timeout: 565.5957493782043
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.141494035720825.

Properties batch 3, size 1
Remaining timeout: 565.529363155365
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.6075353622436523.

Properties batch 4, size 1
Remaining timeout: 565.4633347988129
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.9193849563598633.

Properties batch 5, size 1
Remaining timeout: 565.3962671756744
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.023859024047852.

Properties batch 6, size 1
Remaining timeout: 565.3319187164307
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.4158862829208374.

Properties batch 7, size 1
Remaining timeout: 565.2680034637451
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.2868056297302246.

Properties batch 8, size 1
Remaining timeout: 565.2021746635437
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.79126668]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundShape(name=/13, inputs=[/0])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundGather(name=/15, inputs=[/13, /14])
  (/16): BoundConstant(name=/16, inputs=[])
  (/17): BoundUnsqueeze(name=/17, inputs=[/15])
  (/18): BoundUnsqueeze(name=/18, inputs=[/16])
  (/19): BoundConcat(name=/19, inputs=[/17, /18])
  (/20): BoundReshape(name=/20, inputs=[/0, /19])
  (/input): BoundLinear(name=/input, inputs=[/20, /1, /2])
  (/22): BoundRelu(name=/22, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/22, /3, /4])
  (/24): BoundRelu(name=/24, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/24, /5, /6])
  (/26): BoundRelu(name=/26, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/26, /7, /8])
  (/28): BoundRelu(name=/28, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/28, /9, /10])
  (/30): BoundRelu(name=/30, inputs=[/input.15])
  (/31): BoundLinear(name=/31, inputs=[/30, /11, /12])
)
Model prediction is: tensor([-1.33794570, -1.49482870, -0.54522431, -2.72489262,  6.67754793,
         0.05568251, -2.42807031,  0.42011362, -0.43017635,  3.95283222],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /22 start_node /31 with alignment adjustment
setting alpha for layer /24 start_node /31 with alignment adjustment
setting alpha for layer /26 start_node /31 with alignment adjustment
setting alpha for layer /28 start_node /31 with alignment adjustment
setting alpha for layer /30 start_node /31 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.79126668]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input.15,/input,/input.7,/input.11,/input.3,/31
Split layers:
  BoundLinear(name=/input.11, inputs=[/26, /7, /8]): [(BoundRelu(name=/28, inputs=[/input.11]), 0)]
  BoundLinear(name=/input, inputs=[/20, /1, /2]): [(BoundRelu(name=/22, inputs=[/input]), 0)]
  BoundLinear(name=/input.3, inputs=[/22, /3, /4]): [(BoundRelu(name=/24, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.15, inputs=[/28, /9, /10]): [(BoundRelu(name=/30, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.7, inputs=[/24, /5, /6]): [(BoundRelu(name=/26, inputs=[/input.7]), 0)]
Keeping slopes for these layers: ['/31']
Keeping slopes for these layers: ['/31']
Node /22 input 0: size torch.Size([100]) unstable 36
Node /24 input 0: size torch.Size([100]) unstable 38
Node /26 input 0: size torch.Size([100]) unstable 24
Node /28 input 0: size torch.Size([100]) unstable 38
Node /30 input 0: size torch.Size([100]) unstable 47
-----------------
# of unstable neurons: 183
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.15, 24] 
split level 1: [/input.15, 12] 
split level 2: [/input, 33] 
split level 3: [/input, 38] 
split level 4: [/input.15, 31] 
split level 5: [/input.15, 46] 
pruning_in_iteration open status: True
ratio of positive domain = 28 / 64 = 0.4375
pruning-in-iteration extra time: 0.008171319961547852
Time: prepare 0.0104    beta_bound 0.5521    bound 0.5522    transfer 0.0006    finalize 0.0067    func 0.5700    
Accumulated time: func 0.5700    prepare 0.0116    bound 0.5522    beta_bound 0.5521    transfer 0.0006    finalize 0.0067    
batch bounding time:  0.5702292919158936
Current worst splitting domains lb-rhs (depth):
-0.67242 (6), -0.63866 (6), -0.63015 (6), -0.60081 (6), -0.47259 (6), -0.45122 (6), -0.43333 (6), -0.42904 (6), -0.40847 (6), -0.39567 (6), -0.39485 (6), -0.36984 (6), -0.36363 (6), -0.36048 (6), -0.32702 (6), -0.32649 (6), -0.32513 (6), -0.32438 (6), -0.31463 (6), -0.29767 (6), 
length of domains: 36
Time: pickout 0.0020    decision 0.2449    set_bounds 0.0023    solve 0.5703    add 0.0018    
Accumulated time: pickout 0.0020    decision 0.2449    set_bounds 0.0023    solve 0.5703    add 0.0018    
Current (lb-rhs): -0.6724231243133545
36 domains visited
Cumulative time: 0.8646204471588135

BaB round 2
batch: 36
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 92] [/input, 92] [/input, 92] [/input, 92] [/input, 92] [/input, 92] [/input, 92] [/input, 92] [/input, 41] [/input, 41] 
pruning_in_iteration open status: True
ratio of positive domain = 29 / 72 = 0.4027777777777778
pruning-in-iteration extra time: 0.010694265365600586
Time: prepare 0.0103    beta_bound 0.3000    bound 0.3000    transfer 0.0005    finalize 0.0077    func 0.3185    
Accumulated time: func 0.8885    prepare 0.0224    bound 0.8522    beta_bound 0.8521    transfer 0.0011    finalize 0.0143    
batch bounding time:  0.3186764717102051
Current worst splitting domains lb-rhs (depth):
-0.56858 (7), -0.53062 (7), -0.52299 (7), -0.48977 (7), -0.40515 (7), -0.36112 (7), -0.35783 (7), -0.32353 (7), -0.32323 (7), -0.28235 (7), -0.28230 (7), -0.26626 (7), -0.24110 (7), -0.23904 (7), -0.23531 (7), -0.22929 (7), -0.21233 (7), -0.21204 (7), -0.19945 (7), -0.19776 (7), 
length of domains: 43
Time: pickout 0.0013    decision 0.0326    set_bounds 0.0016    solve 0.3187    add 0.0017    
Accumulated time: pickout 0.0034    decision 0.2774    set_bounds 0.0039    solve 0.8890    add 0.0036    
Current (lb-rhs): -0.5685843229293823
79 domains visited
Cumulative time: 1.221348524093628

BaB round 3
batch: 43
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.3, 79] [/input, 7] [/input, 7] [/input, 41] [/input, 41] [/input, 7] [/input, 41] [/input, 7] [/input, 92] [/input, 92] 
pruning_in_iteration open status: True
ratio of positive domain = 37 / 86 = 0.43023255813953487
pruning-in-iteration extra time: 0.011889457702636719
Time: prepare 0.0159    beta_bound 0.3004    bound 0.3005    transfer 0.0004    finalize 0.0089    func 0.3259    
Accumulated time: func 1.2144    prepare 0.0388    bound 1.1528    beta_bound 1.1525    transfer 0.0015    finalize 0.0233    
batch bounding time:  0.32597899436950684
Current worst splitting domains lb-rhs (depth):
-0.44052 (8), -0.40044 (8), -0.39198 (8), -0.35794 (8), -0.31570 (8), -0.29980 (8), -0.28167 (8), -0.26835 (8), -0.25435 (8), -0.24958 (8), -0.24088 (8), -0.21343 (8), -0.20438 (8), -0.19859 (8), -0.17139 (8), -0.16440 (8), -0.16119 (8), -0.15433 (8), -0.15119 (8), -0.14803 (8), 
length of domains: 49
Time: pickout 0.0012    decision 0.0291    set_bounds 0.0019    solve 0.3260    add 0.0014    
Accumulated time: pickout 0.0046    decision 0.3065    set_bounds 0.0058    solve 1.2150    add 0.0050    
Current (lb-rhs): -0.44052088260650635
128 domains visited
Cumulative time: 1.5817437171936035

BaB round 4
batch: 49
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/input.3, 79] [/input.3, 79] [/input.3, 79] [/input, 7] [/input, 99] [/input, 7] [/input, 99] [/input, 7] [/input, 99] [/input, 7] 
pruning_in_iteration open status: True
ratio of positive domain = 58 / 98 = 0.5918367346938775
pruning-in-iteration extra time: 0.011794567108154297
Time: prepare 0.0172    beta_bound 0.3019    bound 0.3020    transfer 0.0005    finalize 0.0102    func 0.3299    
Accumulated time: func 1.5443    prepare 0.0565    bound 1.4547    beta_bound 1.4544    transfer 0.0020    finalize 0.0334    
batch bounding time:  0.3300464153289795
Current worst splitting domains lb-rhs (depth):
-0.37446 (9), -0.33331 (9), -0.32531 (9), -0.29009 (9), -0.24287 (9), -0.23953 (9), -0.20898 (9), -0.19563 (9), -0.19456 (9), -0.18789 (9), -0.16918 (9), -0.15006 (9), -0.13675 (9), -0.13056 (9), -0.11467 (9), -0.10336 (9), -0.09690 (9), -0.09402 (9), -0.08958 (9), -0.08263 (9), 
length of domains: 40
Time: pickout 0.0012    decision 0.0296    set_bounds 0.0025    solve 0.3301    add 0.0014    
Accumulated time: pickout 0.0057    decision 0.3361    set_bounds 0.0083    solve 1.5450    add 0.0065    
Current (lb-rhs): -0.37446069717407227
168 domains visited
Cumulative time: 1.9473254680633545

BaB round 5
batch: 40
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/input.3, 79] [/input.3, 79] [/input.11, 80] [/input.3, 79] [/input.3, 79] [/input.3, 79] [/input.3, 79] [/input.3, 79] [/input.3, 79] [/input.3, 79] 
pruning_in_iteration open status: True
ratio of positive domain = 51 / 80 = 0.6375
pruning-in-iteration extra time: 0.018030643463134766
Time: prepare 0.0179    beta_bound 0.4614    bound 0.4615    transfer 0.0009    finalize 0.0113    func 0.4917    
Accumulated time: func 2.0360    prepare 0.0749    bound 1.9163    beta_bound 1.9159    transfer 0.0029    finalize 0.0447    
batch bounding time:  0.49190473556518555
Current worst splitting domains lb-rhs (depth):
-0.27502 (10), -0.24005 (10), -0.22612 (10), -0.20175 (10), -0.19726 (10), -0.14408 (10), -0.14043 (10), -0.12901 (10), -0.12875 (10), -0.11602 (10), -0.09619 (10), -0.09177 (10), -0.08615 (10), -0.08552 (10), -0.07898 (10), -0.07581 (10), -0.07007 (10), -0.05326 (10), -0.05048 (10), -0.04476 (10), 
length of domains: 29
Time: pickout 0.0012    decision 0.0310    set_bounds 0.0022    solve 0.4919    add 0.0022    
Accumulated time: pickout 0.0069    decision 0.3671    set_bounds 0.0105    solve 2.0370    add 0.0086    
Current (lb-rhs): -0.27501821517944336
197 domains visited
Cumulative time: 2.476961612701416

BaB round 6
batch: 29
Average branched neurons at iteration 6:  1.0000
splitting decisions: 
split level 0: [/input, 99] [/input.3, 49] [/input.3, 49] [/input, 99] [/input.3, 49] [/input, 99] [/input.3, 49] [/input, 99] [/input.3, 49] [/input, 99] 
pruning_in_iteration open status: True
ratio of positive domain = 40 / 58 = 0.6896551724137931
pruning-in-iteration extra time: 0.015287399291992188
Time: prepare 0.0129    beta_bound 0.4059    bound 0.4060    transfer 0.0005    finalize 0.0072    func 0.4266    
Accumulated time: func 2.4626    prepare 0.0885    bound 2.3222    beta_bound 2.3218    transfer 0.0034    finalize 0.0519    
batch bounding time:  0.42677998542785645
Current worst splitting domains lb-rhs (depth):
-0.20581 (11), -0.16986 (11), -0.15510 (11), -0.14072 (11), -0.12567 (11), -0.09528 (11), -0.07849 (11), -0.07435 (11), -0.06740 (11), -0.05833 (11), -0.04572 (11), -0.04539 (11), -0.02340 (11), -0.02329 (11), -0.02283 (11), -0.01692 (11), -0.01019 (11), -0.00241 (11), 
length of domains: 18
Time: pickout 0.0018    decision 0.0385    set_bounds 0.0025    solve 0.4268    add 0.0024    
Accumulated time: pickout 0.0087    decision 0.4056    set_bounds 0.0130    solve 2.4638    add 0.0111    
Current (lb-rhs): -0.20580697059631348
215 domains visited
Cumulative time: 2.949819564819336

BaB round 7
batch: 18
Average branched neurons at iteration 7:  1.0000
splitting decisions: 
split level 0: [/input.7, 30] [/input.3, 79] [/input.3, 49] [/input.3, 49] [/input.3, 49] [/input.3, 49] [/input.3, 49] [/input.3, 49] [/input.3, 49] [/input.3, 49] 
split level 1: [/input.15, 91] [/input.15, 91] [/input.15, 91] [/input.15, 91] [/input.15, 91] [/input.15, 91] [/input.11, 80] [/input.11, 80] [/input.11, 80] [/input.11, 80] 
pruning_in_iteration open status: True
ratio of positive domain = 65 / 72 = 0.9027777777777778
pruning-in-iteration extra time: 0.015852689743041992
Time: prepare 0.0131    beta_bound 0.4391    bound 0.4392    transfer 0.0009    finalize 0.0098    func 0.4631    
Accumulated time: func 2.9257    prepare 0.1022    bound 2.7615    beta_bound 2.7609    transfer 0.0043    finalize 0.0617    
batch bounding time:  0.46323204040527344
Current worst splitting domains lb-rhs (depth):
-0.12451 (13), -0.08963 (13), -0.08100 (13), -0.07722 (13), -0.04727 (13), -0.01693 (13), -0.00470 (13), 
length of domains: 7
Time: pickout 0.0011    decision 0.0336    set_bounds 0.0022    solve 0.4633    add 0.0015    
Accumulated time: pickout 0.0099    decision 0.4392    set_bounds 0.0152    solve 2.9270    add 0.0126    
Current (lb-rhs): -0.12450647354125977
222 domains visited
Cumulative time: 3.4526705741882324

BaB round 8
batch: 7
Average branched neurons at iteration 8:  1.0000
splitting decisions: 
split level 0: [/input.7, 30] [/input.7, 30] [/input.7, 30] [/input.7, 30] [/input.7, 30] [/input.7, 30] [/input.7, 30] 
split level 1: [/input.15, 91] [/input.15, 91] [/input.15, 91] [/input, 54] [/input, 54] [/input, 54] [/input, 54] 
split level 2: [/input.3, 69] [/input.3, 69] [/input.3, 69] [/input.15, 91] [/input.15, 91] [/input.15, 91] [/input.15, 91] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 56 / 56 = 1.0
pruning-in-iteration extra time: 8.7738037109375e-05
Time: prepare 0.0084    beta_bound 0.0090    bound 0.0090    transfer 0.0002    finalize 0.0056    func 0.0233    
Accumulated time: func 2.9491    prepare 0.1113    bound 2.7705    beta_bound 2.7699    transfer 0.0045    finalize 0.0674    
batch bounding time:  0.023399829864501953
length of domains: 0
Time: pickout 0.0017    decision 0.0327    set_bounds 0.0022    solve 0.0234    add 0.0001    
Accumulated time: pickout 0.0116    decision 0.4718    set_bounds 0.0174    solve 2.9504    add 0.0127    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
222 domains visited
Cumulative time: 3.5134949684143066

Result: safe in 338.4363 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):338.43296172445986, max time: 338.43634605407715
mean time for verified SAFE instances(total 1): 338.43634605407715, max time: 338.43634605407715
safe (total 1), index: [0]
