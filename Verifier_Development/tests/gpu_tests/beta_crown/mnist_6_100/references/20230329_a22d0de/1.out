Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_6_100
  path: mnist_6_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 5
  end: 6
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 17:00:52 2023 on zeratul
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226457)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_6_100]_start=5_end=6_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundShape(name=/13, inputs=[/0])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundGather(name=/15, inputs=[/13, /14])
  (/16): BoundConstant(name=/16, inputs=[])
  (/17): BoundUnsqueeze(name=/17, inputs=[/15])
  (/18): BoundUnsqueeze(name=/18, inputs=[/16])
  (/19): BoundConcat(name=/19, inputs=[/17, /18])
  (/20): BoundReshape(name=/20, inputs=[/0, /19])
  (/input): BoundLinear(name=/input, inputs=[/20, /1, /2])
  (/22): BoundRelu(name=/22, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/22, /3, /4])
  (/24): BoundRelu(name=/24, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/24, /5, /6])
  (/26): BoundRelu(name=/26, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/26, /7, /8])
  (/28): BoundRelu(name=/28, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/28, /9, /10])
  (/30): BoundRelu(name=/30, inputs=[/input.15])
  (/31): BoundLinear(name=/31, inputs=[/30, /11, /12])
)
Model prediction is: tensor([[-4.36576366, 10.45044041,  1.05107152, -2.95799756,  0.61751610,
         -2.66855431, -2.13231516,  1.12672365,  1.28850818, -2.20466447]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [45]; unstable size 45; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 66 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [66]; unstable size 66; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using full alpha with shape torch.Size([100]); unstable size 95; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-48.45145416, -49.23908234, -48.25524139, -47.35989380, -48.15966034,
         -39.10931396, -43.14004135, -44.70189667, -54.42058563]],
       device='cuda:0') None
best_l after optimization: -271.887939453125
alpha/beta optimization time: 7.42191481590271
initial alpha-CROWN bounds: tensor([[-30.65382957, -30.07029152, -30.44608688, -31.66741371, -31.07925034,
         -24.11128426, -28.01081467, -30.05672455, -35.79222870]],
       device='cuda:0')
Worst class: (+ rhs) -35.79222869873047
Split layers:
  BoundLinear(name=/input.11, inputs=[/26, /7, /8]): [(BoundRelu(name=/28, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.3, inputs=[/22, /3, /4]): [(BoundRelu(name=/24, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.7, inputs=[/24, /5, /6]): [(BoundRelu(name=/26, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.15, inputs=[/28, /9, /10]): [(BoundRelu(name=/30, inputs=[/input.15]), 0)]
  BoundLinear(name=/input, inputs=[/20, /1, /2]): [(BoundRelu(name=/22, inputs=[/input]), 0)]
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.36576366, 10.45044041,  1.05107152, -2.95799756,  0.61751610,
         -2.66855431, -2.13231516,  1.12672365,  1.28850818, -2.20466447]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.71480060,  8.03563976,  2.08464646, -2.39962339,  0.54556549,
          -2.70880461, -2.10341263,  1.31160784,  0.84514683, -2.34338379],
         [-3.71480060,  8.03563976,  2.08464646, -2.39962339,  0.54556549,
          -2.70880461, -2.10341263,  1.31160784,  0.84514683, -2.34338379]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[11.75044060,  5.95099354, 10.43526268,  7.49007416, 10.74444389,
          10.13905239,  6.72403193,  7.19049311, 10.37902355]]],
       device='cuda:0')
number of violation:  0
Attack finished in 0.7897 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [45]; unstable size 45; total size 100 (torch.Size([1, 100]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 66 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [66]; unstable size 66; total size 100 (torch.Size([1, 100]))
layer /24 start_node /input.7 using full alpha with unstable size 95 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using full alpha with shape torch.Size([100]); unstable size 95; total size 100 (torch.Size([1, 100]))
layer /26 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2024-02-29
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_3', 'lay4_96', 'lay4_4', 'lay4_19', 'lay4_5', 'lay4_61', 'lay4_87', 'lay4_1', 'lay4_78', 'lay4_68', 'lay4_99', 'lay4_15', 'lay4_31', 'lay4_49', 'lay4_43', 'lay4_93', 'lay4_2', 'lay4_67', 'lay4_12', 'lay4_70', 'lay4_30', 'lay4_28', 'lay4_71', 'lay4_92', 'lay4_18', 'lay4_58', 'lay4_26', 'lay4_82', 'lay4_34', 'lay4_10', 'lay4_66', 'lay4_40', 'lay4_56', 'lay4_23', 'lay4_21', 'lay4_24', 'lay4_38', 'lay4_53', 'lay4_79', 'lay4_76', 'lay4_33', 'lay4_22', 'lay4_52', 'lay4_41', 'lay4_95', 'lay4_36', 'lay4_8', 'lay4_80', 'lay4_75', 'lay4_11', 'lay4_81', 'lay4_89', 'lay4_7', 'lay4_9', 'lay4_83', 'lay4_63', 'lay4_74', 'lay4_57', 'lay4_13', 'lay4_72', 'lay4_51', 'lay4_54', 'lay4_84', 'lay4_86', 'lay4_32'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/Verifier_Development/complete_verifier/data_utils.py:257: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7599s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8215s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9107s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0413s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3275s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-1.1729762270823554,0.0577412667467805] (2,-1; 2,-1), time: 3.7228s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_31, [-inf,inf]=>[-0.6383672841909482,0.8325808121360441] (2,-1; 2,-1), time: 4.0483s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9471s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-0.4723403231501328,0.5610016570573448] (2,-1; 2,-1), time: 4.3763s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.10723130203977885,0.9426263964953172] (2,-1; 2,-1), time: 3.5871s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-0.5420914762062347,0.43524370366426224] (2,-1; 2,-1), time: 4.2183s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[-0.5995519551888433,0.5700062790774614] (2,-1; 2,-1), time: 5.1190s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-0.8821250462965234,0.12233496810247615] (2,-1; 2,-1), time: 5.6486s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-1.3430198310048616,0.012494173632259225] (2,-1; 2,-1), time: 5.7869s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.8149533090527207,0.4620308354229353] (2,-1; 2,-1), time: 5.8730s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2897s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_5, [-inf,inf]=>[-1.0836133865434667,0.12530620516581392] (2,-1; 2,-1), time: 6.2175s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2589s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6469s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.9654279730692448,0.10281982352770178] (2,-1; 2,-1), time: 5.8191s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_3, [-inf,inf]=>[-0.3943795382731837,0.6733793101686557] (2,-1; 2,-1), time: 6.7600s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-inf,-0.0013416141802535765] (-1,-1; 2,-1), time: 2.8582s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.4412721691652967,0.5260551539732111] (2,-1; 2,-1), time: 6.9258s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3518s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0428s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.0671s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.392278377117139,0.41243828745386163] (2,-1; 2,-1), time: 8.6523s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-1.0333819150397734,0.1994749457230793] (2,-1; 2,-1), time: 4.1693s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9757s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_61, [-inf,inf]=>[-0.6071569890031933,0.9020121290052925] (2,-1; 2,-1), time: 11.1582s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.9169031179514286,0.061450856547195204] (2,-1; 2,-1), time: 7.1262s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_10, [-inf,inf]=>[-1.2580515058734405,0.22375049680728482] (2,-1; 2,-1), time: 5.8671s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-0.18953625527274293,1.039569603358424] (2,-1; 2,-1), time: 6.5809s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[-0.6980032050147502,0.2006683380076782] (2,-1; 2,-1), time: 7.3820s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3378s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[-0.1126347186778324,1.0373518718972492] (2,-1; 2,-1), time: 5.5422s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_21, [-inf,inf]=>[-0.701247283570743,0.2482494644650377] (2,-1; 2,-1), time: 6.1681s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.6109315193384443,0.3824496099996991] (2,-1; 2,-1), time: 5.4519s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.5351291101219375,0.3737786858044159] (2,-1; 2,-1), time: 6.0539s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2684s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_66, [-inf,inf]=>[1e-05,0.9309657404929105] (15,-1; 2,-1), time: 7.3650s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2775s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-0.3818279392379861,0.5813991549832099] (2,-1; 2,-1), time: 7.0844s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_56, [-inf,inf]=>[-0.10082132455787125,0.5881402156202172] (2,-1; 2,-1), time: 7.8532s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.4919010575906259,0.5482409926321224] (2,-1; 2,-1), time: 5.6057s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-0.19643908434038831,0.8888166040717758] (2,-1; 2,-1), time: 6.9593s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_7, [-inf,inf]=>[-0.3005716343279492,0.8722516386343593] (2,-1; 2,-1), time: 1.8689s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[1e-05,1.583959461446884] (15,-1; 2,-1), time: 1.1731s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_22, [-inf,inf]=>[-0.678915754157568,0.21467452457796654] (2,-1; 2,-1), time: 6.2664s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2971s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_95, [-inf,inf]=>[-0.9322905469493501,0.2896264084060703] (2,-1; 2,-1), time: 5.3876s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1788s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.4569234523904071,0.4878892971062937] (2,-1; 2,-1), time: 5.5409s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[1e-05,1.0831240078015] (15,-1; 2,-1), time: 3.0725s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_11, [-inf,inf]=>[-0.056670427704831446,1.0988996965874132] (2,-1; 2,-1), time: 5.7060s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_89, [-inf,inf]=>[-0.2385592660245138,0.7563050885976099] (2,-1; 2,-1), time: 5.1667s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.28877898261077134,1.2579264385561688] (2,-1; 2,-1), time: 4.4450s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-0.33928957439182655,0.4447947245379908] (2,-1; 2,-1), time: 6.4457s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[-0.5627208013425463,0.2809886427287792] (2,-1; 2,-1), time: 5.0917s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[-0.36003008300427924,1.228185709423291] (2,-1; 2,-1), time: 6.3270s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_83, [-inf,inf]=>[-0.6282509124088511,0.43846931138340006] (2,-1; 2,-1), time: 5.7231s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_72, [-inf,inf]=>[-0.4562905922480331,0.28046992305933166] (2,-1; 2,-1), time: 4.7144s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_51, [-inf,inf]=>[-0.9639829915188972,0.011231345703772284] (2,-1; 2,-1), time: 5.1756s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_84, [-inf,inf]=>[-0.7270144682785207,0.2506883992162715] (2,-1; 2,-1), time: 5.2160s, #vars: 1075, #constrs: 335, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[-0.7713643692731904,0.17742548488192755] (2,-1; 2,-1), time: 6.9522s, #vars: 1075, #constrs: 335, improved: True
PGD done for relu layer 2
MIP improved 65 nodes out of 65 unstable nodes, lb improved 21.14058494567871, ub improved 19.57379913330078, time 22.2566
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_51', 'lay6_53', 'lay6_79', 'lay6_98', 'lay6_34', 'lay6_89', 'lay6_75', 'lay6_7', 'lay6_10', 'lay6_70', 'lay6_3', 'lay6_36', 'lay6_18', 'lay6_96', 'lay6_37', 'lay6_26', 'lay6_9', 'lay6_77', 'lay6_44', 'lay6_54', 'lay6_60', 'lay6_97', 'lay6_2', 'lay6_45', 'lay6_49', 'lay6_61', 'lay6_91', 'lay6_17', 'lay6_82', 'lay6_46', 'lay6_20', 'lay6_35', 'lay6_33', 'lay6_58', 'lay6_12', 'lay6_57', 'lay6_4', 'lay6_99', 'lay6_71', 'lay6_22', 'lay6_59', 'lay6_31', 'lay6_8', 'lay6_16', 'lay6_87', 'lay6_30', 'lay6_40', 'lay6_80', 'lay6_64', 'lay6_14', 'lay6_48', 'lay6_27', 'lay6_13', 'lay6_73', 'lay6_67', 'lay6_25', 'lay6_42', 'lay6_50', 'lay6_23', 'lay6_86', 'lay6_76', 'lay6_93', 'lay6_72', 'lay6_81', 'lay6_43', 'lay6_83', 'lay6_88', 'lay6_0', 'lay6_62', 'lay6_95', 'lay6_65', 'lay6_11', 'lay6_90', 'lay6_32', 'lay6_56', 'lay6_68', 'lay6_92', 'lay6_69', 'lay6_52', 'lay6_29', 'lay6_55', 'lay6_38', 'lay6_21', 'lay6_28', 'lay6_85', 'lay6_78', 'lay6_94', 'lay6_6', 'lay6_5', 'lay6_15', 'lay6_39', 'lay6_84', 'lay6_24', 'lay6_41', 'lay6_19'] filter: 1.0
Solving MIP for lay6_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4087s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4608s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3602s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0231s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3435s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.4272s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.6506s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3186s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.7053s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.7375s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7537s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.3525s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.8975s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2337s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.6161s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2619s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-0.8944686977918267,0.19128255216346451] (2,-1; 2,-1), time: 23.4369s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.9402486239134494,0.01624927424286241] (2,-1; 9,-1), time: 26.9543s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-0.25863750393596213,0.3260488766576584] (9,-1; 9,-1), time: 30.0156s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-0.42727217316387966,0.36819745700573436] (9,-1; 9,-1), time: 30.0194s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.3382823451185637,0.7783025843639784] (9,-1; 9,-1), time: 30.0177s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-1.2381282380740621,0.04191823456420019] (9,-1; 9,-1), time: 30.0198s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.7011868673520623,0.27234932281234897] (9,-1; 9,-1), time: 30.0210s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-0.5928037192948621,0.1995846747010317] (9,-1; 9,-1), time: 30.0302s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.951690701864779,0.18697405956017424] (2,-1; 9,-1), time: 21.3447s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.8661482622210914,0.23511804430681696] (9,-1; 9,-1), time: 30.3191s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-0.5578618365485305,0.7912524951065678] (9,-1; 9,-1), time: 30.3510s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3674s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.5686487360566357,0.6144500700659711] (9,-1; 9,-1), time: 30.0405s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1767s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3473s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8010s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8067s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-0.9658894367917658,0.1439073338063588] (2,-1; 9,-1), time: 27.0191s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7345s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9745s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.7485s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-0.8951791790218233,0.10051821487915479] (9,-1; 9,-1), time: 30.0361s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-0.9760105060764799,0.20552797545127016] (9,-1; 9,-1), time: 30.0563s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-0.5917653140541838,0.5119316547759241] (9,-1; 2,-1), time: 24.5064s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[-1.190538890284666,0.0441278321545727] (2,-1; 9,-1), time: 22.5668s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-0.12478411930145461,0.8443558056636044] (9,-1; 9,-1), time: 30.6305s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-0.5016943318043122,0.6588600822781421] (9,-1; 2,-1), time: 24.5020s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-1.1208113845176568,0.17723769810502324] (2,-1; 9,-1), time: 28.8363s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7992s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.7628s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.8122953831194774,0.07038972211506149] (9,-1; 9,-1), time: 30.0269s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.6077610124590203,0.12509174329482034] (9,-1; 9,-1), time: 30.0425s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_59, [-inf,inf]=>[-0.7334592597436557,1.134446761204646] (9,-1; 9,-1), time: 30.1333s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-0.4711024253430305,0.42188732468488266] (9,-1; 9,-1), time: 30.1726s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-0.47990133450841466,0.490275285419778] (9,-1; 9,-1), time: 30.0274s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-0.21543322130048528,0.8872007237402884] (9,-1; 9,-1), time: 30.0907s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-0.10199810927398684,1.090745099446955] (9,-1; 9,-1), time: 30.3402s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_48, [-inf,inf]=>[-0.5947765438820432,0.0390860535381792] (9,-1; 9,-1), time: 30.0203s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7329s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.29179337188337406,0.58195955440416] (2,-1; 2,-1), time: 23.0879s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_13, [-inf,inf]=>[-0.7890310722727311,0.3016111304977136] (9,-1; 9,-1), time: 30.0159s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-1.0433017551733503,0.07981403879848653] (9,-1; 9,-1), time: 30.0342s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.7109615627258115,0.35530000819454377] (9,-1; 9,-1), time: 30.2190s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[1e-05,0.8691110027733712] (15,-1; 2,-1), time: 13.7454s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.4618s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[1e-05,1.6577142021997648] (15,-1; 9,-1), time: 15.9028s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[1e-05,1.2222342675837752] (15,-1; 9,-1), time: 16.5905s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2876s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[1e-05,1.1673888495931242] (15,-1; 2,-1), time: 14.9449s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-0.23845744961331758,0.517716883274123] (9,-1; 9,-1), time: 30.0246s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[1e-05,1.3831392742701192] (15,-1; 2,-1), time: 14.7363s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-0.4290340609945601,0.473457484030703] (9,-1; 9,-1), time: 30.2588s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_56, [-inf,inf]=>[1e-05,1.6884918169291125] (15,-1; 9,-1), time: 15.7662s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[1e-05,1.3058093586688777] (15,-1; 9,-1), time: 21.7071s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-0.0938330819181847,0.9542841918256746] (9,-1; 9,-1), time: 30.0176s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.9837006110903329,0.015069917767688783] (9,-1; 9,-1), time: 30.0149s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-0.6244290988031854,0.23456537014886814] (9,-1; 9,-1), time: 30.3347s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.42573366690148723,0.367923957245716] (9,-1; 9,-1), time: 30.0220s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-0.252464370112442,1.1189385685639095] (9,-1; 2,-1), time: 22.7666s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[1e-05,1.9605301168569835] (15,-1; 9,-1), time: 15.2925s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.18314198698585007,0.7680504868328807] (9,-1; 9,-1), time: 30.0137s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[1e-05,1.2710830595491067] (15,-1; 9,-1), time: 15.3997s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[1e-05,0.9725591760435361] (15,-1; 9,-1), time: 20.5127s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[1e-05,1.5372037930625104] (15,-1; 2,-1), time: 7.3076s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[1e-05,1.648014862526735] (15,-1; 9,-1), time: 16.0102s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[1e-05,0.8895623348113487] (15,-1; 9,-1), time: 24.6484s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[1e-05,1.4850935951572] (15,-1; 9,-1), time: 15.3511s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[1e-05,2.1982199718259707] (15,-1; 2,-1), time: 13.1673s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-0.4157506105272477,0.4213551010176717] (9,-1; 9,-1), time: 30.1099s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[1e-05,1.8388188712518527] (15,-1; 2,-1), time: 9.5670s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[1e-05,1.7838654315318787] (15,-1; 9,-1), time: 15.3724s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.38188950132620353,0.7374424763600911] (9,-1; 9,-1), time: 30.0150s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[1e-05,1.5873158279124229] (15,-1; 9,-1), time: 15.7710s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[1e-05,0.8880024843761228] (15,-1; 9,-1), time: 19.0243s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[1e-05,1.0593072645979074] (15,-1; 9,-1), time: 15.7713s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[1e-05,1.504689459079198] (15,-1; 9,-1), time: 15.2227s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.3263067221393255,0.3843744412496151] (9,-1; 9,-1), time: 30.0079s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-0.2530741542283325,0.6396060124091401] (9,-1; 9,-1), time: 30.0686s, #vars: 1261, #constrs: 564, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[-0.16712886940661942,0.6007495107974464] (9,-1; 9,-1), time: 30.0164s, #vars: 1261, #constrs: 564, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(4, -1), (68, -1), (99, -1), (93, -1), (70, -1), (30, -1), (28, -1), (71, -1), (58, -1), (34, -1), (66, 1), (40, -1), (23, -1), (79, -1), (41, -1), (36, -1), (75, -1), (9, -1), (13, 1), (54, 1), (86, -1), (32, -1)]
best_l after optimization: -87.20195770263672
beta sum per layer: []
alpha/beta optimization time: 6.946576356887817
alpha-CROWN with intermediate bounds by MIP: tensor([[ -8.32725143, -11.40553093,  -9.45961189, -10.70018578,  -9.05837154,
          -6.66631794, -10.12104416, -10.10396004, -11.35968876]],
       device='cuda:0') None
MIP improved 95 nodes out of 95 unstable nodes, lb improved 46.84467315673828, ub improved 61.951263427734375, time 124.0519
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_12', 'lay8_72', 'lay8_76', 'lay8_30', 'lay8_14', 'lay8_90', 'lay8_49', 'lay8_13', 'lay8_61', 'lay8_21', 'lay8_3', 'lay8_91', 'lay8_92', 'lay8_48', 'lay8_20', 'lay8_89', 'lay8_82', 'lay8_23', 'lay8_68', 'lay8_35', 'lay8_59', 'lay8_26', 'lay8_7', 'lay8_45', 'lay8_52', 'lay8_94', 'lay8_81', 'lay8_46', 'lay8_56', 'lay8_85', 'lay8_64', 'lay8_67', 'lay8_87', 'lay8_70', 'lay8_62', 'lay8_42', 'lay8_0', 'lay8_71', 'lay8_1', 'lay8_18', 'lay8_10', 'lay8_98', 'lay8_9', 'lay8_2', 'lay8_29', 'lay8_25', 'lay8_47', 'lay8_60', 'lay8_74', 'lay8_79', 'lay8_84', 'lay8_43', 'lay8_17', 'lay8_8', 'lay8_41', 'lay8_24', 'lay8_75', 'lay8_57', 'lay8_16', 'lay8_99', 'lay8_77', 'lay8_37', 'lay8_93', 'lay8_88', 'lay8_50', 'lay8_97', 'lay8_80', 'lay8_5', 'lay8_53', 'lay8_55', 'lay8_58', 'lay8_63', 'lay8_95', 'lay8_54', 'lay8_40', 'lay8_78', 'lay8_19', 'lay8_51', 'lay8_69', 'lay8_22', 'lay8_6', 'lay8_38', 'lay8_32', 'lay8_44', 'lay8_15', 'lay8_33', 'lay8_73', 'lay8_34', 'lay8_4', 'lay8_66', 'lay8_65', 'lay8_86', 'lay8_27', 'lay8_83', 'lay8_11', 'lay8_96', 'lay8_28', 'lay8_39', 'lay8_36', 'lay8_31'] filter: 1.0
Solving MIP for lay8_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.5309s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2784s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5501s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[1e-05,1.3314193209502865] (15,-1; 9,-1), time: 16.4149s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.5960921898890449,0.6265183188063792] (9,-1; 9,-1), time: 30.0166s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.8636539524195047,0.2727749767383588] (9,-1; 9,-1), time: 30.0118s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-1.5419601314144424,0.08473052987934881] (9,-1; 9,-1), time: 30.0185s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-1.1707746081269403,0.05149261132542652] (9,-1; 9,-1), time: 30.0217s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-1.0788008923492005,0.14108298001239233] (9,-1; 9,-1), time: 30.0208s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-1.2992293997237678,0.22556810750208303] (9,-1; 9,-1), time: 30.0282s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-0.8463816921252794,0.11508700991978939] (9,-1; 9,-1), time: 30.0335s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.14215508986253197,1.1465502785784474] (9,-1; 9,-1), time: 30.0367s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-1.058504138302609,0.03716923409603516] (9,-1; 9,-1), time: 30.0554s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.7152872402067241,0.5781236476949037] (9,-1; 9,-1), time: 30.0865s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-1.0847257195526072,0.8042936539497709] (9,-1; 9,-1), time: 30.1313s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-0.8515693599150563,0.15667809155601328] (9,-1; 9,-1), time: 30.1413s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[-0.8875354691906051,0.11018121180021942] (9,-1; 9,-1), time: 30.4097s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4491s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_72, [-inf,inf]=>[-1.2544161517234222,0.44761764073478255] (9,-1; 9,-1), time: 30.4835s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4759s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2665s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.5243s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7036s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-0.7051903892328024,0.34618787358010045] (9,-1; 9,-1), time: 30.0151s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-0.15926468482862585,0.7975701242147709] (9,-1; 9,-1), time: 30.0587s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.2008712065366074,1.0124226493446478] (9,-1; 9,-1), time: 30.0097s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.6445606650028671,0.38872657735469424] (9,-1; 9,-1), time: 30.0114s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-0.36242318491300224,1.3408512022422931] (9,-1; 9,-1), time: 30.0228s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.6340886936518312,0.22434767312295026] (9,-1; 9,-1), time: 30.0242s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-0.7608905777471113,0.09649255771515919] (9,-1; 9,-1), time: 30.0146s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-0.9282080875339637,0.128277432057077] (9,-1; 9,-1), time: 30.0099s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.11031218815284351,1.0300302258481986] (9,-1; 9,-1), time: 30.0351s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-1.0757652009130678,0.4513527821282007] (9,-1; 9,-1), time: 30.0339s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4205s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4429s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-1.1260037395284737,0.17066321176159183] (9,-1; 9,-1), time: 30.0224s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4956s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4496s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-0.27505594142273143,1.4973037650336976] (9,-1; 9,-1), time: 30.3318s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[-0.6582547346918332,0.7128266286571949] (9,-1; 9,-1), time: 30.7824s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-0.17871091040930592,0.8142214617564735] (9,-1; 9,-1), time: 30.3051s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5030s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4541s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3221s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4643s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-0.31328466847025105,0.6444441343306414] (9,-1; 9,-1), time: 30.0186s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-1.1370681487490395,0.1957011319940651] (9,-1; 9,-1), time: 30.0256s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-0.7073891054962335,0.7802101089086593] (9,-1; 9,-1), time: 30.4085s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[1e-05,2.6507276716308783] (15,-1; 9,-1), time: 15.6334s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[1e-05,2.9168047113816704] (15,-1; 9,-1), time: 15.4472s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4163s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-0.7037559369956333,0.49670438723219934] (9,-1; 9,-1), time: 30.1546s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[-0.1780472087072059,1.4026148061478738] (9,-1; 9,-1), time: 30.0227s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-1.2188825144549078,0.11940031673240181] (9,-1; 9,-1), time: 30.0475s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.693875823437498,0.3058371733889917] (9,-1; 9,-1), time: 30.0324s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-1.0189439102592055,0.4478657596572869] (9,-1; 9,-1), time: 30.0228s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.5673297530719322,0.6210433146389642] (9,-1; 9,-1), time: 30.0268s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-0.4824252177160151,0.24643332021824757] (9,-1; 9,-1), time: 30.0816s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-0.747388246284228,0.630229018737179] (9,-1; 9,-1), time: 30.0278s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-0.474777248859737,1.4908330968964965] (9,-1; 9,-1), time: 30.0704s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-0.20802960185393463,0.6614150405927524] (9,-1; 9,-1), time: 30.0158s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-0.9576054776277879,0.05279942275916422] (9,-1; 9,-1), time: 30.0143s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2364s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[1e-05,1.4301897947573186] (15,-1; 9,-1), time: 17.8576s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-0.8529072595864994,0.3288867136626899] (9,-1; 9,-1), time: 30.4061s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-0.9553939625723673,0.2201544235508729] (9,-1; 9,-1), time: 30.2078s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-0.009593373712305706,1.688277155713291] (9,-1; 9,-1), time: 30.0459s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[1e-05,2.241280883176354] (15,-1; 9,-1), time: 15.5761s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[1e-05,1.8269792998037417] (15,-1; 9,-1), time: 15.5532s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[-1.1658367591488181,0.16021145869566428] (9,-1; 9,-1), time: 30.1511s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-0.4689322640987409,0.43962800083647413] (9,-1; 9,-1), time: 30.0071s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[1e-05,1.7957874467095463] (15,-1; 9,-1), time: 15.5937s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[1e-05,2.08825257372739] (15,-1; 9,-1), time: 15.4909s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[1e-05,2.2142839877948455] (15,-1; 9,-1), time: 17.0123s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[1e-05,1.5057175670313991] (15,-1; 9,-1), time: 17.9580s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,1.5887304772818263] (15,-1; 9,-1), time: 15.6047s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[1e-05,4.2443315940913395] (15,-1; 9,-1), time: 15.5994s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4935s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[1e-05,1.3062295556882277] (15,-1; 9,-1), time: 26.0737s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[-0.38160065248689606,1.0541329798017138] (9,-1; 9,-1), time: 30.0194s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-1.1006952465344244,0.01682812790011013] (9,-1; 9,-1), time: 30.0350s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-1.1291878758928484,0.09757390978720534] (9,-1; 9,-1), time: 30.2843s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[1e-05,3.041695549116285] (15,-1; 9,-1), time: 15.5229s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[1e-05,2.0479191612274907] (15,-1; 9,-1), time: 15.5624s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[1e-05,3.0710769810597136] (15,-1; 9,-1), time: 15.5637s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[1e-05,3.3429031948432253] (15,-1; 9,-1), time: 15.4418s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-0.21901303558566407,1.001858042197366] (9,-1; 9,-1), time: 30.0140s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-0.983361921183811,0.14801661726018311] (9,-1; 9,-1), time: 30.0144s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[1e-05,1.3771305595111347] (15,-1; 9,-1), time: 15.4739s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[1e-05,1.1485216274329706] (15,-1; 9,-1), time: 23.5489s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-0.5167788975415211,0.9369685216303519] (9,-1; 9,-1), time: 30.0105s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[1e-05,2.506420426606611] (15,-1; 9,-1), time: 15.5366s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[1e-05,3.84104038909961] (15,-1; 9,-1), time: 15.4898s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[1e-05,2.752377167566272] (15,-1; 9,-1), time: 15.8711s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[1e-05,1.99960474811109] (15,-1; 9,-1), time: 15.4321s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-0.18543897647595392,0.7347228140917258] (9,-1; 9,-1), time: 30.1001s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[1e-05,3.3063274648797725] (15,-1; 9,-1), time: 15.5243s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.25858746745208017,1.324590504039997] (9,-1; 9,-1), time: 30.0718s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-1.0862552228491236,0.1748872230335204] (9,-1; 9,-1), time: 30.0212s, #vars: 1451, #constrs: 799, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-0.14014617987143108,0.6966966340520223] (9,-1; 9,-1), time: 30.3219s, #vars: 1451, #constrs: 799, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(53, -1), (89, -1), (7, -1), (70, -1), (3, -1), (26, -1), (9, -1), (77, -1), (44, -1), (60, -1), (2, -1), (45, -1), (61, -1), (91, -1), (46, -1), (20, -1), (4, -1), (31, -1), (8, -1), (87, -1), (30, -1), (40, -1), (80, -1), (27, -1), (50, -1), (86, -1), (76, 1), (43, 1), (83, 1), (0, 1), (62, -1), (95, -1), (11, 1), (90, 1), (56, 1), (92, 1), (52, -1), (29, 1), (55, 1), (38, 1), (28, 1), (78, 1), (94, 1), (6, 1), (5, 1), (15, 1), (39, 1), (24, 1), (41, 1), (19, 1)]
best_l after optimization: -10.74393367767334
beta sum per layer: []
alpha/beta optimization time: 6.8694188594818115
alpha-CROWN with intermediate bounds by MIP: tensor([[ 0.97655392, -3.61338902, -0.57120800, -2.36924171, -0.03163052,
          0.59445763, -2.64103603, -1.85437012, -1.23406982]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 129.27178955078125, ub improved 153.4566192626953, time 150.1065
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_2', 'lay10_24', 'lay10_11', 'lay10_58', 'lay10_49', 'lay10_3', 'lay10_69', 'lay10_34', 'lay10_44', 'lay10_43', 'lay10_61', 'lay10_64', 'lay10_40', 'lay10_27', 'lay10_13', 'lay10_17', 'lay10_78', 'lay10_67', 'lay10_6', 'lay10_79', 'lay10_87', 'lay10_99', 'lay10_30', 'lay10_74', 'lay10_51', 'lay10_7', 'lay10_97', 'lay10_31', 'lay10_86', 'lay10_90', 'lay10_25', 'lay10_71', 'lay10_47', 'lay10_63', 'lay10_45', 'lay10_18', 'lay10_91', 'lay10_15', 'lay10_9', 'lay10_33', 'lay10_42', 'lay10_19', 'lay10_81', 'lay10_12', 'lay10_26', 'lay10_53', 'lay10_35', 'lay10_88', 'lay10_41', 'lay10_36', 'lay10_39', 'lay10_14', 'lay10_80', 'lay10_66', 'lay10_46', 'lay10_95', 'lay10_37', 'lay10_60', 'lay10_70', 'lay10_55', 'lay10_68', 'lay10_57', 'lay10_10', 'lay10_75', 'lay10_77', 'lay10_32', 'lay10_83', 'lay10_4', 'lay10_54', 'lay10_16', 'lay10_23', 'lay10_82', 'lay10_65', 'lay10_1', 'lay10_5', 'lay10_48', 'lay10_8', 'lay10_89', 'lay10_85', 'lay10_0', 'lay10_73', 'lay10_72', 'lay10_84', 'lay10_38', 'lay10_98', 'lay10_21', 'lay10_94', 'lay10_20', 'lay10_93', 'lay10_28', 'lay10_92', 'lay10_56', 'lay10_62', 'lay10_59', 'lay10_76', 'lay10_96', 'lay10_22', 'lay10_52', 'lay10_29', 'lay10_50'] filter: 1.0
Solving MIP for lay10_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6498s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6486s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6632s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6575s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6890s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7229s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0147s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4735s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8770s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7685s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8374s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 14.3827s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-1.5355611515890026,0.2408497921185505] (9,-1; 9,-1), time: 30.0164s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-0.6786911830831266,0.7348989956701438] (9,-1; 9,-1), time: 30.0196s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-1.9670427106496489,0.1578562829604701] (9,-1; 9,-1), time: 30.0242s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-1.3156906482511044,0.28295650014471474] (9,-1; 9,-1), time: 30.0206s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-1.2475315774922235,0.6177725713780525] (9,-1; 9,-1), time: 30.0191s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-2.077705609451844,0.08302786824504782] (9,-1; 9,-1), time: 30.0289s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-0.43974428409192573,1.555068121063444] (9,-1; 9,-1), time: 30.0131s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[-0.9101012907670676,0.2851711710678107] (9,-1; 9,-1), time: 30.0126s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[-0.22147649774277484,1.2031608933851297] (9,-1; 9,-1), time: 30.0158s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-1.3046182351270292,0.83489441585233] (9,-1; 9,-1), time: 30.0210s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6668s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[-1.1495045677401503,0.1913800663298148] (9,-1; 9,-1), time: 30.0147s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-1.948943943983875,0.06646943310916432] (9,-1; 9,-1), time: 30.0222s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6185s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-1.6282599596852059,0.1703139140268603] (9,-1; 9,-1), time: 30.0187s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8310s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-1.0049185026736946,0.6562800961269759] (9,-1; 9,-1), time: 30.0133s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-0.9250130370813122,0.5385968226069632] (9,-1; 9,-1), time: 30.0170s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.9086s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.5770s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-0.7612301854937302,1.2156049973479635] (9,-1; 9,-1), time: 30.0137s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.3609s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-0.5426109391579619,1.1444789629271481] (9,-1; 9,-1), time: 30.0132s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[-0.8040190071926173,0.6026038772264751] (9,-1; 9,-1), time: 30.0136s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[-0.4165320399808004,1.9539815231042565] (9,-1; 9,-1), time: 30.0191s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[-0.8772010481031806,0.4996555689263658] (9,-1; 9,-1), time: 30.0180s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-1.5632757185180604,0.43206100487993077] (9,-1; 9,-1), time: 30.0322s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-0.3963583337973147,1.164334696667066] (9,-1; 9,-1), time: 30.0217s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-1.1703323989934415,0.04123898411328649] (9,-1; 9,-1), time: 30.0132s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[-0.07397482187570062,1.6951880659007759] (9,-1; 9,-1), time: 30.0143s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.7162547546578139,0.6046513477828566] (9,-1; 9,-1), time: 30.0120s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[-0.2748672088359186,1.1549447137712343] (9,-1; 9,-1), time: 30.0372s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7115s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-0.9794583914841929,0.6009187892377394] (9,-1; 9,-1), time: 30.0114s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[-0.27680803289201944,1.688230156418088] (9,-1; 9,-1), time: 30.0144s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8010s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-1.4322218125683839,0.6221069340037051] (9,-1; 9,-1), time: 30.0235s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.3873s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-0.5272118038109102,0.7927255975366064] (9,-1; 9,-1), time: 30.0140s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-1.2722243416012355,0.34029693289311425] (9,-1; 9,-1), time: 30.0133s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[1e-05,2.050299247107469] (15,-1; 9,-1), time: 15.6290s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[1e-05,1.4885829485389406] (15,-1; 9,-1), time: 16.5775s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-0.9591528705523337,0.6346173418350726] (9,-1; 9,-1), time: 30.0138s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[1e-05,2.2077821559906567] (15,-1; 9,-1), time: 27.5869s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-1.7973819902706591,0.21014484269609474] (9,-1; 9,-1), time: 30.0149s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.38277584118441993,1.126346136476387] (9,-1; 9,-1), time: 30.0188s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-1.4486643422474421,0.4283929268702589] (9,-1; 9,-1), time: 30.0577s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-0.4186220586572717,0.7349252141457587] (9,-1; 9,-1), time: 30.0114s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-1.2047536118170445,0.10656024164677264] (9,-1; 9,-1), time: 30.0281s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.9435462349503405,0.3698219051960888] (9,-1; 9,-1), time: 30.0156s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-0.15340895004530208,1.6749050450846883] (9,-1; 9,-1), time: 30.0139s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-0.39680675976648455,0.8857091878424056] (9,-1; 9,-1), time: 30.0108s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-0.4868802578953583,0.8189701143103912] (9,-1; 9,-1), time: 30.0108s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-1.212777928550784,0.03651912457202538] (9,-1; 9,-1), time: 30.0134s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[1e-05,2.083261853215757] (15,-1; 9,-1), time: 15.5610s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-0.20499189456720696,1.8925962880394185] (9,-1; 9,-1), time: 30.0118s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-1.5854244759798486,0.06494933195136866] (9,-1; 9,-1), time: 30.0113s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 14.4408s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[1e-05,1.9879104822498026] (15,-1; 9,-1), time: 17.5238s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[1e-05,3.6144199869120723] (15,-1; 9,-1), time: 15.5913s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[1e-05,2.6115982801740105] (15,-1; 9,-1), time: 15.6737s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-1.1103533042315317,0.5312249337124884] (9,-1; 9,-1), time: 30.0955s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-0.453940818258712,0.6109878351891573] (9,-1; 9,-1), time: 30.0118s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[1e-05,2.209522665512758] (15,-1; 9,-1), time: 15.5687s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[1e-05,4.088514159249784] (15,-1; 9,-1), time: 15.6111s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[1e-05,5.53140468420551] (15,-1; 9,-1), time: 15.5921s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.6746044141274724,0.7806236303068048] (9,-1; 9,-1), time: 30.0133s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-0.35768548095729924,1.0841789535859556] (9,-1; 9,-1), time: 30.0198s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7608s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-0.3363300228721581,1.5592321331562045] (9,-1; 9,-1), time: 30.0382s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-0.2598893633910371,1.1150202241850051] (9,-1; 9,-1), time: 30.0321s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[1e-05,3.31346580256295] (15,-1; 9,-1), time: 15.5632s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[1e-05,2.562359006069635] (15,-1; 9,-1), time: 15.6860s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[1e-05,2.0647745735774246] (15,-1; 9,-1), time: 17.8142s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[1e-05,2.3590541777389995] (15,-1; 9,-1), time: 17.0960s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-1.8879076106802501,0.21029960893686417] (9,-1; 9,-1), time: 30.0115s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[1e-05,1.877123338160683] (15,-1; 9,-1), time: 28.9108s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-0.44829410572774564,0.6529324087220016] (9,-1; 9,-1), time: 30.0088s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[1e-05,4.108053006045446] (15,-1; 9,-1), time: 15.6222s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-0.5326284639104991,0.7270976465267682] (9,-1; 9,-1), time: 30.0124s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-0.03213759705666595,1.8850341639787733] (9,-1; 9,-1), time: 30.0111s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[1e-05,4.03539448478976] (15,-1; 9,-1), time: 15.5492s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[1e-05,2.264572238991497] (15,-1; 9,-1), time: 15.6603s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[1e-05,4.21940738333526] (15,-1; 9,-1), time: 15.5831s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[1e-05,4.105652203061847] (15,-1; 9,-1), time: 15.5558s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[1e-05,2.35756526038049] (15,-1; 9,-1), time: 15.4446s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-0.30331571359427406,0.8643801819133085] (9,-1; 9,-1), time: 30.0119s, #vars: 1665, #constrs: 1070, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-0.12387921160152301,1.2896123111276911] (9,-1; 9,-1), time: 30.0089s, #vars: 1665, #constrs: 1070, improved: True
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(49, -1), (61, 1), (82, -1), (23, -1), (7, -1), (52, -1), (85, -1), (62, -1), (0, -1), (98, -1), (9, -1), (2, -1), (25, -1), (60, -1), (74, 1), (79, -1), (43, 1), (24, -1), (99, -1), (50, 1), (97, -1), (53, 1), (55, -1), (63, 1), (95, 1), (54, 1), (19, 1), (51, 1), (69, 1), (22, 1), (38, 1), (15, 1), (33, 1), (73, 1), (34, 1), (65, 1), (27, -1), (83, 1), (96, 1), (28, 1), (39, 1), (36, 1), (31, 1)]
best_l after optimization: 10.796525955200195
beta sum per layer: []
alpha/beta optimization time: 7.130347728729248
alpha-CROWN with intermediate bounds by MIP: tensor([[ 3.46740627, -1.36954546,  1.82167625,  0.24874067,  2.49767971,
          2.50698996, -0.46446323,  0.42434788,  1.66369438]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 319.6897888183594, ub improved 387.1242370605469, time 153.8922
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=10, bias=True) 5 12 torch.Size([9, 1])
MIP finished with 451.96800208091736s
Run final alpha-CROWN after MIP solving on layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
best_l after optimization: 17.52722930908203
beta sum per layer: []
alpha/beta optimization time: 6.036639928817749
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 4.09531307, -0.58339739,  2.71727896,  1.01504183,  3.29691076,
          3.14128685,  0.17777824,  1.13961887,  2.52739763]], device='cuda:0') None
Split layers:
  BoundLinear(name=/input.11, inputs=[/26, /7, /8]): [(BoundRelu(name=/28, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.3, inputs=[/22, /3, /4]): [(BoundRelu(name=/24, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.7, inputs=[/24, /5, /6]): [(BoundRelu(name=/26, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.15, inputs=[/28, /9, /10]): [(BoundRelu(name=/30, inputs=[/input.15]), 0)]
  BoundLinear(name=/input, inputs=[/20, /1, /2]): [(BoundRelu(name=/22, inputs=[/input]), 0)]
refined global lb: tensor([[ 4.09531307],
        [-0.58339739],
        [ 2.71727896],
        [ 1.01504183],
        [ 3.29691076],
        [ 3.14128685],
        [ 0.17777824],
        [ 1.13961887],
        [ 2.52739763]], device='cuda:0') min: tensor(-0.58339739, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 427.4362053871155
##### Instance 0 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.09531307220459.

Properties batch 1, size 1
Remaining timeout: 427.34660267829895
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.58339739]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundShape(name=/13, inputs=[/0])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundGather(name=/15, inputs=[/13, /14])
  (/16): BoundConstant(name=/16, inputs=[])
  (/17): BoundUnsqueeze(name=/17, inputs=[/15])
  (/18): BoundUnsqueeze(name=/18, inputs=[/16])
  (/19): BoundConcat(name=/19, inputs=[/17, /18])
  (/20): BoundReshape(name=/20, inputs=[/0, /19])
  (/input): BoundLinear(name=/input, inputs=[/20, /1, /2])
  (/22): BoundRelu(name=/22, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/22, /3, /4])
  (/24): BoundRelu(name=/24, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/24, /5, /6])
  (/26): BoundRelu(name=/26, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/26, /7, /8])
  (/28): BoundRelu(name=/28, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/28, /9, /10])
  (/30): BoundRelu(name=/30, inputs=[/input.15])
  (/31): BoundLinear(name=/31, inputs=[/30, /11, /12])
)
Model prediction is: tensor([-4.36576366, 10.45044041,  1.05107152, -2.95799756,  0.61751610,
        -2.66855431, -2.13231516,  1.12672365,  1.28850818, -2.20466447],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /22 start_node /31 with alignment adjustment
setting alpha for layer /24 start_node /31 with alignment adjustment
setting alpha for layer /26 start_node /31 with alignment adjustment
setting alpha for layer /28 start_node /31 with alignment adjustment
setting alpha for layer /30 start_node /31 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.58339739]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input.11,/input.3,/input.7,/input.15,/input,/31
Split layers:
  BoundLinear(name=/input.11, inputs=[/26, /7, /8]): [(BoundRelu(name=/28, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.7, inputs=[/24, /5, /6]): [(BoundRelu(name=/26, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.15, inputs=[/28, /9, /10]): [(BoundRelu(name=/30, inputs=[/input.15]), 0)]
  BoundLinear(name=/input, inputs=[/20, /1, /2]): [(BoundRelu(name=/22, inputs=[/input]), 0)]
  BoundLinear(name=/input.3, inputs=[/22, /3, /4]): [(BoundRelu(name=/24, inputs=[/input.3]), 0)]
Keeping slopes for these layers: ['/31']
Keeping slopes for these layers: ['/31']
Node /22 input 0: size torch.Size([100]) unstable 45
Node /24 input 0: size torch.Size([100]) unstable 43
Node /26 input 0: size torch.Size([100]) unstable 45
Node /28 input 0: size torch.Size([100]) unstable 57
Node /30 input 0: size torch.Size([100]) unstable 56
-----------------
# of unstable neurons: 246
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.11, 90] 
split level 1: [/input.15, 78] 
split level 2: [/input, 21] 
split level 3: [/input.15, 27] 
split level 4: [/input.15, 6] 
split level 5: [/input.15, 97] 
pruning_in_iteration open status: True
ratio of positive domain = 60 / 64 = 0.9375
pruning-in-iteration extra time: 0.01659393310546875
Time: prepare 0.0184    beta_bound 0.7249    bound 0.7250    transfer 0.0005    finalize 0.0064    func 0.7504    
Accumulated time: func 0.7504    prepare 0.0196    bound 0.7250    beta_bound 0.7249    transfer 0.0005    finalize 0.0064    
batch bounding time:  0.7506463527679443
Current worst splitting domains lb-rhs (depth):
-0.23627 (6), -0.21719 (6), -0.12706 (6), -0.10529 (6), 
length of domains: 4
Time: pickout 0.0018    decision 0.2968    set_bounds 0.0028    solve 0.7507    add 0.0014    
Accumulated time: pickout 0.0018    decision 0.2968    set_bounds 0.0028    solve 0.7507    add 0.0014    
Current (lb-rhs): -0.2362689971923828
4 domains visited
Cumulative time: 1.1019232273101807

BaB round 2
batch: 4
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.7, 59] [/input.7, 59] [/input.7, 59] [/input.7, 59] 
split level 1: [/input, 1] [/input, 1] [/input, 1] [/input, 1] 
split level 2: [/input, 42] [/input, 42] [/input, 42] [/input, 42] 
split level 3: [/input.3, 61] [/input.3, 61] [/input.3, 61] [/input.3, 61] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 8.916854858398438e-05
Time: prepare 0.0101    beta_bound 0.0091    bound 0.0092    transfer 0.0002    finalize 0.0065    func 0.0261    
Accumulated time: func 0.7765    prepare 0.0305    bound 0.7342    beta_bound 0.7340    transfer 0.0007    finalize 0.0129    
batch bounding time:  0.026183605194091797
length of domains: 0
Time: pickout 0.0011    decision 0.0361    set_bounds 0.0022    solve 0.0262    add 0.0001    
Accumulated time: pickout 0.0029    decision 0.3329    set_bounds 0.0050    solve 0.7769    add 0.0015    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
4 domains visited
Cumulative time: 1.1682894229888916


Properties batch 2, size 1
Remaining timeout: 426.0637764930725
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.7172789573669434.

Properties batch 3, size 1
Remaining timeout: 426.0017125606537
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.0150418281555176.

Properties batch 4, size 1
Remaining timeout: 425.9413924217224
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.2969107627868652.

Properties batch 5, size 1
Remaining timeout: 425.88232946395874
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.141286849975586.

Properties batch 6, size 1
Remaining timeout: 425.82038044929504
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.1777782440185547.

Properties batch 7, size 1
Remaining timeout: 425.762508392334
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.1396188735961914.

Properties batch 8, size 1
Remaining timeout: 425.70471930503845
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.527397632598877.
Result: safe in 474.3531 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):474.3483134245195, max time: 474.3530569076538
mean time for verified SAFE instances(total 1): 474.3530569076538, max time: 474.3530569076538
safe (total 1), index: [0]
