Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_conv_small
  path: mnist_conv_small_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 113
  end: 114
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: MNIST_ERAN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.12
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 2048
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 180
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 100
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 16:40:22 2023 on zeratul
Sequential(
  (0): Conv2d(1, 16, kernel_size=(4, 4), stride=(2, 2))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2))
  (3): ReLU()
  (4): Flatten()
  (5): Linear(in_features=800, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(2.82148671) tensor(-0.42421296) tensor(-0.02737886)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_conv_small]_start=113_end=114_iter=20_b=2048_timeout=180_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 113 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=100, alpha=0.09737099707126617, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.67637801, -5.84323406, -1.16146958,  2.59204698,  1.52108049,
         -3.54847836, -8.46722603,  4.34215832,  1.59779704, 12.65482426]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.11587358, -4.00296831, -0.67258966,  2.69871163, -0.26829070,
          -2.85894871, -8.97645092,  6.70435238,  1.63773000,  8.79228115],
         [-3.11587358, -4.00296831, -0.67258966,  2.69871163, -0.26829070,
          -2.85894871, -8.97645092,  6.70435238,  1.63773000,  8.79228115]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[11.90815449, 12.79524994,  9.46487045,  6.09356976,  9.06057167,
          11.65122986, 17.76873207,  2.08792877,  7.15455103]]],
       device='cuda:0')
number of violation:  0
Attack finished in 2.1525 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/input): BoundConv(name=/input, inputs=[/input.1, /1, /2])
  (/input.4): BoundRelu(name=/input.4, inputs=[/input])
  (/input.8): BoundConv(name=/input.8, inputs=[/input.4, /3, /4])
  (/12): BoundRelu(name=/12, inputs=[/input.8])
  (/13): BoundShape(name=/13, inputs=[/12])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundGather(name=/15, inputs=[/13, /14])
  (/16): BoundConstant(name=/16, inputs=[])
  (/17): BoundUnsqueeze(name=/17, inputs=[/15])
  (/18): BoundUnsqueeze(name=/18, inputs=[/16])
  (/19): BoundConcat(name=/19, inputs=[/17, /18])
  (/20): BoundReshape(name=/20, inputs=[/12, /19])
  (/input.12): BoundLinear(name=/input.12, inputs=[/20, /5, /6])
  (/22): BoundRelu(name=/22, inputs=[/input.12])
  (/23): BoundLinear(name=/23, inputs=[/22, /7, /8])
)
Model prediction is: tensor([[-3.67637801, -5.84323406, -1.16146958,  2.59204698,  1.52108049,
         -3.54847836, -8.46722603,  4.34215832,  1.59779704, 12.65482426]],
       device='cuda:0')
layer /input.4 using sparse-features alpha with shape [942]; unstable size 942; total size 2704 (torch.Size([1, 16, 13, 13]))
layer /input.4 start_node /input.8 using sparse-spec alpha with unstable size 146 total_size 800 output_shape (32, 5, 5)
layer /input.4 start_node /input.12 using sparse-spec alpha with unstable size 33 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /23 using full alpha with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 800 (torch.Size([1, 32, 5, 5]))
layer /12 start_node /input.12 using sparse-spec alpha with unstable size 33 total_size 100 output_shape torch.Size([100])
layer /12 start_node /23 using full alpha with unstable size None total_size 9 output_shape 9
layer /22 using sparse-features alpha with shape [33]; unstable size 33; total size 100 (torch.Size([1, 100]))
layer /22 start_node /23 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.54246616,  0.65112305, -2.17505169, -2.45605278, -3.09565544,
          2.72957134,  5.75105667, -6.52239513, -2.15883446]], device='cuda:0') None
best_l after optimization: 4.03497314453125
alpha/beta optimization time: 6.642609119415283
initial alpha-CROWN bounds: tensor([[ 4.19408321,  1.67141151, -1.26607418, -1.73119831, -2.21133804,
          3.53207588,  6.52435017, -5.34757519, -1.33076191]], device='cuda:0')
Worst class: (+ rhs) -5.3475751876831055
Split layers:
  BoundConv(name=/input, inputs=[/input.1, /1, /2]): [(BoundRelu(name=/input.4, inputs=[/input]), 0)]
  BoundLinear(name=/input.12, inputs=[/20, /5, /6]): [(BoundRelu(name=/22, inputs=[/input.12]), 0)]
  BoundConv(name=/input.8, inputs=[/input.4, /3, /4]): [(BoundRelu(name=/12, inputs=[/input.8]), 0)]
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 16, 13, 13]), torch.Size([1, 9, 32, 5, 5]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 165.2071328163147
##### Instance 0 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.194083213806152.

Properties batch 1, size 1
Remaining timeout: 165.12691831588745
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.6714115142822266.

Properties batch 2, size 1
Remaining timeout: 165.06886839866638
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-1.26607418]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/input): BoundConv(name=/input, inputs=[/input.1, /1, /2])
  (/input.4): BoundRelu(name=/input.4, inputs=[/input])
  (/input.8): BoundConv(name=/input.8, inputs=[/input.4, /3, /4])
  (/12): BoundRelu(name=/12, inputs=[/input.8])
  (/13): BoundShape(name=/13, inputs=[/12])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundGather(name=/15, inputs=[/13, /14])
  (/16): BoundConstant(name=/16, inputs=[])
  (/17): BoundUnsqueeze(name=/17, inputs=[/15])
  (/18): BoundUnsqueeze(name=/18, inputs=[/16])
  (/19): BoundConcat(name=/19, inputs=[/17, /18])
  (/20): BoundReshape(name=/20, inputs=[/12, /19])
  (/input.12): BoundLinear(name=/input.12, inputs=[/20, /5, /6])
  (/22): BoundRelu(name=/22, inputs=[/input.12])
  (/23): BoundLinear(name=/23, inputs=[/22, /7, /8])
)
Model prediction is: tensor([-3.67637801, -5.84323406, -1.16146958,  2.59204698,  1.52108049,
        -3.54847836, -8.46722603,  4.34215832,  1.59779704, 12.65482426],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /23 with alignment adjustment
setting alpha for layer /12 start_node /23 with alignment adjustment
setting alpha for layer /22 start_node /23 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 13, 13]), torch.Size([1, 1, 32, 5, 5]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-1.26607418]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.12,/input.8,/23
Split layers:
  BoundLinear(name=/input.12, inputs=[/20, /5, /6]): [(BoundRelu(name=/22, inputs=[/input.12]), 0)]
  BoundConv(name=/input.8, inputs=[/input.4, /3, /4]): [(BoundRelu(name=/12, inputs=[/input.8]), 0)]
  BoundConv(name=/input, inputs=[/input.1, /1, /2]): [(BoundRelu(name=/input.4, inputs=[/input]), 0)]
Keeping slopes for these layers: ['/23']
Keeping slopes for these layers: ['/23']
Node /input.4 input 0: size torch.Size([16, 13, 13]) unstable 942
Node /12 input 0: size torch.Size([32, 5, 5]) unstable 146
Node /22 input 0: size torch.Size([100]) unstable 33
-----------------
# of unstable neurons: 1121
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.12, 1] 
split level 1: [/input.12, 17] 
split level 2: [/input.12, 89] 
split level 3: [/input.12, 96] 
split level 4: [/input.12, 58] 
split level 5: [/input.12, 33] 
split level 6: [/input.12, 7] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 9.369850158691406e-05
Time: prepare 0.0067    beta_bound 0.0110    bound 0.0111    transfer 0.0007    finalize 0.0060    func 0.0246    
Accumulated time: func 0.0246    prepare 0.0077    bound 0.0111    beta_bound 0.0110    transfer 0.0007    finalize 0.0060    
batch bounding time:  0.02480340003967285
length of domains: 0
Time: pickout 0.0016    decision 0.4412    set_bounds 0.0025    solve 0.0248    add 0.0003    
Accumulated time: pickout 0.0016    decision 0.4412    set_bounds 0.0025    solve 0.0248    add 0.0003    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.5521764755249023


Properties batch 3, size 1
Remaining timeout: 164.37511610984802
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-1.73119831]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/input): BoundConv(name=/input, inputs=[/input.1, /1, /2])
  (/input.4): BoundRelu(name=/input.4, inputs=[/input])
  (/input.8): BoundConv(name=/input.8, inputs=[/input.4, /3, /4])
  (/12): BoundRelu(name=/12, inputs=[/input.8])
  (/13): BoundShape(name=/13, inputs=[/12])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundGather(name=/15, inputs=[/13, /14])
  (/16): BoundConstant(name=/16, inputs=[])
  (/17): BoundUnsqueeze(name=/17, inputs=[/15])
  (/18): BoundUnsqueeze(name=/18, inputs=[/16])
  (/19): BoundConcat(name=/19, inputs=[/17, /18])
  (/20): BoundReshape(name=/20, inputs=[/12, /19])
  (/input.12): BoundLinear(name=/input.12, inputs=[/20, /5, /6])
  (/22): BoundRelu(name=/22, inputs=[/input.12])
  (/23): BoundLinear(name=/23, inputs=[/22, /7, /8])
)
Model prediction is: tensor([-3.67637801, -5.84323406, -1.16146958,  2.59204698,  1.52108049,
        -3.54847836, -8.46722603,  4.34215832,  1.59779704, 12.65482426],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /23 with alignment adjustment
setting alpha for layer /12 start_node /23 with alignment adjustment
setting alpha for layer /22 start_node /23 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 13, 13]), torch.Size([1, 1, 32, 5, 5]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-1.73119831]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.12,/input.8,/23
Split layers:
  BoundLinear(name=/input.12, inputs=[/20, /5, /6]): [(BoundRelu(name=/22, inputs=[/input.12]), 0)]
  BoundConv(name=/input.8, inputs=[/input.4, /3, /4]): [(BoundRelu(name=/12, inputs=[/input.8]), 0)]
  BoundConv(name=/input, inputs=[/input.1, /1, /2]): [(BoundRelu(name=/input.4, inputs=[/input]), 0)]
Keeping slopes for these layers: ['/23']
Keeping slopes for these layers: ['/23']
Node /input.4 input 0: size torch.Size([16, 13, 13]) unstable 942
Node /12 input 0: size torch.Size([32, 5, 5]) unstable 146
Node /22 input 0: size torch.Size([100]) unstable 33
-----------------
# of unstable neurons: 1121
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.12, 1] 
split level 1: [/input.12, 7] 
split level 2: [/input.12, 96] 
split level 3: [/input.12, 10] 
split level 4: [/input.12, 36] 
split level 5: [/input.12, 89] 
split level 6: [/input.8, 586] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 0.0001125335693359375
Time: prepare 0.0071    beta_bound 0.0154    bound 0.0155    transfer 0.0007    finalize 0.0112    func 0.0347    
Accumulated time: func 0.0347    prepare 0.0082    bound 0.0155    beta_bound 0.0154    transfer 0.0007    finalize 0.0112    
batch bounding time:  0.03479194641113281
length of domains: 0
Time: pickout 0.0007    decision 0.0484    set_bounds 0.0025    solve 0.0348    add 0.0001    
Accumulated time: pickout 0.0007    decision 0.0484    set_bounds 0.0025    solve 0.0348    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.09499335289001465


Properties batch 4, size 1
Remaining timeout: 164.1467843055725
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-2.21133804]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/input): BoundConv(name=/input, inputs=[/input.1, /1, /2])
  (/input.4): BoundRelu(name=/input.4, inputs=[/input])
  (/input.8): BoundConv(name=/input.8, inputs=[/input.4, /3, /4])
  (/12): BoundRelu(name=/12, inputs=[/input.8])
  (/13): BoundShape(name=/13, inputs=[/12])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundGather(name=/15, inputs=[/13, /14])
  (/16): BoundConstant(name=/16, inputs=[])
  (/17): BoundUnsqueeze(name=/17, inputs=[/15])
  (/18): BoundUnsqueeze(name=/18, inputs=[/16])
  (/19): BoundConcat(name=/19, inputs=[/17, /18])
  (/20): BoundReshape(name=/20, inputs=[/12, /19])
  (/input.12): BoundLinear(name=/input.12, inputs=[/20, /5, /6])
  (/22): BoundRelu(name=/22, inputs=[/input.12])
  (/23): BoundLinear(name=/23, inputs=[/22, /7, /8])
)
Model prediction is: tensor([-3.67637801, -5.84323406, -1.16146958,  2.59204698,  1.52108049,
        -3.54847836, -8.46722603,  4.34215832,  1.59779704, 12.65482426],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /23 with alignment adjustment
setting alpha for layer /12 start_node /23 with alignment adjustment
setting alpha for layer /22 start_node /23 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 13, 13]), torch.Size([1, 1, 32, 5, 5]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-2.21133804]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.12,/input.8,/23
Split layers:
  BoundConv(name=/input.8, inputs=[/input.4, /3, /4]): [(BoundRelu(name=/12, inputs=[/input.8]), 0)]
  BoundLinear(name=/input.12, inputs=[/20, /5, /6]): [(BoundRelu(name=/22, inputs=[/input.12]), 0)]
  BoundConv(name=/input, inputs=[/input.1, /1, /2]): [(BoundRelu(name=/input.4, inputs=[/input]), 0)]
Keeping slopes for these layers: ['/23']
Keeping slopes for these layers: ['/23']
Node /input.4 input 0: size torch.Size([16, 13, 13]) unstable 942
Node /12 input 0: size torch.Size([32, 5, 5]) unstable 146
Node /22 input 0: size torch.Size([100]) unstable 33
-----------------
# of unstable neurons: 1121
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.12, 96] 
split level 1: [/input.12, 7] 
split level 2: [/input.8, 586] 
split level 3: [/input.12, 33] 
split level 4: [/input.12, 63] 
split level 5: [/input.8, 233] 
split level 6: [/input.12, 17] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 0.000156402587890625
Time: prepare 0.0074    beta_bound 0.0284    bound 0.0285    transfer 0.0008    finalize 0.0129    func 0.0496    
Accumulated time: func 0.0496    prepare 0.0084    bound 0.0285    beta_bound 0.0284    transfer 0.0008    finalize 0.0129    
batch bounding time:  0.04974651336669922
length of domains: 0
Time: pickout 0.0010    decision 0.0538    set_bounds 0.0024    solve 0.0498    add 0.0002    
Accumulated time: pickout 0.0010    decision 0.0538    set_bounds 0.0024    solve 0.0498    add 0.0002    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.11818528175354004


Properties batch 5, size 1
Remaining timeout: 163.86218309402466
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.532075881958008.

Properties batch 6, size 1
Remaining timeout: 163.79221296310425
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 6.524350166320801.

Properties batch 7, size 1
Remaining timeout: 163.73034644126892
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-5.34757519]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/input): BoundConv(name=/input, inputs=[/input.1, /1, /2])
  (/input.4): BoundRelu(name=/input.4, inputs=[/input])
  (/input.8): BoundConv(name=/input.8, inputs=[/input.4, /3, /4])
  (/12): BoundRelu(name=/12, inputs=[/input.8])
  (/13): BoundShape(name=/13, inputs=[/12])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundGather(name=/15, inputs=[/13, /14])
  (/16): BoundConstant(name=/16, inputs=[])
  (/17): BoundUnsqueeze(name=/17, inputs=[/15])
  (/18): BoundUnsqueeze(name=/18, inputs=[/16])
  (/19): BoundConcat(name=/19, inputs=[/17, /18])
  (/20): BoundReshape(name=/20, inputs=[/12, /19])
  (/input.12): BoundLinear(name=/input.12, inputs=[/20, /5, /6])
  (/22): BoundRelu(name=/22, inputs=[/input.12])
  (/23): BoundLinear(name=/23, inputs=[/22, /7, /8])
)
Model prediction is: tensor([-3.67637801, -5.84323406, -1.16146958,  2.59204698,  1.52108049,
        -3.54847836, -8.46722603,  4.34215832,  1.59779704, 12.65482426],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /23 with alignment adjustment
setting alpha for layer /12 start_node /23 with alignment adjustment
setting alpha for layer /22 start_node /23 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 13, 13]), torch.Size([1, 1, 32, 5, 5]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-5.34757519]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.12,/input.8,/23
Split layers:
  BoundConv(name=/input.8, inputs=[/input.4, /3, /4]): [(BoundRelu(name=/12, inputs=[/input.8]), 0)]
  BoundConv(name=/input, inputs=[/input.1, /1, /2]): [(BoundRelu(name=/input.4, inputs=[/input]), 0)]
  BoundLinear(name=/input.12, inputs=[/20, /5, /6]): [(BoundRelu(name=/22, inputs=[/input.12]), 0)]
Keeping slopes for these layers: ['/23']
Keeping slopes for these layers: ['/23']
Node /input.4 input 0: size torch.Size([16, 13, 13]) unstable 942
Node /12 input 0: size torch.Size([32, 5, 5]) unstable 146
Node /22 input 0: size torch.Size([100]) unstable 33
-----------------
# of unstable neurons: 1121
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.12, 1] 
split level 1: [/input.12, 86] 
split level 2: [/input.12, 63] 
split level 3: [/input.12, 89] 
split level 4: [/input.12, 7] 
split level 5: [/input.12, 36] 
split level 6: [/input.12, 58] 
pruning_in_iteration open status: True
ratio of positive domain = 98 / 128 = 0.765625
pruning-in-iteration extra time: 0.01579594612121582
Time: prepare 0.0089    beta_bound 0.7898    bound 0.7899    transfer 0.0009    finalize 0.0059    func 0.8057    
Accumulated time: func 0.8057    prepare 0.0102    bound 0.7899    beta_bound 0.7898    transfer 0.0009    finalize 0.0059    
batch bounding time:  0.8058912754058838
Current worst splitting domains lb-rhs (depth):
-2.09798 (7), -1.68217 (7), -1.46695 (7), -1.44963 (7), -1.28483 (7), -1.03836 (7), -0.95534 (7), -0.94284 (7), -0.84791 (7), -0.83804 (7), -0.82118 (7), -0.79509 (7), -0.78611 (7), -0.74266 (7), -0.74001 (7), -0.62929 (7), -0.62519 (7), -0.57090 (7), -0.53514 (7), -0.50753 (7), 
length of domains: 30
Time: pickout 0.0007    decision 0.0522    set_bounds 0.0024    solve 0.8059    add 0.0019    
Accumulated time: pickout 0.0007    decision 0.0522    set_bounds 0.0024    solve 0.8059    add 0.0019    
Current (lb-rhs): -2.0979795455932617
30 domains visited
Cumulative time: 0.8717727661132812

BaB round 2
batch: 30
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.12, 17] [/input.12, 17] [/input.12, 17] [/input.12, 96] [/input.12, 96] [/input.8, 233] [/input.8, 233] [/input.8, 233] [/input.8, 233] [/input.8, 233] 
split level 1: [/input.8, 586] [/input.8, 586] [/input.8, 586] [/input.12, 17] [/input.8, 586] [/input.12, 17] [/input.8, 586] [/input.8, 586] [/input.12, 17] [/input.12, 17] 
pruning_in_iteration open status: True
ratio of positive domain = 90 / 120 = 0.75
pruning-in-iteration extra time: 0.012287616729736328
Time: prepare 0.0090    beta_bound 0.3889    bound 0.3890    transfer 0.0010    finalize 0.0095    func 0.4086    
Accumulated time: func 1.2143    prepare 0.0198    bound 1.1789    beta_bound 1.1787    transfer 0.0019    finalize 0.0154    
batch bounding time:  0.4089021682739258
Current worst splitting domains lb-rhs (depth):
-1.47962 (9), -1.25663 (9), -0.95853 (9), -0.88726 (9), -0.83324 (9), -0.82740 (9), -0.71911 (9), -0.65548 (9), -0.60700 (9), -0.60303 (9), -0.54003 (9), -0.52103 (9), -0.46147 (9), -0.45814 (9), -0.44316 (9), -0.40436 (9), -0.37645 (9), -0.30434 (9), -0.29305 (9), -0.25189 (9), 
length of domains: 30
Time: pickout 0.0009    decision 0.0326    set_bounds 0.0034    solve 0.4089    add 0.0018    
Accumulated time: pickout 0.0016    decision 0.0847    set_bounds 0.0058    solve 1.2148    add 0.0037    
Current (lb-rhs): -1.4796161651611328
60 domains visited
Cumulative time: 1.3200771808624268

BaB round 3
batch: 30
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.12, 65] [/input.12, 65] [/input.12, 65] [/input.8, 586] [/input.12, 17] [/input.12, 96] [/input.12, 65] [/input.12, 65] [/input.12, 65] [/input.12, 65] 
split level 1: [/input.8, 586] [/input.12, 96] [/input.8, 586] [/input.8, 593] [/input.8, 141] [/input.8, 586] [/input.8, 586] [/input.12, 96] [/input.8, 586] [/input.8, 586] 
pruning_in_iteration open status: True
ratio of positive domain = 101 / 120 = 0.8416666666666667
pruning-in-iteration extra time: 0.012563467025756836
Time: prepare 0.0100    beta_bound 0.3504    bound 0.3504    transfer 0.0011    finalize 0.0089    func 0.3706    
Accumulated time: func 1.5849    prepare 0.0303    bound 1.5293    beta_bound 1.5291    transfer 0.0030    finalize 0.0243    
batch bounding time:  0.3712325096130371
Current worst splitting domains lb-rhs (depth):
-0.68646 (11), -0.60959 (11), -0.55271 (11), -0.53264 (11), -0.51121 (11), -0.41122 (11), -0.33777 (11), -0.31152 (11), -0.27138 (11), -0.24235 (11), -0.19265 (11), -0.17144 (11), -0.13761 (11), -0.09702 (11), -0.09096 (11), -0.03925 (11), -0.02427 (11), -0.02308 (11), -0.02202 (11), 
length of domains: 19
Time: pickout 0.0011    decision 0.0286    set_bounds 0.0018    solve 0.3713    add 0.0015    
Accumulated time: pickout 0.0027    decision 0.1134    set_bounds 0.0075    solve 1.5861    add 0.0052    
Current (lb-rhs): -0.6864595413208008
79 domains visited
Cumulative time: 1.7249600887298584

BaB round 4
batch: 19
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/input.8, 141] [/input.12, 65] [/input.12, 65] [/input.12, 65] [/input.8, 632] [/input.8, 593] [/input.12, 65] [/input.12, 65] [/input.12, 65] [/input.12, 65] 
split level 1: [/input.8, 632] [/input.8, 593] [/input.8, 593] [/input.8, 141] [/input.8, 141] [/input.8, 233] [/input.8, 593] [/input.8, 632] [/input.8, 632] [/input.8, 632] 
split level 2: [/input.8, 233] [/input.8, 632] [/input.8, 233] [/input.8, 718] [/input.8, 233] [/input.8, 632] [/input.8, 632] [/input.12, 50] [/input.12, 50] [/input.8, 233] 
pruning_in_iteration open status: True
ratio of positive domain = 148 / 152 = 0.9736842105263158
pruning-in-iteration extra time: 0.012115001678466797
Time: prepare 0.0135    beta_bound 0.3612    bound 0.3612    transfer 0.0010    finalize 0.0096    func 0.3854    
Accumulated time: func 1.9703    prepare 0.0444    bound 1.8905    beta_bound 1.8902    transfer 0.0040    finalize 0.0339    
batch bounding time:  0.3855748176574707
Current worst splitting domains lb-rhs (depth):
-0.16570 (14), -0.09361 (14), -0.09321 (14), -0.02111 (14), 
length of domains: 4
Time: pickout 0.0010    decision 0.0317    set_bounds 0.0022    solve 0.3856    add 0.0011    
Accumulated time: pickout 0.0037    decision 0.1451    set_bounds 0.0098    solve 1.9717    add 0.0063    
Current (lb-rhs): -0.1656951904296875
83 domains visited
Cumulative time: 2.147270441055298

BaB round 5
batch: 4
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/input.8, 136] [/input.8, 136] [/input.8, 136] [/input.8, 136] 
split level 1: [/input.12, 47] [/input.12, 47] [/input.12, 47] [/input.12, 47] 
split level 2: [/input.8, 636] [/input.8, 636] [/input.8, 636] [/input.8, 636] 
split level 3: [/input.12, 50] [/input.12, 50] [/input.12, 50] [/input.12, 50] 
split level 4: [/input.8, 233] [/input.8, 233] [/input.8, 233] [/input.8, 233] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 9.894371032714844e-05
Time: prepare 0.0093    beta_bound 0.0086    bound 0.0087    transfer 0.0007    finalize 0.0072    func 0.0260    
Accumulated time: func 1.9963    prepare 0.0544    bound 1.8992    beta_bound 1.8988    transfer 0.0047    finalize 0.0411    
batch bounding time:  0.02615952491760254
length of domains: 0
Time: pickout 0.0009    decision 0.0357    set_bounds 0.0021    solve 0.0262/home/zhouxingshi/gputest/Verifier_Development/complete_verifier/data_utils.py:234: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp / std).reshape(1, -1, 1, 1)
    add 0.0002    
Accumulated time: pickout 0.0046    decision 0.1808    set_bounds 0.0119    solve 1.9979    add 0.0065    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
83 domains visited
Cumulative time: 2.213012933731079


Properties batch 8, size 1
Remaining timeout: 161.3787636756897
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-1.33076191]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/input): BoundConv(name=/input, inputs=[/input.1, /1, /2])
  (/input.4): BoundRelu(name=/input.4, inputs=[/input])
  (/input.8): BoundConv(name=/input.8, inputs=[/input.4, /3, /4])
  (/12): BoundRelu(name=/12, inputs=[/input.8])
  (/13): BoundShape(name=/13, inputs=[/12])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundGather(name=/15, inputs=[/13, /14])
  (/16): BoundConstant(name=/16, inputs=[])
  (/17): BoundUnsqueeze(name=/17, inputs=[/15])
  (/18): BoundUnsqueeze(name=/18, inputs=[/16])
  (/19): BoundConcat(name=/19, inputs=[/17, /18])
  (/20): BoundReshape(name=/20, inputs=[/12, /19])
  (/input.12): BoundLinear(name=/input.12, inputs=[/20, /5, /6])
  (/22): BoundRelu(name=/22, inputs=[/input.12])
  (/23): BoundLinear(name=/23, inputs=[/22, /7, /8])
)
Model prediction is: tensor([-3.67637801, -5.84323406, -1.16146958,  2.59204698,  1.52108049,
        -3.54847836, -8.46722603,  4.34215832,  1.59779704, 12.65482426],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /23 with alignment adjustment
setting alpha for layer /12 start_node /23 with alignment adjustment
setting alpha for layer /22 start_node /23 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 13, 13]), torch.Size([1, 1, 32, 5, 5]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-1.33076191]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.12,/input.8,/23
Split layers:
  BoundLinear(name=/input.12, inputs=[/20, /5, /6]): [(BoundRelu(name=/22, inputs=[/input.12]), 0)]
  BoundConv(name=/input, inputs=[/input.1, /1, /2]): [(BoundRelu(name=/input.4, inputs=[/input]), 0)]
  BoundConv(name=/input.8, inputs=[/input.4, /3, /4]): [(BoundRelu(name=/12, inputs=[/input.8]), 0)]
Keeping slopes for these layers: ['/23']
Keeping slopes for these layers: ['/23']
Node /input.4 input 0: size torch.Size([16, 13, 13]) unstable 942
Node /12 input 0: size torch.Size([32, 5, 5]) unstable 146
Node /22 input 0: size torch.Size([100]) unstable 33
-----------------
# of unstable neurons: 1121
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.12, 58] 
split level 1: [/input.12, 65] 
split level 2: [/input.12, 17] 
split level 3: [/input.12, 50] 
split level 4: [/input.12, 7] 
split level 5: [/input.12, 89] 
split level 6: [/input.12, 96] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 9.417533874511719e-05
Time: prepare 0.0067    beta_bound 0.0094    bound 0.0094    transfer 0.0007    finalize 0.0059    func 0.0228    
Accumulated time: func 0.0228    prepare 0.0077    bound 0.0094    beta_bound 0.0094    transfer 0.0007    finalize 0.0059    
batch bounding time:  0.022886037826538086
length of domains: 0
Time: pickout 0.0007    decision 0.0476    set_bounds 0.0024    solve 0.0229    add 0.0001    
Accumulated time: pickout 0.0007    decision 0.0476    set_bounds 0.0024    solve 0.0229    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.08204960823059082

Result: safe in 18.8494 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):18.849221803268417, max time: 18.84941029548645
mean time for verified SAFE instances(total 1): 18.84941029548645, max time: 18.84941029548645
safe (total 1), index: [0]
