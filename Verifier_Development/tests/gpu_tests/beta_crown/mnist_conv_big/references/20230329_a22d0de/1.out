Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_conv_big
  path: mnist_conv_big_diffai.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 232
  end: 233
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: MNIST_ERAN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.3
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 256
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 180
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 100
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 13:43:52 2023 on zeratul
Sequential(
  (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(32, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (5): ReLU()
  (6): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): ReLU()
  (8): Flatten()
  (9): Linear(in_features=3136, out_features=512, bias=True)
  (10): ReLU()
  (11): Linear(in_features=512, out_features=512, bias=True)
  (12): ReLU()
  (13): Linear(in_features=512, out_features=10, bias=True)
)
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(2.82148671) tensor(-0.42421296) tensor(-0.02737886)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_conv_big]_start=232_end=233_iter=20_b=256_timeout=180_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 232 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=100, alpha=0.24342750012874603, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.50842690, -2.78271246, -3.05500746, -2.76670527, -2.05509925,
          3.06344914,  2.96421599, -5.58440256,  4.34885597, -0.61086512]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.51995611, -2.83625412, -3.21574163, -2.49149346, -3.62287498,
           3.66882324,  3.05600333, -6.02660179,  3.97759128, -1.27950120],
         [-1.51995611, -2.83625412, -3.21574163, -2.49149346, -3.62287498,
           3.66882324,  3.05600333, -6.02660179,  3.97759128, -1.27950120]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 5.49754715,  6.81384563,  7.19333267,  6.46908474,  7.60046625,
           0.30876803,  0.92158794, 10.00419331,  5.25709248]]],
       device='cuda:0')
number of violation:  0
Attack finished in 3.8682 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundParams(name=/13, inputs=[])
  (/14): BoundParams(name=/14, inputs=[])
  (/input): BoundConv(name=/input, inputs=[/input.1, /1, /2])
  (/input.4): BoundRelu(name=/input.4, inputs=[/input])
  (/input.8): BoundConv(name=/input.8, inputs=[/input.4, /3, /4])
  (/input.12): BoundRelu(name=/input.12, inputs=[/input.8])
  (/input.16): BoundConv(name=/input.16, inputs=[/input.12, /5, /6])
  (/input.20): BoundRelu(name=/input.20, inputs=[/input.16])
  (/input.24): BoundConv(name=/input.24, inputs=[/input.20, /7, /8])
  (/22): BoundRelu(name=/22, inputs=[/input.24])
  (/23): BoundShape(name=/23, inputs=[/22])
  (/24): BoundConstant(name=/24, inputs=[])
  (/25): BoundGather(name=/25, inputs=[/23, /24])
  (/26): BoundConstant(name=/26, inputs=[])
  (/27): BoundUnsqueeze(name=/27, inputs=[/25])
  (/28): BoundUnsqueeze(name=/28, inputs=[/26])
  (/29): BoundConcat(name=/29, inputs=[/27, /28])
  (/30): BoundReshape(name=/30, inputs=[/22, /29])
  (/input.28): BoundLinear(name=/input.28, inputs=[/30, /9, /10])
  (/32): BoundRelu(name=/32, inputs=[/input.28])
  (/input.32): BoundLinear(name=/input.32, inputs=[/32, /11, /12])
  (/34): BoundRelu(name=/34, inputs=[/input.32])
  (/35): BoundLinear(name=/35, inputs=[/34, /13, /14])
)
Model prediction is: tensor([[-1.50842690, -2.78271246, -3.05500746, -2.76670527, -2.05509925,
          3.06344914,  2.96421599, -5.58440256,  4.34885597, -0.61086512]],
       device='cuda:0')
layer /input.4 using sparse-features alpha with shape [593]; unstable size 593; total size 25088 (torch.Size([1, 32, 28, 28]))
layer /input.4 start_node /input.8 using sparse-spec alpha with unstable size 48 total_size 6272 output_shape (32, 14, 14)
layer /input.4 start_node /input.16 using sparse-spec alpha with unstable size 34 total_size 12544 output_shape (64, 14, 14)
layer /input.4 start_node /input.24 using sparse-spec alpha with unstable size 22 total_size 3136 output_shape (64, 7, 7)
layer /input.4 start_node /input.28 using sparse-spec alpha with unstable size 4 total_size 512 output_shape torch.Size([512])
layer /input.4 start_node /input.32 using sparse-spec alpha with unstable size 11 total_size 512 output_shape torch.Size([512])
layer /input.4 start_node /35 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [48]; unstable size 48; total size 6272 (torch.Size([1, 32, 14, 14]))
layer /input.12 start_node /input.16 using sparse-spec alpha with unstable size 34 total_size 12544 output_shape (64, 14, 14)
layer /input.12 start_node /input.24 using sparse-spec alpha with unstable size 22 total_size 3136 output_shape (64, 7, 7)
layer /input.12 start_node /input.28 using sparse-spec alpha with unstable size 4 total_size 512 output_shape torch.Size([512])
layer /input.12 start_node /input.32 using sparse-spec alpha with unstable size 11 total_size 512 output_shape torch.Size([512])
layer /input.12 start_node /35 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.20 using sparse-features alpha with shape [34]; unstable size 34; total size 12544 (torch.Size([1, 64, 14, 14]))
layer /input.20 start_node /input.24 using sparse-spec alpha with unstable size 22 total_size 3136 output_shape (64, 7, 7)
layer /input.20 start_node /input.28 using sparse-spec alpha with unstable size 4 total_size 512 output_shape torch.Size([512])
layer /input.20 start_node /input.32 using sparse-spec alpha with unstable size 11 total_size 512 output_shape torch.Size([512])
layer /input.20 start_node /35 using full alpha with unstable size None total_size 9 output_shape 9
layer /22 using sparse-features alpha with shape [22]; unstable size 22; total size 3136 (torch.Size([1, 64, 7, 7]))
layer /22 start_node /input.28 using sparse-spec alpha with unstable size 4 total_size 512 output_shape torch.Size([512])
layer /22 start_node /input.32 using sparse-spec alpha with unstable size 11 total_size 512 output_shape torch.Size([512])
layer /22 start_node /35 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [4]; unstable size 4; total size 512 (torch.Size([1, 512]))
layer /32 start_node /input.32 using sparse-spec alpha with unstable size 11 total_size 512 output_shape torch.Size([512])
layer /32 start_node /35 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using sparse-features alpha with shape [11]; unstable size 11; total size 512 (torch.Size([1, 512]))
layer /34 start_node /35 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.66079378,  5.06178951,  5.61804628,  4.95026493,  3.18083715,
         -0.66849566, -1.44434333,  7.45653439,  2.78505516]], device='cuda:0') None
best_l after optimization: 42.06489562988281
alpha/beta optimization time: 19.841697454452515
initial alpha-CROWN bounds: tensor([[ 5.19139767,  6.41232967,  6.47228289,  5.69586897,  5.27672434,
          0.19790837, -0.10900736,  8.75565338,  4.17174006]], device='cuda:0')
Worst class: (+ rhs) -0.10900735855102539
Split layers:
  BoundConv(name=/input, inputs=[/input.1, /1, /2]): [(BoundRelu(name=/input.4, inputs=[/input]), 0)]
  BoundConv(name=/input.16, inputs=[/input.12, /5, /6]): [(BoundRelu(name=/input.20, inputs=[/input.16]), 0)]
  BoundConv(name=/input.8, inputs=[/input.4, /3, /4]): [(BoundRelu(name=/input.12, inputs=[/input.8]), 0)]
  BoundLinear(name=/input.32, inputs=[/32, /11, /12]): [(BoundRelu(name=/34, inputs=[/input.32]), 0)]
  BoundConv(name=/input.24, inputs=[/input.20, /7, /8]): [(BoundRelu(name=/22, inputs=[/input.24]), 0)]
  BoundLinear(name=/input.28, inputs=[/30, /9, /10]): [(BoundRelu(name=/32, inputs=[/input.28]), 0)]
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 32, 28, 28]), torch.Size([1, 9, 32, 14, 14]), torch.Size([1, 9, 64, 14, 14]), torch.Size([1, 9, 64, 7, 7]), torch.Size([1, 9, 512]), torch.Size([1, 9, 512])]

Properties batch 0, size 1
Remaining timeout: 147.93977403640747
##### Instance 0 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 5.191397666931152.

Properties batch 1, size 1
Remaining timeout: 147.76725888252258
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 6.41232967376709.

Properties batch 2, size 1
Remaining timeout: 147.68682551383972
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 6.472282886505127.

Properties batch 3, size 1
Remaining timeout: 147.61060500144958
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 5.695868968963623.

Properties batch 4, size 1
Remaining timeout: 147.54034781455994
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 5.276724338531494.

Properties batch 5, size 1
Remaining timeout: 147.46682000160217
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.19790837168693542.

Properties batch 6, size 1
Remaining timeout: 147.3941032886505
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  0.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.10900736]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundParams(name=/13, inputs=[])
  (/14): BoundParams(name=/14, inputs=[])
  (/input): BoundConv(name=/input, inputs=[/input.1, /1, /2])
  (/input.4): BoundRelu(name=/input.4, inputs=[/input])
  (/input.8): BoundConv(name=/input.8, inputs=[/input.4, /3, /4])
  (/input.12): BoundRelu(name=/input.12, inputs=[/input.8])
  (/input.16): BoundConv(name=/input.16, inputs=[/input.12, /5, /6])
  (/input.20): BoundRelu(name=/input.20, inputs=[/input.16])
  (/input.24): BoundConv(name=/input.24, inputs=[/input.20, /7, /8])
  (/22): BoundRelu(name=/22, inputs=[/input.24])
  (/23): BoundShape(name=/23, inputs=[/22])
  (/24): BoundConstant(name=/24, inputs=[])
  (/25): BoundGather(name=/25, inputs=[/23, /24])
  (/26): BoundConstant(name=/26, inputs=[])
  (/27): BoundUnsqueeze(name=/27, inputs=[/25])
  (/28): BoundUnsqueeze(name=/28, inputs=[/26])
  (/29): BoundConcat(name=/29, inputs=[/27, /28])
  (/30): BoundReshape(name=/30, inputs=[/22, /29])
  (/input.28): BoundLinear(name=/input.28, inputs=[/30, /9, /10])
  (/32): BoundRelu(name=/32, inputs=[/input.28])
  (/input.32): BoundLinear(name=/input.32, inputs=[/32, /11, /12])
  (/34): BoundRelu(name=/34, inputs=[/input.32])
  (/35): BoundLinear(name=/35, inputs=[/34, /13, /14])
)/home/zhouxingshi/gputest/Verifier_Development/complete_verifier/data_utils.py:234: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp / std).reshape(1, -1, 1, 1)

Model prediction is: tensor([-1.50842690, -2.78271246, -3.05500746, -2.76670527, -2.05509925,
         3.06344914,  2.96421599, -5.58440256,  4.34885597, -0.61086512],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /35 with alignment adjustment
setting alpha for layer /input.12 start_node /35 with alignment adjustment
setting alpha for layer /input.20 start_node /35 with alignment adjustment
setting alpha for layer /22 start_node /35 with alignment adjustment
setting alpha for layer /32 start_node /35 with alignment adjustment
setting alpha for layer /34 start_node /35 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 32, 28, 28]), torch.Size([1, 1, 32, 14, 14]), torch.Size([1, 1, 64, 14, 14]), torch.Size([1, 1, 64, 7, 7]), torch.Size([1, 1, 512]), torch.Size([1, 1, 512])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.10900736]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input.16,/input.8,/input.32,/input.24,/input.28,/35
Split layers:
  BoundConv(name=/input, inputs=[/input.1, /1, /2]): [(BoundRelu(name=/input.4, inputs=[/input]), 0)]
  BoundConv(name=/input.24, inputs=[/input.20, /7, /8]): [(BoundRelu(name=/22, inputs=[/input.24]), 0)]
  BoundConv(name=/input.8, inputs=[/input.4, /3, /4]): [(BoundRelu(name=/input.12, inputs=[/input.8]), 0)]
  BoundConv(name=/input.16, inputs=[/input.12, /5, /6]): [(BoundRelu(name=/input.20, inputs=[/input.16]), 0)]
  BoundLinear(name=/input.32, inputs=[/32, /11, /12]): [(BoundRelu(name=/34, inputs=[/input.32]), 0)]
  BoundLinear(name=/input.28, inputs=[/30, /9, /10]): [(BoundRelu(name=/32, inputs=[/input.28]), 0)]
Keeping slopes for these layers: ['/35']
Keeping slopes for these layers: ['/35']
Node /input.4 input 0: size torch.Size([32, 28, 28]) unstable 593
Node /input.12 input 0: size torch.Size([32, 14, 14]) unstable 46
Node /input.20 input 0: size torch.Size([64, 14, 14]) unstable 31
Node /22 input 0: size torch.Size([64, 7, 7]) unstable 21
Node /32 input 0: size torch.Size([512]) unstable 3
Node /34 input 0: size torch.Size([512]) unstable 8
-----------------
# of unstable neurons: 702
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.16, 4571] 
split level 1: [/input.16, 4586] 
split level 2: [/input.24, 1530] 
split level 3: [/input.24, 2444] 
pruning_in_iteration open status: True
ratio of positive domain = 15 / 16 = 0.9375
pruning-in-iteration extra time: 0.018920183181762695
Time: prepare 0.0023    beta_bound 1.2483    bound 1.2484    transfer 0.0017    finalize 0.0043    func 1.2567    
Accumulated time: func 1.2567    prepare 0.0035    bound 1.2484    beta_bound 1.2483    transfer 0.0017    finalize 0.0043    
batch bounding time:  1.2568905353546143
Current worst splitting domains lb-rhs (depth):
-0.06020 (4), 
length of domains: 1
Time: pickout 0.0029    decision 0.6503    set_bounds 0.0026    solve 1.2569    add 0.0022    
Accumulated time: pickout 0.0029    decision 0.6503    set_bounds 0.0026    solve 1.2569    add 0.0022    
Current (lb-rhs): -0.06019937992095947
1 domains visited
Cumulative time: 2.671013593673706

BaB round 2
batch: 1
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.24, 2097] 
split level 1: [/input.16, 4622] 
split level 2: [/input.24, 2069] 
split level 3: [/input.16, 4545] 
pruning_in_iteration open status: True
ratio of positive domain = 15 / 16 = 0.9375
pruning-in-iteration extra time: 0.0202329158782959
Time: prepare 0.0028    beta_bound 0.6735    bound 0.6736    transfer 0.0024    finalize 0.0051    func 0.6840    
Accumulated time: func 1.9407    prepare 0.0075    bound 1.9220    beta_bound 1.9218    transfer 0.0041    finalize 0.0093    
batch bounding time:  0.6840970516204834
Current worst splitting domains lb-rhs (depth):
-0.00015 (8), 
length of domains: 1
Time: pickout 0.0017    decision 0.0844    set_bounds 0.0014    solve 0.6841    add 0.0016    
Accumulated time: pickout 0.0046    decision 0.7347    set_bounds 0.0040    solve 1.9410    add 0.0037    
Current (lb-rhs): -0.00015354156494140625
2 domains visited
Cumulative time: 3.4448118209838867

BaB round 3
batch: 1
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.16, 4558] 
split level 1: [/input.16, 4557] 
split level 2: [/input.16, 4670] 
split level 3: [/input.24, 2066] 

all verified at 3th iter
pruning_in_iteration open status: True
ratio of positive domain = 16 / 16 = 1.0
pruning-in-iteration extra time: 0.003110170364379883
Time: prepare 0.0050    beta_bound 0.1226    bound 0.1227    transfer 0.0024    finalize 0.0054    func 0.1357    
Accumulated time: func 2.0764    prepare 0.0136    bound 2.0447    beta_bound 2.0444    transfer 0.0065    finalize 0.0148    
batch bounding time:  0.1358189582824707
length of domains: 0
Time: pickout 0.0026    decision 0.0777    set_bounds 0.0026    solve 0.1359    add 0.0002    
Accumulated time: pickout 0.0071    decision 0.8124    set_bounds 0.0066    solve 2.0769    add 0.0040    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 3.664593458175659


Properties batch 7, size 1
Remaining timeout: 143.45593547821045
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 8.755653381347656.

Properties batch 8, size 1
Remaining timeout: 143.34166193008423
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.1717400550842285.
Result: safe in 36.7398 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):36.73940659465781, max time: 36.739773988723755
mean time for verified SAFE instances(total 1): 36.739773988723755, max time: 36.739773988723755
safe (total 1), index: [0]
