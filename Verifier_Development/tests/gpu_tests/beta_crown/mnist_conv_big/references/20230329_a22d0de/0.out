Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_conv_big
  path: mnist_conv_big_diffai.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 269
  end: 270
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: MNIST_ERAN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.3
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 256
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 180
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 100
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 13:43:04 2023 on zeratul
Sequential(
  (0): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(32, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (5): ReLU()
  (6): Conv2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (7): ReLU()
  (8): Flatten()
  (9): Linear(in_features=3136, out_features=512, bias=True)
  (10): ReLU()
  (11): Linear(in_features=512, out_features=512, bias=True)
  (12): ReLU()
  (13): Linear(in_features=512, out_features=10, bias=True)
)
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(2.82148671) tensor(-0.42421296) tensor(-0.02737886)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_conv_big]_start=269_end=270_iter=20_b=256_timeout=180_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 269 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=100, alpha=0.24342750012874603, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 8.76490402e+00, -3.18759942e+00,  4.52227324e-01,  6.86359584e-01,
         -3.74633217e+00,  5.83206475e-01, -4.33462173e-01,  8.76405369e-03,
         -1.97434568e+00,  9.44690824e-01]], device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 5.29332495, -3.72515798, -0.75388902, -1.75806773, -0.26571509,
          -1.69963694, -1.84578025,  4.90485716, -4.45150948,  1.70475161],
         [ 5.29332495, -3.72515798, -0.75388902, -1.75806773, -0.26571509,
          -1.69963694, -1.84578025,  4.90485716, -4.45150948,  1.70475161]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[9.01848316, 6.04721403, 7.05139256, 5.55904007, 6.99296188,
          7.13910532, 0.38846779, 9.74483490, 3.58857346]]], device='cuda:0')
number of violation:  0
Attack finished in 3.8468 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundParams(name=/13, inputs=[])
  (/14): BoundParams(name=/14, inputs=[])
  (/input): BoundConv(name=/input, inputs=[/input.1, /1, /2])
  (/input.4): BoundRelu(name=/input.4, inputs=[/input])
  (/input.8): BoundConv(name=/input.8, inputs=[/input.4, /3, /4])
  (/input.12): BoundRelu(name=/input.12, inputs=[/input.8])
  (/input.16): BoundConv(name=/input.16, inputs=[/input.12, /5, /6])
  (/input.20): BoundRelu(name=/input.20, inputs=[/input.16])
  (/input.24): BoundConv(name=/input.24, inputs=[/input.20, /7, /8])
  (/22): BoundRelu(name=/22, inputs=[/input.24])
  (/23): BoundShape(name=/23, inputs=[/22])
  (/24): BoundConstant(name=/24, inputs=[])
  (/25): BoundGather(name=/25, inputs=[/23, /24])
  (/26): BoundConstant(name=/26, inputs=[])
  (/27): BoundUnsqueeze(name=/27, inputs=[/25])
  (/28): BoundUnsqueeze(name=/28, inputs=[/26])
  (/29): BoundConcat(name=/29, inputs=[/27, /28])
  (/30): BoundReshape(name=/30, inputs=[/22, /29])
  (/input.28): BoundLinear(name=/input.28, inputs=[/30, /9, /10])
  (/32): BoundRelu(name=/32, inputs=[/input.28])
  (/input.32): BoundLinear(name=/input.32, inputs=[/32, /11, /12])
  (/34): BoundRelu(name=/34, inputs=[/input.32])
  (/35): BoundLinear(name=/35, inputs=[/34, /13, /14])
)
Model prediction is: tensor([[ 8.76490402e+00, -3.18759942e+00,  4.52227324e-01,  6.86359584e-01,
         -3.74633217e+00,  5.83206475e-01, -4.33462173e-01,  8.76405369e-03,
         -1.97434568e+00,  9.44690824e-01]], device='cuda:0')
layer /input.4 using sparse-features alpha with shape [630]; unstable size 630; total size 25088 (torch.Size([1, 32, 28, 28]))
layer /input.4 start_node /input.8 using sparse-spec alpha with unstable size 95 total_size 6272 output_shape (32, 14, 14)
layer /input.4 start_node /input.16 using sparse-spec alpha with unstable size 59 total_size 12544 output_shape (64, 14, 14)
layer /input.4 start_node /input.24 using sparse-spec alpha with unstable size 49 total_size 3136 output_shape (64, 7, 7)
layer /input.4 start_node /input.28 using sparse-spec alpha with unstable size 19 total_size 512 output_shape torch.Size([512])
layer /input.4 start_node /input.32 using sparse-spec alpha with unstable size 31 total_size 512 output_shape torch.Size([512])
layer /input.4 start_node /35 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [95]; unstable size 95; total size 6272 (torch.Size([1, 32, 14, 14]))
layer /input.12 start_node /input.16 using sparse-spec alpha with unstable size 59 total_size 12544 output_shape (64, 14, 14)
layer /input.12 start_node /input.24 using sparse-spec alpha with unstable size 49 total_size 3136 output_shape (64, 7, 7)
layer /input.12 start_node /input.28 using sparse-spec alpha with unstable size 19 total_size 512 output_shape torch.Size([512])
layer /input.12 start_node /input.32 using sparse-spec alpha with unstable size 31 total_size 512 output_shape torch.Size([512])
layer /input.12 start_node /35 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.20 using sparse-features alpha with shape [59]; unstable size 59; total size 12544 (torch.Size([1, 64, 14, 14]))
layer /input.20 start_node /input.24 using sparse-spec alpha with unstable size 49 total_size 3136 output_shape (64, 7, 7)
layer /input.20 start_node /input.28 using sparse-spec alpha with unstable size 19 total_size 512 output_shape torch.Size([512])
layer /input.20 start_node /input.32 using sparse-spec alpha with unstable size 31 total_size 512 output_shape torch.Size([512])
layer /input.20 start_node /35 using full alpha with unstable size None total_size 9 output_shape 9
layer /22 using sparse-features alpha with shape [49]; unstable size 49; total size 3136 (torch.Size([1, 64, 7, 7]))
layer /22 start_node /input.28 using sparse-spec alpha with unstable size 19 total_size 512 output_shape torch.Size([512])
layer /22 start_node /input.32 using sparse-spec alpha with unstable size 31 total_size 512 output_shape torch.Size([512])
layer /22 start_node /35 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [19]; unstable size 19; total size 512 (torch.Size([1, 512]))
layer /32 start_node /input.32 using sparse-spec alpha with unstable size 31 total_size 512 output_shape torch.Size([512])
layer /32 start_node /35 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using sparse-features alpha with shape [31]; unstable size 31; total size 512 (torch.Size([1, 512]))
layer /34 start_node /35 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ -2.72006607, -11.98624229,  -3.83970571, -13.68737030,  -5.98987007,
          -8.12254715, -14.56175518,   0.87360919, -13.84293938]],
       device='cuda:0') None
best_l after optimization: 30.601856231689453
alpha/beta optimization time: 20.004368782043457
initial alpha-CROWN bounds: tensor([[ 7.40850306,  1.84512794,  4.24771786,  2.29507923,  4.04985142,
          4.30723810, -1.10125971,  7.41925287,  0.13034448]], device='cuda:0')
Worst class: (+ rhs) -1.101259708404541
Split layers:
  BoundConv(name=/input.24, inputs=[/input.20, /7, /8]): [(BoundRelu(name=/22, inputs=[/input.24]), 0)]
  BoundConv(name=/input.8, inputs=[/input.4, /3, /4]): [(BoundRelu(name=/input.12, inputs=[/input.8]), 0)]
  BoundConv(name=/input, inputs=[/input.1, /1, /2]): [(BoundRelu(name=/input.4, inputs=[/input]), 0)]
  BoundConv(name=/input.16, inputs=[/input.12, /5, /6]): [(BoundRelu(name=/input.20, inputs=[/input.16]), 0)]
  BoundLinear(name=/input.32, inputs=[/32, /11, /12]): [(BoundRelu(name=/34, inputs=[/input.32]), 0)]
  BoundLinear(name=/input.28, inputs=[/30, /9, /10]): [(BoundRelu(name=/32, inputs=[/input.28]), 0)]
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 32, 28, 28]), torch.Size([1, 9, 32, 14, 14]), torch.Size([1, 9, 64, 14, 14]), torch.Size([1, 9, 64, 7, 7]), torch.Size([1, 9, 512]), torch.Size([1, 9, 512])]

Properties batch 0, size 1
Remaining timeout: 148.50190258026123
##### Instance 0 first 10 spec matrices: 
tensor([[[ 1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 7.40850305557251.

Properties batch 1, size 1
Remaining timeout: 148.33502626419067
##### Instance 0 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.8451279401779175.

Properties batch 2, size 1
Remaining timeout: 148.22489643096924
##### Instance 0 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.24771785736084.

Properties batch 3, size 1
Remaining timeout: 148.11795783042908
##### Instance 0 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.295079231262207.

Properties batch 4, size 1
Remaining timeout: 148.00416469573975
##### Instance 0 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.049851417541504.

Properties batch 5, size 1
Remaining timeout: 147.8957896232605
##### Instance 0 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.3072381019592285.

Properties batch 6, size 1
Remaining timeout: 147.7644486427307
##### Instance 0 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-1.10125971]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundParams(name=/13, inputs=[])
  (/14): BoundParams(name=/14, inputs=[])
  (/input): BoundConv(name=/input, inputs=[/input.1, /1, /2])
  (/input.4): BoundRelu(name=/input.4, inputs=[/input])
  (/input.8): BoundConv(name=/input.8, inputs=[/input.4, /3, /4])
  (/input.12): BoundRelu(name=/input.12, inputs=[/input.8])
  (/input.16): BoundConv(name=/input.16, inputs=[/input.12, /5, /6])
  (/input.20): BoundRelu(name=/input.20, inputs=[/input.16])
  (/input.24): BoundConv(name=/input.24, inputs=[/input.20, /7, /8])
  (/22): BoundRelu(name=/22, inputs=[/input.24])
  (/23): BoundShape(name=/23, inputs=[/22])
  (/24): BoundConstant(name=/24, inputs=[])
  (/25): BoundGather(name=/25, inputs=[/23, /24])
  (/26): BoundConstant(name=/26, inputs=[])
  (/27): BoundUnsqueeze(name=/27, inputs=[/25])
  (/28): BoundUnsqueeze(name=/28, inputs=[/26])
  (/29): BoundConcat(name=/29, inputs=[/27, /28])
  (/30): BoundReshape(name=/30, inputs=[/22, /29])
  (/input.28): BoundLinear(name=/input.28, inputs=[/30, /9, /10])
  (/32): BoundRelu(name=/32, inputs=[/input.28])
  (/input.32): BoundLinear(name=/input.32, inputs=[/32, /11, /12])
  (/34): BoundRelu(name=/34, inputs=[/input.32])
  (/35): BoundLinear(name=/35, inputs=[/34, /13, /14])
)
Model prediction is: tensor([ 8.76490402e+00, -3.18759942e+00,  4.52227324e-01,  6.86359584e-01,
        -3.74633217e+00,  5.83206475e-01, -4.33462173e-01,  8.76405369e-03,
        -1.97434568e+00,  9.44690824e-01], device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /35 with alignment adjustment
setting alpha for layer /input.12 start_node /35 with alignment adjustment
setting alpha for layer /input.20 start_node /35 with alignment adjustment
setting alpha for layer /22 start_node /35 with alignment adjustment
setting alpha for layer /32 start_node /35 with alignment adjustment
setting alpha for layer /34 start_node /35 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 32, 28, 28]), torch.Size([1, 1, 32, 14, 14]), torch.Size([1, 1, 64, 14, 14]), torch.Size([1, 1, 64, 7, 7]), torch.Size([1, 1, 512]), torch.Size([1, 1, 512])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-1.10125971]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input.24,/input.8,/input,/input.16,/input.32,/input.28,/35
Split layers:
  BoundLinear(name=/input.32, inputs=[/32, /11, /12]): [(BoundRelu(name=/34, inputs=[/input.32]), 0)]
  BoundConv(name=/input.24, inputs=[/input.20, /7, /8]): [(BoundRelu(name=/22, inputs=[/input.24]), 0)]
  BoundConv(name=/input.8, inputs=[/input.4, /3, /4]): [(BoundRelu(name=/input.12, inputs=[/input.8]), 0)]
  BoundConv(name=/input, inputs=[/input.1, /1, /2]): [(BoundRelu(name=/input.4, inputs=[/input]), 0)]
  BoundLinear(name=/input.28, inputs=[/30, /9, /10]): [(BoundRelu(name=/32, inputs=[/input.28]), 0)]
  BoundConv(name=/input.16, inputs=[/input.12, /5, /6]): [(BoundRelu(name=/input.20, inputs=[/input.16]), 0)]
Keeping slopes for these layers: ['/35']
Keeping slopes for these layers: ['/35']
Node /input.4 input 0: size torch.Size([32, 28, 28]) unstable 630
Node /input.12 input 0: size torch.Size([32, 14, 14]) unstable 87
Node /input.20 input 0: size torch.Size([64, 14, 14]) unstable 57
Node /22 input 0: size torch.Size([64, 7, 7]) unstable 43
Node /32 input 0: size torch.Size([512]) unstable 10
Node /34 input 0: size torch.Size([512]) unstable 10
-----------------
# of unstable neurons: 837
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.28, 484] 
split level 1: [/input.32, 102] 
split level 2: [/input.24, 1800] 
split level 3: [/input.24, 2094] 
pruning_in_iteration open status: True
ratio of positive domain = 15 / 16 = 0.9375
pruning-in-iteration extra time: 0.021978378295898438
Time: prepare 0.0024    beta_bound 1.2994    bound 1.2995    transfer 0.0020    finalize 0.0048    func 1.3088    
Accumulated time: func 1.3088    prepare 0.0034    bound 1.2995    beta_bound 1.2994    transfer 0.0020    finalize 0.0048    
batch bounding time:  1.3089756965637207
Current worst splitting domains lb-rhs (depth):
-0.71764 (4), 
length of domains: 1
Time: pickout 0.0014    decision 0.6528    set_bounds 0.0016    solve 1.3090    add 0.0024    
Accumulated time: pickout 0.0014    decision 0.6528    set_bounds 0.0016    solve 1.3090    add 0.0024    
Current (lb-rhs): -0.7176395654678345
1 domains visited
Cumulative time: 2.653592348098755

BaB round 2
batch: 1
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.24, 2430] 
split level 1: [/input.24, 2087] 
split level 2: [/input.16, 4623] 
split level 3: [/input.24, 1555] 
pruning_in_iteration open status: True
ratio of positive domain = 13 / 16 = 0.8125
pruning-in-iteration extra time: 0.021468400955200195
Time: prepare 0.0044    beta_bound 0.7231    bound 0.7233    transfer 0.0022    finalize 0.0055    func 0.7355    
Accumulated time: func 2.0443    prepare 0.0088    bound 2.0227    beta_bound 2.0225    transfer 0.0042    finalize 0.0103    
batch bounding time:  0.7356219291687012
Current worst splitting domains lb-rhs (depth):
-0.52274 (8), -0.07668 (8), -0.03014 (8), 
length of domains: 3
Time: pickout 0.0016    decision 0.0693    set_bounds 0.0021    solve 0.7357    add 0.0030    
Accumulated time: pickout 0.0030    decision 0.7221    set_bounds 0.0036    solve 2.0447    add 0.0053    
Current (lb-rhs): -0.5227394104003906
4 domains visited
Cumulative time: 3.4659881591796875

BaB round 3
batch: 3
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.24, 1803] [/input.24, 1803] [/input.16, 4649] 
split level 1: [/input.16, 4649] [/input.16, 4651] [/input.24, 1803] 
split level 2: [/input.16, 4637] [/input.16, 4637] [/input.16, 4637] 
pruning_in_iteration open status: True
ratio of positive domain = 21 / 24 = 0.875
pruning-in-iteration extra time: 0.02205801010131836
Time: prepare 0.0072    beta_bound 0.7493    bound 0.7495    transfer 0.0040    finalize 0.0116    func 0.7724    
Accumulated time: func 2.8167    prepare 0.0170    bound 2.7722    beta_bound 2.7718    transfer 0.0082    finalize 0.0219    
batch bounding time:  0.7725818157196045
Current worst splitting domains lb-rhs (depth):
-0.49416 (11), -0.11535 (11), -0.04775 (11), 
length of domains: 3
Time: pickout 0.0022    decision 0.0692    set_bounds 0.0027    solve 0.7726    add 0.0048    
Accumulated time: pickout 0.0052    decision 0.7913    set_bounds 0.0063    solve 2.8173    add 0.0102    
Current (lb-rhs): -0.49416041374206543
7 domains visited
Cumulative time: 4.31861424446106

BaB round 4
batch: 3
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/input.16, 4651] [/input.24, 2088] [/input.16, 4651] 
split level 1: [/input.16, 4652] [/input.16, 4652] [/input.16, 4652] 
split level 2: [/input.24, 2437] [/input.24, 2437] [/input.24, 2437] 
pruning_in_iteration open status: True
ratio of positive domain = 22 / 24 = 0.9166666666666666
pruning-in-iteration extra time: 0.02157878875732422
Time: prepare 0.0125    beta_bound 0.7626    bound 0.7627    transfer 0.0025    finalize 0.0081    func 0.7858    
Accumulated time: func 3.6025    prepare 0.0307    bound 3.5350    beta_bound 3.5344    transfer 0.0108    finalize 0.0300    
batch bounding time:  0.7859792709350586
Current worst splitting domains lb-rhs (depth):
-0.23508 (14), -0.21165 (14), 
length of domains: 2
Time: pickout 0.0037    decision 0.0767    set_bounds 0.0024    solve 0.7860    add 0.0018    
Accumulated time: pickout 0.0089    decision 0.8680    set_bounds 0.0087    solve 3.6033    add 0.0120    
Current (lb-rhs): -0.23508107662200928
9 domains visited
Cumulative time: 5.189938306808472

BaB round 5
batch: 2
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/input.24, 2088] [/input.24, 2088] 
split level 1: [/input.16, 4609] [/input.16, 4609] 
split level 2: [/input.24, 1780] [/input.24, 1780] 
pruning_in_iteration open status: True
ratio of positive domain = 12 / 16 = 0.75
pruning-in-iteration extra time: 0.021058082580566406
Time: prepare 0.0053    beta_bound 0.7641    bound 0.7642    transfer 0.0023    finalize 0.0060    func 0.7778    
Accumulated time: func 4.3803    prepare 0.0371    bound 4.2991    beta_bound 4.2985    transfer 0.0131    finalize 0.0360    
batch bounding time:  0.7779974937438965
Current worst splitting domains lb-rhs (depth):
-0.20243 (17), -0.16756 (17), -0.05124 (17), -0.01567 (17), 
length of domains: 4
Time: pickout 0.0020    decision 0.0689    set_bounds 0.0031    solve 0.7780    add 0.0036    
Accumulated time: pickout 0.0109    decision 0.9369    set_bounds 0.0118    solve 4.3813    add 0.0155    
Current (lb-rhs): -0.20242595672607422
13 domains visited
Cumulative time: 6.046377897262573

BaB round 6
batch: 4
Average branched neurons at iteration 6:  1.0000
splitting decisions: 
split level 0: [/input.24, 2093] [/input.24, 2093] [/input.24, 2093] [/input.24, 2093] 
split level 1: [/input.16, 4638] [/input.16, 4638] [/input.16, 4638] [/input.16, 4638] 
pruning_in_iteration open status: True
ratio of positive domain = 12 / 16 = 0.75
pruning-in-iteration extra time: 0.023163557052612305
Time: prepare 0.0065    beta_bound 0.8248/home/zhouxingshi/gputest/Verifier_Development/complete_verifier/data_utils.py:234: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp / std).reshape(1, -1, 1, 1)
    bound 0.8249    transfer 0.0022    finalize 0.0053    func 0.8390    
Accumulated time: func 5.2193    prepare 0.0444    bound 5.1240    beta_bound 5.1233    transfer 0.0153    finalize 0.0412    
batch bounding time:  0.8393089771270752
Current worst splitting domains lb-rhs (depth):
-0.20073 (19), -0.16448 (19), -0.04424 (19), -0.00707 (19), 
length of domains: 4
Time: pickout 0.0026    decision 0.0675    set_bounds 0.0030    solve 0.8393    add 0.0032    
Accumulated time: pickout 0.0136    decision 1.0044    set_bounds 0.0148    solve 5.2207    add 0.0187    
Current (lb-rhs): -0.2007293701171875
17 domains visited
Cumulative time: 6.962667942047119

BaB round 7
batch: 4
Average branched neurons at iteration 7:  1.0000
splitting decisions: 
split level 0: [/input.16, 4650] [/input.16, 4650] [/input.16, 4650] [/input.16, 4650] 
split level 1: [/input.24, 1556] [/input.24, 1556] [/input.24, 1556] [/input.24, 1556] 
pruning_in_iteration open status: True
ratio of positive domain = 12 / 16 = 0.75
pruning-in-iteration extra time: 0.02096080780029297
Time: prepare 0.0040    beta_bound 0.8003    bound 0.8005    transfer 0.0017    finalize 0.0052    func 0.8114    
Accumulated time: func 6.0307    prepare 0.0495    bound 5.9245    beta_bound 5.9236    transfer 0.0169    finalize 0.0464    
batch bounding time:  0.811596155166626
Current worst splitting domains lb-rhs (depth):
-0.06052 (21), -0.04732 (21), -0.01679 (21), -0.00670 (21), 
length of domains: 4
Time: pickout 0.0015    decision 0.0720    set_bounds 0.0016    solve 0.8116    add 0.0030    
Accumulated time: pickout 0.0151    decision 1.0764    set_bounds 0.0164    solve 6.0323    add 0.0217    
Current (lb-rhs): -0.060516357421875
21 domains visited
Cumulative time: 7.852895736694336

BaB round 8
batch: 4
Average branched neurons at iteration 8:  1.0000
splitting decisions: 
split level 0: [/input.16, 4528] [/input.16, 4528] [/input.16, 4654] [/input.16, 4654] 
split level 1: [/input.16, 4644] [/input.16, 4644] [/input.16, 4655] [/input.16, 4655] 
pruning_in_iteration open status: True
ratio of positive domain = 14 / 16 = 0.875
pruning-in-iteration extra time: 0.022676944732666016
Time: prepare 0.0062    beta_bound 0.7719    bound 0.7720    transfer 0.0024    finalize 0.0060    func 0.7867    
Accumulated time: func 6.8174    prepare 0.0566    bound 6.6965    beta_bound 6.6955    transfer 0.0193    finalize 0.0524    
batch bounding time:  0.7868833541870117
Current worst splitting domains lb-rhs (depth):
-0.04462 (23), -0.00547 (23), 
length of domains: 2
Time: pickout 0.0015    decision 0.0668    set_bounds 0.0027    solve 0.7869    add 0.0024    
Accumulated time: pickout 0.0165    decision 1.1432    set_bounds 0.0191    solve 6.8192    add 0.0241    
Current (lb-rhs): -0.044623374938964844
23 domains visited
Cumulative time: 8.71403193473816

BaB round 9
batch: 2
Average branched neurons at iteration 9:  1.0000
splitting decisions: 
split level 0: [/input.16, 4655] [/input.16, 4655] 
split level 1: [/input.24, 1554] [/input.24, 1554] 
split level 2: [/input.16, 4589] [/input.16, 4589] 

all verified at 9th iter
pruning_in_iteration open status: True
ratio of positive domain = 16 / 16 = 1.0
pruning-in-iteration extra time: 0.010118722915649414
Time: prepare 0.0034    beta_bound 0.3773    bound 0.3774    transfer 0.0021    finalize 0.0054    func 0.3884    
Accumulated time: func 7.2057    prepare 0.0611    bound 7.0739    beta_bound 7.0728    transfer 0.0214    finalize 0.0578    
batch bounding time:  0.3895432949066162
length of domains: 0
Time: pickout 0.0023    decision 0.0698    set_bounds 0.0017    solve 0.3896    add 0.0003    
Accumulated time: pickout 0.0188    decision 1.2130    set_bounds 0.0208    solve 7.2088    add 0.0244    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
23 domains visited
Cumulative time: 9.17837142944336


Properties batch 7, size 1
Remaining timeout: 138.2760705947876
##### Instance 0 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 7.419252872467041.

Properties batch 8, size 1
Remaining timeout: 138.14503574371338
##### Instance 0 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.1303444802761078.
Result: safe in 41.9389 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):41.93846654253489, max time: 41.93888592720032
mean time for verified SAFE instances(total 1): 41.93888592720032, max time: 41.93888592720032
safe (total 1), index: [0]
