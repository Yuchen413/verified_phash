Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_9_200
  path: mnist_9_200_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 36
  end: 37
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.015
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 500.0
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 15:38:52 2023 on zeratul
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=200, bias=True)
  (2): ReLU()
  (3): Linear(in_features=200, out_features=200, bias=True)
  (4): ReLU()
  (5): Linear(in_features=200, out_features=200, bias=True)
  (6): ReLU()
  (7): Linear(in_features=200, out_features=200, bias=True)
  (8): ReLU()
  (9): Linear(in_features=200, out_features=200, bias=True)
  (10): ReLU()
  (11): Linear(in_features=200, out_features=200, bias=True)
  (12): ReLU()
  (13): Linear(in_features=200, out_features=200, bias=True)
  (14): ReLU()
  (15): Linear(in_features=200, out_features=200, bias=True)
  (16): ReLU()
  (17): Linear(in_features=200, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226457)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_9_200]_start=36_end=37_iter=20_b=1024_timeout=500.0_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 36 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundParams(name=/13, inputs=[])
  (/14): BoundParams(name=/14, inputs=[])
  (/15): BoundParams(name=/15, inputs=[])
  (/16): BoundParams(name=/16, inputs=[])
  (/17): BoundParams(name=/17, inputs=[])
  (/18): BoundParams(name=/18, inputs=[])
  (/19): BoundShape(name=/19, inputs=[/0])
  (/20): BoundConstant(name=/20, inputs=[])
  (/21): BoundGather(name=/21, inputs=[/19, /20])
  (/22): BoundConstant(name=/22, inputs=[])
  (/23): BoundUnsqueeze(name=/23, inputs=[/21])
  (/24): BoundUnsqueeze(name=/24, inputs=[/22])
  (/25): BoundConcat(name=/25, inputs=[/23, /24])
  (/26): BoundReshape(name=/26, inputs=[/0, /25])
  (/input): BoundLinear(name=/input, inputs=[/26, /1, /2])
  (/28): BoundRelu(name=/28, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/28, /3, /4])
  (/30): BoundRelu(name=/30, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/30, /5, /6])
  (/32): BoundRelu(name=/32, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/32, /7, /8])
  (/34): BoundRelu(name=/34, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/34, /9, /10])
  (/36): BoundRelu(name=/36, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/36, /11, /12])
  (/38): BoundRelu(name=/38, inputs=[/input.19])
  (/input.23): BoundLinear(name=/input.23, inputs=[/38, /13, /14])
  (/40): BoundRelu(name=/40, inputs=[/input.23])
  (/input.27): BoundLinear(name=/input.27, inputs=[/40, /15, /16])
  (/42): BoundRelu(name=/42, inputs=[/input.27])
  (/43): BoundLinear(name=/43, inputs=[/42, /17, /18])
)
Model prediction is: tensor([[-2.88886476,  0.08878895,  0.72437364,  1.90618849, -1.39985704,
         -1.53625631, -3.75804877,  6.38124752, -0.44784808,  1.67925429]],
       device='cuda:0')
layer /28 using sparse-features alpha with shape [40]; unstable size 40; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 63 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 67 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.11 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.15 using full alpha with unstable size 183 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [63]; unstable size 63; total size 200 (torch.Size([1, 200]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 67 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.11 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.15 using full alpha with unstable size 183 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [67]; unstable size 67; total size 200 (torch.Size([1, 200]))
layer /32 start_node /input.11 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.15 using full alpha with unstable size 183 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using sparse-features alpha with shape [111]; unstable size 111; total size 200 (torch.Size([1, 200]))
layer /34 start_node /input.15 using full alpha with unstable size 183 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([200]); unstable size 183; total size 200 (torch.Size([1, 200]))
layer /36 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /38 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /40 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-417.39270020, -576.04919434, -668.22680664, -722.97650146,
         -618.88208008, -618.83709717, -681.43994141, -400.89883423,
         -477.56631470]], device='cuda:0') None
best_l after optimization: -3198.2685546875
alpha/beta optimization time: 14.219868183135986
initial alpha-CROWN bounds: tensor([[-258.99118042, -357.54028320, -413.56259155, -445.80444336,
         -379.99063110, -382.02862549, -419.80743408, -248.67221069,
         -291.87118530]], device='cuda:0')
Worst class: (+ rhs) -445.804443359375
Split layers:
  BoundLinear(name=/input.27, inputs=[/40, /15, /16]): [(BoundRelu(name=/42, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.23, inputs=[/38, /13, /14]): [(BoundRelu(name=/40, inputs=[/input.23]), 0)]
  BoundLinear(name=/input, inputs=[/26, /1, /2]): [(BoundRelu(name=/28, inputs=[/input]), 0)]
  BoundLinear(name=/input.19, inputs=[/36, /11, /12]): [(BoundRelu(name=/38, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.15, inputs=[/34, /9, /10]): [(BoundRelu(name=/36, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.3, inputs=[/28, /3, /4]): [(BoundRelu(name=/30, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.7, inputs=[/30, /5, /6]): [(BoundRelu(name=/32, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.11, inputs=[/32, /7, /8]): [(BoundRelu(name=/34, inputs=[/input.11]), 0)]
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750000149011612, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.88886476,  0.08878895,  0.72437364,  1.90618849, -1.39985704,
         -1.53625631, -3.75804877,  6.38124752, -0.44784808,  1.67925429]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.02502894,  0.19521999,  1.06490612,  2.69613671, -1.59872890,
          -1.10530305, -3.64246845,  5.25460815,  0.15645368,  1.20067418],
         [-3.02502894,  0.19521999,  1.06490612,  2.69613671, -1.59872890,
          -1.10530305, -3.64246845,  5.25460815,  0.15645368,  1.20067418]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[8.27963734, 5.05938816, 4.18970203, 2.55847144, 6.85333729,
          6.35991096, 8.89707661, 5.09815454, 4.05393410]]], device='cuda:0')
number of violation:  0
Attack finished in 0.8704 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /28 using sparse-features alpha with shape [40]; unstable size 40; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 63 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 67 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.11 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.15 using full alpha with unstable size 183 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [63]; unstable size 63; total size 200 (torch.Size([1, 200]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 67 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.11 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.15 using full alpha with unstable size 183 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [67]; unstable size 67; total size 200 (torch.Size([1, 200]))
layer /32 start_node /input.11 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.15 using full alpha with unstable size 183 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using sparse-features alpha with shape [111]; unstable size 111; total size 200 (torch.Size([1, 200]))
layer /34 start_node /input.15 using full alpha with unstable size 183 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([200]); unstable size 183; total size 200 (torch.Size([1, 200]))
layer /36 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /38 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /40 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2024-02-29
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 400.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_89', 'lay4_194', 'lay4_23', 'lay4_50', 'lay4_51', 'lay4_64', 'lay4_128', 'lay4_108', 'lay4_112', 'lay4_187', 'lay4_15', 'lay4_26', 'lay4_63', 'lay4_86', 'lay4_88', 'lay4_177', 'lay4_117', 'lay4_155', 'lay4_55', 'lay4_113', 'lay4_82', 'lay4_107', 'lay4_27', 'lay4_152', 'lay4_52', 'lay4_96', 'lay4_30', 'lay4_104', 'lay4_87', 'lay4_174', 'lay4_72', 'lay4_133', 'lay4_171', 'lay4_61', 'lay4_165', 'lay4_181', 'lay4_131', 'lay4_66', 'lay4_9', 'lay4_129', 'lay4_172', 'lay4_1', 'lay4_77', 'lay4_36', 'lay4_118', 'lay4_151', 'lay4_12', 'lay4_188', 'lay4_178', 'lay4_74', 'lay4_173', 'lay4_65', 'lay4_125', 'lay4_144', 'lay4_76', 'lay4_157', 'lay4_124', 'lay4_17', 'lay4_161', 'lay4_163', 'lay4_79', 'lay4_156', 'lay4_33'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/Verifier_Development/complete_verifier/data_utils.py:257: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7351s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8926s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[-0.47402960556858814,0.06151125672536419] (2,-1; 2,-1), time: 2.1317s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_128, [-inf,inf]=>[-0.4951926993659908,0.20906029107096816] (2,-1; 2,-1), time: 2.8700s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_51, [-inf,inf]=>[-0.5555018096772403,0.1556620843086407] (2,-1; 2,-1), time: 3.0305s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_108, [-inf,inf]=>[-0.028954237413673697,0.6984579072001047] (2,-1; 2,-1), time: 3.6387s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[-0.019800424977892882,0.7346943303003634] (2,-1; 2,-1), time: 3.7225s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[-0.29486811407282004,0.34928095040576745] (2,-1; 2,-1), time: 3.9811s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_88, [-inf,inf]=>[-0.6298245924644441,0.027701013018689224] (2,-1; 2,-1), time: 4.0252s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_177, [-inf,inf]=>[-0.41798595298653934,0.24813311132059657] (2,-1; 2,-1), time: 4.0485s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[-0.24061749183880393,0.3976083070685371] (2,-1; 2,-1), time: 4.3122s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3434s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_89, [-inf,inf]=>[-0.09998276602659803,0.8186197557535647] (2,-1; 2,-1), time: 4.6201s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_155, [-inf,inf]=>[-0.43344200907736324,0.16851065316937974] (2,-1; 2,-1), time: 3.7307s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.4869533144588375,0.13746500665579153] (2,-1; 2,-1), time: 4.6265s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_194, [-inf,inf]=>[-0.12362057235000647,0.6554896125950659] (2,-1; 2,-1), time: 4.7162s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_50, [-inf,inf]=>[-0.28397308187788317,0.23333232872951626] (2,-1; 2,-1), time: 4.8196s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5190s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_117, [-inf,inf]=>[-0.4279937538648636,0.24387121942943088] (2,-1; 2,-1), time: 4.1832s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3856s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.4303070871712428,0.13437221352563103] (2,-1; 2,-1), time: 5.3294s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3977s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3567s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-0.2908444673165322,0.5213671371348225] (2,-1; 2,-1), time: 3.6913s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_152, [-inf,inf]=>[-0.5162794288877366,0.2733560924729282] (2,-1; 2,-1), time: 2.4052s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_113, [-inf,inf]=>[-0.48197268984426017,0.07107960725703709] (2,-1; 2,-1), time: 3.6487s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_30, [-inf,inf]=>[-0.7792435288890979,0.40383639177379244] (2,-1; 2,-1), time: 2.4064s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_181, [-inf,inf]=>[1e-05,0.7352847805682741] (15,-1; 2,-1), time: 1.5629s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_66, [-inf,inf]=>[-0.6262324794952285,0.014027847256012655] (2,-1; 2,-1), time: 1.4914s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3534s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_107, [-inf,inf]=>[-0.8117018423634633,0.05441234586646522] (2,-1; 2,-1), time: 3.5500s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-0.18200823196823424,0.5850390337081189] (2,-1; 2,-1), time: 4.4862s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-0.6666418387809437,0.04609693726020195] (2,-1; 2,-1), time: 3.8396s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.490577889300026,0.009530606558698518] (2,-1; 2,-1), time: 3.7745s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[-0.35632902400112776,0.32231979233687036] (2,-1; 2,-1), time: 3.5111s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_129, [-inf,inf]=>[1e-05,0.6979754539306005] (15,-1; 2,-1), time: 2.5029s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_72, [-inf,inf]=>[-0.627031618638728,0.003128462853764745] (2,-1; 2,-1), time: 4.0840s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_165, [-inf,inf]=>[-0.4990825161562744,0.057269738633250696] (2,-1; 2,-1), time: 3.8784s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_133, [-inf,inf]=>[-0.3782856529446209,0.017695081901775295] (2,-1; 2,-1), time: 4.4122s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[1e-05,0.755175639784385] (15,-1; 2,-1), time: 2.6690s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-0.46758637533014336,0.4573620016194141] (2,-1; 2,-1), time: 4.8855s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_36, [-inf,inf]=>[-0.4719467922015519,0.1346035473991888] (2,-1; 2,-1), time: 2.9958s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_144, [-inf,inf]=>[1e-05,0.8710018607427549] (15,-1; 2,-1), time: 1.0611s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5024s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_173, [-inf,inf]=>[-0.3606025847654403,0.4729151900422565] (2,-1; 2,-1), time: 2.3829s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_77, [-inf,inf]=>[-0.4401472701072195,0.11324483099663353] (2,-1; 2,-1), time: 4.0422s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_151, [-inf,inf]=>[-0.3918336879194893,0.4518349231721271] (2,-1; 2,-1), time: 3.5952s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_172, [-inf,inf]=>[-0.45885453040889573,0.060710351335504745] (2,-1; 2,-1), time: 4.5507s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.6009256436012059,0.03999578048119857] (2,-1; 2,-1), time: 4.1770s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[-0.5068270756983444,0.01789176822528485] (2,-1; 2,-1), time: 5.7252s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.6538700917674978,0.038824254716085] (2,-1; 2,-1), time: 2.5271s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-0.526771515533698,0.1543287344624096] (2,-1; 2,-1), time: 4.2482s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[1e-05,1.043595325777472] (15,-1; 2,-1), time: 1.2422s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_65, [-inf,inf]=>[-0.18310942458415802,0.48262358195602856] (2,-1; 2,-1), time: 3.7742s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_163, [-inf,inf]=>[1e-05,0.6231368805567162] (15,-1; 2,-1), time: 1.8430s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[1e-05,0.6640660557676022] (15,-1; 2,-1), time: 4.3282s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_188, [-inf,inf]=>[-0.5309443531407522,0.0238403183464186] (2,-1; 2,-1), time: 4.7045s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_157, [-inf,inf]=>[-0.5266739601663519,0.16308420291160697] (2,-1; 2,-1), time: 3.0596s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_125, [-inf,inf]=>[-0.6780629831105691,0.3150422711573998] (2,-1; 2,-1), time: 3.6571s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_124, [-inf,inf]=>[1e-05,1.005054544134687] (15,-1; 2,-1), time: 3.0610s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_161, [-inf,inf]=>[-0.09442683270748395,0.5433799010710936] (2,-1; 2,-1), time: 3.3455s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-0.34761849753835317,0.37099685135883664] (2,-1; 2,-1), time: 3.0343s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_156, [-inf,inf]=>[-0.15501980338490412,0.3608416055925607] (2,-1; 2,-1), time: 3.3454s, #vars: 1265, #constrs: 520, improved: True
PGD done for relu layer 2
MIP improved 63 nodes out of 63 unstable nodes, lb improved 11.390143394470215, ub improved 8.531786918640137, time 16.4123
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_147', 'lay6_18', 'lay6_28', 'lay6_162', 'lay6_143', 'lay6_190', 'lay6_9', 'lay6_8', 'lay6_65', 'lay6_73', 'lay6_161', 'lay6_78', 'lay6_22', 'lay6_13', 'lay6_71', 'lay6_2', 'lay6_7', 'lay6_102', 'lay6_145', 'lay6_107', 'lay6_155', 'lay6_189', 'lay6_64', 'lay6_17', 'lay6_178', 'lay6_187', 'lay6_98', 'lay6_49', 'lay6_33', 'lay6_124', 'lay6_75', 'lay6_35', 'lay6_125', 'lay6_122', 'lay6_194', 'lay6_27', 'lay6_10', 'lay6_160', 'lay6_69', 'lay6_123', 'lay6_31', 'lay6_132', 'lay6_40', 'lay6_14', 'lay6_197', 'lay6_58', 'lay6_146', 'lay6_21', 'lay6_95', 'lay6_186', 'lay6_195', 'lay6_110', 'lay6_90', 'lay6_52', 'lay6_142', 'lay6_101', 'lay6_148', 'lay6_144', 'lay6_86', 'lay6_34', 'lay6_106', 'lay6_51', 'lay6_29', 'lay6_41', 'lay6_61', 'lay6_114', 'lay6_135'] filter: 1.0
Solving MIP for lay6_161, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0609s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0988s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.8029s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[1e-05,0.5676496563118669] (15,-1; 2,-1), time: 10.3386s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[1e-05,0.7029635776086248] (15,-1; 2,-1), time: 10.6226s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[1e-05,0.7910866744624996] (15,-1; 2,-1), time: 12.0814s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4125s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2362s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[1e-05,0.5881565700657349] (15,-1; 2,-1), time: 14.3824s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5033s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3745s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_145, [-inf,inf]=>[1e-05,0.8206211582579868] (15,-1; 2,-1), time: 9.9025s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4037s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5033s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_143, [-inf,inf]=>[-0.5201655970223746,0.24450476991102818] (2,-1; 2,-1), time: 20.1245s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_147, [-inf,inf]=>[-0.4380835818924183,0.18199073396579846] (9,-1; 2,-1), time: 20.6590s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4632s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0063s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-0.646349716880567,0.013583400478958544] (9,-1; 2,-1), time: 21.5316s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4599s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-0.12627518507089772,0.45489576509518354] (2,-1; 9,-1), time: 22.7305s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.2837433782790848,0.3694618320304677] (2,-1; 9,-1), time: 23.4579s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-0.14688027856418026,0.37196317186514744] (2,-1; 9,-1), time: 23.2096s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.033564670596457354,0.4984465825599656] (9,-1; 2,-1), time: 24.6028s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-0.49069560117666744,0.046716463835135884] (9,-1; 2,-1), time: 25.2434s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3663s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.0353s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.0113s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-0.23329841557782496,0.32606293699172245] (9,-1; 2,-1), time: 27.4067s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[1e-05,0.9308618918164098] (15,-1; 2,-1), time: 5.8020s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.1526330973497705,0.37065052182726127] (9,-1; 9,-1), time: 30.0144s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-0.47741248295140004,0.22101118236575598] (9,-1; 9,-1), time: 30.0264s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7910s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_107, [-inf,inf]=>[-0.44624307825774345,0.033407921889097185] (9,-1; 2,-1), time: 23.8181s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[1e-05,0.9535928667831793] (15,-1; 2,-1), time: 11.9289s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-0.7638366469638628,0.15395528327944152] (2,-1; 2,-1), time: 11.9687s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-0.09082125622888179,0.4595099575194439] (9,-1; 2,-1), time: 21.4763s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-0.43026216398756384,0.5804233017372492] (2,-1; 2,-1), time: 17.9090s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3919s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[1e-05,0.7897311587297846] (15,-1; 9,-1), time: 15.3869s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_155, [-inf,inf]=>[-0.34197728922673615,0.3273180176803179] (9,-1; 9,-1), time: 30.1591s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9616s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.1385682259497474,0.4479921627448076] (9,-1; 2,-1), time: 22.6925s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_197, [-inf,inf]=>[1e-05,0.5537135682236121] (15,-1; 2,-1), time: 17.3328s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-0.6830078763695228,0.019687776836180945] (9,-1; 2,-1), time: 24.9074s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.0945s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3798s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[-0.005375068226964,0.6210563136864984] (2,-1; 2,-1), time: 21.2316s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4777s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_132, [-inf,inf]=>[-0.3032518630263065,0.12457801846729279] (2,-1; 9,-1), time: 26.7980s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-0.38049191479592875,0.1222768274572089] (9,-1; 2,-1), time: 21.8198s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4558s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8005s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_195, [-inf,inf]=>[-0.6545441422951197,0.051128714169983006] (2,-1; 2,-1), time: 19.5935s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.010331996759485786,0.6748606478845905] (9,-1; 9,-1), time: 30.0145s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.8838s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[1e-05,1.371359683714664] (15,-1; 2,-1), time: 9.7313s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-0.24015216509073303,0.3601970952881833] (9,-1; 2,-1), time: 28.2480s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-0.35886478203754124,0.19847903367805758] (9,-1; 2,-1), time: 21.2173s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_148, [-inf,inf]=>[1e-05,0.811682077420534] (15,-1; 9,-1), time: 15.4125s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-0.125361378931603,0.6530855513690413] (2,-1; 9,-1), time: 19.9296s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[-0.19947730529812793,0.18108490157043827] (9,-1; 9,-1), time: 30.0171s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[1e-05,0.8657207407025256] (15,-1; 9,-1), time: 15.3489s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-0.517012628944695,0.07110619059450783] (2,-1; 2,-1), time: 21.0259s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-0.3387516986617256,0.22459862240057613] (9,-1; 2,-1), time: 20.1932s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[-0.2295222981208727,0.19872983240163453] (9,-1; 9,-1), time: 30.0162s, #vars: 1557, #constrs: 858, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.48679787464348706,0.0066009837797792415] (2,-1; 9,-1), time: 26.8263s, #vars: 1557, #constrs: 858, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(23, -1), (86, -1), (96, -1), (104, -1), (171, -1), (61, -1), (181, 1), (131, -1), (129, 1), (1, 1), (118, -1), (74, 1), (144, 1), (124, 1), (17, -1), (163, 1), (33, 1)]
best_l after optimization: -348.04638671875
beta sum per layer: []
alpha/beta optimization time: 16.06882071495056
alpha-CROWN with intermediate bounds by MIP: tensor([[-28.62520599, -37.13039398, -44.67790604, -48.54777527, -40.22647095,
         -42.43228531, -44.09970093, -28.88913918, -33.41752243]],
       device='cuda:0') None
MIP improved 67 nodes out of 67 unstable nodes, lb improved 16.178062438964844, ub improved 19.297643661499023, time 79.0883
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_23', 'lay8_147', 'lay8_18', 'lay8_119', 'lay8_117', 'lay8_36', 'lay8_61', 'lay8_90', 'lay8_62', 'lay8_45', 'lay8_33', 'lay8_195', 'lay8_132', 'lay8_64', 'lay8_139', 'lay8_186', 'lay8_118', 'lay8_84', 'lay8_102', 'lay8_48', 'lay8_59', 'lay8_161', 'lay8_76', 'lay8_98', 'lay8_166', 'lay8_80', 'lay8_68', 'lay8_4', 'lay8_137', 'lay8_40', 'lay8_53', 'lay8_19', 'lay8_184', 'lay8_129', 'lay8_174', 'lay8_103', 'lay8_43', 'lay8_79', 'lay8_160', 'lay8_92', 'lay8_125', 'lay8_11', 'lay8_180', 'lay8_87', 'lay8_39', 'lay8_100', 'lay8_101', 'lay8_176', 'lay8_106', 'lay8_21', 'lay8_31', 'lay8_149', 'lay8_127', 'lay8_130', 'lay8_163', 'lay8_178', 'lay8_70', 'lay8_121', 'lay8_42', 'lay8_154', 'lay8_22', 'lay8_75', 'lay8_193', 'lay8_9', 'lay8_138', 'lay8_56', 'lay8_168', 'lay8_126', 'lay8_192', 'lay8_51', 'lay8_1', 'lay8_65', 'lay8_27', 'lay8_35', 'lay8_105', 'lay8_41', 'lay8_144', 'lay8_91', 'lay8_169', 'lay8_162', 'lay8_99', 'lay8_49', 'lay8_14', 'lay8_52', 'lay8_77', 'lay8_10', 'lay8_131', 'lay8_194', 'lay8_69', 'lay8_73', 'lay8_123', 'lay8_170', 'lay8_2', 'lay8_8', 'lay8_25', 'lay8_85', 'lay8_3', 'lay8_120', 'lay8_83', 'lay8_189', 'lay8_159', 'lay8_24'] filter: 1.0
Solving MIP for lay8_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5893s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6746s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7229s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7480s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7713s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7791s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3561s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5987s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_161, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5940s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7360s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5682s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6158s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_166, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6091s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6716s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_137, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6890s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5601s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6384s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6798s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7130s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5776s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.0176s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5665s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5069s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[1e-05,0.9095188062692854] (15,-1; 9,-1), time: 15.8592s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5601s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5534s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5583s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[1e-05,0.7939364827119376] (15,-1; 9,-1), time: 16.5081s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5520s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[1e-05,0.7322236427690527] (15,-1; 9,-1), time: 18.1553s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5532s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5467s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_129, [-inf,inf]=>[1e-05,0.9596339154154675] (15,-1; 9,-1), time: 16.3375s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[1e-05,0.5513519749304397] (15,-1; 9,-1), time: 24.2582s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5977s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_132, [-inf,inf]=>[-0.28263226282195947,0.2928684271918483] (9,-1; 9,-1), time: 30.0277s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.1697650568670005,0.2677172085966061] (9,-1; 9,-1), time: 30.0357s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.5029132375473649,0.16849575100565325] (9,-1; 9,-1), time: 30.0588s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-0.3172171236194057,0.14872931623461164] (9,-1; 9,-1), time: 30.0645s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_147, [-inf,inf]=>[-0.18203857868646492,0.43053905538242815] (9,-1; 9,-1), time: 30.1269s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_139, [-inf,inf]=>[-0.7625011467547175,0.059268773611692666] (9,-1; 9,-1), time: 30.1714s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_117, [-inf,inf]=>[-0.5411078107406513,0.06909280496139962] (9,-1; 9,-1), time: 30.3789s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_127, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6133s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_130, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5913s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_118, [-inf,inf]=>[-0.18800918359923371,0.39332332575533063] (9,-1; 9,-1), time: 30.1234s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_102, [-inf,inf]=>[-0.4511661369915179,0.14198500431325028] (9,-1; 9,-1), time: 30.0334s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6485s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6129s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4961s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5864s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5376s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5949s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5557s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_126, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3607s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_103, [-inf,inf]=>[-0.3718219097918155,0.17778660798856782] (9,-1; 9,-1), time: 30.3031s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_176, [-inf,inf]=>[1e-05,1.3788474181847177] (15,-1; 9,-1), time: 15.6260s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5510s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[1e-05,1.1614236085191247] (15,-1; 2,-1), time: 14.9192s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_160, [-inf,inf]=>[-0.49288560525661756,0.11244375155193319] (9,-1; 9,-1), time: 30.0352s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_106, [-inf,inf]=>[1e-05,0.4671729661888977] (15,-1; 9,-1), time: 25.1375s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[1e-05,1.145331156233964] (15,-1; 9,-1), time: 15.6848s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5831s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[1e-05,0.8436507813791426] (15,-1; 9,-1), time: 15.5414s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5438s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6162s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_180, [-inf,inf]=>[-0.4401512091760869,0.047958802487827565] (9,-1; 9,-1), time: 30.7029s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_192, [-inf,inf]=>[1e-05,0.74598683883336] (15,-1; 9,-1), time: 16.7798s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5463s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[-0.3473797438877112,0.6785014876978592] (9,-1; 9,-1), time: 30.0798s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5197s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6373s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[1e-05,0.834407009766609] (15,-1; 2,-1), time: 14.7126s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2050s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6084s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5316s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4954s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_163, [-inf,inf]=>[-0.15020283172446497,0.37340007540455117] (9,-1; 9,-1), time: 30.0453s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5703s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_121, [-inf,inf]=>[-0.744171779667793,0.029456794704517536] (9,-1; 9,-1), time: 30.3570s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[-0.5725237414041785,0.08739922192917578] (9,-1; 9,-1), time: 30.0727s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[1e-05,0.8739647842249618] (15,-1; 9,-1), time: 15.5157s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-0.6917913492515309,0.04816597816857329] (9,-1; 9,-1), time: 30.2384s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-0.27773584347806796,0.33409733306750755] (9,-1; 9,-1), time: 30.2805s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5341s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5562s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[1e-05,1.1855748987501398] (15,-1; 9,-1), time: 15.5981s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[1e-05,1.2757270936740783] (15,-1; 9,-1), time: 15.5676s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5319s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-0.21813048746597688,0.5403407265432822] (9,-1; 9,-1), time: 30.3892s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-0.42575478841764797,0.3017908072487763] (2,-1; 9,-1), time: 29.6031s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[1e-05,0.7341269829835568] (15,-1; 9,-1), time: 15.5279s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.8964s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[1e-05,0.7213076231795514] (15,-1; 9,-1), time: 16.6784s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-0.2689271818550027,0.4910308159140973] (9,-1; 9,-1), time: 30.0430s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_105, [-inf,inf]=>[-0.8808661004684556,0.11903777123490956] (9,-1; 9,-1), time: 30.4639s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[1e-05,1.1744885082431848] (15,-1; 9,-1), time: 15.5555s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[1e-05,1.0839618753655422] (15,-1; 9,-1), time: 15.5322s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[1e-05,1.2985985202756827] (15,-1; 9,-1), time: 15.5529s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-0.3782936920956002,0.43641991378064343] (9,-1; 9,-1), time: 30.0214s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_131, [-inf,inf]=>[-0.45157590905772677,0.1779708991849329] (9,-1; 9,-1), time: 30.3110s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_120, [-inf,inf]=>[-0.4140104291854168,0.14180835908711803] (9,-1; 9,-1), time: 30.0874s, #vars: 1819, #constrs: 1151, improved: True
Solving MIP for lay8_159, [-inf,inf]=>[-0.24507613196487366,0.2588592383384915] (9,-1; 9,-1), time: 30.0365s, #vars: 1819, #constrs: 1151, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(162, 1), (190, 1), (65, -1), (73, 1), (161, -1), (13, -1), (7, 1), (145, 1), (189, -1), (64, -1), (17, -1), (178, -1), (187, -1), (49, -1), (33, -1), (75, -1), (35, -1), (122, -1), (194, -1), (10, 1), (160, 1), (123, 1), (31, -1), (197, 1), (21, -1), (52, -1), (142, -1), (101, -1), (148, 1), (34, 1), (106, 1), (51, -1), (29, -1), (41, -1), (114, -1), (135, -1)]
best_l after optimization: -0.6502981185913086
beta sum per layer: []
alpha/beta optimization time: 15.785988569259644
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.73344517,  0.12461662, -1.44689178, -3.22283888,  1.44721317,
         -0.19388533,  2.18699598, -0.19518423, -1.08376884]], device='cuda:0') None
MIP improved 102 nodes out of 102 unstable nodes, lb improved 25.186996459960938, ub improved 37.10395812988281, time 92.6888
maximum relu layer improved by MIP so far 3
Linear(in_features=200, out_features=200, bias=True) 4 10 torch.Size([200])
sorted candidates ['lay10_97', 'lay10_123', 'lay10_86', 'lay10_166', 'lay10_167', 'lay10_49', 'lay10_58', 'lay10_61', 'lay10_171', 'lay10_93', 'lay10_164', 'lay10_139', 'lay10_112', 'lay10_101', 'lay10_50', 'lay10_170', 'lay10_157', 'lay10_148', 'lay10_118', 'lay10_174', 'lay10_20', 'lay10_138', 'lay10_62', 'lay10_83', 'lay10_65', 'lay10_131', 'lay10_82', 'lay10_7', 'lay10_126', 'lay10_34', 'lay10_87', 'lay10_99', 'lay10_151', 'lay10_199', 'lay10_57', 'lay10_12', 'lay10_80', 'lay10_198', 'lay10_125', 'lay10_15', 'lay10_56', 'lay10_129', 'lay10_67', 'lay10_31', 'lay10_180', 'lay10_39', 'lay10_183', 'lay10_64', 'lay10_191', 'lay10_91', 'lay10_74', 'lay10_55', 'lay10_36', 'lay10_37', 'lay10_73', 'lay10_128', 'lay10_68', 'lay10_149', 'lay10_100', 'lay10_23', 'lay10_95', 'lay10_102', 'lay10_28', 'lay10_114', 'lay10_9', 'lay10_181', 'lay10_153', 'lay10_190', 'lay10_29', 'lay10_104', 'lay10_169', 'lay10_178', 'lay10_41', 'lay10_8', 'lay10_78', 'lay10_161', 'lay10_89', 'lay10_43', 'lay10_196', 'lay10_79', 'lay10_96', 'lay10_162', 'lay10_135', 'lay10_115', 'lay10_14', 'lay10_121', 'lay10_130', 'lay10_53', 'lay10_75', 'lay10_155', 'lay10_19', 'lay10_173', 'lay10_38', 'lay10_132', 'lay10_45', 'lay10_63', 'lay10_70', 'lay10_168', 'lay10_17', 'lay10_11', 'lay10_142', 'lay10_192', 'lay10_90', 'lay10_136', 'lay10_144', 'lay10_48', 'lay10_22', 'lay10_182', 'lay10_44', 'lay10_85', 'lay10_158', 'lay10_122', 'lay10_124', 'lay10_185', 'lay10_133', 'lay10_5', 'lay10_103', 'lay10_156', 'lay10_109', 'lay10_47', 'lay10_71', 'lay10_98', 'lay10_24', 'lay10_35', 'lay10_116', 'lay10_92', 'lay10_143', 'lay10_6', 'lay10_187', 'lay10_189', 'lay10_33', 'lay10_2', 'lay10_40', 'lay10_111', 'lay10_81', 'lay10_84', 'lay10_76', 'lay10_160', 'lay10_51', 'lay10_120', 'lay10_172', 'lay10_188', 'lay10_18', 'lay10_179', 'lay10_184', 'lay10_1', 'lay10_105', 'lay10_69', 'lay10_154', 'lay10_72', 'lay10_150', 'lay10_30', 'lay10_25', 'lay10_0', 'lay10_13', 'lay10_32', 'lay10_145', 'lay10_146', 'lay10_3', 'lay10_113', 'lay10_137', 'lay10_60', 'lay10_186', 'lay10_59', 'lay10_140', 'lay10_108', 'lay10_42', 'lay10_176', 'lay10_134', 'lay10_163'] filter: 1.0
Solving MIP for lay10_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7949s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_112, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8058s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8211s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_170, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8470s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8718s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8892s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9002s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9059s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9072s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_164, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9114s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9194s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9190s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9436s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_148, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7896s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7450s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7772s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7972s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8636s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8066s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_126, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7935s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8410s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7872s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9411s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8982s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7038s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_151, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7518s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7430s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7986s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7808s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7612s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9428s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8595s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9077s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8163s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8016s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8115s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_180, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8023s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_129, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8451s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_183, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7953s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9207s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9331s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8848s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7138s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7431s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7302s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_128, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7086s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7415s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8785s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_149, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8493s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7298s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7743s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8324s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7942s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8918s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8184s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_181, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7873s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_153, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7051s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_190, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7303s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7173s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_104, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8400s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8740s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7431s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8619s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8508s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_161, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6660s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6807s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7425s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6512s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_115, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6520s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6540s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_121, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6361s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.7100s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[1e-05,0.7081356130244371] (15,-1; 9,-1), time: 17.0861s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7156s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_155, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6692s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6672s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7467s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6886s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7076s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[1e-05,0.9314924943455266] (15,-1; 9,-1), time: 15.7252s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6998s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_166, [-inf,inf]=>[-0.42429397327334784,0.014825310567234696] (9,-1; 9,-1), time: 30.0202s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_101, [-inf,inf]=>[-0.6583130082716159,0.048846411727613635] (9,-1; 9,-1), time: 30.0168s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_167, [-inf,inf]=>[-0.4872234864017451,0.04190417102708322] (9,-1; 9,-1), time: 30.0243s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6919s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6654s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7377s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-0.5350631767505597,0.014240084557934973] (9,-1; 9,-1), time: 30.0217s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8040s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8074s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[-0.3413780722306883,0.13234187897501157] (9,-1; 9,-1), time: 30.0381s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7064s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6966s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8231s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-0.7909138072472701,0.17941330190193064] (9,-1; 9,-1), time: 30.0149s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_191, [-inf,inf]=>[-0.39696368138126525,0.5130160275421564] (9,-1; 9,-1), time: 30.0164s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-0.21785755242821778,0.2496391860714285] (9,-1; 9,-1), time: 30.0177s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_158, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8673s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_178, [-inf,inf]=>[-0.434456357607799,0.004204633327165714] (9,-1; 9,-1), time: 30.0658s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-0.4708735702681747,0.02672415782687217] (9,-1; 9,-1), time: 30.0198s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_133, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6222s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-0.25263527375041567,0.25904152898366767] (9,-1; 9,-1), time: 30.0166s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_196, [-inf,inf]=>[-0.2086433403266262,0.5224281264369959] (9,-1; 9,-1), time: 30.0122s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[-0.5258269022617756,0.2390485041128213] (9,-1; 9,-1), time: 30.0151s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7025s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_109, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7525s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7761s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_130, [-inf,inf]=>[-0.40276232671230555,0.09870766029320036] (9,-1; 9,-1), time: 30.0135s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[1e-05,1.8441618648949059] (15,-1; 9,-1), time: 15.8091s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_116, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8878s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_182, [-inf,inf]=>[1e-05,0.9478680229050236] (15,-1; 9,-1), time: 15.7233s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_124, [-inf,inf]=>[1e-05,1.5127448613603245] (15,-1; 9,-1), time: 15.6976s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_103, [-inf,inf]=>[1e-05,0.7400560121006501] (15,-1; 9,-1), time: 15.7440s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[1e-05,1.920504716979194] (15,-1; 9,-1), time: 15.7559s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6489s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7661s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5780s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7081s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_168, [-inf,inf]=>[-0.12920141983844283,0.42876626527238837] (9,-1; 9,-1), time: 30.0408s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-0.23650802635663343,0.36598634973369676] (9,-1; 9,-1), time: 30.0114s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_136, [-inf,inf]=>[-0.5175982516472413,0.005884639998350663] (9,-1; 9,-1), time: 30.0218s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6651s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-0.10721591433023253,0.5220357010662842] (9,-1; 9,-1), time: 30.0318s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7565s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-0.4496521363109828,0.1699085566921761] (9,-1; 9,-1), time: 30.0165s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_122, [-inf,inf]=>[-0.7837172145988669,0.02409583647058701] (9,-1; 9,-1), time: 30.0172s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7363s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_120, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7028s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_172, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6567s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_185, [-inf,inf]=>[-0.6828055527424765,0.15903226804912002] (9,-1; 9,-1), time: 30.0185s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7438s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_179, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6956s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7718s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_154, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7312s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[1e-05,1.0944555819856197] (15,-1; 9,-1), time: 15.7081s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7009s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6861s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_156, [-inf,inf]=>[-0.13455327096189235,0.7340088452315131] (9,-1; 9,-1), time: 30.0386s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[-0.036563816375930126,0.7989113232306677] (9,-1; 9,-1), time: 30.0554s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8219s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7891s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-0.3811776823297877,0.05133118370296818] (9,-1; 9,-1), time: 30.0163s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_145, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7186s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[1e-05,2.0032469879464245] (15,-1; 9,-1), time: 15.7636s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8316s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_113, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6980s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_137, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7036s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-0.021398673085055765,0.5780585059856823] (9,-1; 9,-1), time: 30.0120s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-0.6642575059895988,0.05043053116774218] (9,-1; 9,-1), time: 30.0161s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_140, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8490s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_143, [-inf,inf]=>[1e-05,0.8669283934320217] (15,-1; 9,-1), time: 27.5016s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[1e-05,1.2732464512730315] (15,-1; 9,-1), time: 15.6923s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_188, [-inf,inf]=>[1e-05,0.914282692299139] (15,-1; 9,-1), time: 15.7307s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_134, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8105s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[1e-05,0.804721107091799] (15,-1; 9,-1), time: 15.8182s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_105, [-inf,inf]=>[1e-05,1.1926503111181834] (15,-1; 9,-1), time: 15.6762s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[1e-05,1.7640782867083942] (15,-1; 9,-1), time: 15.7254s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[1e-05,1.0901571519389028] (15,-1; 9,-1), time: 15.8862s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_146, [-inf,inf]=>[1e-05,1.819226433983421] (15,-1; 9,-1), time: 15.7009s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_111, [-inf,inf]=>[-0.12199867650457095,0.7253464538202574] (9,-1; 9,-1), time: 30.0159s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_186, [-inf,inf]=>[1e-05,1.5975758375093871] (15,-1; 9,-1), time: 15.7449s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_176, [-inf,inf]=>[1e-05,2.7095347844786275] (15,-1; 2,-1), time: 13.0472s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-0.3465415138745122,0.1232610359264632] (9,-1; 9,-1), time: 30.0171s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[1e-05,1.8106174481482387] (15,-1; 9,-1), time: 15.7787s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_163, [-inf,inf]=>[1e-05,1.8655081328484369] (15,-1; 9,-1), time: 15.6727s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-0.2863204713745139,0.22258688753489092] (9,-1; 9,-1), time: 30.0164s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-0.22126066398228447,0.13696848036607204] (9,-1; 9,-1), time: 30.0212s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-0.5207702304542079,0.20294258403513057] (9,-1; 9,-1), time: 30.0161s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-0.15115732808060375,0.21914531164249357] (9,-1; 9,-1), time: 30.0179s, #vars: 2071, #constrs: 1429, improved: True
Solving MIP for lay10_108, [-inf,inf]=>[-0.3481376238223614,0.02193016153990968] (9,-1; 9,-1), time: 30.0168s, #vars: 2071, #constrs: 1429, improved: True
PGD done for relu layer 5
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 3 has unstable to stable neurons: [(23, -1), (18, -1), (119, -1), (61, -1), (90, 1), (33, -1), (195, -1), (64, -1), (186, -1), (84, 1), (48, -1), (59, -1), (161, -1), (76, -1), (98, -1), (166, -1), (80, 1), (68, -1), (4, 1), (137, -1), (40, -1), (53, -1), (19, -1), (184, -1), (129, 1), (174, -1), (43, -1), (79, -1), (92, -1), (125, -1), (11, -1), (87, -1), (39, -1), (101, -1), (176, 1), (106, 1), (21, -1), (31, 1), (149, 1), (127, -1), (130, -1), (178, -1), (70, -1), (42, -1), (154, -1), (193, -1), (138, -1), (56, 1), (168, -1), (126, -1), (192, 1), (1, -1), (65, 1), (41, 1), (144, -1), (91, -1), (169, -1), (162, 1), (99, 1), (49, -1), (14, -1), (77, -1), (10, -1), (194, -1), (69, 1), (73, -1), (123, -1), (170, 1), (2, -1), (8, -1), (25, -1), (85, 1), (3, 1), (83, -1), (189, 1), (24, -1)]
best_l after optimization: 25.318557739257812
beta sum per layer: []
alpha/beta optimization time: 15.428425550460815
alpha-CROWN with intermediate bounds by MIP: tensor([[ 4.65986443,  2.64848590,  1.35919595, -0.22153449,  4.11895752,
          3.23499584,  5.56234741,  2.39375257,  1.56249332]], device='cuda:0') None
MIP improved 170 nodes out of 170 unstable nodes, lb improved 46.8632698059082, ub improved 101.73272705078125, time 104.4186
maximum relu layer improved by MIP so far 4
Linear(in_features=200, out_features=200, bias=True) 5 12 torch.Size([200])
sorted candidates ['lay12_67', 'lay12_145', 'lay12_154', 'lay12_120', 'lay12_84', 'lay12_48', 'lay12_23', 'lay12_51', 'lay12_13', 'lay12_34', 'lay12_27', 'lay12_61', 'lay12_139', 'lay12_52', 'lay12_72', 'lay12_35', 'lay12_58', 'lay12_123', 'lay12_148', 'lay12_128', 'lay12_98', 'lay12_53', 'lay12_142', 'lay12_41', 'lay12_166', 'lay12_150', 'lay12_197', 'lay12_187', 'lay12_31', 'lay12_111', 'lay12_15', 'lay12_199', 'lay12_30', 'lay12_136', 'lay12_118', 'lay12_194', 'lay12_73', 'lay12_25', 'lay12_182', 'lay12_114', 'lay12_86', 'lay12_57', 'lay12_171', 'lay12_160', 'lay12_71', 'lay12_168', 'lay12_141', 'lay12_39', 'lay12_44', 'lay12_46', 'lay12_55', 'lay12_184', 'lay12_109', 'lay12_3', 'lay12_28', 'lay12_119', 'lay12_106', 'lay12_40', 'lay12_129', 'lay12_19', 'lay12_96', 'lay12_149', 'lay12_76', 'lay12_163', 'lay12_68', 'lay12_108', 'lay12_183', 'lay12_80', 'lay12_45', 'lay12_78', 'lay12_56', 'lay12_17', 'lay12_151', 'lay12_190', 'lay12_133', 'lay12_174', 'lay12_132', 'lay12_127', 'lay12_130', 'lay12_66', 'lay12_179', 'lay12_81', 'lay12_146', 'lay12_21', 'lay12_47', 'lay12_176', 'lay12_10', 'lay12_70', 'lay12_24', 'lay12_131', 'lay12_147', 'lay12_20', 'lay12_140', 'lay12_22', 'lay12_77', 'lay12_2', 'lay12_193', 'lay12_100', 'lay12_12', 'lay12_75', 'lay12_137', 'lay12_153', 'lay12_6', 'lay12_159', 'lay12_172', 'lay12_26', 'lay12_125', 'lay12_101', 'lay12_38', 'lay12_7', 'lay12_11', 'lay12_85', 'lay12_5', 'lay12_121', 'lay12_104', 'lay12_92', 'lay12_112', 'lay12_198', 'lay12_169', 'lay12_79', 'lay12_97', 'lay12_91', 'lay12_65', 'lay12_195', 'lay12_178', 'lay12_107', 'lay12_167', 'lay12_115', 'lay12_94', 'lay12_43', 'lay12_90', 'lay12_14', 'lay12_180', 'lay12_156', 'lay12_110', 'lay12_126', 'lay12_152', 'lay12_0', 'lay12_88', 'lay12_191', 'lay12_4', 'lay12_116', 'lay12_177', 'lay12_164', 'lay12_175', 'lay12_157', 'lay12_9', 'lay12_33', 'lay12_83', 'lay12_117', 'lay12_162', 'lay12_103', 'lay12_105', 'lay12_36', 'lay12_8', 'lay12_74', 'lay12_102', 'lay12_170', 'lay12_82', 'lay12_18', 'lay12_50', 'lay12_49', 'lay12_124', 'lay12_143', 'lay12_122', 'lay12_1', 'lay12_93', 'lay12_16', 'lay12_113', 'lay12_165', 'lay12_60', 'lay12_63', 'lay12_161', 'lay12_181', 'lay12_95', 'lay12_186', 'lay12_62', 'lay12_59', 'lay12_192', 'lay12_42', 'lay12_54', 'lay12_87', 'lay12_135', 'lay12_64', 'lay12_185', 'lay12_32', 'lay12_188', 'lay12_69', 'lay12_158', 'lay12_189', 'lay12_134', 'lay12_99', 'lay12_155', 'lay12_37', 'lay12_138', 'lay12_89', 'lay12_144', 'lay12_196', 'lay12_29', 'lay12_173'] filter: 1.0
Solving MIP for lay12_120, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0206s, #vars: 2337, #constrs: 1728, improved: True
Solving MIP for lay12_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0273s, #vars: 2337, #constrs: 1728, improved: True
Solving MIP for lay12_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0384s, #vars: 2337, #constrs: 1728, improved: True
Solving MIP for lay12_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0355s, #vars: 2337, #constrs: 1728, improved: True
Solving MIP for lay12_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0588s, #vars: 2337, #constrs: 1728, improved: True
Solving MIP for lay12_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0682s, #vars: 2337, #constrs: 1728, improved: True
Solving MIP for lay12_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0715s, #vars: 2337, #constrs: 1728, improved: True
Solving MIP for lay12_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0693s, #vars: 2337, #constrs: 1728, improved: True
Solving MIP for lay12_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0906s, #vars: 2337, #constrs: 1728, improved: True
Solving MIP for lay12_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0986s, #vars: 2337, #constrs: 1728, improved: True
Solving MIP for lay12_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1134s, #vars: 2337, #constrs: 1728, improved: True
Solving MIP for lay12_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1281s, #vars: 2337, #constrs: 1728, improved: True
PGD done for relu layer 6
Run alpha-CROWN after refining layer 10 and relu idx 4
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 4 has unstable to stable neurons: [(97, -1), (123, -1), (86, -1), (49, -1), (58, -1), (61, -1), (171, -1), (93, -1), (164, -1), (139, -1), (112, -1), (50, -1), (170, -1), (157, -1), (148, -1), (118, -1), (174, -1), (138, -1), (62, -1), (83, -1), (65, -1), (131, -1), (82, -1), (7, -1), (126, -1), (34, -1), (99, -1), (151, -1), (199, -1), (57, -1), (12, -1), (80, -1), (198, -1), (125, -1), (15, -1), (56, -1), (129, -1), (67, -1), (31, -1), (180, -1), (39, -1), (183, -1), (91, -1), (74, -1), (55, -1), (37, -1), (73, -1), (128, -1), (68, -1), (149, -1), (100, -1), (23, 1), (95, -1), (102, -1), (28, -1), (114, -1), (9, -1), (181, -1), (153, -1), (190, -1), (29, -1), (104, -1), (169, -1), (41, -1), (8, -1), (78, -1), (161, -1), (96, -1), (162, -1), (135, -1), (115, -1), (14, -1), (121, -1), (53, 1), (75, -1), (155, -1), (19, -1), (173, -1), (38, -1), (132, -1), (45, 1), (63, -1), (70, -1), (17, -1), (11, -1), (142, -1), (192, -1), (144, -1), (48, -1), (22, -1), (182, 1), (158, -1), (124, 1), (133, -1), (5, -1), (103, 1), (109, -1), (47, 1), (98, -1), (116, -1), (143, 1), (6, 1), (187, -1), (189, -1), (33, -1), (2, 1), (40, -1), (84, 1), (76, -1), (160, -1), (51, -1), (120, -1), (172, -1), (188, 1), (18, -1), (179, -1), (184, -1), (1, 1), (105, 1), (69, 1), (154, -1), (72, 1), (150, -1), (30, -1), (0, -1), (13, -1), (145, -1), (146, 1), (3, -1), (113, -1), (137, -1), (186, 1), (140, -1), (42, 1), (176, 1), (134, -1), (163, 1)]

all verified at 0th iter
best_l after optimization: 32.115455627441406
beta sum per layer: []
alpha/beta optimization time: 0.09506583213806152
alpha-CROWN with intermediate bounds by MIP: tensor([[5.50042486, 3.34553170, 2.15078354, 0.59834623, 4.73245382, 4.13400793,
         6.39962387, 3.05100107, 2.20328259]], device='cuda:0') None
min of alpha-CROWN bounds 0.5983462333679199>=0, verified!
MIP finished with 300.41665148735046s
Run final alpha-CROWN after MIP solving on layer 11 and relu idx 5
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: 32.115455627441406
beta sum per layer: []
alpha/beta optimization time: 0.06429314613342285
alpha-CROWN with intermediate bounds improved by MIP: tensor([[5.50042486, 3.34553170, 2.15078354, 0.59834623, 4.73245382, 4.13400793,
         6.39962387, 3.05100107, 2.20328259]], device='cuda:0') None
Split layers:
  BoundLinear(name=/input.27, inputs=[/40, /15, /16]): [(BoundRelu(name=/42, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.23, inputs=[/38, /13, /14]): [(BoundRelu(name=/40, inputs=[/input.23]), 0)]
  BoundLinear(name=/input, inputs=[/26, /1, /2]): [(BoundRelu(name=/28, inputs=[/input]), 0)]
  BoundLinear(name=/input.19, inputs=[/36, /11, /12]): [(BoundRelu(name=/38, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.15, inputs=[/34, /9, /10]): [(BoundRelu(name=/36, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.3, inputs=[/28, /3, /4]): [(BoundRelu(name=/30, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.7, inputs=[/30, /5, /6]): [(BoundRelu(name=/32, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.11, inputs=[/32, /7, /8]): [(BoundRelu(name=/34, inputs=[/input.11]), 0)]
refined global lb: tensor([[5.50042486],
        [3.34553170],
        [2.15078354],
        [0.59834623],
        [4.73245382],
        [4.13400793],
        [6.39962387],
        [3.05100107],
        [2.20328259]], device='cuda:0') min: tensor(0.59834623, device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
Result: safe-incomplete-refine in 322.1945 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):322.1912565992443, max time: 322.1944785118103
mean time for verified SAFE instances(total 1): 322.1944785118103, max time: 322.1944785118103
safe-incomplete-refine (total 1), index: [0]
