Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_9_200
  path: mnist_9_200_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 65
  end: 66
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.015
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 500.0
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: skip
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 15:44:18 2023 on zeratul
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=200, bias=True)
  (2): ReLU()
  (3): Linear(in_features=200, out_features=200, bias=True)
  (4): ReLU()
  (5): Linear(in_features=200, out_features=200, bias=True)
  (6): ReLU()
  (7): Linear(in_features=200, out_features=200, bias=True)
  (8): ReLU()
  (9): Linear(in_features=200, out_features=200, bias=True)
  (10): ReLU()
  (11): Linear(in_features=200, out_features=200, bias=True)
  (12): ReLU()
  (13): Linear(in_features=200, out_features=200, bias=True)
  (14): ReLU()
  (15): Linear(in_features=200, out_features=200, bias=True)
  (16): ReLU()
  (17): Linear(in_features=200, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226457)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_9_200]_start=65_end=66_iter=20_b=1024_timeout=500.0_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=skip_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundParams(name=/13, inputs=[])
  (/14): BoundParams(name=/14, inputs=[])
  (/15): BoundParams(name=/15, inputs=[])
  (/16): BoundParams(name=/16, inputs=[])
  (/17): BoundParams(name=/17, inputs=[])
  (/18): BoundParams(name=/18, inputs=[])
  (/19): BoundShape(name=/19, inputs=[/0])
  (/20): BoundConstant(name=/20, inputs=[])
  (/21): BoundGather(name=/21, inputs=[/19, /20])
  (/22): BoundConstant(name=/22, inputs=[])
  (/23): BoundUnsqueeze(name=/23, inputs=[/21])
  (/24): BoundUnsqueeze(name=/24, inputs=[/22])
  (/25): BoundConcat(name=/25, inputs=[/23, /24])
  (/26): BoundReshape(name=/26, inputs=[/0, /25])
  (/input): BoundLinear(name=/input, inputs=[/26, /1, /2])
  (/28): BoundRelu(name=/28, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/28, /3, /4])
  (/30): BoundRelu(name=/30, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/30, /5, /6])
  (/32): BoundRelu(name=/32, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/32, /7, /8])
  (/34): BoundRelu(name=/34, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/34, /9, /10])
  (/36): BoundRelu(name=/36, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/36, /11, /12])
  (/38): BoundRelu(name=/38, inputs=[/input.19])
  (/input.23): BoundLinear(name=/input.23, inputs=[/38, /13, /14])
  (/40): BoundRelu(name=/40, inputs=[/input.23])
  (/input.27): BoundLinear(name=/input.27, inputs=[/40, /15, /16])
  (/42): BoundRelu(name=/42, inputs=[/input.27])
  (/43): BoundLinear(name=/43, inputs=[/42, /17, /18])
)
Model prediction is: tensor([[-1.23322034, -1.39387631, -0.11875681, -2.08025169,  4.47272348,
         -0.79578972, -0.22910592, -0.09808648, -0.02926138,  2.37303758]],
       device='cuda:0')
layer /28 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 80 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [80]; unstable size 80; total size 200 (torch.Size([1, 200]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [166]; unstable size 166; total size 200 (torch.Size([1, 200]))
layer /32 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /34 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /36 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /38 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /40 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1974.15039062, -3272.86962891, -3893.02392578, -4327.14453125,
         -3726.78491211, -3177.81347656, -2992.27075195, -3873.68090820,
         -3264.65136719]], device='cuda:0') None
best_l after optimization: -20395.2890625
alpha/beta optimization time: 13.748626947402954
initial alpha-CROWN bounds: tensor([[-1365.71728516, -2124.90454102, -2625.00048828, -2860.06054688,
         -2529.31811523, -2158.13330078, -1970.07019043, -2567.32983398,
         -2194.75561523]], device='cuda:0')
Worst class: (+ rhs) -2860.060546875
Split layers:
  BoundLinear(name=/input.15, inputs=[/34, /9, /10]): [(BoundRelu(name=/36, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.3, inputs=[/28, /3, /4]): [(BoundRelu(name=/30, inputs=[/input.3]), 0)]
  BoundLinear(name=/input, inputs=[/26, /1, /2]): [(BoundRelu(name=/28, inputs=[/input]), 0)]
  BoundLinear(name=/input.19, inputs=[/36, /11, /12]): [(BoundRelu(name=/38, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.23, inputs=[/38, /13, /14]): [(BoundRelu(name=/40, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.27, inputs=[/40, /15, /16]): [(BoundRelu(name=/42, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.7, inputs=[/30, /5, /6]): [(BoundRelu(name=/32, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.11, inputs=[/32, /7, /8]): [(BoundRelu(name=/34, inputs=[/input.11]), 0)]
Start solving intermediate bounds with MIP...
layer /28 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 80 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [80]; unstable size 80; total size 200 (torch.Size([1, 200]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [166]; unstable size 166; total size 200 (torch.Size([1, 200]))
layer /32 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /34 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /36 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /38 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /40 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2024-02-29
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 400.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_55', 'lay4_148', 'lay4_70', 'lay4_41', 'lay4_125', 'lay4_1', 'lay4_69', 'lay4_27', 'lay4_144', 'lay4_190', 'lay4_167', 'lay4_89', 'lay4_93', 'lay4_122', 'lay4_129', 'lay4_92', 'lay4_195', 'lay4_43', 'lay4_49', 'lay4_155', 'lay4_171', 'lay4_61', 'lay4_168', 'lay4_112', 'lay4_151', 'lay4_87', 'lay4_4', 'lay4_189', 'lay4_42', 'lay4_50', 'lay4_152', 'lay4_176', 'lay4_91', 'lay4_198', 'lay4_139', 'lay4_170', 'lay4_9', 'lay4_88', 'lay4_124', 'lay4_153', 'lay4_17', 'lay4_145', 'lay4_75', 'lay4_178', 'lay4_2', 'lay4_120', 'lay4_131', 'lay4_141', 'lay4_143', 'lay4_102', 'lay4_150', 'lay4_13', 'lay4_138', 'lay4_80', 'lay4_53', 'lay4_19', 'lay4_28', 'lay4_157', 'lay4_38', 'lay4_158', 'lay4_140', 'lay4_57', 'lay4_26', 'lay4_183', 'lay4_187', 'lay4_134', 'lay4_162', 'lay4_11', 'lay4_173', 'lay4_114', 'lay4_104', 'lay4_59', 'lay4_12', 'lay4_160', 'lay4_37', 'lay4_48', 'lay4_90', 'lay4_33', 'lay4_58', 'lay4_106'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/Verifier_Development/complete_verifier/data_utils.py:257: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5468s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7108s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-inf,-0.0038919980100255436] (-1,-1; 2,-1), time: 0.7516s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_125, [-inf,inf]=>[1e-05,1.0580714255714592] (15,-1; 2,-1), time: 1.5961s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_122, [-inf,inf]=>[-0.5725129937688769,0.10243085830486601] (2,-1; 2,-1), time: 2.3730s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-0.28779582648753577,0.33553821575784926] (2,-1; 2,-1), time: 2.4349s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7414s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_148, [-inf,inf]=>[-0.09858558981608281,0.48655006700324066] (2,-1; 2,-1), time: 2.6152s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_129, [-inf,inf]=>[-0.5664662431997018,0.08530658228175744] (2,-1; 2,-1), time: 3.0558s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8877s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[-0.09928593386448975,0.6341193144328605] (2,-1; 2,-1), time: 3.6067s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-0.4535490612917294,0.3998815692915508] (2,-1; 2,-1), time: 1.4422s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-0.611271866692001,0.0782267362058654] (2,-1; 2,-1), time: 4.7738s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_195, [-inf,inf]=>[-0.2841018606166258,0.21485389890631806] (2,-1; 2,-1), time: 4.2355s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[-0.2508910929583475,0.40912173946696756] (2,-1; 2,-1), time: 4.8722s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-0.6066510561343752,0.048864642298086555] (2,-1; 2,-1), time: 4.9336s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.4921205631719379,0.08434786541449556] (2,-1; 2,-1), time: 5.0023s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4812s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4897s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_167, [-inf,inf]=>[-0.1271685542526761,0.4701278602355656] (2,-1; 2,-1), time: 5.3094s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_144, [-inf,inf]=>[-0.4634763554766914,0.17440316825736485] (2,-1; 2,-1), time: 5.4493s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_155, [-inf,inf]=>[-0.46666340811765084,0.04666979403789304] (2,-1; 2,-1), time: 3.9631s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_61, [-inf,inf]=>[-0.5689002068463502,0.06335039979476734] (2,-1; 2,-1), time: 3.2754s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4257s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_190, [-inf,inf]=>[-0.4348654883974111,0.024040689700957404] (2,-1; 2,-1), time: 5.7480s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[-0.2755399111846545,0.2720863430006764] (2,-1; 2,-1), time: 3.8791s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.2785986421658376,0.36219052864663437] (2,-1; 2,-1), time: 5.9844s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[-0.32161107549551343,0.3195818409121389] (2,-1; 2,-1), time: 4.2510s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[1e-05,0.6870558462920322] (15,-1; 2,-1), time: 1.4903s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_151, [-inf,inf]=>[-0.5990171004125855,0.053618736246234706] (2,-1; 2,-1), time: 4.3458s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_124, [-inf,inf]=>[-0.8767801584758824,0.08627455035716829] (2,-1; 2,-1), time: 1.9861s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-0.4497504210317859,0.1387082172528141] (2,-1; 2,-1), time: 4.4587s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3940s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_153, [-inf,inf]=>[-0.6269583709206648,0.20437233541386587] (2,-1; 2,-1), time: 2.3875s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-0.12578141133526224,0.5222854949185309] (2,-1; 2,-1), time: 3.5468s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[1e-05,0.6858594745927133] (15,-1; 2,-1), time: 1.7459s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4395s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_17, [-inf,inf]=>[1e-05,0.6519248506824873] (15,-1; 2,-1), time: 3.1362s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-0.14912173032250514,0.4334299184925384] (2,-1; 2,-1), time: 4.0968s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_88, [-inf,inf]=>[-0.16275744539699327,0.3092572166247103] (2,-1; 2,-1), time: 3.5450s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3688s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_170, [-inf,inf]=>[-0.4218639513708669,0.2459025143388978] (2,-1; 2,-1), time: 4.2405s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[1e-05,0.7440249612960121] (15,-1; 2,-1), time: 1.2388s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_152, [-inf,inf]=>[-0.08241312113455374,0.6214279896205994] (2,-1; 2,-1), time: 4.9283s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_176, [-inf,inf]=>[-0.020883922547118097,0.5547725248382699] (2,-1; 2,-1), time: 4.9203s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_120, [-inf,inf]=>[-0.6330926440728482,0.00942608306147169] (2,-1; 2,-1), time: 2.8734s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4351s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_145, [-inf,inf]=>[-0.4672822864083447,0.042838727915735945] (2,-1; 2,-1), time: 4.3772s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.20501974986237664,0.4492334011302265] (2,-1; 2,-1), time: 4.1127s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_198, [-inf,inf]=>[-0.7265845043099685,0.02276988523612014] (2,-1; 2,-1), time: 5.9580s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[1e-05,0.6142538682704056] (15,-1; 2,-1), time: 2.1869s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-0.46798220743197794,0.18766465332703025] (2,-1; 2,-1), time: 4.9267s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4173s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5168s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4411s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_141, [-inf,inf]=>[-0.6786889319441509,0.024963392506593324] (2,-1; 2,-1), time: 4.5174s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[1e-05,0.6998191994683113] (15,-1; 2,-1), time: 3.5326s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_102, [-inf,inf]=>[-0.1673877338779562,0.5141004084103082] (2,-1; 2,-1), time: 4.5515s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4084s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[1e-05,0.6475243890728595] (15,-1; 2,-1), time: 3.9864s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-0.3312754921384189,0.29042006341129323] (2,-1; 2,-1), time: 5.0968s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_138, [-inf,inf]=>[-0.3287860485708597,0.17908761733018042] (2,-1; 2,-1), time: 5.3039s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[1e-05,0.5985625771841445] (15,-1; 2,-1), time: 4.3357s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[-0.08113158873529167,0.5442746658913118] (2,-1; 2,-1), time: 2.8976s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_140, [-inf,inf]=>[-0.3634887532321238,0.2126128884381545] (2,-1; 2,-1), time: 4.1614s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4880s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_157, [-inf,inf]=>[-0.38906151214566076,0.42880607257164277] (2,-1; 2,-1), time: 4.6239s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_158, [-inf,inf]=>[-0.22711000798038672,0.27006461657584774] (2,-1; 2,-1), time: 4.9532s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_183, [-inf,inf]=>[-0.036834171517131364,0.6468687834416889] (2,-1; 2,-1), time: 4.0678s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-inf,-0.00011449408781188247] (-1,-1; 2,-1), time: 1.2817s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_160, [-inf,inf]=>[1e-05,0.9648465667377275] (15,-1; 2,-1), time: 2.8763s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.1658755412330822,0.6270879880634348] (2,-1; 2,-1), time: 5.0328s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-0.09643917273481417,0.3970436972797079] (2,-1; 2,-1), time: 4.2801s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-0.38914356323087396,0.20246668771033405] (2,-1; 2,-1), time: 3.5034s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_134, [-inf,inf]=>[-0.46726919277057943,0.08064691547481669] (2,-1; 2,-1), time: 5.9833s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-0.3210741507005783,0.34170889493936796] (2,-1; 2,-1), time: 3.7293s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[-0.30515719087730775,0.3247419089049983] (2,-1; 2,-1), time: 5.0886s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_114, [-inf,inf]=>[-0.5237640491468563,0.027956496296396606] (2,-1; 2,-1), time: 5.5776s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_106, [-inf,inf]=>[0.0031025901298636985,0.5582408312247434] (2,-1; 2,-1), time: 4.2027s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-0.3995830575392084,0.21552885417522272] (2,-1; 2,-1), time: 5.4903s, #vars: 1277, #constrs: 538, improved: True
PGD done for relu layer 2
MIP improved 80 nodes out of 80 unstable nodes, lb improved 10.54261589050293, ub improved 12.436159133911133, time 20.8807
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_143', 'lay6_139', 'lay6_158', 'lay6_17', 'lay6_77', 'lay6_34', 'lay6_16', 'lay6_112', 'lay6_33', 'lay6_166', 'lay6_28', 'lay6_172', 'lay6_127', 'lay6_190', 'lay6_183', 'lay6_60', 'lay6_160', 'lay6_32', 'lay6_125', 'lay6_159', 'lay6_10', 'lay6_41', 'lay6_27', 'lay6_123', 'lay6_119', 'lay6_124', 'lay6_64', 'lay6_178', 'lay6_50', 'lay6_146', 'lay6_96', 'lay6_164', 'lay6_174', 'lay6_121', 'lay6_36', 'lay6_11', 'lay6_118', 'lay6_78', 'lay6_1', 'lay6_152', 'lay6_63', 'lay6_71', 'lay6_75', 'lay6_193', 'lay6_7', 'lay6_99', 'lay6_5', 'lay6_65', 'lay6_58', 'lay6_197', 'lay6_101', 'lay6_47', 'lay6_169', 'lay6_132', 'lay6_42', 'lay6_130', 'lay6_138', 'lay6_59', 'lay6_23', 'lay6_144', 'lay6_95', 'lay6_187', 'lay6_115', 'lay6_45', 'lay6_100', 'lay6_167', 'lay6_79', 'lay6_62', 'lay6_199', 'lay6_147', 'lay6_135', 'lay6_22', 'lay6_106', 'lay6_43', 'lay6_19', 'lay6_54', 'lay6_131', 'lay6_49', 'lay6_102', 'lay6_136', 'lay6_116', 'lay6_69', 'lay6_3', 'lay6_38', 'lay6_18', 'lay6_185', 'lay6_108', 'lay6_30', 'lay6_129', 'lay6_192', 'lay6_141', 'lay6_12', 'lay6_85', 'lay6_109', 'lay6_162', 'lay6_40', 'lay6_155', 'lay6_186', 'lay6_142', 'lay6_137', 'lay6_117', 'lay6_81', 'lay6_57', 'lay6_140', 'lay6_145', 'lay6_9', 'lay6_111', 'lay6_73', 'lay6_120', 'lay6_74', 'lay6_163', 'lay6_94', 'lay6_83', 'lay6_173', 'lay6_20', 'lay6_181', 'lay6_156', 'lay6_195', 'lay6_122', 'lay6_179', 'lay6_0', 'lay6_110', 'lay6_4', 'lay6_93', 'lay6_55', 'lay6_189', 'lay6_35', 'lay6_72', 'lay6_88', 'lay6_53', 'lay6_171', 'lay6_170', 'lay6_8', 'lay6_70', 'lay6_161', 'lay6_168', 'lay6_25', 'lay6_114', 'lay6_87', 'lay6_198', 'lay6_46', 'lay6_29', 'lay6_82', 'lay6_165', 'lay6_107', 'lay6_51', 'lay6_61', 'lay6_15', 'lay6_191', 'lay6_157', 'lay6_150', 'lay6_68', 'lay6_177', 'lay6_154', 'lay6_21', 'lay6_98', 'lay6_182', 'lay6_153', 'lay6_104', 'lay6_92'] filter: 1.0
Solving MIP for lay6_166, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6170s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3919s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2712s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.3957s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.3289s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.1259s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_127, [-inf,inf]=>[-0.3907927069207578,0.19817423488967317] (9,-1; 2,-1), time: 20.6863s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.7677146342601465,0.0821409596067462] (2,-1; 9,-1), time: 21.7711s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-0.3480127375760683,0.19695324622141663] (9,-1; 2,-1), time: 22.7852s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0391s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-0.7259249204898299,0.08557120004276714] (2,-1; 9,-1), time: 23.9091s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-0.32118196145873656,0.232074619145236] (9,-1; 2,-1), time: 24.7120s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-0.5187969954691091,0.5908831015347625] (9,-1; 2,-1), time: 28.6386s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-0.460106793905154,0.11295146358780038] (2,-1; 9,-1), time: 25.0774s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_158, [-inf,inf]=>[-0.47464616613024163,0.18450110826019692] (9,-1; 9,-1), time: 30.0364s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_183, [-inf,inf]=>[-0.5393772573995388,0.09015653624642751] (9,-1; 9,-1), time: 30.2919s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-0.49108136470478,0.14783023590052677] (9,-1; 9,-1), time: 30.3540s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_172, [-inf,inf]=>[-0.3177823460085551,0.29677289289129755] (9,-1; 9,-1), time: 30.5820s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_112, [-inf,inf]=>[-0.5029644541508685,0.0907684599264608] (9,-1; 9,-1), time: 30.7342s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4461s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.5017s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[-0.4224860834463904,0.06987238692913289] (9,-1; 9,-1), time: 30.0116s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4440s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9855s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_164, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0278s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4439s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1193s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.8085s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_159, [-inf,inf]=>[-0.6303573759029735,0.1652240556444661] (9,-1; 9,-1), time: 30.1912s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.2644599758167429,0.3367159076575091] (9,-1; 9,-1), time: 30.0147s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-0.7639571635684858,0.10446745960735669] (9,-1; 2,-1), time: 22.1935s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-0.16391409567041992,0.3517359695147116] (9,-1; 9,-1), time: 30.0211s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4243s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-0.23651085486738893,0.6531721223506007] (9,-1; 2,-1), time: 21.6576s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.21223802788156113,0.24656893068940164] (9,-1; 2,-1), time: 20.2659s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3838s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_197, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5409s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0996s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1263s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[1e-05,0.8210084881309905] (15,-1; 9,-1), time: 16.1167s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_130, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9808s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[1e-05,0.5961844686751536] (15,-1; 9,-1), time: 20.9512s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4428s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.5669s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9392s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_174, [-inf,inf]=>[-0.6003412538595322,0.03951978712720006] (9,-1; 2,-1), time: 22.0813s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4372s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0843s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[-0.6764636681302272,0.0561878817337558] (9,-1; 2,-1), time: 19.7248s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.3779s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4432s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_115, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5659s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-0.46594604006530144,0.047436959267522075] (9,-1; 2,-1), time: 22.2460s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[1e-05,0.9281927390011641] (15,-1; 2,-1), time: 9.8150s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-0.5188910784644472,0.004115044402469422] (2,-1; 9,-1), time: 29.3091s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_147, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4287s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-0.1211058952672012,0.6894041982143575] (9,-1; 2,-1), time: 28.9094s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.7821s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[-0.39939814470632395,0.3831099505029088] (9,-1; 9,-1), time: 30.0244s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5477s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4509s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.2980554414406762,0.3112858979566654] (9,-1; 9,-1), time: 30.0146s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4444s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.3954229553986354,0.10043415861568067] (9,-1; 9,-1), time: 30.4459s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4367s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-0.5150963862920318,0.011384477425399208] (9,-1; 2,-1), time: 27.8362s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-0.33238483627852344,0.17116600198035123] (9,-1; 9,-1), time: 30.0155s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0868s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-0.15225443857527612,0.4898752111616299] (9,-1; 2,-1), time: 22.0131s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.9754s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4259s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.2869s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4514s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.3733s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_129, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0937s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1083s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2662s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3986s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_132, [-inf,inf]=>[-0.4577820168172881,0.05290255156922011] (2,-1; 9,-1), time: 29.1636s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5268s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5760s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.4372s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-0.12292063553151865,0.47815693542111565] (9,-1; 9,-1), time: 30.0194s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4337s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_100, [-inf,inf]=>[-0.30444238390108536,0.25642567230000185] (9,-1; 9,-1), time: 30.0113s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.33581693399950524,0.2161143387519911] (9,-1; 9,-1), time: 30.0253s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-0.31464183634607273,0.2125558757584227] (9,-1; 9,-1), time: 30.0169s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4550s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4214s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-0.5943057269249127,0.06702684502562853] (9,-1; 9,-1), time: 30.0330s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4446s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-0.47561337995090586,0.009173352469202187] (9,-1; 2,-1), time: 25.1728s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.465837778727895,0.08204132288770154] (9,-1; 9,-1), time: 30.3073s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[-0.2944542051381122,0.160916362172466] (9,-1; 9,-1), time: 30.0274s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_140, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.2457s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1083s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_116, [-inf,inf]=>[-0.28104652115505574,0.3077295895705269] (9,-1; 9,-1), time: 30.0235s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_155, [-inf,inf]=>[-0.4038993819124623,0.4612109317348467] (2,-1; 2,-1), time: 18.8511s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5123s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.014011095559282564,0.6123621344131249] (9,-1; 9,-1), time: 30.0101s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_185, [-inf,inf]=>[1e-05,0.6254055263337595] (15,-1; 9,-1), time: 29.2854s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5653s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.20792044014463287,0.2741322154977885] (9,-1; 9,-1), time: 30.0200s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_145, [-inf,inf]=>[1e-05,0.7072646058204508] (15,-1; 2,-1), time: 14.9291s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_141, [-inf,inf]=>[-0.19455697731172628,0.39397940277981414] (9,-1; 9,-1), time: 30.6496s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_120, [-inf,inf]=>[1e-05,0.8042652144397705] (15,-1; 2,-1), time: 11.1208s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_181, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.9594s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_109, [-inf,inf]=>[-0.3677012228650348,0.21600946260798207] (9,-1; 9,-1), time: 30.4638s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4903s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4108s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_111, [-inf,inf]=>[1e-05,0.5949896474185334] (15,-1; 9,-1), time: 21.1679s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-0.239561060965202,0.2524463312439423] (9,-1; 9,-1), time: 30.0150s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4265s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_137, [-inf,inf]=>[-0.43219942464504263,0.11137325124324116] (9,-1; 2,-1), time: 29.8095s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-0.322963271068909,0.04982730445117155] (9,-1; 9,-1), time: 30.0318s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[-0.05779076657160559,0.4673900528874166] (9,-1; 2,-1), time: 20.2848s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[1e-05,0.597060516714233] (15,-1; 9,-1), time: 16.7095s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-0.22038976956177872,0.6514392971688857] (9,-1; 2,-1), time: 26.5440s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-0.11065120782891977,0.5938685806608611] (9,-1; 2,-1), time: 26.5038s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5111s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4741s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.34011387101659935,0.11443251908302575] (9,-1; 9,-1), time: 30.0522s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5047s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4115s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4599s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[1e-05,0.7200397775747853] (15,-1; 9,-1), time: 16.0245s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.7637s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4521s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.4251s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-0.39730225685230863,0.09221995163451363] (9,-1; 9,-1), time: 30.1757s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5080s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.0544s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-0.21846565313932376,0.6444467878265602] (2,-1; 2,-1), time: 23.1562s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4254s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5374s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0226s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5128s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6784s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_195, [-inf,inf]=>[-0.2012182307257044,0.40557217132336193] (9,-1; 9,-1), time: 30.3307s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[-0.4428588646063119,0.17809084714596743] (9,-1; 9,-1), time: 30.1468s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_177, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5533s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4450s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_182, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4962s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_179, [-inf,inf]=>[-0.09256845864315101,0.4796109679513771] (9,-1; 9,-1), time: 30.3253s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[-0.3526544513904949,0.30641236386192827] (9,-1; 9,-1), time: 30.0164s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.5328871575198855,0.13660876360717958] (9,-1; 2,-1), time: 23.1109s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_153, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0500s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.4395s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_189, [-inf,inf]=>[-0.43107571142610146,0.026344650333963233] (9,-1; 9,-1), time: 30.0329s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[1e-05,0.7721028722185701] (15,-1; 2,-1), time: 5.6817s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_154, [-inf,inf]=>[1e-05,1.3660579297662439] (15,-1; 2,-1), time: 8.6636s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-0.051967750898796294,0.5957708049620815] (9,-1; 2,-1), time: 26.3430s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.2733479605347187,0.19631147139397734] (9,-1; 2,-1), time: 21.8688s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-0.609925663816419,0.03526476007221149] (9,-1; 2,-1), time: 21.8743s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_107, [-inf,inf]=>[-0.3684319650664244,0.1042134818627215] (9,-1; 2,-1), time: 22.0653s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.08192384069121031,0.3588103216953988] (9,-1; 9,-1), time: 30.4845s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_161, [-inf,inf]=>[-0.30800865099398445,0.223111335847228] (9,-1; 9,-1), time: 30.0812s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.34526808890897875,0.2837416338761732] (9,-1; 2,-1), time: 24.8043s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.4239737917803091,0.20556488003953505] (9,-1; 2,-1), time: 22.2954s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_104, [-inf,inf]=>[-0.5122570372153162,0.04780968120734001] (9,-1; 9,-1), time: 30.0242s, #vars: 1579, #constrs: 891, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(125, 1), (27, -1), (89, -1), (93, -1), (49, -1), (171, -1), (189, -1), (50, -1), (139, -1), (9, 1), (17, 1), (75, 1), (131, -1), (143, -1), (150, 1), (80, -1), (53, 1), (19, 1), (28, 1), (38, 1), (57, -1), (162, -1), (11, -1), (173, -1), (12, -1), (160, 1), (90, -1), (58, -1), (106, 1)]
best_l after optimization: -9261.98046875
beta sum per layer: []
alpha/beta optimization time: 15.011498212814331
alpha-CROWN with intermediate bounds by MIP: tensor([[ -620.37274170,  -964.66333008, -1191.88769531, -1298.64941406,
         -1148.96081543,  -979.80108643,  -894.52740479, -1166.23229980,
          -996.88555908]], device='cuda:0') None
MIP improved 160 nodes out of 160 unstable nodes, lb improved 33.056480407714844, ub improved 45.97343444824219, time 159.3370
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_15', 'lay8_140', 'lay8_85', 'lay8_35', 'lay8_70', 'lay8_118', 'lay8_102', 'lay8_156', 'lay8_25', 'lay8_76', 'lay8_134', 'lay8_34', 'lay8_60', 'lay8_42', 'lay8_113', 'lay8_146', 'lay8_170', 'lay8_189', 'lay8_54', 'lay8_149', 'lay8_109', 'lay8_6', 'lay8_19', 'lay8_92', 'lay8_40', 'lay8_91', 'lay8_21', 'lay8_100', 'lay8_162', 'lay8_122', 'lay8_144', 'lay8_105', 'lay8_32', 'lay8_182', 'lay8_56', 'lay8_86', 'lay8_142', 'lay8_155', 'lay8_117', 'lay8_53', 'lay8_24', 'lay8_73', 'lay8_115', 'lay8_190', 'lay8_154', 'lay8_125', 'lay8_178', 'lay8_150', 'lay8_84', 'lay8_4', 'lay8_157', 'lay8_39', 'lay8_66', 'lay8_104', 'lay8_37', 'lay8_69', 'lay8_195', 'lay8_23', 'lay8_74', 'lay8_63', 'lay8_192', 'lay8_77', 'lay8_120', 'lay8_171', 'lay8_83', 'lay8_187', 'lay8_71', 'lay8_49', 'lay8_62', 'lay8_3', 'lay8_94', 'lay8_64', 'lay8_112', 'lay8_29', 'lay8_45', 'lay8_31', 'lay8_124', 'lay8_176', 'lay8_96', 'lay8_87', 'lay8_163', 'lay8_168', 'lay8_188', 'lay8_116', 'lay8_14', 'lay8_59', 'lay8_61', 'lay8_174', 'lay8_36', 'lay8_133', 'lay8_138', 'lay8_184', 'lay8_194', 'lay8_103', 'lay8_106', 'lay8_173', 'lay8_38', 'lay8_48', 'lay8_158', 'lay8_89', 'lay8_46', 'lay8_114', 'lay8_130', 'lay8_22', 'lay8_13', 'lay8_131', 'lay8_26', 'lay8_151', 'lay8_191', 'lay8_18', 'lay8_185', 'lay8_153', 'lay8_129', 'lay8_197', 'lay8_12', 'lay8_101', 'lay8_166', 'lay8_50', 'lay8_93', 'lay8_186', 'lay8_135', 'lay8_44', 'lay8_41', 'lay8_132', 'lay8_128', 'lay8_75', 'lay8_27', 'lay8_90', 'lay8_160', 'lay8_198', 'lay8_88', 'lay8_17', 'lay8_199', 'lay8_126', 'lay8_167', 'lay8_68', 'lay8_1', 'lay8_67', 'lay8_52', 'lay8_143', 'lay8_16', 'lay8_79', 'lay8_137', 'lay8_181', 'lay8_8', 'lay8_111', 'lay8_107', 'lay8_183', 'lay8_147', 'lay8_65', 'lay8_51', 'lay8_10', 'lay8_98', 'lay8_177', 'lay8_30', 'lay8_175', 'lay8_7', 'lay8_28', 'lay8_141', 'lay8_9', 'lay8_78', 'lay8_169', 'lay8_145', 'lay8_110', 'lay8_20', 'lay8_119', 'lay8_164', 'lay8_97', 'lay8_58', 'lay8_81', 'lay8_148', 'lay8_57', 'lay8_5', 'lay8_82', 'lay8_165', 'lay8_47', 'lay8_136', 'lay8_179', 'lay8_2', 'lay8_108', 'lay8_123', 'lay8_193', 'lay8_43', 'lay8_196', 'lay8_99', 'lay8_0', 'lay8_33', 'lay8_159', 'lay8_127', 'lay8_172', 'lay8_180', 'lay8_11', 'lay8_121', 'lay8_139', 'lay8_161', 'lay8_95', 'lay8_55', 'lay8_72', 'lay8_152', 'lay8_80'] filter: 1.0
Solving MIP for lay8_70, [-inf,inf]=>[-0.7639092905746023,0.05424923461981853] (9,-1; 9,-1), time: 30.0165s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_118, [-inf,inf]=>[-0.3915008226119058,0.21474195268455817] (9,-1; 9,-1), time: 30.0150s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_156, [-inf,inf]=>[-0.21663430412911122,0.6344822900954303] (9,-1; 9,-1), time: 30.0179s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_102, [-inf,inf]=>[-0.5054366299629539,0.3612576437144936] (9,-1; 9,-1), time: 30.0187s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-0.7499599159899265,0.19823461196092487] (9,-1; 9,-1), time: 30.0262s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_140, [-inf,inf]=>[-0.7489502546794787,0.21819090515932996] (9,-1; 9,-1), time: 30.0199s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_113, [-inf,inf]=>[-0.638734591344049,0.2764012816313887] (9,-1; 9,-1), time: 30.0214s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-0.8137692462872653,0.050704271259051865] (9,-1; 9,-1), time: 30.0234s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.6383448836826282,0.17728097161943338] (9,-1; 9,-1), time: 30.0235s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-0.9151765817406433,0.04604650629178561] (9,-1; 9,-1), time: 30.0247s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_134, [-inf,inf]=>[-0.5369350149013484,0.19504447619748883] (9,-1; 9,-1), time: 30.0255s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_146, [-inf,inf]=>[-0.6117336596431913,0.09554544496652449] (9,-1; 9,-1), time: 30.0248s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-0.5836413698426482,0.09397572556035624] (9,-1; 9,-1), time: 30.0389s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-0.5600758868046793,0.07042685637904601] (9,-1; 9,-1), time: 30.0401s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.5894668019008233,0.300311261848655] (9,-1; 9,-1), time: 30.1413s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-0.5314710363456944,0.02341221142519455] (9,-1; 9,-1), time: 30.2545s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7270s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6838s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.8524s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[1e-05,1.582929577366688] (15,-1; 9,-1), time: 15.6971s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.0290s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[-0.3096921389063913,0.32471549014927964] (9,-1; 9,-1), time: 30.0176s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.730359772005581,0.08898570675038989] (9,-1; 9,-1), time: 30.0131s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.6507974214877706,0.042137742557209736] (9,-1; 9,-1), time: 30.0120s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_109, [-inf,inf]=>[-0.3435303113595188,0.6141156409039075] (9,-1; 9,-1), time: 30.0253s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-0.4472195158062484,0.2430355806953142] (9,-1; 9,-1), time: 30.0199s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[-0.3871945304589643,0.2803217849044165] (9,-1; 9,-1), time: 30.0370s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.4148654540275165,0.18978178957267203] (9,-1; 9,-1), time: 30.0343s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.12844073846173973,1.0806056589870938] (9,-1; 9,-1), time: 30.0269s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-0.42201283158403985,0.4111464016281855] (9,-1; 9,-1), time: 30.0350s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_122, [-inf,inf]=>[-0.5575172703185218,0.0719158066229276] (9,-1; 9,-1), time: 30.0144s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-0.423475878912914,0.25296865881639163] (9,-1; 9,-1), time: 30.0325s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[-0.6748546248634982,0.19014901386284108] (9,-1; 9,-1), time: 30.0536s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[-0.4816897851621675,0.21647417279364106] (9,-1; 9,-1), time: 30.0164s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_182, [-inf,inf]=>[-0.5562100739742507,0.09171446486361666] (9,-1; 9,-1), time: 30.0096s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.9513s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-0.4840184186297039,0.18633464915706335] (9,-1; 9,-1), time: 30.0133s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_155, [-inf,inf]=>[1e-05,1.483306864209581] (15,-1; 9,-1), time: 15.8052s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7053s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_142, [-inf,inf]=>[-0.8523550404890935,0.07621562586409912] (9,-1; 9,-1), time: 30.0290s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.3149s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_117, [-inf,inf]=>[1e-05,0.9003772525287702] (15,-1; 9,-1), time: 29.0515s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-0.41954585554769086,0.31447203420677017] (9,-1; 9,-1), time: 30.0141s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[-0.32901375545968836,0.38523610382035584] (9,-1; 9,-1), time: 30.0128s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_115, [-inf,inf]=>[-0.14679803878333084,0.6924395750735935] (9,-1; 9,-1), time: 30.0130s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_190, [-inf,inf]=>[-0.30266900142870523,0.3659965848122102] (9,-1; 9,-1), time: 30.0184s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-0.7654382068426232,0.04538478232444553] (9,-1; 9,-1), time: 30.0188s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-0.32720087745304405,0.38343319642015566] (9,-1; 9,-1), time: 30.0249s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_150, [-inf,inf]=>[-0.6653064298844937,0.04462421004024092] (9,-1; 9,-1), time: 30.0139s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-0.6968735011238331,0.0534213239748293] (9,-1; 9,-1), time: 30.0347s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.6575535134479887,0.07557003751161562] (9,-1; 9,-1), time: 30.0160s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-0.42243531246543436,0.33526097098580354] (9,-1; 9,-1), time: 30.0141s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7213s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7366s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6345s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_157, [-inf,inf]=>[-0.15652794358813038,0.8879518266408598] (9,-1; 9,-1), time: 30.0163s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-0.7188493189387225,0.16686204168826263] (9,-1; 9,-1), time: 30.0165s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_104, [-inf,inf]=>[-0.6776532710406826,0.044946189570820444] (9,-1; 9,-1), time: 30.0432s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-1.2156456871292038,0.04432627419315973] (9,-1; 9,-1), time: 30.0956s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[1e-05,1.0428470494343443] (15,-1; 9,-1), time: 17.2553s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-0.4757658175266574,0.34881508031692593] (9,-1; 9,-1), time: 30.0151s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_124, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7936s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-0.8017936395712388,0.009224833681522207] (9,-1; 9,-1), time: 30.0172s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-0.7254489121031638,0.2143258868929384] (9,-1; 9,-1), time: 30.0133s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_120, [-inf,inf]=>[-0.4246929033325909,0.30359919566941457] (9,-1; 9,-1), time: 30.0481s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-0.6467399046387104,0.31532445026643313] (9,-1; 9,-1), time: 30.0187s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.5193808830365717,0.09184650029048967] (9,-1; 9,-1), time: 30.1012s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_187, [-inf,inf]=>[-0.7315138319810125,0.02883516454487256] (9,-1; 9,-1), time: 30.0562s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_171, [-inf,inf]=>[-0.2800368542056721,0.8681117547669103] (9,-1; 9,-1), time: 30.0914s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7659s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.5583568354691311,0.02619351352725798] (9,-1; 9,-1), time: 30.0237s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.4269491749857697,0.21799760660510967] (9,-1; 9,-1), time: 30.0133s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7288s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7456s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.5060203275170039,0.2558545426252466] (9,-1; 9,-1), time: 30.0091s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.6332932152069327,0.30391445629750574] (9,-1; 9,-1), time: 30.0155s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9149s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_112, [-inf,inf]=>[-0.513263488356675,0.19438376100082405] (9,-1; 9,-1), time: 30.0132s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_116, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.8507s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-0.4232568535593327,0.5482880775987393] (9,-1; 9,-1), time: 30.0429s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.5051262740108801,0.13809281283172697] (9,-1; 9,-1), time: 30.0261s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6823s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-0.251582932907148,0.3831579773604538] (9,-1; 9,-1), time: 30.0247s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.7193464781267096,0.35336965763193645] (9,-1; 9,-1), time: 30.0358s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_163, [-inf,inf]=>[-0.24638361057918334,0.36312397912898714] (9,-1; 9,-1), time: 30.0182s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_168, [-inf,inf]=>[-0.3648843635164212,0.5859017499733583] (9,-1; 9,-1), time: 30.0150s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-0.6564372542166395,0.03791376387627308] (9,-1; 9,-1), time: 30.0135s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.2504063255067398,0.4391737536508035] (9,-1; 9,-1), time: 30.0155s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-0.39493590382235066,0.33057963944040103] (9,-1; 9,-1), time: 30.0115s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_174, [-inf,inf]=>[-0.35016239996100246,0.5269839371765561] (9,-1; 9,-1), time: 30.0221s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-0.5781089296260454,0.0648175463504679] (9,-1; 9,-1), time: 30.0740s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_133, [-inf,inf]=>[-0.5776445030795593,0.15604915683660084] (9,-1; 9,-1), time: 30.0152s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_184, [-inf,inf]=>[-0.6491123159887606,0.3390524168087798] (9,-1; 9,-1), time: 30.0142s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6755s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_194, [-inf,inf]=>[-0.7045498853658345,0.18437928245675742] (9,-1; 9,-1), time: 30.0147s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_103, [-inf,inf]=>[-0.5585865188046304,0.14616460112872076] (9,-1; 9,-1), time: 30.0123s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_106, [-inf,inf]=>[-0.30255197447485255,0.32333774077159955] (9,-1; 9,-1), time: 30.0126s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_114, [-inf,inf]=>[1e-05,1.3546741489726888] (15,-1; 9,-1), time: 15.7716s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_173, [-inf,inf]=>[-0.3930717798687814,0.38945772458935035] (9,-1; 9,-1), time: 30.0592s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,1.433966458509332] (15,-1; 9,-1), time: 15.8114s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[1e-05,1.1885812533389102] (15,-1; 9,-1), time: 15.6845s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.02712871945675317,0.6616774752741537] (9,-1; 9,-1), time: 30.0169s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_158, [-inf,inf]=>[-0.6363103685488937,0.07993756540432835] (9,-1; 9,-1), time: 30.0148s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.8773s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7724s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8421s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-0.2228874150388223,0.7102357054226011] (9,-1; 9,-1), time: 30.0172s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-0.6905379507195538,0.046327836204446235] (9,-1; 9,-1), time: 30.0248s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_130, [-inf,inf]=>[-0.4672211215615427,0.360415725443529] (9,-1; 9,-1), time: 30.0246s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.7930026228499923,0.07616338973671649] (9,-1; 9,-1), time: 30.0130s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_131, [-inf,inf]=>[-0.7276028123917939,0.03200671325347111] (9,-1; 9,-1), time: 30.0193s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7492s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_151, [-inf,inf]=>[-0.5851926050395626,0.15663065208032154] (9,-1; 9,-1), time: 30.0171s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_191, [-inf,inf]=>[-0.6709960593124675,0.0765018027369299] (9,-1; 9,-1), time: 30.0163s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_185, [-inf,inf]=>[-0.4199306214291776,0.2292491344630012] (9,-1; 9,-1), time: 30.0150s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_153, [-inf,inf]=>[-0.5605538653874924,0.09431727567549181] (9,-1; 9,-1), time: 30.0132s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_129, [-inf,inf]=>[-0.5852246890768394,0.19448123695885308] (9,-1; 9,-1), time: 30.0158s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_197, [-inf,inf]=>[-0.5949023543767611,0.20602659893097247] (9,-1; 9,-1), time: 30.0146s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_101, [-inf,inf]=>[-0.39592277163541884,0.3108296598394253] (9,-1; 9,-1), time: 30.0370s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_166, [-inf,inf]=>[-0.07277759846444437,0.5952110623572862] (9,-1; 9,-1), time: 30.0143s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.4489009546146677,0.3401569500839115] (9,-1; 9,-1), time: 30.0270s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-0.24697738305377054,0.6013567633000252] (9,-1; 9,-1), time: 30.0131s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_160, [-inf,inf]=>[1e-05,1.0680458501608892] (15,-1; 9,-1), time: 16.8519s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7104s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-0.5243489191261237,0.18961096222797127] (9,-1; 9,-1), time: 30.0163s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-0.9384276634910356,0.09907247444965658] (9,-1; 9,-1), time: 30.0565s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_128, [-inf,inf]=>[-0.5187595005917182,0.3619225298817578] (9,-1; 9,-1), time: 30.0177s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-0.4983473397825689,0.19613475689831442] (9,-1; 9,-1), time: 30.0143s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-0.11899246879256957,0.5653517765953803] (9,-1; 9,-1), time: 30.0538s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-0.6879184751117133,0.2189599121792445] (9,-1; 9,-1), time: 30.0173s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_198, [-inf,inf]=>[-0.8560891354478705,0.02836574718605026] (9,-1; 9,-1), time: 30.0141s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_167, [-inf,inf]=>[1e-05,1.2240589531029453] (15,-1; 9,-1), time: 15.6985s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-0.4941940817195281,0.15213440967700104] (9,-1; 9,-1), time: 30.0117s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-0.5666688777154968,0.1755535128660742] (9,-1; 9,-1), time: 30.0138s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_199, [-inf,inf]=>[-0.35777736018409817,0.5500919043654099] (9,-1; 9,-1), time: 30.0200s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_126, [-inf,inf]=>[-0.6970763253196641,0.1029683301100431] (9,-1; 9,-1), time: 30.0192s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_181, [-inf,inf]=>[1e-05,1.0822335437465196] (15,-1; 9,-1), time: 15.7023s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.18362807419372298,0.417696495007794] (9,-1; 9,-1), time: 30.0139s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-0.6321768832296116,0.11596595222063431] (9,-1; 9,-1), time: 30.0524s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-0.907867279082732,0.37509658412888636] (9,-1; 9,-1), time: 30.0202s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_143, [-inf,inf]=>[-0.7347865248836668,0.03518614803552653] (9,-1; 9,-1), time: 30.0122s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-0.8258724601691901,0.21277756022696198] (9,-1; 9,-1), time: 30.0129s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-0.6502770652908233,0.01752159806556651] (9,-1; 9,-1), time: 30.0355s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_137, [-inf,inf]=>[-0.6046712973327626,0.0726388841282542] (9,-1; 9,-1), time: 30.0308s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.4841333274032622,0.27081132562632254] (9,-1; 9,-1), time: 30.0145s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_111, [-inf,inf]=>[-0.634184452346604,0.2513695020874681] (9,-1; 9,-1), time: 30.0187s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_107, [-inf,inf]=>[-0.33624187087868457,0.3124180849589155] (9,-1; 9,-1), time: 30.0101s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_183, [-inf,inf]=>[-0.23753810412993626,0.5966356415886738] (9,-1; 9,-1), time: 30.0142s, #vars: 1917, #constrs: 1298, improved: True
Solving MIP for lay8_147, [-inf,inf]=>[-0.8319849782049246,0.0655758759252495] (9,-1; 9,-1), time: 30.0152s, #vars: 1917, #constrs: 1298, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(143, -1), (16, -1), (33, -1), (166, -1), (60, -1), (32, -1), (119, -1), (64, -1), (178, -1), (146, 1), (164, -1), (121, 1), (36, -1), (11, -1), (118, -1), (78, -1), (152, -1), (5, -1), (65, -1), (58, -1), (197, -1), (101, -1), (169, -1), (42, -1), (130, -1), (138, 1), (59, -1), (23, -1), (95, -1), (187, -1), (115, -1), (45, -1), (199, -1), (147, -1), (135, -1), (43, -1), (19, -1), (54, -1), (131, -1), (49, -1), (102, -1), (3, -1), (38, -1), (18, -1), (185, 1), (108, -1), (129, -1), (192, -1), (12, -1), (85, -1), (162, -1), (40, -1), (142, -1), (117, -1), (81, -1), (140, -1), (145, 1), (9, -1), (111, 1), (120, 1), (74, -1), (173, -1), (181, -1), (156, -1), (0, 1), (93, -1), (55, -1), (35, -1), (72, 1), (171, -1), (8, -1), (70, -1), (168, -1), (114, -1), (87, -1), (198, -1), (46, -1), (82, -1), (165, -1), (51, -1), (15, -1), (191, -1), (157, -1), (150, -1), (68, -1), (177, -1), (154, 1), (21, 1), (98, -1), (182, -1), (153, -1)]
best_l after optimization: -3921.30859375
beta sum per layer: []
alpha/beta optimization time: 14.71454906463623
alpha-CROWN with intermediate bounds by MIP: tensor([[-262.81719971, -408.12350464, -504.39440918, -549.62603760,
         -486.76641846, -414.56356812, -378.57168579, -494.15594482,
         -422.28958130]], device='cuda:0') None
MIP improved 149 nodes out of 200 unstable nodes, lb improved 153.40921020507812, ub improved 142.3294677734375, time 244.5655
maximum relu layer improved by MIP so far 3
MIP finished with 428.40631079673767s
Run final alpha-CROWN after MIP solving on layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
best_l after optimization: -3061.263916015625
beta sum per layer: []
alpha/beta optimization time: 12.513499021530151
alpha-CROWN with intermediate bounds improved by MIP: tensor([[-205.23556519, -318.51046753, -393.68450928, -429.00082397,
         -380.12026978, -323.53576660, -295.48193359, -385.93414307,
         -329.76058960]], device='cuda:0') None
Split layers:
  BoundLinear(name=/input.15, inputs=[/34, /9, /10]): [(BoundRelu(name=/36, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.3, inputs=[/28, /3, /4]): [(BoundRelu(name=/30, inputs=[/input.3]), 0)]
  BoundLinear(name=/input, inputs=[/26, /1, /2]): [(BoundRelu(name=/28, inputs=[/input]), 0)]
  BoundLinear(name=/input.19, inputs=[/36, /11, /12]): [(BoundRelu(name=/38, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.23, inputs=[/38, /13, /14]): [(BoundRelu(name=/40, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.27, inputs=[/40, /15, /16]): [(BoundRelu(name=/42, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.7, inputs=[/30, /5, /6]): [(BoundRelu(name=/32, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.11, inputs=[/32, /7, /8]): [(BoundRelu(name=/34, inputs=[/input.11]), 0)]
refined global lb: tensor([[-205.23556519],
        [-318.51046753],
        [-393.68450928],
        [-429.00082397],
        [-380.12026978],
        [-323.53576660],
        [-295.48193359],
        [-385.93414307],
        [-329.76058960]], device='cuda:0') min: tensor(-429.00082397, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200])]

Properties batch 0, size 1
Remaining timeout: 39.048370122909546
##### Instance 0 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-205.23556519]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundParams(name=/13, inputs=[])
  (/14): BoundParams(name=/14, inputs=[])
  (/15): BoundParams(name=/15, inputs=[])
  (/16): BoundParams(name=/16, inputs=[])
  (/17): BoundParams(name=/17, inputs=[])
  (/18): BoundParams(name=/18, inputs=[])
  (/19): BoundShape(name=/19, inputs=[/0])
  (/20): BoundConstant(name=/20, inputs=[])
  (/21): BoundGather(name=/21, inputs=[/19, /20])
  (/22): BoundConstant(name=/22, inputs=[])
  (/23): BoundUnsqueeze(name=/23, inputs=[/21])
  (/24): BoundUnsqueeze(name=/24, inputs=[/22])
  (/25): BoundConcat(name=/25, inputs=[/23, /24])
  (/26): BoundReshape(name=/26, inputs=[/0, /25])
  (/input): BoundLinear(name=/input, inputs=[/26, /1, /2])
  (/28): BoundRelu(name=/28, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/28, /3, /4])
  (/30): BoundRelu(name=/30, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/30, /5, /6])
  (/32): BoundRelu(name=/32, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/32, /7, /8])
  (/34): BoundRelu(name=/34, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/34, /9, /10])
  (/36): BoundRelu(name=/36, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/36, /11, /12])
  (/38): BoundRelu(name=/38, inputs=[/input.19])
  (/input.23): BoundLinear(name=/input.23, inputs=[/38, /13, /14])
  (/40): BoundRelu(name=/40, inputs=[/input.23])
  (/input.27): BoundLinear(name=/input.27, inputs=[/40, /15, /16])
  (/42): BoundRelu(name=/42, inputs=[/input.27])
  (/43): BoundLinear(name=/43, inputs=[/42, /17, /18])
)
Model prediction is: tensor([-1.23322034, -1.39387631, -0.11875681, -2.08025169,  4.47272348,
        -0.79578972, -0.22910592, -0.09808648, -0.02926138,  2.37303758],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-205.23556519]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input.15,/input.3,/input,/input.19,/input.23,/input.27,/input.7,/input.11,/43
Split layers:
  BoundLinear(name=/input, inputs=[/26, /1, /2]): [(BoundRelu(name=/28, inputs=[/input]), 0)]
  BoundLinear(name=/input.15, inputs=[/34, /9, /10]): [(BoundRelu(name=/36, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.27, inputs=[/40, /15, /16]): [(BoundRelu(name=/42, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.7, inputs=[/30, /5, /6]): [(BoundRelu(name=/32, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.23, inputs=[/38, /13, /14]): [(BoundRelu(name=/40, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.11, inputs=[/32, /7, /8]): [(BoundRelu(name=/34, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.19, inputs=[/36, /11, /12]): [(BoundRelu(name=/38, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.3, inputs=[/28, /3, /4]): [(BoundRelu(name=/30, inputs=[/input.3]), 0)]
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
Node /28 input 0: size torch.Size([200]) unstable 46
Node /30 input 0: size torch.Size([200]) unstable 51
Node /32 input 0: size torch.Size([200]) unstable 69
Node /34 input 0: size torch.Size([200]) unstable 158
Node /36 input 0: size torch.Size([200]) unstable 200
Node /38 input 0: size torch.Size([200]) unstable 200
Node /40 input 0: size torch.Size([200]) unstable 200
Node /42 input 0: size torch.Size([200]) unstable 200
-----------------
# of unstable neurons: 1124
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.27, 113] 
split level 1: [/input.27, 17] 
split level 2: [/input.27, 15] 
split level 3: [/input.27, 92] 
split level 4: [/input.27, 140] 
split level 5: [/input.27, 59] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 64 = 0.0
pruning-in-iteration extra time: 0.000232696533203125
Time: prepare 0.0148    beta_bound 0.7647    bound 0.7648    transfer 0.0008    finalize 0.0084    func 0.7890    
Accumulated time: func 0.7890    prepare 0.0159    bound 0.7648    beta_bound 0.7647    transfer 0.0008    finalize 0.0084    
batch bounding time:  0.7890458106994629
Current worst splitting domains lb-rhs (depth):
-169.05977 (6), -167.92924 (6), -167.64468 (6), -166.36357 (6), -165.46681 (6), -164.74451 (6), -163.80292 (6), -163.71304 (6), -163.15849 (6), -163.02155 (6), -162.80403 (6), -162.70319 (6), -161.59676 (6), -161.57024 (6), -161.29169 (6), -160.96376 (6), -160.94052 (6), -160.88992 (6), -159.98975 (6), -159.81377 (6), 
length of domains: 64
Time: pickout 0.0024    decision 0.2651    set_bounds 0.0026    solve 0.7891    add 0.0024    
Accumulated time: pickout 0.0024    decision 0.2651    set_bounds 0.0026    solve 0.7891    add 0.0024    
Current (lb-rhs): -169.0597686767578
64 domains visited
Cumulative time: 1.1719496250152588

BaB round 2
batch: 64
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.27, 100] [/input.27, 100] [/input.27, 107] [/input.27, 100] [/input.27, 100] [/input.27, 100] [/input.27, 100] [/input.27, 100] [/input.27, 100] [/input.27, 100] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 128 = 0.0
pruning-in-iteration extra time: 0.00010824203491210938
Time: prepare 0.0268    beta_bound 0.5257    bound 0.5258    transfer 0.0006    finalize 0.0163    func 0.5694    
Accumulated time: func 1.3584    prepare 0.0434    bound 1.2905    beta_bound 1.2903    transfer 0.0013    finalize 0.0246    
batch bounding time:  0.5695674419403076
Current worst splitting domains lb-rhs (depth):
-164.20314 (7), -163.40576 (7), -162.50897 (7), -161.76057 (7), -161.53339 (7), -160.76672 (7), -160.36652 (7), -160.14935 (7), -160.02805 (7), -158.77232 (7), -158.47284 (7), -158.42087 (7), -158.27055 (7), -158.25969 (7), -158.21159 (7), -158.06750 (7), -157.61475 (7), -157.22983 (7), -156.95099 (7), -156.83525 (7), 
length of domains: 128
Time: pickout 0.0016    decision 0.0471    set_bounds 0.0046    solve 0.5696    add 0.0031    
Accumulated time: pickout 0.0041    decision 0.3122    set_bounds 0.0072    solve 1.3587    add 0.0055    
Current (lb-rhs): -164.20314025878906
192 domains visited
Cumulative time: 1.798722743988037

BaB round 3
batch: 128
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.27, 107] [/input.27, 82] [/input.27, 100] [/input.27, 82] [/input.27, 107] [/input.27, 82] [/input.27, 107] [/input.27, 82] [/input.27, 107] [/input.27, 82] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 256 = 0.0
pruning-in-iteration extra time: 0.00017213821411132812
Time: prepare 0.0489    beta_bound 0.5375    bound 0.5376    transfer 0.0010    finalize 0.0402    func 0.6279    
Accumulated time: func 1.9863    prepare 0.0931    bound 1.8281    beta_bound 1.8279    transfer 0.0024    finalize 0.0648    
batch bounding time:  0.6281769275665283
Current worst splitting domains lb-rhs (depth):
-159.67647 (8), -158.86130 (8), -158.06311 (8), -157.32010 (8), -156.92064 (8), -156.04788 (8), -156.03456 (8), -155.69798 (8), -155.56187 (8), -155.43629 (8), -155.13423 (8), -154.85205 (8), -154.41406 (8), -154.27730 (8), -154.08893 (8), -153.97028 (8), -153.88551 (8), -153.88271 (8), -153.86653 (8), -153.52408 (8), 
length of domains: 256
Time: pickout 0.0018    decision 0.1026    set_bounds 0.0053    solve 0.6282    add 0.0046    
Accumulated time: pickout 0.0059    decision 0.4148    set_bounds 0.0125    solve 1.9869    add 0.0102    
Current (lb-rhs): -159.6764678955078
448 domains visited
Cumulative time: 2.542285203933716

BaB round 4
batch: 256
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/input.27, 61] [/input.27, 107] [/input.27, 61] [/input.27, 107] [/input.27, 61] [/input.27, 107] [/input.27, 61] [/input.27, 107] [/input.27, 54] [/input.27, 107] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 512 = 0.0
pruning-in-iteration extra time: 0.00011539459228515625
Time: prepare 0.1196    beta_bound 0.5370    bound 0.5371    transfer 0.0014    finalize 0.0586    func 0.7169    
Accumulated time: func 2.7033    prepare 0.2134    bound 2.3652    beta_bound 2.3649    transfer 0.0037    finalize 0.1234    
batch bounding time:  0.7172873020172119
Current worst splitting domains lb-rhs (depth):
-154.68564 (9), -153.63177 (9), -152.94145 (9), -152.84291 (9), -152.24089 (9), -152.23601 (9), -152.02507 (9), -151.43179 (9), -151.37050 (9), -151.20908 (9), -150.89735 (9), -150.49844 (9), -150.45184 (9), -150.20003 (9), -150.11986 (9), -149.82449 (9), -149.78760 (9), -149.69398 (9), -149.60738 (9), -149.41718 (9), 
length of domains: 512
Time: pickout 0.0022    decision 0.1292    set_bounds 0.0095    solve 0.7173    add 0.0078    
Accumulated time: pickout 0.0081    decision 0.5440    set_bounds 0.0220    solve 2.7042    add 0.0180    
Current (lb-rhs): -154.68563842773438
960 domains visited
Cumulative time: 3.4097633361816406

BaB round 5
batch: 512
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/input.27, 54] [/input.27, 181] [/input.27, 54] [/input.27, 181] [/input.27, 54] [/input.27, 181] [/input.27, 54] [/input.27, 181] [/input.27, 61] [/input.27, 181] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1024 = 0.0
pruning-in-iteration extra time: 0.00012612342834472656
Time: prepare 0.1949    beta_bound 0.5944    bound 0.5945    transfer 0.0024    finalize 0.1347    func 1.0053    
Accumulated time: func 3.7086    prepare 0.4089    bound 2.9597    beta_bound 2.9593    transfer 0.0061    finalize 0.2581    
batch bounding time:  1.0058202743530273
Current worst splitting domains lb-rhs (depth):
-149.69698 (10), -149.20445 (10), -148.37355 (10), -148.34009 (10), -148.16522 (10), -147.85100 (10), -147.84122 (10), -147.81189 (10), -146.93965 (10), -146.89433 (10), -146.57593 (10), -146.57382 (10), -146.48164 (10), -146.48036 (10), -146.23576 (10), -146.23164 (10), -146.11549 (10), -145.92108 (10), -145.64220 (10), -145.38544 (10), 
length of domains: 1024
Time: pickout 0.0032    decision 0.0939    set_bounds 0.0174    solve 1.0058    add 0.0145    
Accumulated time: pickout 0.0113    decision 0.6379    set_bounds 0.0395    solve 3.7100    add 0.0324    
Current (lb-rhs): -149.6969757080078
1984 domains visited
Cumulative time: 4.547334909439087

BaB round 6
batch: 1024
Average branched neurons at iteration 6:  1.0000
splitting decisions: 
split level 0: [/input.27, 181] [/input.27, 54] [/input.27, 82] [/input.27, 54] [/input.27, 82] [/input.27, 54] [/input.27, 82] [/input.27, 54] [/input.27, 82] [/input.27, 54] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011539459228515625
Time: prepare 0.4708    beta_bound 0.5447    bound 0.5448    transfer 0.0050    finalize 0.3505    func 1.3717    
Accumulated time: func 5.0803    prepare 0.8805    bound 3.5045    beta_bound 3.5040    transfer 0.0112    finalize 0.6086    
batch bounding time:  1.3736920356750488
Current worst splitting domains lb-rhs (depth):
-145.22910 (11), -144.56139 (11), -143.86043 (11), -143.79794 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.56100 (11), -142.27135 (11), -142.05173 (11), -141.91441 (11), -141.89203 (11), -141.69565 (11), -141.64589 (11), -141.52864 (11), -141.52716 (11), -141.44296 (11), -141.43903 (11), 
length of domains: 2048
Time: pickout 0.0017    decision 0.2688    set_bounds 0.0537    solve 1.3737    add 0.1412    
Accumulated time: pickout 0.0131    decision 0.9066    set_bounds 0.0932    solve 5.0837    add 0.1736    
Current (lb-rhs): -145.22909545898438
4032 domains visited
Cumulative time: 6.391390800476074

BaB round 7
batch: 1024
Average branched neurons at iteration 7:  1.0000
splitting decisions: 
split level 0: [/input.27, 82] [/input.27, 61] [/input.27, 181] [/input.27, 61] [/input.27, 181] [/input.27, 61] [/input.27, 181] [/input.27, 61] [/input.27, 181] [/input.27, 61] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00010919570922851562
Time: prepare 0.6434    beta_bound 0.5894    bound 0.5895    transfer 0.0051    finalize 0.3642    func 1.6031    
Accumulated time: func 6.6834    prepare 1.5248    bound 4.0940    beta_bound 4.0934    transfer 0.0163    finalize 0.9728    
batch bounding time:  1.6068453788757324
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 3072
Time: pickout 0.0059    decision 0.2041    set_bounds 0.0385    solve 1.6069    add 0.1849    
Accumulated time: pickout 0.0190    decision 1.1107    set_bounds 0.1317    solve 6.6906    add 0.3585    
Current (lb-rhs): -144.56138610839844
6080 domains visited
Cumulative time: 8.441760778427124

BaB round 8
batch: 1024
Average branched neurons at iteration 8:  1.0000
splitting decisions: 
split level 0: [/input.27, 154] [/input.27, 95] [/input.27, 154] [/input.27, 95] [/input.27, 154] [/input.27, 95] [/input.27, 154] [/input.27, 95] [/input.27, 154] [/input.27, 95] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00013494491577148438
Time: prepare 0.3820    beta_bound 0.4969    bound 0.4970    transfer 0.0041    finalize 0.2465    func 1.1300    
Accumulated time: func 7.8134    prepare 1.9076    bound 4.5910    beta_bound 4.5903    transfer 0.0203    finalize 1.2193    
batch bounding time:  1.1320414543151855
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 4096
Time: pickout 0.0069    decision 0.1407    set_bounds 0.1643    solve 1.1321    add 0.0267    
Accumulated time: pickout 0.0258    decision 1.2515    set_bounds 0.2961    solve 7.8227    add 0.3852    
Current (lb-rhs): -144.56138610839844
8128 domains visited
Cumulative time: 9.917762041091919

BaB round 9
batch: 1024
Average branched neurons at iteration 9:  1.0000
splitting decisions: 
split level 0: [/input.27, 95] [/input.27, 154] [/input.27, 95] [/input.27, 154] [/input.27, 95] [/input.27, 154] [/input.27, 95] [/input.27, 154] [/input.27, 147] [/input.27, 154] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011110305786132812
Time: prepare 0.5151    beta_bound 0.4880    bound 0.4881    transfer 0.0041    finalize 0.2736    func 1.2812    
Accumulated time: func 9.0946    prepare 2.4233    bound 5.0791    beta_bound 5.0783    transfer 0.0244    finalize 1.4929    
batch bounding time:  1.2821295261383057
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 5120
Time: pickout 0.0051    decision 0.1364    set_bounds 0.0328    solve 1.2822    add 0.3277    
Accumulated time: pickout 0.0310    decision 1.3879    set_bounds 0.3289    solve 9.1049    add 0.7129    
Current (lb-rhs): -144.56138610839844
10176 domains visited
Cumulative time: 11.707554340362549

BaB round 10
batch: 1024
Average branched neurons at iteration 10:  1.0000
splitting decisions: 
split level 0: [/input.27, 114] [/input.27, 33] [/input.27, 33] [/input.27, 147] [/input.27, 33] [/input.27, 33] [/input.27, 33] [/input.27, 147] [/input.27, 95] [/input.27, 33] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011134147644042969
Time: prepare 0.3751    beta_bound 0.5096    bound 0.5097    transfer 0.0041    finalize 0.4097    func 1.2990    
Accumulated time: func 10.3936    prepare 2.7990    bound 5.5888    beta_bound 5.5879    transfer 0.0285    finalize 1.9026    
batch bounding time:  1.299891710281372
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 6144
Time: pickout 0.0064    decision 0.1682    set_bounds 0.0321    solve 1.2999    add 0.0283    
Accumulated time: pickout 0.0374    decision 1.5560    set_bounds 0.3610    solve 10.4048    add 0.7411    
Current (lb-rhs): -144.56138610839844
12224 domains visited
Cumulative time: 13.249279260635376

BaB round 11
batch: 1024
Average branched neurons at iteration 11:  1.0000
splitting decisions: 
split level 0: [/input.27, 33] [/input.27, 114] [/input.27, 147] [/input.27, 33] [/input.27, 114] [/input.27, 114] [/input.27, 147] [/input.27, 33] [/input.27, 33] [/input.27, 114] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00012040138244628906
Time: prepare 0.4271    beta_bound 0.5332    bound 0.5333    transfer 0.0040    finalize 0.2461    func 1.2109    
Accumulated time: func 11.6045    prepare 3.2269    bound 6.1220    beta_bound 6.1211    transfer 0.0325    finalize 2.1487    
batch bounding time:  1.2117764949798584
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 7168
Time: pickout 0.0056    decision 0.1590    set_bounds 0.0359    solve 1.2118    add 0.0287    
Accumulated time: pickout 0.0430    decision 1.7151    set_bounds 0.3968    solve 11.6166    add 0.7698    
Current (lb-rhs): -144.56138610839844
14272 domains visited
Cumulative time: 14.697529792785645

BaB round 12
batch: 1024
Average branched neurons at iteration 12:  1.0000
splitting decisions: 
split level 0: [/input.27, 147] [/input.27, 147] [/input.27, 178] [/input.27, 114] [/input.27, 147] [/input.27, 147] [/input.27, 178] [/input.27, 114] [/input.27, 114] [/input.27, 147] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011205673217773438
Time: prepare 0.3801    beta_bound 0.5657    bound 0.5657    transfer 0.0040    finalize 0.2444    func 1.1947    
Accumulated time: func 12.7992    prepare 3.6078    bound 6.6878    beta_bound 6.6867    transfer 0.0366    finalize 2.3931    
batch bounding time:  1.1955547332763672
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 8192
Time: pickout 0.0054    decision 0.1455    set_bounds 0.2140    solve 1.1956    add 0.0292    
Accumulated time: pickout 0.0484    decision 1.8605    set_bounds 0.6109    solve 12.8122    add 0.7990    
Current (lb-rhs): -144.56138610839844
16320 domains visited
Cumulative time: 16.29315495491028

BaB round 13
batch: 1024
Average branched neurons at iteration 13:  1.0000
splitting decisions: 
split level 0: [/input.27, 105] [/input.27, 105] [/input.27, 105] [/input.27, 178] [/input.27, 105] [/input.27, 105] [/input.27, 105] [/input.27, 105] [/input.27, 178] [/input.27, 178] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0002410411834716797
Time: prepare 0.3893    beta_bound 0.5992    bound 0.5993    transfer 0.0043    finalize 0.2369    func 1.2302    
Accumulated time: func 14.0294    prepare 3.9979    bound 7.2871    beta_bound 7.2859    transfer 0.0409    finalize 2.6301    
batch bounding time:  1.2320985794067383
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 9216
Time: pickout 0.0055    decision 0.1628    set_bounds 0.2330    solve 1.2321    add 0.5696    
Accumulated time: pickout 0.0539    decision 2.0233    set_bounds 0.8439    solve 14.0444    add 1.3686    
Current (lb-rhs): -144.56138610839844
18368 domains visited
Cumulative time: 18.503403425216675

BaB round 14
batch: 1024
Average branched neurons at iteration 14:  1.0000
splitting decisions: 
split level 0: [/input.27, 178] [/input.27, 178] [/input.27, 114] [/input.27, 105] [/input.27, 178] [/input.27, 93] [/input.27, 114] [/input.27, 178] [/input.27, 105] [/input.27, 105] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00037360191345214844
Time: prepare 0.4207    beta_bound 0.5688    bound 0.5689    transfer 0.0047    finalize 0.2485    func 1.2432    
Accumulated time: func 15.2726    prepare 4.4193    bound 7.8560    beta_bound 7.8547    transfer 0.0456    finalize 2.8785    
batch bounding time:  1.2441296577453613
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 10240
Time: pickout 0.0067    decision 0.1452    set_bounds 0.0367    solve 1.2442    add 0.0271    
Accumulated time: pickout 0.0606    decision 2.1685    set_bounds 0.8806    solve 15.2885    add 1.3956    
Current (lb-rhs): -144.56138610839844
20416 domains visited
Cumulative time: 19.96857261657715

BaB round 15
batch: 1024
Average branched neurons at iteration 15:  1.0000
splitting decisions: 
split level 0: [/input.27, 138] [/input.27, 93] [/input.27, 93] [/input.27, 185] [/input.27, 93] [/input.27, 178] [/input.27, 138] [/input.27, 93] [/input.27, 93] [/input.27, 93] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0002460479736328125
Time: prepare 0.3869    beta_bound 0.5305    bound 0.5306    transfer 0.0040    finalize 0.2461    func 1.1679    
Accumulated time: func 16.4405    prepare 4.8068    bound 8.3866    beta_bound 8.3852    transfer 0.0496    finalize 3.1246    
batch bounding time:  1.168809413909912
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 11264
Time: pickout 0.0058    decision 0.1424    set_bounds 0.2711    solve 1.1688    add 0.0302    
Accumulated time: pickout 0.0663    decision 2.3109    set_bounds 1.1517    solve 16.4574    add 1.4258    
Current (lb-rhs): -144.56138610839844
22464 domains visited
Cumulative time: 21.593449354171753

BaB round 16
batch: 1024
Average branched neurons at iteration 16:  1.0000
splitting decisions: 
split level 0: [/input.27, 93] [/input.27, 185] [/input.27, 138] [/input.27, 93] [/input.27, 138] [/input.27, 185] [/input.27, 93] [/input.27, 185] [/input.27, 138] [/input.27, 185] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00010752677917480469
Time: prepare 0.3888    beta_bound 0.5114    bound 0.5115    transfer 0.0064    finalize 0.5166    func 1.4249    
Accumulated time: func 17.8654    prepare 5.1968    bound 8.8980    beta_bound 8.8966    transfer 0.0560    finalize 3.6412    
batch bounding time:  1.4260551929473877
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 12288
Time: pickout 0.0078    decision 0.2112    set_bounds 0.0378    solve 1.4261    add 0.0283    
Accumulated time: pickout 0.0741    decision 2.5221    set_bounds 1.1895    solve 17.8834    add 1.4542    
Current (lb-rhs): -144.56138610839844
24512 domains visited
Cumulative time: 23.310646057128906

BaB round 17
batch: 1024
Average branched neurons at iteration 17:  1.0000
splitting decisions: 
split level 0: [/input.27, 185] [/input.27, 91] [/input.27, 185] [/input.27, 91] [/input.27, 185] [/input.27, 91] [/input.27, 193] [/input.27, 91] [/input.27, 91] [/input.27, 91] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00013899803161621094
Time: prepare 0.3887    beta_bound 0.5469    bound 0.5470    transfer 0.0048    finalize 0.2275    func 1.1697    
Accumulated time: func 19.0351    prepare 5.5862    bound 9.4450    beta_bound 9.4435    transfer 0.0608    finalize 3.8687    
batch bounding time:  1.171555757522583
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 13312
Time: pickout 0.0059    decision 0.1386    set_bounds 0.0360    solve 1.1716    add 0.0275    
Accumulated time: pickout 0.0800    decision 2.6607    set_bounds 1.2255    solve 19.0550    add 1.4817    
Current (lb-rhs): -144.56138610839844
26560 domains visited
Cumulative time: 24.696372985839844

BaB round 18
batch: 1024
Average branched neurons at iteration 18:  1.0000
splitting decisions: 
split level 0: [/input.27, 91] [/input.27, 163] [/input.27, 193] [/input.27, 163] [/input.27, 193] [/input.27, 163] [/input.27, 91] [/input.27, 163] [/input.27, 185] [/input.27, 163] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00015234947204589844
Time: prepare 0.3850    beta_bound 0.5442    bound 0.5443    transfer 0.0043    finalize 0.4962    func 1.4301    
Accumulated time: func 20.4652    prepare 5.9718    bound 9.9893    beta_bound 9.9877    transfer 0.0651    finalize 4.3648    
batch bounding time:  1.4317545890808105
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 14336
Time: pickout 0.0060    decision 0.1412    set_bounds 0.0363    solve 1.4318    add 0.0271    
Accumulated time: pickout 0.0860    decision 2.8020    set_bounds 1.2618    solve 20.4868    add 1.5088    
Current (lb-rhs): -144.56138610839844
28608 domains visited
Cumulative time: 26.34487223625183

BaB round 19
batch: 1024
Average branched neurons at iteration 19:  1.0000
splitting decisions: 
split level 0: [/input.27, 193] [/input.27, 138] [/input.27, 163] [/input.27, 138] [/input.27, 91] [/input.27, 138] [/input.27, 185] [/input.27, 138] [/input.27, 163] [/input.27, 138] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001709461212158203
Time: prepare 0.3930    beta_bound 0.5247    bound 0.5248    transfer 0.0039    finalize 0.2543    func 1.1764    
Accumulated time: func 21.6416    prepare 6.3655    bound 10.5141    beta_bound 10.5124    transfer 0.0691    finalize 4.6191    
batch bounding time:  1.1782987117767334
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 15360
Time: pickout 0.0058    decision 0.1536    set_bounds 0.0374    solve 1.1783    add 0.0291    
Accumulated time: pickout 0.0918    decision 2.9556    set_bounds 1.2992    solve 21.6652    add 1.5380    
Current (lb-rhs): -144.56138610839844
30656 domains visited
Cumulative time: 27.75468873977661

BaB round 20
batch: 1024
Average branched neurons at iteration 20:  1.0000
splitting decisions: 
split level 0: [/input.27, 163] [/input.27, 193] [/input.27, 91] [/input.27, 193] [/input.27, 163] [/input.27, 193] [/input.27, 163] [/input.27, 193] [/input.27, 193] [/input.27, 193] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011038780212402344
Time: prepare 0.3880    beta_bound 0.5404    bound 0.5405    transfer 0.0041    finalize 0.5516    func 1.4846    
Accumulated time: func 23.1262    prepare 6.7542    bound 11.0546    beta_bound 11.0528    transfer 0.0732    finalize 5.1707    
batch bounding time:  1.4856493473052979
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 16384
Time: pickout 0.0060    decision 0.1400    set_bounds 0.0365    solve 1.4857    add 0.0314    
Accumulated time: pickout 0.0978    decision 3.0956    set_bounds 1.3357    solve 23.1509    add 1.5694    
Current (lb-rhs): -144.56138610839844
32704 domains visited
Cumulative time: 29.460227966308594

BaB round 21
batch: 1024
Average branched neurons at iteration 21:  1.0000
splitting decisions: 
split level 0: [/input.27, 177] [/input.27, 195] [/input.27, 177] [/input.27, 195] [/input.27, 195] [/input.27, 195] [/input.27, 195] [/input.27, 195] [/input.27, 195] [/input.27, 195] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00020551681518554688
Time: prepare 0.4502    beta_bound 0.5377    bound 0.5378    transfer 0.0050    finalize 0.2387    func 1.2320    
Accumulated time: func 24.3582    prepare 7.2051    bound 11.5924    beta_bound 11.5905    transfer 0.0782    finalize 5.4094    
batch bounding time:  1.2329106330871582
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 17408
Time: pickout 0.0061    decision 0.1412    set_bounds 0.0380    solve 1.2329    add 0.8807    
Accumulated time: pickout 0.1039    decision 3.2368    set_bounds 1.3737    solve 24.3838    add 2.4501    
Current (lb-rhs): -144.56138610839844
34752 domains visited
Cumulative time: 31.76556372642517

BaB round 22
batch: 1024
Average branched neurons at iteration 22:  1.0000
splitting decisions: 
split level 0: [/input.27, 195] [/input.27, 177] [/input.27, 111] [/input.27, 177] [/input.27, 177] [/input.27, 177] [/input.27, 177] [/input.27, 177] [/input.27, 111] [/input.27, 177] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001327991485595703
Time: prepare 0.3881    beta_bound 0.5153    bound 0.5153    transfer 0.0044    finalize 0.2475    func 1.1558    
Accumulated time: func 25.5140    prepare 7.5938    bound 12.1077    beta_bound 12.1057    transfer 0.0826    finalize 5.6568    
batch bounding time:  1.156954050064087
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 18432
Time: pickout 0.0065    decision 0.1582    set_bounds 0.0428    solve 1.1570    add 0.0287    
Accumulated time: pickout 0.1104    decision 3.3950    set_bounds 1.4165    solve 25.5408    add 2.4788    
Current (lb-rhs): -144.56138610839844
36800 domains visited
Cumulative time: 33.16491365432739

BaB round 23
batch: 1024
Average branched neurons at iteration 23:  1.0000
splitting decisions: 
split level 0: [/input.27, 29] [/input.27, 29] [/input.27, 195] [/input.27, 29] [/input.27, 111] [/input.27, 109] [/input.27, 29] [/input.27, 29] [/input.27, 177] [/input.27, 29] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011086463928222656
Time: prepare 0.3913    beta_bound 0.5210    bound 0.5211    transfer 0.0047    finalize 0.2575    func 1.1761    
Accumulated time: func 26.6902    prepare 7.9858    bound 12.6288    beta_bound 12.6268    transfer 0.0873    finalize 5.9143    
batch bounding time:  1.1772465705871582
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 19456
Time: pickout 0.0063    decision 0.1430    set_bounds 0.4302    solve 1.1773    add 0.0280    
Accumulated time: pickout 0.1167    decision 3.5379    set_bounds 1.8467    solve 26.7181    add 2.5068    
Current (lb-rhs): -144.56138610839844
38848 domains visited
Cumulative time: 34.95659804344177

BaB round 24
batch: 1024
Average branched neurons at iteration 24:  1.0000
splitting decisions: 
split level 0: [/input.27, 111] [/input.27, 25] [/input.27, 29] [/input.27, 25] [/input.27, 29] [/input.27, 111] [/input.27, 111] [/input.27, 109] [/input.27, 29] [/input.27, 25] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00014710426330566406
Time: prepare 0.4263    beta_bound 0.5680    bound 0.5680    transfer 0.0041    finalize 0.2272    func 1.2262    
Accumulated time: func 27.9163    prepare 8.4128    bound 13.1969    beta_bound 13.1947    transfer 0.0914    finalize 6.1415    
batch bounding time:  1.2281396389007568
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 20480
Time: pickout 0.0071    decision 0.1629    set_bounds 0.0461    solve 1.2282    add 0.0279    
Accumulated time: pickout 0.1238    decision 3.7009    set_bounds 1.8927    solve 27.9462    add 2.5347    
Current (lb-rhs): -144.56138610839844
40896 domains visited
Cumulative time: 36.435378074645996

BaB round 25
batch: 1024
Average branched neurons at iteration 25:  1.0000
splitting decisions: 
split level 0: [/input.27, 109] [/input.27, 111] [/input.27, 109] [/input.27, 111] [/input.27, 25] [/input.27, 25] [/input.27, 25] [/input.23, 174] [/input.27, 109] [/input.27, 111] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00025391578674316406
Time: prepare 0.3940    beta_bound 0.5427    bound 0.5428    transfer 0.0041    finalize 0.3499    func 1.2914    
Accumulated time: func 29.2077    prepare 8.8075    bound 13.7397    beta_bound 13.7374    transfer 0.0955    finalize 6.4914    
batch bounding time:  1.2925736904144287
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 21504
Time: pickout 0.0064    decision 0.1591    set_bounds 0.0407    solve 1.2926    add 0.0300    
Accumulated time: pickout 0.1302    decision 3.8600    set_bounds 1.9334    solve 29.2388    add 2.5646    
Current (lb-rhs): -144.56138610839844
42944 domains visited
Cumulative time: 37.971620321273804

BaB round 26
batch: 1024
Average branched neurons at iteration 26:  1.0000
splitting decisions: 
split level 0: [/input.27, 25] [/input.27, 109] [/input.27, 25] [/input.27, 109] [/input.27, 109] [/input.27, 29] [/input.27, 109] [/input.27, 111] [/input.27, 25] [/input.27, 109] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00022554397583007812
Time: prepare 0.6294    beta_bound 0.5362    bound 0.5363    transfer 0.0051    finalize 0.2688    func 1.4411    
Accumulated time: func 30.6488    prepare 9.4376    bound 14.2760    beta_bound 14.2736    transfer 0.1006    finalize 6.7602    
batch bounding time:  1.4422001838684082
Current worst splitting domains lb-rhs (depth):
-144.56139 (11), -143.36334 (11), -143.02283 (11), -142.97920 (11), -142.97078 (11), -142.72617 (11), -142.05173 (11), -141.91441 (11), -141.69565 (11), -141.64589 (11), -141.44296 (11), -141.43903 (11), -141.31142 (11), -141.27335 (11), -141.08353 (11), -140.95103 (11), -140.58685 (12), -140.55344 (11), -140.31184 (11), -140.31168 (11), 
length of domains: 22528
Time: pickout 0.0073    decision 0.1883    set_bounds 0.4889    solve 1.4422    add 0.0276    
Accumulated time: pickout 0.1375    decision 4.0483    set_bounds 2.4223    solve 30.6811    add 2.5923    
Current (lb-rhs): -144.56138610839844
44992 domains visited
Time out!!!!!!!!
Result: unknown in 501.4631 seconds
############# Summary #############
Final verified acc: 0.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 0 , total falsified (unsafe/sat): 0 , timeout: 1
mean time for ALL instances (total 1):501.4580927665607, max time: 501.4631073474884
unknown (total 1), index: [0]
