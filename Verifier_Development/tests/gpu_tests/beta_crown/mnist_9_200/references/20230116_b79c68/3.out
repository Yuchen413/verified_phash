Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_9_200
  path: mnist_9_200_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 65
  end: 66
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.015
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 500.0
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: skip
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Mon Jan 16 01:36:05 2023 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=200, bias=True)
  (2): ReLU()
  (3): Linear(in_features=200, out_features=200, bias=True)
  (4): ReLU()
  (5): Linear(in_features=200, out_features=200, bias=True)
  (6): ReLU()
  (7): Linear(in_features=200, out_features=200, bias=True)
  (8): ReLU()
  (9): Linear(in_features=200, out_features=200, bias=True)
  (10): ReLU()
  (11): Linear(in_features=200, out_features=200, bias=True)
  (12): ReLU()
  (13): Linear(in_features=200, out_features=200, bias=True)
  (14): ReLU()
  (15): Linear(in_features=200, out_features=200, bias=True)
  (16): ReLU()
  (17): Linear(in_features=200, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_9_200]_start=65_end=66_iter=20_b=1024_timeout=500.0_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=skip_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-1.23322034, -1.39387631, -0.11875690, -2.08025169,  4.47272348,
         -0.79578960, -0.22910598, -0.09808658, -0.02926117,  2.37303782]],
       device='cuda:0')
layer /28 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 80 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [80]; unstable size 80; total size 200 (torch.Size([1, 200]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [166]; unstable size 166; total size 200 (torch.Size([1, 200]))
layer /32 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /34 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /36 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /38 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /40 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1974.15026855, -3272.86914062, -3893.02392578, -4327.14404297,
         -3726.78466797, -3177.81347656, -2992.27050781, -3873.68090820,
         -3264.65112305]], device='cuda:0') None
best_l after optimization: -20395.2734375 with beta sum per layer: []
alpha/beta optimization time: 11.208194017410278
initial alpha-CROWN bounds: tensor([[-1365.70654297, -2124.91015625, -2625.00146484, -2860.05517578,
         -2529.31689453, -2158.11865234, -1970.07214355, -2567.33203125,
         -2194.76147461]], device='cuda:0')
Worst class: (+ rhs) -2860.05517578125
Start solving intermediate bounds with MIP...
layer /28 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 80 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [80]; unstable size 80; total size 200 (torch.Size([1, 200]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 166 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [166]; unstable size 166; total size 200 (torch.Size([1, 200]))
layer /32 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /34 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /36 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /38 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /40 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 400.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_55', 'lay4_148', 'lay4_70', 'lay4_41', 'lay4_125', 'lay4_1', 'lay4_69', 'lay4_27', 'lay4_144', 'lay4_190', 'lay4_89', 'lay4_167', 'lay4_93', 'lay4_122', 'lay4_129', 'lay4_43', 'lay4_92', 'lay4_195', 'lay4_49', 'lay4_155', 'lay4_171', 'lay4_61', 'lay4_112', 'lay4_168', 'lay4_151', 'lay4_87', 'lay4_4', 'lay4_189', 'lay4_42', 'lay4_152', 'lay4_50', 'lay4_91', 'lay4_139', 'lay4_176', 'lay4_198', 'lay4_170', 'lay4_9', 'lay4_88', 'lay4_124', 'lay4_153', 'lay4_17', 'lay4_145', 'lay4_75', 'lay4_178', 'lay4_2', 'lay4_120', 'lay4_131', 'lay4_141', 'lay4_143', 'lay4_102', 'lay4_150', 'lay4_13', 'lay4_19', 'lay4_53', 'lay4_138', 'lay4_80', 'lay4_28', 'lay4_157', 'lay4_38', 'lay4_158', 'lay4_140', 'lay4_57', 'lay4_26', 'lay4_183', 'lay4_187', 'lay4_134', 'lay4_162', 'lay4_173', 'lay4_11', 'lay4_114', 'lay4_104', 'lay4_59', 'lay4_12', 'lay4_37', 'lay4_160', 'lay4_48', 'lay4_90', 'lay4_33', 'lay4_58', 'lay4_106'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/data_utils.py:255: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5174s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-inf,-0.003945481062923473] (-1,-1; 2,-1), time: 0.6390s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6782s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_125, [-inf,inf]=>[1e-05,1.0641841208883562] (15,-1; 2,-1), time: 1.5788s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4360s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_129, [-inf,inf]=>[-0.5678962823104294,0.08530658171622924] (2,-1; 2,-1), time: 2.1237s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-0.28769567526356876,0.33817686548078074] (2,-1; 2,-1), time: 2.4444s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_148, [-inf,inf]=>[-0.10147609725695741,0.4865500658228744] (2,-1; 2,-1), time: 2.4791s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_122, [-inf,inf]=>[-0.5724980961278346,0.10195201169746988] (2,-1; 2,-1), time: 2.4936s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6262s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.2759561200439314,0.36025097544435947] (2,-1; 2,-1), time: 3.5064s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[-0.09928593387708817,0.6370634160274932] (2,-1; 2,-1), time: 3.0546s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-0.6098720984683856,0.07924406910242646] (2,-1; 2,-1), time: 3.7482s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-0.45354906085337965,0.39988156894359356] (2,-1; 2,-1), time: 0.9911s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[-0.2520885581086362,0.406779709160032] (2,-1; 2,-1), time: 3.7856s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_167, [-inf,inf]=>[-0.12716796045547174,0.47190636297683014] (2,-1; 2,-1), time: 3.8810s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-0.6055650716655226,0.049863662937758305] (2,-1; 2,-1), time: 3.8766s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3320s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_155, [-inf,inf]=>[-0.4693900840945374,0.04589772509394422] (2,-1; 2,-1), time: 2.4458s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.4930273022062241,0.08358324962753226] (2,-1; 2,-1), time: 4.0667s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_195, [-inf,inf]=>[-0.2841018588880439,0.21433902784242662] (2,-1; 2,-1), time: 3.5029s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3559s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2677s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_61, [-inf,inf]=>[-0.5690555837719107,0.06335039500643196] (2,-1; 2,-1), time: 2.2901s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_190, [-inf,inf]=>[-0.4348654881342059,0.023375702316687553] (2,-1; 2,-1), time: 4.4341s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_144, [-inf,inf]=>[-0.4637768216270804,0.1744031665140786] (2,-1; 2,-1), time: 4.4699s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_151, [-inf,inf]=>[-0.5990170999881392,0.05547863026162067] (2,-1; 2,-1), time: 2.5333s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[-0.32158606177000937,0.32024142731328675] (2,-1; 2,-1), time: 2.5805s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[1e-05,0.6870558443363741] (15,-1; 2,-1), time: 0.9776s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[-0.27370525421764114,0.2720469546540971] (2,-1; 2,-1), time: 2.7146s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_124, [-inf,inf]=>[-0.8767801580225214,0.08815720579803767] (2,-1; 2,-1), time: 1.4888s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2762s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-0.14915768970628268,0.43459759107429313] (2,-1; 2,-1), time: 2.1648s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_153, [-inf,inf]=>[-0.6269573921752101,0.2049065748712885] (2,-1; 2,-1), time: 1.6604s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_88, [-inf,inf]=>[-0.1633217754913247,0.3102717814163961] (2,-1; 2,-1), time: 1.9576s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[1e-05,0.6858569524104465] (15,-1; 2,-1), time: 1.1990s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-0.12555408871012402,0.5222855178852642] (2,-1; 2,-1), time: 2.4924s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2899s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-0.4486241167008298,0.13870821538588085] (2,-1; 2,-1), time: 3.0538s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_170, [-inf,inf]=>[-0.4216819685901811,0.24733266268824394] (2,-1; 2,-1), time: 2.5246s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_17, [-inf,inf]=>[1e-05,0.6512184735308801] (15,-1; 2,-1), time: 2.3953s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2445s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[1e-05,0.7440116736370836] (15,-1; 2,-1), time: 0.8367s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_145, [-inf,inf]=>[-0.4696926075914415,0.0426358476292711] (2,-1; 2,-1), time: 3.0416s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_152, [-inf,inf]=>[-0.08580360461218041,0.6199785781745923] (2,-1; 2,-1), time: 3.7990s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_120, [-inf,inf]=>[-0.6235294812519121,0.009975023782161238] (2,-1; 2,-1), time: 2.4314s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_176, [-inf,inf]=>[-0.019968969485827392,0.5508825902662979] (2,-1; 2,-1), time: 3.7391s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_198, [-inf,inf]=>[-0.7265166528160187,0.023141437616300276] (2,-1; 2,-1), time: 3.8347s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2766s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-0.46798220593887496,0.18885028293059897] (2,-1; 2,-1), time: 3.1195s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.20570241596563116,0.4485357705812037] (2,-1; 2,-1), time: 3.2494s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[1e-05,0.6142538657548118] (15,-1; 2,-1), time: 1.5770s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_141, [-inf,inf]=>[-0.6779687154916102,0.024674424632475073] (2,-1; 2,-1), time: 2.5929s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2746s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[1e-05,0.6470231287216417] (15,-1; 2,-1), time: 2.4648s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2990s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3698s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[1e-05,0.6994611445042513] (15,-1; 2,-1), time: 2.6687s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4508s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_102, [-inf,inf]=>[-0.1673877326433792,0.5131599567253682] (2,-1; 2,-1), time: 3.4357s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-0.33093188210218555,0.2901941579417969] (2,-1; 2,-1), time: 3.3116s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[1e-05,0.6002959286446099] (15,-1; 2,-1), time: 2.8068s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2898s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_138, [-inf,inf]=>[-0.32765710968370537,0.17908761712100588] (2,-1; 2,-1), time: 3.5932s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_157, [-inf,inf]=>[-0.3890615115934446,0.428530326749723] (2,-1; 2,-1), time: 3.4737s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_140, [-inf,inf]=>[-0.36348875187728474,0.21159087300529725] (2,-1; 2,-1), time: 2.9665s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-inf,-0.00011449521666478252] (-1,-1; 2,-1), time: 0.8531s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[-0.08165790931465444,0.5438881584097542] (2,-1; 2,-1), time: 2.9028s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_183, [-inf,inf]=>[-0.03658865593971364,0.6506308181882208] (2,-1; 2,-1), time: 3.0425s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_158, [-inf,inf]=>[-0.22357563464250613,0.27039045183563587] (2,-1; 2,-1), time: 3.4351s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.16262573091184998,0.6283376691125628] (2,-1; 2,-1), time: 3.6794s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_160, [-inf,inf]=>[1e-05,0.9648097346091631] (15,-1; 2,-1), time: 2.2358s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-0.38914356074787054,0.20012247817691223] (2,-1; 2,-1), time: 2.4734s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_134, [-inf,inf]=>[-0.4708529854948721,0.08101249935956288] (2,-1; 2,-1), time: 3.8428s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-0.09536337145720154,0.3975088273230404] (2,-1; 2,-1), time: 3.7249s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_114, [-inf,inf]=>[-0.5270918225963973,0.026934307354731044] (2,-1; 2,-1), time: 3.8817s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-0.3213994648976092,0.3420448205550644] (2,-1; 2,-1), time: 2.8125s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[-0.3040943365030847,0.3306142695055097] (2,-1; 2,-1), time: 3.9870s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_106, [-inf,inf]=>[0.0009523596398533976,0.5664366678106253] (2,-1; 2,-1), time: 3.1964s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-0.39966893745373283,0.21552894756872124] (2,-1; 2,-1), time: 5.2938s, #vars: 1277, #constrs: 538, improved: True
PGD done for relu layer 2
MIP improved 80 nodes out of 80 unstable nodes, lb improved 10.54647159576416, ub improved 12.409640312194824, time 15.7268
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_143', 'lay6_139', 'lay6_158', 'lay6_17', 'lay6_77', 'lay6_34', 'lay6_16', 'lay6_112', 'lay6_166', 'lay6_33', 'lay6_28', 'lay6_172', 'lay6_127', 'lay6_190', 'lay6_183', 'lay6_60', 'lay6_32', 'lay6_160', 'lay6_125', 'lay6_159', 'lay6_41', 'lay6_10', 'lay6_27', 'lay6_123', 'lay6_124', 'lay6_119', 'lay6_64', 'lay6_178', 'lay6_146', 'lay6_50', 'lay6_164', 'lay6_96', 'lay6_174', 'lay6_36', 'lay6_121', 'lay6_11', 'lay6_118', 'lay6_78', 'lay6_152', 'lay6_63', 'lay6_1', 'lay6_71', 'lay6_193', 'lay6_99', 'lay6_5', 'lay6_75', 'lay6_65', 'lay6_7', 'lay6_197', 'lay6_58', 'lay6_101', 'lay6_169', 'lay6_132', 'lay6_47', 'lay6_42', 'lay6_138', 'lay6_130', 'lay6_23', 'lay6_59', 'lay6_115', 'lay6_187', 'lay6_45', 'lay6_100', 'lay6_95', 'lay6_62', 'lay6_79', 'lay6_144', 'lay6_135', 'lay6_22', 'lay6_167', 'lay6_147', 'lay6_19', 'lay6_106', 'lay6_199', 'lay6_43', 'lay6_54', 'lay6_131', 'lay6_49', 'lay6_102', 'lay6_116', 'lay6_69', 'lay6_38', 'lay6_136', 'lay6_18', 'lay6_108', 'lay6_3', 'lay6_30', 'lay6_12', 'lay6_109', 'lay6_129', 'lay6_141', 'lay6_185', 'lay6_155', 'lay6_85', 'lay6_40', 'lay6_162', 'lay6_192', 'lay6_142', 'lay6_137', 'lay6_81', 'lay6_117', 'lay6_9', 'lay6_140', 'lay6_145', 'lay6_57', 'lay6_186', 'lay6_111', 'lay6_73', 'lay6_94', 'lay6_120', 'lay6_163', 'lay6_74', 'lay6_156', 'lay6_20', 'lay6_173', 'lay6_83', 'lay6_181', 'lay6_195', 'lay6_179', 'lay6_122', 'lay6_0', 'lay6_4', 'lay6_93', 'lay6_55', 'lay6_35', 'lay6_189', 'lay6_110', 'lay6_171', 'lay6_88', 'lay6_53', 'lay6_170', 'lay6_72', 'lay6_8', 'lay6_70', 'lay6_161', 'lay6_168', 'lay6_25', 'lay6_114', 'lay6_46', 'lay6_87', 'lay6_198', 'lay6_29', 'lay6_82', 'lay6_165', 'lay6_191', 'lay6_107', 'lay6_51', 'lay6_15', 'lay6_157', 'lay6_150', 'lay6_68', 'lay6_177', 'lay6_61', 'lay6_154', 'lay6_21', 'lay6_98', 'lay6_104', 'lay6_153', 'lay6_182', 'lay6_92'] filter: 1.0
Solving MIP for lay6_166, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4622s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5837s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7340s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.8143s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.8555s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.9081s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_127, [-inf,inf]=>[-0.36818561169350683,0.19808071987311732] (9,-1; 2,-1), time: 18.4477s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.7677581152527185,0.08925125357770038] (2,-1; 9,-1), time: 19.2201s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-0.34451864381219394,0.196686459594159] (9,-1; 2,-1), time: 20.8071s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-0.34196191231281353,0.23207293555628217] (9,-1; 2,-1), time: 21.0723s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-0.7259629351680073,0.048828606505287] (2,-1; 9,-1), time: 21.5159s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7679s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-0.5085872877050098,0.5907531327577819] (9,-1; 2,-1), time: 22.8846s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-0.4602274485959602,0.0903940079071961] (2,-1; 9,-1), time: 21.1576s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_158, [-inf,inf]=>[-0.48041059476948406,0.165944805243397] (9,-1; 2,-1), time: 25.8859s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.2911s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_112, [-inf,inf]=>[-0.49459622556432187,0.07949087091026426] (9,-1; 2,-1), time: 26.9291s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_164, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3260s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2838s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[-0.38665113858605604,0.06142914119162754] (9,-1; 2,-1), time: 27.1169s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.0583s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3035s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6901s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2846s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_183, [-inf,inf]=>[-0.5297721190142352,0.09232113738902123] (9,-1; 9,-1), time: 30.0190s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_172, [-inf,inf]=>[-0.3209585131701327,0.30359842089952965] (9,-1; 9,-1), time: 30.0161s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-0.4896342555931488,0.15488859971298338] (9,-1; 9,-1), time: 30.0203s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1051s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_159, [-inf,inf]=>[-0.6368693636870408,0.13560468202815432] (9,-1; 2,-1), time: 28.3997s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2601s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-0.15535535552917223,0.3365396103193726] (9,-1; 9,-1), time: 30.0107s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-0.7424081453774338,0.10654616945303104] (2,-1; 2,-1), time: 17.7986s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3740s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_197, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0608s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.2748015351196353,0.31377172078871507] (9,-1; 2,-1), time: 28.9363s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0224s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[1e-05,0.5860343531194941] (15,-1; 2,-1), time: 15.7016s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2230s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-0.23980855933950584,0.6533652605898672] (9,-1; 2,-1), time: 20.6276s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.20103637182321055,0.24655379309759706] (9,-1; 2,-1), time: 19.2180s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.2273s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_130, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7966s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[1e-05,0.8073177476597836] (15,-1; 9,-1), time: 15.7245s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4437s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8627s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3203s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.7413s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_115, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9933s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3352s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7925s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_174, [-inf,inf]=>[-0.5696096996721524,0.03960637304379573] (9,-1; 2,-1), time: 20.4208s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[1e-05,0.9281809225033825] (15,-1; 2,-1), time: 7.7148s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[-0.6650248243835932,0.057834097414387525] (9,-1; 2,-1), time: 18.5137s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-0.5188449732043541,0.003939997843189814] (2,-1; 9,-1), time: 25.5708s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-0.4658755595299412,0.046856930958640845] (9,-1; 2,-1), time: 19.4899s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_147, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2549s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-0.11513853344201627,0.6893471348906614] (9,-1; 2,-1), time: 24.8429s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.3325s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-0.5119261458154745,0.011776967167457714] (9,-1; 2,-1), time: 23.8986s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2578s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3544s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2880s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3970s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.5515s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.4595s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-0.1361162253178822,0.4899080529779568] (9,-1; 2,-1), time: 20.6135s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[-0.3967448825072832,0.3687566385287842] (9,-1; 9,-1), time: 30.0158s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.37887561833419736,0.08184035327552902] (9,-1; 9,-1), time: 30.0181s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.6835s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2725s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3139s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_132, [-inf,inf]=>[-0.4577357301757865,0.04051765549693063] (2,-1; 2,-1), time: 22.3834s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7751s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8702s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.29510137157161687,0.2915285255125516] (9,-1; 9,-1), time: 30.0108s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_129, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0029s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-0.3323346609225841,0.1908945113352812] (9,-1; 9,-1), time: 30.0149s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.7811s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2809s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3486s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3362s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7036s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3572s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_100, [-inf,inf]=>[-0.29871216753342533,0.2454430235457732] (9,-1; 2,-1), time: 25.7716s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3497s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2639s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3465s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-0.5641543466843676,0.04884864601144217] (9,-1; 9,-1), time: 30.0155s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_140, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.0679s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-0.31751682540153275,0.22302821443728454] (9,-1; 9,-1), time: 30.0203s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-0.13947051847102349,0.47979689690721455] (9,-1; 9,-1), time: 30.0265s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.46436030050626464,0.09016712652136345] (9,-1; 9,-1), time: 30.0149s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.3329141208233773,0.21434169046155516] (9,-1; 9,-1), time: 30.1280s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_155, [-inf,inf]=>[-0.4039847915286449,0.4604669338373143] (2,-1; 2,-1), time: 13.1473s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.0004765722633118646,0.596787298591899] (9,-1; 2,-1), time: 21.7934s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[-0.2845187950488207,0.1756781743849862] (9,-1; 9,-1), time: 30.0158s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-0.4698728747296586,0.009179093921720451] (9,-1; 2,-1), time: 22.1387s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3445s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8713s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3480s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_145, [-inf,inf]=>[1e-05,0.7075366076251354] (15,-1; 2,-1), time: 10.4767s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_120, [-inf,inf]=>[1e-05,0.8041611431037039] (15,-1; 2,-1), time: 6.7259s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_116, [-inf,inf]=>[-0.277051713881803,0.2977490974299414] (9,-1; 9,-1), time: 30.1401s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_181, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.0691s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.20831642920813112,0.2696161608302559] (9,-1; 9,-1), time: 30.0169s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_109, [-inf,inf]=>[-0.3623628461436562,0.20552433576876084] (9,-1; 9,-1), time: 30.1312s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_141, [-inf,inf]=>[-0.1932652677854645,0.40434078747232927] (9,-1; 9,-1), time: 30.0960s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_185, [-inf,inf]=>[-0.021445091337125233,0.6297581470593937] (9,-1; 9,-1), time: 30.0143s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3358s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2473s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2496s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_137, [-inf,inf]=>[-0.42275048898257794,0.11145113757271267] (9,-1; 2,-1), time: 26.0948s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_111, [-inf,inf]=>[1e-05,0.5913497076072481] (15,-1; 9,-1), time: 19.0407s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.2112s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-0.09812346407512713,0.5934681407328158] (9,-1; 2,-1), time: 21.9364s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[-0.06833742693219585,0.4669548151613564] (9,-1; 2,-1), time: 18.9001s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-0.201464862136093,0.6514257943629062] (2,-1; 2,-1), time: 21.5559s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-0.2187279029057995,0.6456216546996736] (2,-1; 2,-1), time: 11.9329s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2663s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.325937518755261,0.12253810393089429] (2,-1; 9,-1), time: 26.8398s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-0.30396716428904863,0.033947172320911594] (9,-1; 9,-1), time: 30.0200s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-0.23501713893384335,0.25839509671774374] (9,-1; 9,-1), time: 30.0130s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2987s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6053s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[1e-05,0.5571228673545118] (15,-1; 9,-1), time: 15.6659s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.6609s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3446s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2436s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2712s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3843s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7310s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2499s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3017s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2624s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7565s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3359s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_177, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2546s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.2514s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-0.4014601055546926,0.08026000335608524] (9,-1; 9,-1), time: 30.0170s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[1e-05,0.7107928348047072] (15,-1; 2,-1), time: 13.0419s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2695s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_195, [-inf,inf]=>[-0.18062828639523867,0.4085157241051082] (9,-1; 9,-1), time: 30.0149s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_179, [-inf,inf]=>[-0.08329533073743987,0.4734750741579931] (9,-1; 9,-1), time: 30.0147s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.5268567563424896,0.1367692440816553] (9,-1; 2,-1), time: 20.0492s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_182, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3301s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[1e-05,0.7719387756676164] (15,-1; 2,-1), time: 5.6482s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_153, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7644s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[-0.4370478490895034,0.16465658997082405] (9,-1; 9,-1), time: 30.0135s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_154, [-inf,inf]=>[1e-05,1.366338716535347] (15,-1; 2,-1), time: 9.0462s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_189, [-inf,inf]=>[-0.4114781020919096,0.028150584814294728] (9,-1; 9,-1), time: 30.0221s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[-0.32564775566683263,0.29898040745533294] (9,-1; 9,-1), time: 30.0179s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-0.01790734627828778,0.5960293685109355] (9,-1; 2,-1), time: 25.5950s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.2633212689737355,0.19694928802269276] (9,-1; 2,-1), time: 21.2440s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-0.5867362494363729,0.035548149091619345] (9,-1; 2,-1), time: 20.6569s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_107, [-inf,inf]=>[-0.3426246475393323,0.10395635179934667] (9,-1; 2,-1), time: 19.8638s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.08257511461725357,0.3580237265093052] (9,-1; 9,-1), time: 30.0196s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.33988901100571095,0.2838173191599256] (9,-1; 2,-1), time: 22.8267s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_161, [-inf,inf]=>[-0.2882212362074962,0.20974812235320597] (9,-1; 9,-1), time: 30.0174s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.41849664455953584,0.20599455152567017] (9,-1; 2,-1), time: 19.6542s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_104, [-inf,inf]=>[-0.5230553236961866,0.020277529886392198] (9,-1; 2,-1), time: 29.7984s, #vars: 1579, #constrs: 891, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(125, 1), (27, -1), (89, -1), (93, -1), (49, -1), (171, -1), (189, -1), (50, -1), (139, -1), (9, 1), (17, 1), (75, 1), (131, -1), (143, -1), (150, 1), (19, 1), (53, 1), (80, -1), (28, 1), (38, 1), (57, -1), (162, -1), (173, -1), (11, -1), (12, -1), (160, 1), (90, -1), (58, -1), (106, 1)]
best_l after optimization: -9268.2431640625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 12.187005996704102
alpha-CROWN with intermediate bounds by MIP: tensor([[ -620.80072021,  -965.31585693, -1192.69445801, -1299.52917480,
         -1149.73400879,  -980.46557617,  -895.13104248, -1167.01647949,
          -997.55566406]], device='cuda:0') None
MIP improved 160 nodes out of 160 unstable nodes, lb improved 33.532073974609375, ub improved 46.332496643066406, time 145.4288
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_15', 'lay8_140', 'lay8_85', 'lay8_35', 'lay8_70', 'lay8_118', 'lay8_102', 'lay8_156', 'lay8_25', 'lay8_76', 'lay8_42', 'lay8_134', 'lay8_60', 'lay8_113', 'lay8_34', 'lay8_146', 'lay8_170', 'lay8_189', 'lay8_109', 'lay8_149', 'lay8_92', 'lay8_54', 'lay8_6', 'lay8_19', 'lay8_40', 'lay8_21', 'lay8_100', 'lay8_91', 'lay8_162', 'lay8_122', 'lay8_105', 'lay8_144', 'lay8_56', 'lay8_142', 'lay8_182', 'lay8_32', 'lay8_155', 'lay8_86', 'lay8_117', 'lay8_53', 'lay8_24', 'lay8_73', 'lay8_115', 'lay8_154', 'lay8_190', 'lay8_125', 'lay8_178', 'lay8_84', 'lay8_4', 'lay8_150', 'lay8_157', 'lay8_39', 'lay8_66', 'lay8_37', 'lay8_195', 'lay8_104', 'lay8_69', 'lay8_74', 'lay8_23', 'lay8_192', 'lay8_63', 'lay8_120', 'lay8_77', 'lay8_187', 'lay8_171', 'lay8_83', 'lay8_49', 'lay8_3', 'lay8_62', 'lay8_71', 'lay8_94', 'lay8_124', 'lay8_45', 'lay8_112', 'lay8_31', 'lay8_29', 'lay8_176', 'lay8_64', 'lay8_87', 'lay8_96', 'lay8_163', 'lay8_188', 'lay8_116', 'lay8_168', 'lay8_14', 'lay8_59', 'lay8_174', 'lay8_61', 'lay8_36', 'lay8_133', 'lay8_138', 'lay8_184', 'lay8_103', 'lay8_106', 'lay8_194', 'lay8_173', 'lay8_13', 'lay8_48', 'lay8_38', 'lay8_89', 'lay8_46', 'lay8_114', 'lay8_22', 'lay8_26', 'lay8_158', 'lay8_151', 'lay8_130', 'lay8_185', 'lay8_18', 'lay8_191', 'lay8_153', 'lay8_129', 'lay8_131', 'lay8_135', 'lay8_101', 'lay8_44', 'lay8_50', 'lay8_166', 'lay8_93', 'lay8_186', 'lay8_197', 'lay8_12', 'lay8_41', 'lay8_27', 'lay8_75', 'lay8_128', 'lay8_160', 'lay8_198', 'lay8_132', 'lay8_88', 'lay8_68', 'lay8_17', 'lay8_90', 'lay8_167', 'lay8_126', 'lay8_67', 'lay8_199', 'lay8_1', 'lay8_143', 'lay8_16', 'lay8_52', 'lay8_181', 'lay8_137', 'lay8_79', 'lay8_107', 'lay8_8', 'lay8_111', 'lay8_183', 'lay8_147', 'lay8_30', 'lay8_98', 'lay8_164', 'lay8_51', 'lay8_177', 'lay8_175', 'lay8_65', 'lay8_28', 'lay8_7', 'lay8_10', 'lay8_141', 'lay8_78', 'lay8_9', 'lay8_110', 'lay8_145', 'lay8_20', 'lay8_5', 'lay8_97', 'lay8_58', 'lay8_81', 'lay8_148', 'lay8_169', 'lay8_47', 'lay8_82', 'lay8_119', 'lay8_165', 'lay8_57', 'lay8_193', 'lay8_179', 'lay8_2', 'lay8_33', 'lay8_108', 'lay8_136', 'lay8_123', 'lay8_43', 'lay8_196', 'lay8_99', 'lay8_159', 'lay8_0', 'lay8_180', 'lay8_172', 'lay8_11', 'lay8_121', 'lay8_127', 'lay8_161', 'lay8_139', 'lay8_95', 'lay8_55', 'lay8_72', 'lay8_152', 'lay8_80'] filter: 1.0
Solving MIP for lay8_118, [-inf,inf]=>[-0.36497063352063386,0.20772799732541825] (9,-1; 9,-1), time: 30.0157s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.6042448205129846,0.1606240343888076] (9,-1; 9,-1), time: 30.0235s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_134, [-inf,inf]=>[-0.49256631297104975,0.16697635095989583] (9,-1; 9,-1), time: 30.0258s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-0.5237637588447437,0.0036228342216278174] (9,-1; 9,-1), time: 30.0202s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_146, [-inf,inf]=>[-0.580918632468744,0.06452760129232557] (9,-1; 9,-1), time: 30.0446s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_113, [-inf,inf]=>[-0.6357169671895019,0.24367124610244628] (9,-1; 9,-1), time: 30.0542s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_140, [-inf,inf]=>[-0.7206108371401522,0.21269999829724662] (9,-1; 9,-1), time: 30.0809s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_156, [-inf,inf]=>[-0.17415535565336154,0.600856413189075] (9,-1; 9,-1), time: 30.1907s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.5861065938351975,0.2932599291745968] (9,-1; 9,-1), time: 30.2170s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-0.9029920746417158,0.012089472650431896] (9,-1; 9,-1), time: 30.2260s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_102, [-inf,inf]=>[-0.4693826079137972,0.3329484161051146] (9,-1; 9,-1), time: 30.2906s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-0.7121149866000783,0.0430153073878713] (9,-1; 9,-1), time: 30.2896s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-0.7821671806995681,0.02054865018586684] (9,-1; 9,-1), time: 30.3338s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-0.572709212024932,0.07501752964175684] (9,-1; 9,-1), time: 30.3616s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-0.7502153528562833,0.18956448734435824] (9,-1; 9,-1), time: 30.4251s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5132s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-0.5563041919561155,0.0467435759930152] (9,-1; 9,-1), time: 30.6347s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.7855s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.4637s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[1e-05,1.565811543792355] (15,-1; 9,-1), time: 15.4682s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4399s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[-0.3684311081074019,0.25777995746799703] (9,-1; 9,-1), time: 30.0544s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.40482219937323316,0.14967261631499534] (9,-1; 9,-1), time: 30.0249s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.7228664267157463,0.06284060374701246] (9,-1; 9,-1), time: 30.0197s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_109, [-inf,inf]=>[-0.32233876679757134,0.6102696042399919] (9,-1; 9,-1), time: 30.2084s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.6241532010834477,0.02582950780077758] (9,-1; 9,-1), time: 30.0425s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[-0.6560158953210098,0.1724222531532745] (9,-1; 9,-1), time: 30.0174s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-0.4373925422529924,0.2245080072211167] (9,-1; 9,-1), time: 30.1179s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-0.42639390170005814,0.39052048707980386] (9,-1; 9,-1), time: 30.3487s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_122, [-inf,inf]=>[-0.5308750798581026,0.0483866243487888] (9,-1; 9,-1), time: 30.0607s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[-0.3010247404641909,0.31750959016578195] (9,-1; 9,-1), time: 30.4181s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[-0.4637343615975374,0.19227505530290534] (9,-1; 9,-1), time: 30.0141s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-0.40236802002119265,0.23989797354931705] (9,-1; 9,-1), time: 30.3834s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.1141428154438737,1.078153809593072] (9,-1; 9,-1), time: 30.8126s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_155, [-inf,inf]=>[1e-05,1.4854551087136099] (15,-1; 9,-1), time: 15.8017s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_142, [-inf,inf]=>[-0.8374022994470492,0.06975737413703444] (9,-1; 9,-1), time: 30.3518s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_182, [-inf,inf]=>[-0.5184507515103483,0.07286844670843581] (9,-1; 9,-1), time: 30.0774s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5224s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.1260s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7883s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_117, [-inf,inf]=>[1e-05,0.8869270201688879] (15,-1; 9,-1), time: 25.0423s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3275s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-0.45677776933910985,0.15575149042649755] (9,-1; 9,-1), time: 30.0841s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-0.390892219575371,0.2890781142979146] (9,-1; 9,-1), time: 30.0493s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-0.30587541224481124,0.3753490020830008] (9,-1; 9,-1), time: 30.0212s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_115, [-inf,inf]=>[-0.12942552575452854,0.6654405805463958] (9,-1; 9,-1), time: 30.0371s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_190, [-inf,inf]=>[-0.3237765168424836,0.3562325876818894] (9,-1; 9,-1), time: 30.0333s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-0.6902638375642115,0.027538431394080264] (9,-1; 9,-1), time: 30.0317s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-0.7777577884556774,0.023271942481522298] (9,-1; 9,-1), time: 30.2449s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4650s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.6476826909578075,0.0775673325310907] (9,-1; 9,-1), time: 30.2086s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-0.41381813355284064,0.3258876121723728] (9,-1; 9,-1), time: 30.1930s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4687s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_150, [-inf,inf]=>[-0.6446844082495725,0.025228398715927036] (9,-1; 9,-1), time: 30.0568s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[-0.2966366661174444,0.38145467512130515] (9,-1; 9,-1), time: 30.7720s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_157, [-inf,inf]=>[-0.1270916191216673,0.8825378001570116] (9,-1; 9,-1), time: 30.0252s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_124, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4242s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-0.7119796296616158,0.10556801108185185] (9,-1; 9,-1), time: 30.0205s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-1.2031629760587452,0.02736137795226764] (9,-1; 9,-1), time: 30.1272s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.2517s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_104, [-inf,inf]=>[-0.6720381552510816,0.0532343932523027] (9,-1; 9,-1), time: 30.0164s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5360s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 14.5957s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4584s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[1e-05,1.0507665154105885] (15,-1; 9,-1), time: 16.3215s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.4930733602302996,0.0806211945669912] (9,-1; 9,-1), time: 30.0148s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4404s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-0.43682592865588477,0.3209041581519845] (9,-1; 9,-1), time: 30.0106s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_120, [-inf,inf]=>[-0.4283358753109254,0.27816654124000006] (9,-1; 9,-1), time: 30.0189s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_171, [-inf,inf]=>[-0.2738906829935267,0.8356705784681988] (9,-1; 9,-1), time: 30.0194s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-0.6999755250154074,0.1738822838749174] (9,-1; 9,-1), time: 30.0250s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.5504147365272796,0.011281289085257343] (9,-1; 9,-1), time: 30.0145s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.4056546074277629,0.19620423417330393] (9,-1; 9,-1), time: 30.0524s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-0.6182462382717908,0.30368926930764] (9,-1; 9,-1), time: 30.0718s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.4662838714118537,0.24020596290815333] (9,-1; 9,-1), time: 30.0165s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2912s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.49694585692254484,0.12474817218982111] (9,-1; 9,-1), time: 30.0104s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_116, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.6300s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_112, [-inf,inf]=>[-0.5016699512810222,0.18945735360612226] (9,-1; 9,-1), time: 30.0115s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-0.2314326960778361,0.38967229672338] (9,-1; 9,-1), time: 30.0267s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-0.40625499164231393,0.5521494440731985] (9,-1; 9,-1), time: 30.0169s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.6277265082473618,0.2914514190177472] (9,-1; 9,-1), time: 30.0334s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.709629797843107,0.3355236629187245] (9,-1; 9,-1), time: 30.1993s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4997s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_163, [-inf,inf]=>[-0.22170535201593453,0.3608886759935707] (9,-1; 9,-1), time: 30.0132s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_168, [-inf,inf]=>[-0.32724009678814847,0.566920026649067] (9,-1; 9,-1), time: 30.0348s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-0.6328943912518478,0.012126789472885348] (9,-1; 9,-1), time: 30.2027s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.23806421167542532,0.4200487384790189] (9,-1; 9,-1), time: 30.0270s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_174, [-inf,inf]=>[-0.3156231831746101,0.4981772038216317] (9,-1; 9,-1), time: 30.0936s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-0.5647584452730112,0.026942406400142] (9,-1; 9,-1), time: 30.0471s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_133, [-inf,inf]=>[-0.5512664447131622,0.14867205244169954] (9,-1; 9,-1), time: 30.0161s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5200s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-0.36646836245804937,0.3210610402418577] (9,-1; 9,-1), time: 30.4463s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_184, [-inf,inf]=>[-0.618847811084913,0.3207626878184804] (9,-1; 9,-1), time: 30.1151s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_103, [-inf,inf]=>[-0.5381744107946617,0.14363479953806108] (9,-1; 9,-1), time: 30.0348s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_106, [-inf,inf]=>[-0.30113186307279605,0.31368306660795386] (9,-1; 9,-1), time: 30.0131s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_194, [-inf,inf]=>[-0.6796914601209201,0.1782746520226823] (9,-1; 9,-1), time: 30.0109s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_173, [-inf,inf]=>[-0.3761553011906961,0.35858874476683494] (9,-1; 9,-1), time: 30.0374s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4809s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.7596645511280343,0.043821171928005234] (9,-1; 9,-1), time: 30.0777s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.007543595341883131,0.6510538278310127] (9,-1; 9,-1), time: 30.0289s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_114, [-inf,inf]=>[1e-05,1.3467832810487437] (15,-1; 9,-1), time: 15.4460s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-0.1891103406705269,0.6822197790570383] (9,-1; 9,-1), time: 30.0220s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,1.4249360026253997] (15,-1; 9,-1), time: 15.7161s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4458s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[1e-05,1.16981076826034] (15,-1; 9,-1), time: 15.5633s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-0.6611084335034128,0.026664415242985903] (9,-1; 9,-1), time: 30.3661s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5226s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_158, [-inf,inf]=>[-0.6339284053280523,0.07624803556166293] (9,-1; 9,-1), time: 30.0239s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_130, [-inf,inf]=>[-0.4620723816759509,0.32230564096425957] (9,-1; 9,-1), time: 30.0166s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_151, [-inf,inf]=>[-0.5355705033164333,0.15518967469165104] (9,-1; 9,-1), time: 30.0762s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_185, [-inf,inf]=>[-0.3959434621949127,0.2097888999007986] (9,-1; 9,-1), time: 30.0152s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_153, [-inf,inf]=>[-0.5432657994401251,0.07043001958111039] (9,-1; 9,-1), time: 30.0241s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_191, [-inf,inf]=>[-0.6610340651690522,0.06611236162264837] (9,-1; 9,-1), time: 30.1329s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4631s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_129, [-inf,inf]=>[-0.5617623657267873,0.16325051307673827] (9,-1; 9,-1), time: 30.0381s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_131, [-inf,inf]=>[-0.7081940614482238,0.003971555411826921] (9,-1; 9,-1), time: 30.2368s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_101, [-inf,inf]=>[-0.3877131026150351,0.31361549236983555] (9,-1; 9,-1), time: 30.0300s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-0.5038114620374237,0.17350776729736125] (9,-1; 9,-1), time: 30.0206s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.4442742795549564,0.3149981585430483] (9,-1; 9,-1), time: 30.0159s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4991s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_166, [-inf,inf]=>[-0.0464872614355564,0.5759164703879829] (9,-1; 9,-1), time: 30.0216s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-0.19927365540457376,0.5799153119002] (9,-1; 9,-1), time: 30.4835s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_197, [-inf,inf]=>[-0.5643292684223081,0.19886727265324092] (9,-1; 9,-1), time: 30.0144s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-0.9064792936295062,0.09875904576003305] (9,-1; 9,-1), time: 30.1780s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_160, [-inf,inf]=>[1e-05,1.02403314319276] (15,-1; 9,-1), time: 16.6470s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-0.4706296044939916,0.17850747511481982] (9,-1; 9,-1), time: 30.3378s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_167, [-inf,inf]=>[1e-05,1.250100044066646] (15,-1; 9,-1), time: 15.4469s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-0.10087553039271542,0.5665116926399019] (9,-1; 9,-1), time: 30.0370s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_128, [-inf,inf]=>[-0.47586292884181436,0.32861561821547414] (9,-1; 9,-1), time: 30.0127s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_198, [-inf,inf]=>[-0.856108710781325,0.016697825038326855] (9,-1; 9,-1), time: 30.4047s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-0.47612798933312517,0.12936873850483716] (9,-1; 9,-1), time: 30.0249s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-0.6270396023604249,0.09217438427603876] (9,-1; 9,-1), time: 30.0192s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_181, [-inf,inf]=>[1e-05,1.0443659912697476] (15,-1; 9,-1), time: 15.5288s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-0.5369533918820553,0.15163414333239206] (9,-1; 9,-1), time: 30.0353s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-0.6574390350590742,0.19955177217320036] (9,-1; 9,-1), time: 30.0226s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_126, [-inf,inf]=>[-0.6565525131445843,0.0872040893990449] (9,-1; 9,-1), time: 30.0414s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_199, [-inf,inf]=>[-0.3208579302145734,0.5273059254808036] (9,-1; 9,-1), time: 30.2914s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.1741416393647538,0.41519378249636585] (9,-1; 9,-1), time: 30.0168s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4377s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-0.7905555117026671,0.18077504517693255] (9,-1; 9,-1), time: 30.1262s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_143, [-inf,inf]=>[-0.7147731778651125,0.016815681471469127] (9,-1; 9,-1), time: 30.2416s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-0.8883736967509268,0.3588395808807788] (9,-1; 9,-1), time: 30.2949s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_137, [-inf,inf]=>[-0.5899983297545041,0.06952844777150612] (9,-1; 9,-1), time: 30.0186s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.1626s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[1e-05,1.2264440547707762] (15,-1; 9,-1), time: 15.5425s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-0.6582339905616591,0.004007438355934141] (9,-1; 9,-1), time: 30.0761s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_107, [-inf,inf]=>[-0.31166100507461897,0.28947390922705385] (9,-1; 9,-1), time: 30.0418s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.45607341974708043,0.2413806166615592] (9,-1; 9,-1), time: 30.1327s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_111, [-inf,inf]=>[-0.6186566008284539,0.22448264065497045] (9,-1; 9,-1), time: 30.0273s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_183, [-inf,inf]=>[-0.20876848517518837,0.5760290510243835] (9,-1; 9,-1), time: 30.0219s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[1e-05,0.827990214646007] (15,-1; 9,-1), time: 16.6271s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_147, [-inf,inf]=>[-0.8096781355416832,0.056505457434333] (9,-1; 9,-1), time: 30.1982s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.3224592676415453,0.27423438816667806] (9,-1; 9,-1), time: 30.1179s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_164, [-inf,inf]=>[-0.6897954720745455,0.04992027446112421] (9,-1; 9,-1), time: 30.0591s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-0.7016958169812765,0.12166775543343816] (9,-1; 9,-1), time: 31.3716s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_177, [-inf,inf]=>[-0.3269226988047327,0.5244279665589253] (9,-1; 9,-1), time: 30.0142s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-0.06608270001658573,0.9221738541231367] (9,-1; 9,-1), time: 30.1669s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-0.4633054705307423,0.4162901003631444] (9,-1; 9,-1), time: 30.4731s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_141, [-inf,inf]=>[-0.7033394645591221,0.015507366115032376] (9,-1; 9,-1), time: 30.1633s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-0.3562915839543778,0.37732280909732635] (9,-1; 9,-1), time: 30.0169s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-0.8014631039922742,0.04940310596090862] (9,-1; 9,-1), time: 30.1064s, #vars: 1919, #constrs: 1301, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(143, -1), (16, -1), (166, -1), (33, -1), (60, -1), (32, -1), (119, -1), (64, -1), (178, -1), (146, 1), (164, -1), (36, -1), (121, 1), (11, -1), (118, -1), (78, -1), (152, -1), (5, -1), (65, -1), (197, -1), (58, -1), (101, -1), (169, -1), (42, -1), (138, 1), (130, -1), (23, -1), (59, -1), (115, -1), (187, -1), (45, -1), (95, -1), (135, -1), (147, -1), (19, -1), (199, -1), (43, -1), (54, -1), (131, -1), (49, -1), (102, -1), (38, -1), (18, -1), (108, -1), (3, -1), (12, -1), (129, -1), (85, -1), (40, -1), (162, -1), (192, -1), (142, -1), (81, -1), (117, -1), (9, -1), (140, -1), (145, 1), (111, 1), (120, 1), (74, -1), (156, -1), (173, -1), (181, -1), (0, 1), (93, -1), (55, -1), (35, -1), (171, -1), (72, 1), (8, -1), (70, -1), (168, -1), (114, -1), (46, -1), (87, -1), (198, -1), (82, -1), (165, -1), (191, -1), (51, -1), (15, -1), (157, -1), (150, -1), (68, -1), (177, -1), (154, 1), (21, 1), (98, -1), (153, -1), (182, -1)]
best_l after optimization: -3805.559814453125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.401770830154419
alpha-CROWN with intermediate bounds by MIP: tensor([[-255.06896973, -396.05981445, -489.49755859, -533.39031982,
         -472.41467285, -402.31610107, -367.38854980, -479.59088135,
         -409.83288574]], device='cuda:0') None
MIP improved 162 nodes out of 200 unstable nodes, lb improved 167.9906768798828, ub improved 156.30223083496094, time 263.1673
maximum relu layer improved by MIP so far 3
MIP finished with 427.79099678993225s
Run final alpha-CROWN after MIP solving on layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
best_l after optimization: -2755.1640625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 9.66930103302002
alpha-CROWN with intermediate bounds improved by MIP: tensor([[-184.73736572, -286.61883545, -354.28399658, -386.06921387,
         -342.16098022, -291.13433838, -265.91198730, -347.41500854,
         -296.83245850]], device='cuda:0') None
refined global lb: tensor([[-184.73736572],
        [-286.61883545],
        [-354.28399658],
        [-386.06921387],
        [-342.16098022],
        [-291.13433838],
        [-265.91198730],
        [-347.41500854],
        [-296.83245850]], device='cuda:0') min: tensor(-386.06921387, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200])]

Properties batch 0, size 1
Remaining timeout: 48.055904388427734
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-184.73736572]], device='cuda:0') need to verify.
Model prediction is: tensor([-1.23322034, -1.39387631, -0.11875690, -2.08025169,  4.47272348,
        -0.79578960, -0.22910598, -0.09808658, -0.02926117,  2.37303782],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-184.73736572]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
layer 0 name BoundLinear(name="/input") size torch.Size([200]) unstable 46
layer 1 name BoundLinear(name="/input.3") size torch.Size([200]) unstable 51
layer 2 name BoundLinear(name="/input.7") size torch.Size([200]) unstable 70
layer 3 name BoundLinear(name="/input.11") size torch.Size([200]) unstable 154
layer 4 name BoundLinear(name="/input.15") size torch.Size([200]) unstable 200
layer 5 name BoundLinear(name="/input.19") size torch.Size([200]) unstable 200
layer 6 name BoundLinear(name="/input.23") size torch.Size([200]) unstable 200
layer 7 name BoundLinear(name="/input.27") size torch.Size([200]) unstable 200
-----------------
# of unstable neurons: 1121
-----------------

batch:  torch.Size([1, 200]) pre split depth:  6
post split depth:  6
splitting decisions: 
split level 0: [7, 113] 
split level 1: [7, 17] 
split level 2: [7, 15] 
split level 3: [7, 92] 
split level 4: [7, 140] 
split level 5: [7, 59] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 64 = 0.0
pruning-in-iteration extra time: 0.00012302398681640625
Time: prepare 0.0165    beta_bound 0.5692    bound 0.5693    transfer 0.0005    finalize 0.0119    func 0.5983    
Accumulated time: func 0.5983    prepare 0.0229    bound 0.5693    beta_bound 0.5692    transfer 0.0005    finalize 0.0119    
batch bounding time:  0.598440408706665
Current worst splitting domains lb-rhs (depth):
-152.21492 (6), -151.19225 (6), -150.94644 (6), -149.78699 (6), -148.97530 (6), -148.32431 (6), -147.48254 (6), -147.38443 (6), -146.89627 (6), -146.74741 (6), -146.58020 (6), -146.46991 (6), -145.49362 (6), -145.45377 (6), -145.20312 (6), -144.91096 (6), -144.89499 (6), -144.84531 (6), -144.01010 (6), -143.86523 (6), 
length of domains: 64
Time: pickout 0.0018    decision 0.2667    solve 0.6097    add 0.0059    
Accumulated time: pickout 0.0018    decision 0.2667    solve 0.6097    add 0.0059    
Current (lb-rhs): -152.2149200439453
64 domains visited
Cumulative time: 0.9182360172271729

batch:  torch.Size([64, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 100] [7, 107] [7, 100] [7, 107] [7, 100] [7, 107] [7, 100] [7, 100] [7, 100] [7, 100] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 128 = 0.0
pruning-in-iteration extra time: 0.00019049644470214844
Time: prepare 0.0276    beta_bound 0.3660    bound 0.3661    transfer 0.0004    finalize 0.0236    func 0.4177    
Accumulated time: func 1.0161    prepare 0.0543    bound 0.9354    beta_bound 0.9352    transfer 0.0009    finalize 0.0355    
batch bounding time:  0.4178762435913086
Current worst splitting domains lb-rhs (depth):
-147.84750 (7), -147.12090 (7), -146.32675 (7), -145.64728 (7), -145.44705 (7), -144.76839 (7), -144.38734 (7), -144.18254 (7), -144.07573 (7), -142.95886 (7), -142.67581 (7), -142.64661 (7), -142.48042 (7), -142.47957 (7), -142.43846 (7), -142.32031 (7), -141.89189 (7), -141.56647 (7), -141.30061 (7), -141.21458 (7), 
length of domains: 128
Time: pickout 0.0019    decision 0.0429    solve 0.4180    add 0.0078    
Accumulated time: pickout 0.0037    decision 0.3096    solve 1.0276    add 0.0137    
Current (lb-rhs): -147.84750366210938
192 domains visited
Cumulative time: 1.3895502090454102

batch:  torch.Size([128, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 82] [7, 100] [7, 82] [7, 100] [7, 82] [7, 100] [7, 82] [7, 107] [7, 82] [7, 54] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 256 = 0.0
pruning-in-iteration extra time: 0.00011444091796875
Time: prepare 0.0533    beta_bound 0.3638    bound 0.3638    transfer 0.0006    finalize 0.0440    func 0.4619    
Accumulated time: func 1.4780    prepare 0.1155    bound 1.2992    beta_bound 1.2990    transfer 0.0015    finalize 0.0795    
batch bounding time:  0.46207523345947266
Current worst splitting domains lb-rhs (depth):
-143.76976 (8), -143.02750 (8), -142.32428 (8), -141.65698 (8), -141.29915 (8), -140.51880 (8), -140.48032 (8), -140.18251 (8), -140.05891 (8), -139.93686 (8), -139.68744 (8), -139.45070 (8), -139.04079 (8), -138.91505 (8), -138.73019 (8), -138.64914 (8), -138.56123 (8), -138.54271 (8), -138.51730 (8), -138.23459 (8), 
length of domains: 256
Time: pickout 0.0026    decision 0.0579    solve 0.4621    add 0.0095    
Accumulated time: pickout 0.0062    decision 0.3675    solve 1.4898    add 0.0232    
Current (lb-rhs): -143.76976013183594
448 domains visited
Cumulative time: 1.92271089553833

batch:  torch.Size([256, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 107] [7, 82] [7, 107] [7, 61] [7, 107] [7, 82] [7, 107] [7, 54] [7, 54] [7, 61] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 512 = 0.0
pruning-in-iteration extra time: 0.00011992454528808594
Time: prepare 0.1021    beta_bound 0.3662    bound 0.3663    transfer 0.0008    finalize 0.0911    func 0.5606    
Accumulated time: func 2.0385    prepare 0.2260    bound 1.6655    beta_bound 1.6652    transfer 0.0024    finalize 0.1706    
batch bounding time:  0.5607936382293701
Current worst splitting domains lb-rhs (depth):
-139.27856 (9), -138.31993 (9), -137.70284 (9), -137.61937 (9), -137.06401 (9), -137.06345 (9), -136.88414 (9), -136.34386 (9), -136.29245 (9), -136.15416 (9), -135.86169 (9), -135.51292 (9), -135.46326 (9), -135.24448 (9), -135.16945 (9), -134.90952 (9), -134.88693 (9), -134.79013 (9), -134.70145 (9), -134.53798 (9), 
length of domains: 512
Time: pickout 0.0022    decision 0.0768    solve 0.5609    add 0.0131    
Accumulated time: pickout 0.0084    decision 0.4443    solve 2.0507    add 0.0363    
Current (lb-rhs): -139.278564453125
960 domains visited
Cumulative time: 2.5778231620788574

batch:  torch.Size([512, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 181] [7, 61] [7, 181] [7, 54] [7, 181] [7, 61] [7, 181] [7, 82] [7, 181] [7, 107] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1024 = 0.0
pruning-in-iteration extra time: 0.00010824203491210938
Time: prepare 0.2019    beta_bound 0.3721    bound 0.3722    transfer 0.0014    finalize 0.1794    func 0.7553    
Accumulated time: func 2.7939    prepare 0.4358    bound 2.0377    beta_bound 2.0373    transfer 0.0038    finalize 0.3500    
batch bounding time:  0.7557246685028076
Current worst splitting domains lb-rhs (depth):
-134.78952 (10), -134.33858 (10), -133.59946 (10), -133.57285 (10), -133.40436 (10), -133.11314 (10), -133.10854 (10), -133.08975 (10), -132.30621 (10), -132.26155 (10), -131.98267 (10), -131.96922 (10), -131.90204 (10), -131.88368 (10), -131.68465 (10), -131.66963 (10), -131.55151 (10), -131.37958 (10), -131.14503 (10), -130.90302 (10), 
length of domains: 1024
Time: pickout 0.0028    decision 0.1074    solve 0.7558    add 0.0218    
Accumulated time: pickout 0.0112    decision 0.5517    solve 2.8065    add 0.0581    
Current (lb-rhs): -134.78952026367188
1984 domains visited
Cumulative time: 3.469989538192749

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 54] [7, 54] [7, 54] [7, 82] [7, 54] [7, 54] [7, 54] [7, 61] [7, 107] [7, 82] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00014257431030273438
Time: prepare 0.4070    beta_bound 0.3691    bound 0.3692    transfer 0.0020    finalize 0.4853    func 1.2650    
Accumulated time: func 4.0589    prepare 0.8544    bound 2.4068    beta_bound 2.4064    transfer 0.0058    finalize 0.8353    
batch bounding time:  1.2659173011779785
Current worst splitting domains lb-rhs (depth):
-130.76582 (11), -130.14787 (11), -129.53542 (11), -129.46880 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -128.36993 (11), -128.10663 (11), -127.91023 (11), -127.77626 (11), -127.75816 (11), -127.61772 (11), -127.53839 (11), -127.42904 (11), -127.42401 (11), -127.38575 (11), -127.34401 (11), 
length of domains: 2048
Time: pickout 0.0018    decision 0.1801    solve 1.2661    add 0.0945    
Accumulated time: pickout 0.0130    decision 0.7318    solve 4.0726    add 0.1526    
Current (lb-rhs): -130.7658233642578
4032 domains visited
Cumulative time: 5.020345449447632

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 61] [7, 181] [7, 61] [7, 181] [7, 61] [7, 181] [7, 61] [7, 181] [7, 61] [7, 181] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001418590545654297
Time: prepare 0.4061    beta_bound 0.3694    bound 0.3695    transfer 0.0020    finalize 0.4311    func 1.2097    
Accumulated time: func 5.2686    prepare 1.2717    bound 2.7763    beta_bound 2.7758    transfer 0.0078    finalize 1.2663    
batch bounding time:  1.2111098766326904
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 3072
Time: pickout 0.0046    decision 0.1772    solve 1.2113    add 0.1236    
Accumulated time: pickout 0.0176    decision 0.9090    solve 5.2838    add 0.2761    
Current (lb-rhs): -130.1478729248047
6080 domains visited
Cumulative time: 6.5460076332092285

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 95] [7, 154] [7, 95] [7, 154] [7, 95] [7, 154] [7, 95] [7, 154] [7, 95] [7, 154] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011348724365234375
Time: prepare 0.4070    beta_bound 0.3700    bound 0.3700    transfer 0.0021    finalize 0.3479    func 1.1281    
Accumulated time: func 6.3967    prepare 1.6897    bound 3.1463    beta_bound 3.1457    transfer 0.0099    finalize 1.6142    
batch bounding time:  1.2053968906402588
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 4096
Time: pickout 0.0046    decision 0.1743    solve 1.2055    add 0.0383    
Accumulated time: pickout 0.0222    decision 1.0833    solve 6.4894    add 0.3144    
Current (lb-rhs): -130.1478729248047
8128 domains visited
Cumulative time: 7.977733612060547

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 154] [7, 95] [7, 154] [7, 95] [7, 154] [7, 147] [7, 154] [7, 114] [7, 147] [7, 95] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00012087821960449219
Time: prepare 0.4110    beta_bound 0.3701    bound 0.3701    transfer 0.0020    finalize 0.3434    func 1.1276    
Accumulated time: func 7.5243    prepare 2.1117    bound 3.5165    beta_bound 3.5158    transfer 0.0119    finalize 1.9576    
batch bounding time:  1.1284420490264893
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 5120
Time: pickout 0.0047    decision 0.1761    solve 1.1286    add 0.2961    
Accumulated time: pickout 0.0269    decision 1.2594    solve 7.6180    add 0.6105    
Current (lb-rhs): -130.1478729248047
10176 domains visited
Cumulative time: 9.593359231948853

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 33] [7, 33] [7, 33] [7, 33] [7, 147] [7, 33] [7, 114] [7, 33] [7, 33] [7, 33] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00012087821960449219
Time: prepare 0.4052    beta_bound 0.3715    bound 0.3716    transfer 0.0020    finalize 0.3458    func 1.1256    
Accumulated time: func 8.6499    prepare 2.5280    bound 3.8880    beta_bound 3.8873    transfer 0.0140    finalize 2.3035    
batch bounding time:  1.1264903545379639
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 6144
Time: pickout 0.0051    decision 0.1774    solve 1.1266    add 0.1442    
Accumulated time: pickout 0.0320    decision 1.4368    solve 8.7446    add 0.7547    
Current (lb-rhs): -130.1478729248047
12224 domains visited
Cumulative time: 11.057151079177856

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 114] [7, 147] [7, 114] [7, 114] [7, 114] [7, 95] [7, 33] [7, 95] [7, 114] [7, 147] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011301040649414062
Time: prepare 0.4112    beta_bound 0.3724    bound 0.3725    transfer 0.0020    finalize 0.3442    func 1.1310    
Accumulated time: func 9.7810    prepare 2.9505    bound 4.2606    beta_bound 4.2597    transfer 0.0160    finalize 2.6477    
batch bounding time:  1.13187575340271
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 7168
Time: pickout 0.0049    decision 0.1773    solve 1.1320    add 0.1665    
Accumulated time: pickout 0.0369    decision 1.6140    solve 9.8766    add 0.9212    
Current (lb-rhs): -130.1478729248047
14272 domains visited
Cumulative time: 12.548268795013428

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 147] [7, 178] [7, 147] [7, 147] [7, 33] [7, 178] [7, 178] [7, 178] [7, 154] [7, 114] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011372566223144531
Time: prepare 0.4078    beta_bound 0.3705    bound 0.3706    transfer 0.0020    finalize 0.3450    func 1.1270    
Accumulated time: func 10.9080    prepare 3.3695    bound 4.6312    beta_bound 4.6303    transfer 0.0181    finalize 2.9927    
batch bounding time:  1.1278934478759766
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 8192
Time: pickout 0.0049    decision 0.1770    solve 1.1280    add 0.0383    
Accumulated time: pickout 0.0417    decision 1.7910    solve 11.0046    add 0.9595    
Current (lb-rhs): -130.1478729248047
16320 domains visited
Cumulative time: 13.906908512115479

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 178] [7, 93] [7, 178] [7, 178] [7, 178] [7, 114] [7, 147] [7, 147] [7, 178] [7, 178] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011396408081054688
Time: prepare 0.4182    beta_bound 0.3734    bound 0.3735    transfer 0.0021    finalize 0.3515    func 1.1467    
Accumulated time: func 12.0547    prepare 3.7990    bound 5.0047    beta_bound 5.0037    transfer 0.0201    finalize 3.3442    
batch bounding time:  1.1475067138671875
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 9216
Time: pickout 0.0050    decision 0.1775    solve 1.1476    add 0.5045    
Accumulated time: pickout 0.0467    decision 1.9685    solve 12.1523    add 1.4640    
Current (lb-rhs): -130.1478729248047
18368 domains visited
Cumulative time: 15.752267122268677

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 105] [7, 114] [7, 105] [7, 105] [7, 105] [7, 93] [7, 105] [7, 93] [7, 105] [7, 105] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00012159347534179688
Time: prepare 0.4140    beta_bound 0.3747    bound 0.3748    transfer 0.0021    finalize 0.3523    func 1.1441    
Accumulated time: func 13.1987    prepare 4.2244    bound 5.3794    beta_bound 5.3784    transfer 0.0222    finalize 3.6965    
batch bounding time:  1.1453087329864502
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 10240
Time: pickout 0.0057    decision 0.1770    solve 1.1455    add 0.0400    
Accumulated time: pickout 0.0524    decision 2.1455    solve 13.2977    add 1.5040    
Current (lb-rhs): -130.1478729248047
20416 domains visited
Cumulative time: 17.131538152694702

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 138] [7, 105] [7, 93] [7, 93] [7, 93] [7, 105] [7, 93] [7, 105] [7, 93] [7, 93] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011301040649414062
Time: prepare 0.4180    beta_bound 0.3738    bound 0.3739    transfer 0.0021    finalize 0.5329    func 1.3279    
Accumulated time: func 14.5266    prepare 4.6537    bound 5.7533    beta_bound 5.7522    transfer 0.0243    finalize 4.2294    
batch bounding time:  1.3287899494171143
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 11264
Time: pickout 0.0052    decision 0.1776    solve 1.3289    add 0.0398    
Accumulated time: pickout 0.0576    decision 2.3231    solve 14.6267    add 1.5438    
Current (lb-rhs): -130.1478729248047
22464 domains visited
Cumulative time: 18.694592475891113

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [6, 174] [7, 138] [7, 138] [7, 138] [7, 185] [7, 185] [7, 185] [7, 185] [7, 91] [7, 185] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00012350082397460938
Time: prepare 0.4147    beta_bound 0.3752    bound 0.3753    transfer 0.0021    finalize 0.3526    func 1.1457    
Accumulated time: func 15.6723    prepare 5.0798    bound 6.1286    beta_bound 6.1274    transfer 0.0264    finalize 4.5820    
batch bounding time:  1.146498441696167
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 12288
Time: pickout 0.0053    decision 0.1798    solve 1.1466    add 0.2565    
Accumulated time: pickout 0.0628    decision 2.5029    solve 15.7733    add 1.8003    
Current (lb-rhs): -130.1478729248047
24512 domains visited
Cumulative time: 20.293558359146118

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 93] [7, 91] [7, 185] [7, 185] [7, 138] [7, 138] [7, 91] [7, 138] [7, 193] [7, 91] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011491775512695312
Time: prepare 0.4152    beta_bound 0.3736    bound 0.3737    transfer 0.0020    finalize 0.3566    func 1.1486    
Accumulated time: func 16.8209    prepare 5.5066    bound 6.5022    beta_bound 6.5009    transfer 0.0284    finalize 4.9386    
batch bounding time:  1.1494340896606445
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 13312
Time: pickout 0.0054    decision 0.1804    solve 1.1496    add 0.0394    
Accumulated time: pickout 0.0682    decision 2.6834    solve 16.9229    add 1.8397    
Current (lb-rhs): -130.1478729248047
26560 domains visited
Cumulative time: 21.67898392677307

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 185] [7, 185] [7, 163] [7, 163] [7, 163] [7, 91] [7, 163] [7, 91] [7, 163] [7, 138] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001125335693359375
Time: prepare 0.4165    beta_bound 0.3741    bound 0.3742    transfer 0.0021    finalize 0.3526    func 1.1469    
Accumulated time: func 17.9678    prepare 5.9345    bound 6.8764    beta_bound 6.8750    transfer 0.0305    finalize 5.2912    
batch bounding time:  1.1477563381195068
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 14336
Time: pickout 0.0054    decision 0.1786    solve 1.1479    add 0.0400    
Accumulated time: pickout 0.0736    decision 2.8620    solve 18.0708    add 1.8798    
Current (lb-rhs): -130.1478729248047
28608 domains visited
Cumulative time: 23.0617733001709

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 163] [7, 163] [7, 91] [7, 91] [7, 193] [7, 163] [7, 138] [7, 163] [7, 185] [7, 163] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001163482666015625
Time: prepare 0.4171    beta_bound 0.3739    bound 0.3739    transfer 0.0021    finalize 0.3571    func 1.1517    
Accumulated time: func 19.1195    prepare 6.3635    bound 7.2503    beta_bound 7.2489    transfer 0.0326    finalize 5.6483    
batch bounding time:  1.152576208114624
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 15360
Time: pickout 0.0057    decision 0.4302    solve 1.1527    add 0.0421    
Accumulated time: pickout 0.0793    decision 3.2922    solve 19.2235    add 1.9219    
Current (lb-rhs): -130.1478729248047
30656 domains visited
Cumulative time: 24.703380823135376

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 91] [7, 193] [7, 193] [7, 193] [7, 91] [7, 193] [7, 193] [7, 193] [7, 138] [7, 193] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011348724365234375
Time: prepare 0.4162    beta_bound 0.3745    bound 0.3746    transfer 0.0021    finalize 0.3564    func 1.1503    
Accumulated time: func 20.2698    prepare 6.7912    bound 7.6250    beta_bound 7.6234    transfer 0.0346    finalize 6.0046    
batch bounding time:  1.1515588760375977
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 16384
Time: pickout 0.0056    decision 0.1783    solve 1.1517    add 0.0422    
Accumulated time: pickout 0.0849    decision 3.4705    solve 20.3752    add 1.9641    
Current (lb-rhs): -130.1478729248047
32704 domains visited
Cumulative time: 26.092994451522827

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 193] [7, 177] [7, 195] [7, 195] [7, 195] [7, 177] [7, 195] [7, 177] [7, 195] [7, 177] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011134147644042969
Time: prepare 0.4193    beta_bound 0.3740    bound 0.3741    transfer 0.0021    finalize 0.6459    func 1.4424    
Accumulated time: func 21.7122    prepare 7.2219    bound 7.9990    beta_bound 7.9974    transfer 0.0367    finalize 6.6506    
batch bounding time:  1.443244218826294
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 17408
Time: pickout 0.0056    decision 0.1787    solve 1.4434    add 0.6476    
Accumulated time: pickout 0.0905    decision 3.6493    solve 21.8186    add 2.6116    
Current (lb-rhs): -130.1478729248047
34752 domains visited
Cumulative time: 28.37962007522583

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 195] [7, 111] [7, 177] [7, 177] [7, 29] [7, 195] [7, 29] [7, 195] [7, 177] [7, 195] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011134147644042969
Time: prepare 0.4183    beta_bound 0.3756    bound 0.3757    transfer 0.0021    finalize 0.3580    func 1.1550    
Accumulated time: func 22.8672    prepare 7.6519    bound 8.3747    beta_bound 8.3730    transfer 0.0387    finalize 7.0085    
batch bounding time:  1.1559035778045654
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 18432
Time: pickout 0.0059    decision 0.1821    solve 1.1560    add 0.0424    
Accumulated time: pickout 0.0965    decision 3.8313    solve 22.9746    add 2.6541    
Current (lb-rhs): -130.1478729248047
36800 domains visited
Cumulative time: 29.777716398239136

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [6, 129] [7, 195] [6, 40] [7, 111] [7, 177] [7, 29] [7, 177] [7, 111] [6, 174] [7, 29] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001659393310546875
Time: prepare 0.4183    beta_bound 0.3755    bound 0.3755    transfer 0.0020    finalize 0.3587    func 1.1555    
Accumulated time: func 24.0227    prepare 8.0818    bound 8.7503    beta_bound 8.7485    transfer 0.0408    finalize 7.3672    
batch bounding time:  1.1563820838928223
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 19456
Time: pickout 0.0059    decision 0.1812    solve 1.1565    add 0.3854    
Accumulated time: pickout 0.1024    decision 4.0125    solve 24.1311    add 3.0394    
Current (lb-rhs): -130.1478729248047
38848 domains visited
Cumulative time: 31.51861596107483

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [6, 40] [7, 29] [7, 29] [7, 25] [6, 129] [7, 111] [7, 111] [7, 109] [6, 40] [7, 111] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001232624053955078
Time: prepare 0.4206    beta_bound 0.3753    bound 0.3754    transfer 0.0021    finalize 0.3595    func 1.1591    
Accumulated time: func 25.1818    prepare 8.5139    bound 9.1257    beta_bound 9.1238    transfer 0.0428    finalize 7.7267    
batch bounding time:  1.1599600315093994
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 20480
Time: pickout 0.0063    decision 0.1807    solve 1.1601    add 0.0452    
Accumulated time: pickout 0.1087    decision 4.1932    solve 25.2912    add 3.0846    
Current (lb-rhs): -130.1478729248047
40896 domains visited
Cumulative time: 32.92311763763428

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 177] [7, 109] [7, 25] [7, 29] [7, 111] [7, 109] [7, 109] [7, 29] [7, 111] [7, 25] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011277198791503906
Time: prepare 0.4168    beta_bound 0.3743    bound 0.3744    transfer 0.0021    finalize 0.3615    func 1.1562    
Accumulated time: func 26.3381    prepare 8.9422    bound 9.5000    beta_bound 9.4981    transfer 0.0449    finalize 8.0882    
batch bounding time:  1.157095193862915
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 21504
Time: pickout 0.0061    decision 0.1810    solve 1.1572    add 0.0439    
Accumulated time: pickout 0.1148    decision 4.3743    solve 26.4484    add 3.1285    
Current (lb-rhs): -130.1478729248047
42944 domains visited
Cumulative time: 34.32356262207031

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 29] [6, 174] [7, 109] [7, 89] [7, 109] [7, 99] [7, 25] [7, 25] [7, 29] [7, 109] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011754035949707031
Time: prepare 0.4352    beta_bound 0.3885    bound 0.3886    transfer 0.0049    finalize 0.3806    func 1.2104    
Accumulated time: func 27.5485    prepare 9.3891    bound 9.8887    beta_bound 9.8866    transfer 0.0498    finalize 8.4688    
batch bounding time:  1.2117035388946533
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 22528
Time: pickout 0.0060    decision 0.1813    solve 1.2118    add 0.4640    
Accumulated time: pickout 0.1208    decision 4.5556    solve 27.6603    add 3.5925    
Current (lb-rhs): -130.1478729248047
44992 domains visited
Cumulative time: 36.199053049087524

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 111] [7, 99] [7, 111] [7, 109] [7, 25] [7, 151] [6, 51] [7, 99] [7, 25] [7, 89] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00014448165893554688
Time: prepare 0.4208    beta_bound 0.3749    bound 0.3750    transfer 0.0022    finalize 0.3655    func 1.1645    
Accumulated time: func 28.7130    prepare 9.8214    bound 10.2637    beta_bound 10.2615    transfer 0.0520    finalize 8.8342    
batch bounding time:  1.1653778553009033
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 23552
Time: pickout 0.0101    decision 0.1806    solve 1.1655    add 0.0452    
Accumulated time: pickout 0.1309    decision 4.7361    solve 28.8258    add 3.6377    
Current (lb-rhs): -130.1478729248047
47040 domains visited
Cumulative time: 37.612872838974

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [6, 0] [7, 89] [7, 89] [7, 99] [7, 99] [7, 25] [7, 89] [7, 89] [7, 109] [6, 174] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001201629638671875
Time: prepare 0.4171    beta_bound 0.3752    bound 0.3752    transfer 0.0021    finalize 0.3646    func 1.1601    
Accumulated time: func 29.8731    prepare 10.2502    bound 10.6389    beta_bound 10.6367    transfer 0.0540    finalize 9.1988    
batch bounding time:  1.160942554473877
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 24576
Time: pickout 0.0067    decision 0.1815    solve 1.1611    add 0.0464    
Accumulated time: pickout 0.1376    decision 4.9177    solve 29.9869    add 3.6842    
Current (lb-rhs): -130.1478729248047
49088 domains visited
Cumulative time: 39.020732402801514

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 25] [7, 25] [7, 151] [7, 81] [7, 151] [7, 81] [7, 151] [7, 81] [7, 89] [7, 99] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001552104949951172
Time: prepare 0.4205    beta_bound 0.3747    bound 0.3748    transfer 0.0020    finalize 0.3670    func 1.1655    
Accumulated time: func 31.0386    prepare 10.6822    bound 11.0137    beta_bound 11.0114    transfer 0.0561    finalize 9.5659    
batch bounding time:  1.1663315296173096
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 25600
Time: pickout 0.0065    decision 0.1818    solve 1.1665    add 0.0445    
Accumulated time: pickout 0.1441    decision 5.0995    solve 31.1534    add 3.7287    
Current (lb-rhs): -130.1478729248047
51136 domains visited
Cumulative time: 40.432599782943726

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 109] [7, 81] [7, 99] [7, 151] [7, 81] [6, 41] [7, 99] [7, 151] [7, 99] [7, 81] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011372566223144531
Time: prepare 0.4186    beta_bound 0.3743    bound 0.3743    transfer 0.0021    finalize 0.3688    func 1.1648    
Accumulated time: func 32.2034    prepare 11.1128    bound 11.3881    beta_bound 11.3857    transfer 0.0582    finalize 9.9347    
batch bounding time:  1.1656606197357178
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 26624
Time: pickout 0.0063    decision 0.6474    solve 1.1658    add 0.0445    
Accumulated time: pickout 0.1504    decision 5.7468    solve 32.3192    add 3.7732    
Current (lb-rhs): -130.1478729248047
53184 domains visited
Cumulative time: 42.308943033218384

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 99] [7, 151] [7, 81] [7, 43] [7, 89] [7, 89] [7, 43] [7, 43] [6, 106] [7, 151] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00012183189392089844
Time: prepare 0.4200    beta_bound 0.3736    bound 0.3737    transfer 0.0021    finalize 0.3703    func 1.1676    
Accumulated time: func 33.3710    prepare 11.5444    bound 11.7618    beta_bound 11.7593    transfer 0.0603    finalize 10.3050    
batch bounding time:  1.1684982776641846
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 27648
Time: pickout 0.0068    decision 0.1821    solve 1.1687    add 0.0468    
Accumulated time: pickout 0.1572    decision 5.9289    solve 33.4878    add 3.8200    
Current (lb-rhs): -130.1478729248047
55232 domains visited
Cumulative time: 43.7261803150177

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 89] [7, 43] [6, 106] [6, 174] [7, 43] [7, 43] [7, 81] [7, 85] [7, 151] [7, 43] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.0001685619354248047
Time: prepare 0.4359    beta_bound 0.3884    bound 0.3885    transfer 0.0054    finalize 0.3922    func 1.2231    
Accumulated time: func 34.5941    prepare 11.9919    bound 12.1503    beta_bound 12.1477    transfer 0.0657    finalize 10.6971    
batch bounding time:  1.2243967056274414
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 28672
Time: pickout 0.0069    decision 0.1813    solve 1.2245    add 0.0500    
Accumulated time: pickout 0.1640    decision 6.1102    solve 34.7124    add 3.8700    
Current (lb-rhs): -130.1478729248047
57280 domains visited
Cumulative time: 45.205848932266235

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 151] [7, 75] [6, 174] [7, 75] [6, 188] [7, 75] [6, 188] [7, 62] [7, 81] [7, 75] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011920928955078125
Time: prepare 0.4203    beta_bound 0.3774    bound 0.3775    transfer 0.0021    finalize 0.3772    func 1.1782    
Accumulated time: func 35.7723    prepare 12.4241    bound 12.5278    beta_bound 12.5251    transfer 0.0678    finalize 11.0744    
batch bounding time:  1.1794354915618896
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 29696
Time: pickout 0.0215    decision 0.1841    solve 1.1796    add 0.6064    
Accumulated time: pickout 0.1855    decision 6.2943    solve 35.8920    add 4.4763    
Current (lb-rhs): -130.1478729248047
59328 domains visited
Cumulative time: 47.210078716278076

batch:  torch.Size([1024, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 81] [7, 85] [7, 43] [7, 62] [6, 84] [7, 133] [7, 133] [7, 165] [6, 0] [7, 133] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2048 = 0.0
pruning-in-iteration extra time: 0.00011467933654785156
Time: prepare 0.4203    beta_bound 0.3735    bound 0.3736    transfer 0.0022    finalize 0.3774    func 1.1744    
Accumulated time: func 36.9467    prepare 12.8560    bound 12.9013    beta_bound 12.8986    transfer 0.0700    finalize 11.4517    
batch bounding time:  1.1751701831817627
Current worst splitting domains lb-rhs (depth):
-130.14787 (11), -129.09203 (11), -128.76166 (11), -128.73569 (11), -128.73564 (11), -128.51585 (11), -127.91023 (11), -127.77626 (11), -127.61772 (11), -127.53839 (11), -127.38575 (11), -127.34401 (11), -127.23914 (11), -127.19747 (11), -127.02921 (11), -126.92960 (11), -126.58290 (12), -126.56406 (11), -126.33731 (11), -126.31312 (11), 
length of domains: 30720
Time: pickout 0.0069    decision 0.1819    solve 1.1753    add 0.0458    
Accumulated time: pickout 0.1924    decision 6.4762    solve 37.0673    add 4.5222    
Current (lb-rhs): -130.1478729248047
61376 domains visited
Time out!!!!!!!!
Result: unknown in 501.0079 seconds
############# Summary #############
Final verified acc: 0.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 0 , total falsified (unsafe/sat): 0 , timeout: 1
mean time for ALL instances (total 1):501.00292382581847, max time: 501.00793385505676
unknown (total 1), index: [0]
