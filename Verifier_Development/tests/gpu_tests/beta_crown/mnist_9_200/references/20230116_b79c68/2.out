Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_9_200
  path: mnist_9_200_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 36
  end: 37
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.015
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 500.0
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Mon Jan 16 01:31:15 2023 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=200, bias=True)
  (2): ReLU()
  (3): Linear(in_features=200, out_features=200, bias=True)
  (4): ReLU()
  (5): Linear(in_features=200, out_features=200, bias=True)
  (6): ReLU()
  (7): Linear(in_features=200, out_features=200, bias=True)
  (8): ReLU()
  (9): Linear(in_features=200, out_features=200, bias=True)
  (10): ReLU()
  (11): Linear(in_features=200, out_features=200, bias=True)
  (12): ReLU()
  (13): Linear(in_features=200, out_features=200, bias=True)
  (14): ReLU()
  (15): Linear(in_features=200, out_features=200, bias=True)
  (16): ReLU()
  (17): Linear(in_features=200, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_9_200]_start=36_end=37_iter=20_b=1024_timeout=500.0_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 36 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-2.88886523,  0.08878907,  0.72437394,  1.90618896, -1.39985704,
         -1.53625643, -3.75804901,  6.38124752, -0.44784796,  1.67925406]],
       device='cuda:0')
layer /28 using sparse-features alpha with shape [40]; unstable size 40; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 63 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 67 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.11 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.15 using full alpha with unstable size 183 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [63]; unstable size 63; total size 200 (torch.Size([1, 200]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 67 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.11 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.15 using full alpha with unstable size 183 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [67]; unstable size 67; total size 200 (torch.Size([1, 200]))
layer /32 start_node /input.11 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.15 using full alpha with unstable size 183 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using sparse-features alpha with shape [111]; unstable size 111; total size 200 (torch.Size([1, 200]))
layer /34 start_node /input.15 using full alpha with unstable size 183 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([200]); unstable size 183; total size 200 (torch.Size([1, 200]))
layer /36 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /38 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /40 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-417.39266968, -576.04913330, -668.22668457, -722.97650146,
         -618.88201904, -618.83703613, -681.43988037, -400.89880371,
         -477.56625366]], device='cuda:0') None
best_l after optimization: -3198.2666015625 with beta sum per layer: []
alpha/beta optimization time: 11.335918664932251
initial alpha-CROWN bounds: tensor([[-258.99060059, -357.54019165, -413.56201172, -445.80416870,
         -379.99050903, -382.02838135, -419.80749512, -248.67196655,
         -291.87121582]], device='cuda:0')
Worst class: (+ rhs) -445.8041687011719
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750000149011612, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.88886523,  0.08878907,  0.72437394,  1.90618896, -1.39985704,
         -1.53625643, -3.75804901,  6.38124752, -0.44784796,  1.67925406]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.02539086,  0.19526950,  1.06500876,  2.69651675, -1.59893441,
          -1.10537517, -3.64283133,  5.25501919,  0.15650636,  1.20070779],
         [-3.02539086,  0.19526950,  1.06500876,  2.69651675, -1.59893441,
          -1.10537517, -3.64283133,  5.25501919,  0.15650636,  1.20070779]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[8.28040981, 5.05974960, 4.19001055, 2.55850244, 6.85395336,
          6.36039448, 8.89785004, 5.09851265, 4.05431128]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6956 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /28 using sparse-features alpha with shape [40]; unstable size 40; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 63 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 67 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.11 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.15 using full alpha with unstable size 183 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [63]; unstable size 63; total size 200 (torch.Size([1, 200]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 67 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.11 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.15 using full alpha with unstable size 183 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [67]; unstable size 67; total size 200 (torch.Size([1, 200]))
layer /32 start_node /input.11 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.15 using full alpha with unstable size 183 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using sparse-features alpha with shape [111]; unstable size 111; total size 200 (torch.Size([1, 200]))
layer /34 start_node /input.15 using full alpha with unstable size 183 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([200]); unstable size 183; total size 200 (torch.Size([1, 200]))
layer /36 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /38 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /40 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 400.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_89', 'lay4_194', 'lay4_23', 'lay4_50', 'lay4_51', 'lay4_64', 'lay4_128', 'lay4_108', 'lay4_112', 'lay4_187', 'lay4_15', 'lay4_26', 'lay4_63', 'lay4_86', 'lay4_88', 'lay4_177', 'lay4_117', 'lay4_155', 'lay4_55', 'lay4_113', 'lay4_82', 'lay4_107', 'lay4_27', 'lay4_152', 'lay4_52', 'lay4_96', 'lay4_30', 'lay4_104', 'lay4_87', 'lay4_174', 'lay4_72', 'lay4_133', 'lay4_171', 'lay4_165', 'lay4_61', 'lay4_181', 'lay4_131', 'lay4_66', 'lay4_129', 'lay4_9', 'lay4_172', 'lay4_1', 'lay4_77', 'lay4_36', 'lay4_118', 'lay4_151', 'lay4_12', 'lay4_188', 'lay4_178', 'lay4_74', 'lay4_173', 'lay4_65', 'lay4_125', 'lay4_144', 'lay4_76', 'lay4_157', 'lay4_124', 'lay4_17', 'lay4_161', 'lay4_163', 'lay4_79', 'lay4_156', 'lay4_33'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/data_utils.py:255: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5471s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7489s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[-0.4740296080484288,0.061434115543452475] (2,-1; 2,-1), time: 1.6849s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_128, [-inf,inf]=>[-0.4952409703832698,0.20906029200609433] (2,-1; 2,-1), time: 2.1274s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_51, [-inf,inf]=>[-0.5529045901464041,0.15141315028416233] (2,-1; 2,-1), time: 2.4859s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_108, [-inf,inf]=>[-0.033092156388074806,0.6987461251808534] (2,-1; 2,-1), time: 2.7126s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[-0.023087170807036393,0.7346504674063074] (2,-1; 2,-1), time: 2.7625s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_177, [-inf,inf]=>[-0.41651139617474675,0.24815268305192295] (2,-1; 2,-1), time: 2.9066s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.42703808876418436,0.13310837683330654] (2,-1; 2,-1), time: 2.9354s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[-0.29402758368119647,0.3481359452659783] (2,-1; 2,-1), time: 2.9759s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.48629567419668807,0.13413863517015634] (2,-1; 2,-1), time: 3.0572s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2194s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[-0.2421421575090249,0.395931138883909] (2,-1; 2,-1), time: 3.4044s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_194, [-inf,inf]=>[-0.12333663237073175,0.6549632364004706] (2,-1; 2,-1), time: 3.4325s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_50, [-inf,inf]=>[-0.2842187781754005,0.2314321685652298] (2,-1; 2,-1), time: 3.4781s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_155, [-inf,inf]=>[-0.4322574278492958,0.16439409982712633] (2,-1; 2,-1), time: 2.7614s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3248s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_89, [-inf,inf]=>[-0.10059789313674823,0.8161544093256499] (2,-1; 2,-1), time: 3.6160s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_117, [-inf,inf]=>[-0.4278771571029729,0.24440001759669588] (2,-1; 2,-1), time: 3.1463s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_88, [-inf,inf]=>[-0.628871969987701,0.028157481793886035] (2,-1; 2,-1), time: 3.7280s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2337s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2554s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2453s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_72, [-inf,inf]=>[-inf,-0.00013745284061184027] (-1,-1; 2,-1), time: 0.9207s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_152, [-inf,inf]=>[-0.5162887469965177,0.2727720297180828] (2,-1; 2,-1), time: 1.5898s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-0.29190109224352523,0.5218949482102277] (2,-1; 2,-1), time: 2.8391s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_30, [-inf,inf]=>[-0.7782435230648848,0.4038363917780318] (2,-1; 2,-1), time: 1.4692s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_181, [-inf,inf]=>[1e-05,0.7353722243430829] (15,-1; 2,-1), time: 1.0183s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_113, [-inf,inf]=>[-0.48345922418028164,0.07186083610633695] (2,-1; 2,-1), time: 2.6875s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_66, [-inf,inf]=>[-0.6262324795196621,0.014027847631221068] (2,-1; 2,-1), time: 0.9587s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_107, [-inf,inf]=>[-0.8117563280947185,0.05441234597867077] (2,-1; 2,-1), time: 2.2583s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2279s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_129, [-inf,inf]=>[1e-05,0.6991345871428843] (15,-1; 2,-1), time: 1.1047s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.49351626392759995,0.009786007639548306] (2,-1; 2,-1), time: 2.3490s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-0.6673450448927157,0.04609693725275124] (2,-1; 2,-1), time: 2.8840s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[1e-05,0.7531765167174082] (15,-1; 2,-1), time: 1.2222s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[-0.3583797593537646,0.32163759430339606] (2,-1; 2,-1), time: 2.3843s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-0.1816993473672097,0.5791602499530912] (2,-1; 2,-1), time: 3.4841s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-0.4663224920185568,0.45476078910664675] (2,-1; 2,-1), time: 3.0987s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_165, [-inf,inf]=>[-0.49938796324522733,0.05726973928181097] (2,-1; 2,-1), time: 2.9011s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_144, [-inf,inf]=>[1e-05,0.8710018618973776] (15,-1; 2,-1), time: 0.6812s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_133, [-inf,inf]=>[-0.3770070402113891,0.0185537595719898] (2,-1; 2,-1), time: 3.2677s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_173, [-inf,inf]=>[-0.35998534042311336,0.4729151885879606] (2,-1; 2,-1), time: 1.2937s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_36, [-inf,inf]=>[-0.4725599431930722,0.13460354781788375] (2,-1; 2,-1), time: 2.1986s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_77, [-inf,inf]=>[-0.4413636716559038,0.11414099570811226] (2,-1; 2,-1), time: 2.4975s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2946s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_151, [-inf,inf]=>[-0.39183368799417007,0.45102416311703913] (2,-1; 2,-1), time: 2.1609s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_172, [-inf,inf]=>[-0.46074242070035126,0.05953029949248683] (2,-1; 2,-1), time: 2.6794s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_188, [-inf,inf]=>[-0.5308584538568178,0.024413936647052263] (2,-1; 2,-1), time: 2.7267s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[1e-05,1.0429536909272616] (15,-1; 2,-1), time: 0.8245s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_125, [-inf,inf]=>[-0.6781586186922678,0.31773911747258354] (2,-1; 2,-1), time: 2.2236s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_163, [-inf,inf]=>[1e-05,0.6233918810060494] (15,-1; 2,-1), time: 1.1480s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-0.5258077740802213,0.15444876134242383] (2,-1; 2,-1), time: 3.0181s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[-0.5050287412687745,0.017805990518209663] (2,-1; 2,-1), time: 3.7715s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_65, [-inf,inf]=>[-0.18471752901623964,0.4823197217675426] (2,-1; 2,-1), time: 2.4206s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.6529767023796337,0.0388687413389905] (2,-1; 2,-1), time: 1.7541s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[1e-05,0.6649245992613136] (15,-1; 2,-1), time: 3.0852s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.6011751354576659,0.03868822677336082] (2,-1; 2,-1), time: 3.6810s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_124, [-inf,inf]=>[1e-05,1.0050668950611072] (15,-1; 2,-1), time: 2.2714s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_157, [-inf,inf]=>[-0.5280353356467854,0.1644508914359832] (2,-1; 2,-1), time: 2.5165s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-0.3484573176674515,0.3709968523910122] (2,-1; 2,-1), time: 2.0732s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_161, [-inf,inf]=>[-0.0940644566816414,0.5447804907629697] (2,-1; 2,-1), time: 2.3102s, #vars: 1265, #constrs: 520, improved: True
Solving MIP for lay4_156, [-inf,inf]=>[-0.15809830679964162,0.3608162215588742] (2,-1; 2,-1), time: 2.6647s, #vars: 1265, #constrs: 520, improved: True
PGD done for relu layer 2
MIP improved 63 nodes out of 63 unstable nodes, lb improved 11.143477439880371, ub improved 8.558753967285156, time 11.0742
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_147', 'lay6_18', 'lay6_28', 'lay6_162', 'lay6_143', 'lay6_190', 'lay6_9', 'lay6_8', 'lay6_65', 'lay6_73', 'lay6_161', 'lay6_78', 'lay6_22', 'lay6_13', 'lay6_71', 'lay6_2', 'lay6_7', 'lay6_102', 'lay6_145', 'lay6_107', 'lay6_155', 'lay6_189', 'lay6_64', 'lay6_17', 'lay6_178', 'lay6_187', 'lay6_98', 'lay6_49', 'lay6_33', 'lay6_124', 'lay6_75', 'lay6_35', 'lay6_125', 'lay6_122', 'lay6_194', 'lay6_27', 'lay6_10', 'lay6_160', 'lay6_69', 'lay6_123', 'lay6_31', 'lay6_132', 'lay6_40', 'lay6_14', 'lay6_197', 'lay6_58', 'lay6_146', 'lay6_21', 'lay6_95', 'lay6_186', 'lay6_195', 'lay6_110', 'lay6_90', 'lay6_52', 'lay6_142', 'lay6_101', 'lay6_148', 'lay6_86', 'lay6_144', 'lay6_34', 'lay6_106', 'lay6_51', 'lay6_29', 'lay6_41', 'lay6_61', 'lay6_114', 'lay6_135'] filter: 1.0
Solving MIP for lay6_161, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8089s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8977s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.2091s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[1e-05,0.5676699313797045] (15,-1; 2,-1), time: 7.1135s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[1e-05,0.7907103909528501] (15,-1; 2,-1), time: 7.8142s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[1e-05,0.7029189243634578] (15,-1; 2,-1), time: 8.3336s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2529s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5012s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_145, [-inf,inf]=>[1e-05,0.8214551698623008] (15,-1; 2,-1), time: 8.6002s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_143, [-inf,inf]=>[-0.5212652800997155,0.24458534035560056] (2,-1; 2,-1), time: 13.8896s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2643s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3093s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3103s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3728s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.0493s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-0.19463366976130947,0.3260196456429508] (2,-1; 2,-1), time: 17.6871s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6010s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2663s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3073s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_147, [-inf,inf]=>[-0.4175016351967584,0.18101740330690977] (9,-1; 2,-1), time: 18.9863s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[1e-05,0.5882479195481083] (15,-1; 2,-1), time: 18.5336s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5396s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-0.5894930458921515,0.01393923197525825] (9,-1; 2,-1), time: 20.0860s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-0.12614826767686962,0.4315148433411707] (2,-1; 9,-1), time: 20.3493s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-0.49505083414806955,0.046835601681725306] (9,-1; 2,-1), time: 21.2785s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2444s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.28359676052800586,0.33616366426983535] (2,-1; 9,-1), time: 21.5888s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.016544780997230467,0.4983499059506711] (9,-1; 2,-1), time: 21.7709s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[1e-05,0.9309188756910908] (15,-1; 2,-1), time: 4.0578s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-0.1445304991772284,0.34187274878150825] (2,-1; 9,-1), time: 23.1103s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[1e-05,0.9537994276579169] (15,-1; 2,-1), time: 8.9803s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_107, [-inf,inf]=>[-0.4452617977038051,0.03437212139523443] (9,-1; 2,-1), time: 21.3014s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7188s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-0.49432350755688265,0.1968931144790506] (9,-1; 9,-1), time: 30.0204s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.12843442916768752,0.3605060649782362] (9,-1; 9,-1), time: 30.0214s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-0.7637091032694409,0.15437531752032382] (2,-1; 2,-1), time: 9.1912s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-0.43000199983630083,0.5802171750906687] (2,-1; 2,-1), time: 12.9375s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-0.07582705355025449,0.4583460546607493] (9,-1; 2,-1), time: 18.5392s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2456s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_155, [-inf,inf]=>[-0.33997413990196823,0.3038686964212417] (2,-1; 9,-1), time: 25.5337s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5768s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_197, [-inf,inf]=>[1e-05,0.5534972540865393] (15,-1; 2,-1), time: 11.2039s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[1e-05,0.7959290339847623] (15,-1; 9,-1), time: 15.2539s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.13740934888887146,0.4479481276882934] (9,-1; 2,-1), time: 20.7838s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.5557s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[-0.005445480157095971,0.619973221082725] (2,-1; 2,-1), time: 14.5755s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2477s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-0.6807662735652524,0.019677757845534622] (9,-1; 2,-1), time: 21.2909s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2560s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[1e-05,0.6677760769466268] (15,-1; 9,-1), time: 20.1961s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6194s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3730s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_195, [-inf,inf]=>[-0.654594761888086,0.05151294769822918] (2,-1; 2,-1), time: 11.3643s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-0.12504286468196524,0.650938353613306] (2,-1; 2,-1), time: 11.6910s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[1e-05,1.3713703141465816] (15,-1; 2,-1), time: 8.1251s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_148, [-inf,inf]=>[1e-05,0.8029225078251979] (15,-1; 2,-1), time: 11.6994s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-0.2085451962350874,0.36082732176688287] (9,-1; 2,-1), time: 24.0975s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.3352s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_132, [-inf,inf]=>[-0.3030552101488524,0.10210182383893739] (2,-1; 9,-1), time: 25.8682s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-0.35827693236757946,0.12267353039850461] (9,-1; 2,-1), time: 19.8613s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-0.39234877684284486,0.1992258735696569] (9,-1; 2,-1), time: 19.0648s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-0.5172039404250687,0.07126749647713944] (2,-1; 2,-1), time: 15.7049s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[1e-05,0.8513515847240766] (15,-1; 9,-1), time: 15.2416s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[-0.21295067396280665,0.15759591636331752] (9,-1; 2,-1), time: 25.0902s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-0.31237361206604575,0.22480716228580394] (9,-1; 2,-1), time: 20.9565s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[-0.21201193329937923,0.18342395902623324] (9,-1; 9,-1), time: 30.1229s, #vars: 1555, #constrs: 855, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.48681074187064144,0.008461490812651549] (2,-1; 9,-1), time: 27.0528s, #vars: 1555, #constrs: 855, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(23, -1), (86, -1), (96, -1), (104, -1), (72, -1), (171, -1), (61, -1), (181, 1), (131, -1), (129, 1), (1, 1), (118, -1), (74, 1), (144, 1), (124, 1), (17, -1), (163, 1), (33, 1)]
best_l after optimization: -347.03875732421875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.74397087097168
alpha-CROWN with intermediate bounds by MIP: tensor([[-28.54328537, -37.01898193, -44.54803467, -48.41141891, -40.10400391,
         -42.31111908, -43.96480942, -28.81066322, -33.32643127]],
       device='cuda:0') None
MIP improved 67 nodes out of 67 unstable nodes, lb improved 16.398693084716797, ub improved 19.52626609802246, time 67.0939
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_23', 'lay8_147', 'lay8_18', 'lay8_119', 'lay8_117', 'lay8_36', 'lay8_61', 'lay8_90', 'lay8_62', 'lay8_45', 'lay8_33', 'lay8_195', 'lay8_132', 'lay8_64', 'lay8_139', 'lay8_186', 'lay8_118', 'lay8_84', 'lay8_102', 'lay8_48', 'lay8_59', 'lay8_161', 'lay8_76', 'lay8_98', 'lay8_80', 'lay8_166', 'lay8_68', 'lay8_137', 'lay8_4', 'lay8_40', 'lay8_53', 'lay8_19', 'lay8_129', 'lay8_184', 'lay8_174', 'lay8_103', 'lay8_43', 'lay8_79', 'lay8_160', 'lay8_92', 'lay8_125', 'lay8_11', 'lay8_180', 'lay8_87', 'lay8_39', 'lay8_100', 'lay8_101', 'lay8_176', 'lay8_106', 'lay8_21', 'lay8_31', 'lay8_149', 'lay8_130', 'lay8_127', 'lay8_163', 'lay8_178', 'lay8_70', 'lay8_121', 'lay8_42', 'lay8_154', 'lay8_22', 'lay8_75', 'lay8_193', 'lay8_9', 'lay8_138', 'lay8_56', 'lay8_168', 'lay8_126', 'lay8_192', 'lay8_51', 'lay8_1', 'lay8_65', 'lay8_27', 'lay8_35', 'lay8_105', 'lay8_41', 'lay8_144', 'lay8_91', 'lay8_169', 'lay8_162', 'lay8_99', 'lay8_49', 'lay8_14', 'lay8_52', 'lay8_77', 'lay8_10', 'lay8_131', 'lay8_194', 'lay8_69', 'lay8_73', 'lay8_123', 'lay8_170', 'lay8_2', 'lay8_8', 'lay8_25', 'lay8_85', 'lay8_120', 'lay8_3', 'lay8_83', 'lay8_189', 'lay8_159', 'lay8_24'] filter: 1.0
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4097s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4230s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4594s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4829s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5247s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5436s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4280s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4116s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_161, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4248s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3135s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4483s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5047s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_166, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4268s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4089s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_137, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3485s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3380s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3909s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3489s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4536s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3721s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.2436s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3456s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3783s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_129, [-inf,inf]=>[1e-05,0.9488308035741715] (15,-1; 2,-1), time: 8.7750s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3971s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3991s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3232s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[1e-05,0.9006671514115188] (15,-1; 9,-1), time: 15.4028s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3510s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4122s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[1e-05,0.7878385786246074] (15,-1; 9,-1), time: 16.1867s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3485s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[1e-05,0.7193178762791366] (15,-1; 9,-1), time: 17.5695s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[1e-05,0.5679636072004183] (15,-1; 9,-1), time: 20.9257s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3494s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.1539016024112011,0.2699405005760194] (9,-1; 9,-1), time: 30.0196s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_132, [-inf,inf]=>[-0.2795732839252119,0.28834074483110567] (9,-1; 9,-1), time: 30.0236s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_147, [-inf,inf]=>[-0.19754411029779986,0.43095211663781624] (9,-1; 9,-1), time: 30.0316s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_117, [-inf,inf]=>[-0.539095412929803,0.05844477495385041] (9,-1; 9,-1), time: 30.0333s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.5089882627390608,0.1627885613593216] (9,-1; 9,-1), time: 30.0305s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_139, [-inf,inf]=>[-0.7639234517677288,0.05377018370677714] (9,-1; 9,-1), time: 30.0302s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-0.306716986596465,0.14777643243974087] (9,-1; 9,-1), time: 30.1653s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_130, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3485s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3679s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_127, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3641s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3655s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_118, [-inf,inf]=>[-0.18379357326273238,0.3800383450890077] (9,-1; 9,-1), time: 30.0260s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_102, [-inf,inf]=>[-0.44702689383095107,0.13665158508589273] (9,-1; 9,-1), time: 30.0296s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3555s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3390s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4309s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3881s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3721s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_126, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1936s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_176, [-inf,inf]=>[1e-05,1.3658086904191502] (15,-1; 9,-1), time: 15.3437s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3429s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_103, [-inf,inf]=>[-0.4080956371481142,0.1781268828942584] (9,-1; 9,-1), time: 30.0161s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[1e-05,1.1627940455660701] (15,-1; 2,-1), time: 10.8862s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_160, [-inf,inf]=>[-0.49600545572673005,0.11426027307623936] (9,-1; 9,-1), time: 30.0185s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_106, [-inf,inf]=>[1e-05,0.4654958543680795] (15,-1; 9,-1), time: 24.1390s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_180, [-inf,inf]=>[-0.4455088493531042,0.04933969063845473] (9,-1; 9,-1), time: 30.0211s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3471s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3899s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[1e-05,0.8343658507807713] (15,-1; 2,-1), time: 9.9928s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3474s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[1e-05,1.1492041943024758] (15,-1; 9,-1), time: 15.4255s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3552s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[1e-05,0.8515615894377833] (15,-1; 9,-1), time: 15.3411s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3235s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[-0.3212565597080507,0.6678355301830973] (9,-1; 9,-1), time: 30.0120s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4183s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8406s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_192, [-inf,inf]=>[1e-05,0.7483680701057098] (15,-1; 9,-1), time: 15.9877s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3389s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3489s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3974s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[1e-05,1.1658820198769684] (15,-1; 2,-1), time: 12.7495s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4349s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3719s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3752s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[1e-05,0.8611235989223416] (15,-1; 9,-1), time: 15.3404s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-0.4257004220021572,0.29995981134727434] (2,-1; 9,-1), time: 24.4162s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[1e-05,1.2684342207142765] (15,-1; 9,-1), time: 15.3577s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_163, [-inf,inf]=>[-0.14761225675945808,0.37024512998794995] (9,-1; 9,-1), time: 30.0287s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_121, [-inf,inf]=>[-0.7076491900506395,0.02093904498513295] (9,-1; 9,-1), time: 30.2380s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-0.6657970003714273,0.046973555139114] (9,-1; 9,-1), time: 30.0144s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[-0.5295052060779198,0.08507611480951638] (9,-1; 9,-1), time: 30.0233s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-0.28070777165471233,0.33216799696353444] (9,-1; 9,-1), time: 30.0192s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3271s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-0.22285340876015544,0.5312818599604994] (9,-1; 9,-1), time: 30.2502s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[1e-05,0.7200176494521188] (15,-1; 9,-1), time: 15.4259s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-0.2651200508864991,0.4857459153976486] (9,-1; 9,-1), time: 30.0229s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.3766s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[1e-05,0.715008829926416] (15,-1; 9,-1), time: 16.2065s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[1e-05,1.0633957869673865] (15,-1; 2,-1), time: 9.4420s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_105, [-inf,inf]=>[-0.8713485954534295,0.10791874783095645] (9,-1; 9,-1), time: 30.0136s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-0.365162456332454,0.429794944688402] (9,-1; 2,-1), time: 25.9271s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[1e-05,1.1621068555205931] (15,-1; 9,-1), time: 15.3838s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[1e-05,1.3043530499130742] (15,-1; 9,-1), time: 15.3158s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_131, [-inf,inf]=>[-0.4459554058757984,0.16897261979320832] (9,-1; 9,-1), time: 30.0096s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_120, [-inf,inf]=>[-0.4050101789247245,0.14801366902416407] (9,-1; 9,-1), time: 30.0352s, #vars: 1815, #constrs: 1145, improved: True
Solving MIP for lay8_159, [-inf,inf]=>[-0.23801012892116397,0.24792373239552976] (9,-1; 9,-1), time: 30.0142s, #vars: 1815, #constrs: 1145, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(162, 1), (190, 1), (65, -1), (73, 1), (161, -1), (13, -1), (7, 1), (145, 1), (189, -1), (64, -1), (17, -1), (178, -1), (187, -1), (49, -1), (33, -1), (75, -1), (35, -1), (122, -1), (194, -1), (10, 1), (160, 1), (69, 1), (123, 1), (31, -1), (197, 1), (21, -1), (52, -1), (142, -1), (101, -1), (148, 1), (34, 1), (106, 1), (51, -1), (29, -1), (41, -1), (114, -1), (135, -1)]
best_l after optimization: 1.4414935111999512 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.474790811538696
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.95928574,  0.32834721, -1.21500778, -2.97706556,  1.67654800,
          0.07427979,  2.46282816,  0.01176405, -0.87948608]], device='cuda:0') None
MIP improved 102 nodes out of 102 unstable nodes, lb improved 25.33378791809082, ub improved 37.32786560058594, time 91.0776
maximum relu layer improved by MIP so far 3
Linear(in_features=200, out_features=200, bias=True) 4 10 torch.Size([200])
sorted candidates ['lay10_97', 'lay10_123', 'lay10_86', 'lay10_166', 'lay10_167', 'lay10_49', 'lay10_58', 'lay10_61', 'lay10_171', 'lay10_93', 'lay10_164', 'lay10_139', 'lay10_112', 'lay10_101', 'lay10_50', 'lay10_170', 'lay10_157', 'lay10_148', 'lay10_118', 'lay10_174', 'lay10_20', 'lay10_138', 'lay10_62', 'lay10_83', 'lay10_65', 'lay10_131', 'lay10_82', 'lay10_7', 'lay10_126', 'lay10_34', 'lay10_151', 'lay10_87', 'lay10_99', 'lay10_199', 'lay10_57', 'lay10_12', 'lay10_80', 'lay10_198', 'lay10_125', 'lay10_15', 'lay10_56', 'lay10_129', 'lay10_67', 'lay10_31', 'lay10_39', 'lay10_180', 'lay10_183', 'lay10_64', 'lay10_191', 'lay10_91', 'lay10_74', 'lay10_55', 'lay10_36', 'lay10_37', 'lay10_149', 'lay10_128', 'lay10_68', 'lay10_100', 'lay10_23', 'lay10_73', 'lay10_95', 'lay10_28', 'lay10_102', 'lay10_114', 'lay10_9', 'lay10_181', 'lay10_153', 'lay10_190', 'lay10_104', 'lay10_29', 'lay10_169', 'lay10_178', 'lay10_41', 'lay10_78', 'lay10_8', 'lay10_161', 'lay10_89', 'lay10_43', 'lay10_196', 'lay10_79', 'lay10_162', 'lay10_96', 'lay10_135', 'lay10_14', 'lay10_115', 'lay10_121', 'lay10_130', 'lay10_53', 'lay10_75', 'lay10_155', 'lay10_19', 'lay10_173', 'lay10_132', 'lay10_38', 'lay10_45', 'lay10_168', 'lay10_63', 'lay10_70', 'lay10_17', 'lay10_11', 'lay10_142', 'lay10_192', 'lay10_90', 'lay10_136', 'lay10_144', 'lay10_48', 'lay10_44', 'lay10_22', 'lay10_182', 'lay10_85', 'lay10_158', 'lay10_122', 'lay10_124', 'lay10_185', 'lay10_133', 'lay10_5', 'lay10_109', 'lay10_156', 'lay10_103', 'lay10_47', 'lay10_71', 'lay10_98', 'lay10_24', 'lay10_35', 'lay10_116', 'lay10_92', 'lay10_143', 'lay10_6', 'lay10_187', 'lay10_189', 'lay10_33', 'lay10_2', 'lay10_111', 'lay10_40', 'lay10_81', 'lay10_84', 'lay10_76', 'lay10_160', 'lay10_188', 'lay10_51', 'lay10_120', 'lay10_172', 'lay10_18', 'lay10_179', 'lay10_184', 'lay10_1', 'lay10_105', 'lay10_154', 'lay10_69', 'lay10_72', 'lay10_150', 'lay10_30', 'lay10_25', 'lay10_0', 'lay10_13', 'lay10_32', 'lay10_145', 'lay10_146', 'lay10_3', 'lay10_113', 'lay10_137', 'lay10_60', 'lay10_186', 'lay10_59', 'lay10_140', 'lay10_108', 'lay10_42', 'lay10_176', 'lay10_134', 'lay10_163'] filter: 1.0
Solving MIP for lay10_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4949s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5824s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_164, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5805s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5968s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5975s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5930s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6138s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_112, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6055s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6487s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6447s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6833s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_170, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7470s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7962s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5174s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_148, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5487s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5598s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6295s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6497s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6632s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6649s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6787s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6523s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_126, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5946s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6694s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4893s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_151, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5907s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5021s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5478s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5199s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5833s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4703s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5720s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6102s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5545s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5116s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4326s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_129, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5106s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4796s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4719s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_180, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4637s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_183, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5205s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5279s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5471s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_149, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4340s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5210s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_128, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4257s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4934s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4314s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4945s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4390s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4501s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5178s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4752s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4331s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5069s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_153, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4395s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_181, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4518s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_104, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4652s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_190, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5079s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5078s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4545s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4487s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_161, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4402s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4854s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5206s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4394s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4335s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4982s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4532s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_115, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4333s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_121, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4236s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.1662s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_166, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.3557s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5000s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_155, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5145s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4372s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5298s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.9137s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5228s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4407s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.7850s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4758s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4359s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4364s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4156s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4694s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5040s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[1e-05,0.6215738853928867] (15,-1; 9,-1), time: 16.6596s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[1e-05,0.9143585757312712] (15,-1; 9,-1), time: 15.4803s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4571s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4549s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[1e-05,1.7776614728108238] (15,-1; 9,-1), time: 15.4724s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4491s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_167, [-inf,inf]=>[-0.46464321040800866,0.007148867911294468] (9,-1; 9,-1), time: 30.0500s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_101, [-inf,inf]=>[-0.6263677717968336,0.021530811991148695] (9,-1; 9,-1), time: 30.0976s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_158, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4290s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.3956s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[-0.3125695214914056,0.09588576083458322] (9,-1; 9,-1), time: 30.0741s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_191, [-inf,inf]=>[-0.35224142799669117,0.48524485437644455] (9,-1; 9,-1), time: 30.1153s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-0.7351334996075819,0.15300557787295338] (9,-1; 9,-1), time: 30.3480s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_133, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4173s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-0.21248582220035106,0.23022704948149225] (9,-1; 9,-1), time: 30.3765s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4138s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_109, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4866s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-0.4309491166738678,0.013904213615369785] (9,-1; 9,-1), time: 30.0447s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-0.24535851329111213,0.23063067786085828] (9,-1; 9,-1), time: 30.0533s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_196, [-inf,inf]=>[-0.18936094543594947,0.49864856567292426] (9,-1; 9,-1), time: 30.0661s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4324s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[-0.5018530908105019,0.2335777778508933] (9,-1; 9,-1), time: 30.3816s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_116, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4476s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_130, [-inf,inf]=>[-0.3899618389631016,0.07846347366679002] (9,-1; 9,-1), time: 30.2796s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_168, [-inf,inf]=>[-0.11343445405080839,0.40838426542674594] (9,-1; 9,-1), time: 30.0222s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_182, [-inf,inf]=>[1e-05,0.9216699788020041] (15,-1; 9,-1), time: 15.4579s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5439s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_124, [-inf,inf]=>[1e-05,1.4933151266458826] (15,-1; 9,-1), time: 15.5371s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4907s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4301s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_103, [-inf,inf]=>[1e-05,0.754203168772694] (15,-1; 9,-1), time: 15.5416s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[1e-05,1.8978458397817792] (15,-1; 9,-1), time: 15.6637s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4972s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-0.23457939807139258,0.34062579237304286] (9,-1; 9,-1), time: 30.0881s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4558s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4282s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-0.1019921741356795,0.5104934470670779] (9,-1; 9,-1), time: 30.3580s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4458s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_120, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4713s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_172, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5262s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4618s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_179, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4552s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5163s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[1e-05,1.0787829006385694] (15,-1; 9,-1), time: 15.4710s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_143, [-inf,inf]=>[1e-05,0.8690991311722659] (15,-1; 9,-1), time: 22.6675s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-0.44323468207966915,0.1501837769691961] (9,-1; 9,-1), time: 30.0493s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_154, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4476s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_122, [-inf,inf]=>[-0.7894111887634087,0.0014141678997784454] (9,-1; 9,-1), time: 30.0647s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4707s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_185, [-inf,inf]=>[-0.6430719129186431,0.13963199653784797] (9,-1; 9,-1), time: 30.1671s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4694s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4544s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[1e-05,1.9891265859486322] (15,-1; 9,-1), time: 15.7361s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4965s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_145, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4357s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_156, [-inf,inf]=>[-0.10853127122596891,0.731376818211783] (9,-1; 9,-1), time: 30.4456s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4226s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_113, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4756s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[-0.03214813483369603,0.7891326133056636] (9,-1; 9,-1), time: 30.1392s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[1e-05,1.261397344140268] (15,-1; 9,-1), time: 15.4865s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-0.3655615804932061,0.03645872766972447] (9,-1; 9,-1), time: 30.0320s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_137, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4401s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_140, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5013s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-0.003771535933770625,0.5526615804917703] (9,-1; 9,-1), time: 30.4182s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-0.6468704905909881,0.04649052237335362] (9,-1; 9,-1), time: 30.0362s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_188, [-inf,inf]=>[1e-05,0.8837603558588308] (15,-1; 9,-1), time: 15.5599s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_134, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4216s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[1e-05,0.8028315740243646] (15,-1; 9,-1), time: 15.4979s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_105, [-inf,inf]=>[1e-05,1.1724461801290789] (15,-1; 9,-1), time: 15.5164s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[1e-05,1.746386964381515] (15,-1; 9,-1), time: 15.6291s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[1e-05,1.0564584569945168] (15,-1; 9,-1), time: 15.4754s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_176, [-inf,inf]=>[1e-05,2.707121269500055] (15,-1; 2,-1), time: 11.1071s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_111, [-inf,inf]=>[-0.10016731483131244,0.6952398754792798] (9,-1; 9,-1), time: 30.0188s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_146, [-inf,inf]=>[1e-05,1.7626447215704393] (15,-1; 9,-1), time: 15.4162s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-0.31670591658630015,0.10220681056785907] (9,-1; 9,-1), time: 30.1742s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_186, [-inf,inf]=>[1e-05,1.5551727423791522] (15,-1; 9,-1), time: 15.4215s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[1e-05,1.8065922777560721] (15,-1; 9,-1), time: 15.5751s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_163, [-inf,inf]=>[1e-05,1.8661552447314107] (15,-1; 9,-1), time: 15.7009s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-0.2797342895751409,0.20384183820567883] (9,-1; 9,-1), time: 30.0284s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-0.2213433647375284,0.11654164709505749] (9,-1; 9,-1), time: 30.0730s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-0.5092584888608531,0.1910586339229834] (9,-1; 9,-1), time: 30.1278s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-0.1396404554789596,0.2122653326862507] (9,-1; 9,-1), time: 30.0443s, #vars: 2067, #constrs: 1423, improved: True
Solving MIP for lay10_108, [-inf,inf]=>[-0.3429451152825323,0.008687462422358948] (9,-1; 9,-1), time: 30.0381s, #vars: 2067, #constrs: 1423, improved: True
PGD done for relu layer 5
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 3 has unstable to stable neurons: [(23, -1), (18, -1), (119, -1), (61, -1), (90, 1), (33, -1), (195, -1), (64, -1), (186, -1), (84, 1), (48, -1), (59, -1), (161, -1), (76, -1), (98, -1), (80, 1), (166, -1), (68, -1), (137, -1), (4, 1), (40, -1), (53, -1), (19, -1), (129, 1), (184, -1), (174, -1), (43, -1), (79, -1), (92, -1), (125, -1), (11, -1), (87, -1), (39, -1), (101, -1), (176, 1), (106, 1), (21, -1), (31, 1), (149, 1), (130, -1), (127, -1), (178, -1), (70, -1), (42, -1), (154, -1), (193, -1), (138, -1), (56, 1), (168, -1), (126, -1), (192, 1), (1, -1), (65, 1), (41, 1), (144, -1), (91, -1), (169, -1), (162, 1), (99, 1), (49, -1), (14, -1), (77, -1), (10, -1), (194, -1), (69, 1), (73, -1), (123, -1), (170, 1), (2, -1), (8, -1), (25, -1), (85, 1), (3, 1), (83, -1), (189, 1), (24, -1)]
best_l after optimization: 26.189096450805664 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.59601902961731
alpha-CROWN with intermediate bounds by MIP: tensor([[ 4.76849174,  2.74172688,  1.45799065, -0.12159824,  4.19873810,
          3.35051322,  5.67494965,  2.47700715,  1.64127755]], device='cuda:0') None
MIP improved 170 nodes out of 170 unstable nodes, lb improved 43.28171920776367, ub improved 102.80541229248047, time 95.7354
maximum relu layer improved by MIP so far 4
Linear(in_features=200, out_features=200, bias=True) 5 12 torch.Size([200])
sorted candidates ['lay12_67', 'lay12_145', 'lay12_154', 'lay12_120', 'lay12_84', 'lay12_48', 'lay12_23', 'lay12_51', 'lay12_13', 'lay12_34', 'lay12_27', 'lay12_61', 'lay12_139', 'lay12_52', 'lay12_72', 'lay12_35', 'lay12_58', 'lay12_123', 'lay12_148', 'lay12_128', 'lay12_98', 'lay12_53', 'lay12_142', 'lay12_41', 'lay12_166', 'lay12_150', 'lay12_197', 'lay12_187', 'lay12_31', 'lay12_111', 'lay12_15', 'lay12_199', 'lay12_30', 'lay12_136', 'lay12_118', 'lay12_194', 'lay12_73', 'lay12_182', 'lay12_25', 'lay12_114', 'lay12_86', 'lay12_57', 'lay12_171', 'lay12_160', 'lay12_71', 'lay12_168', 'lay12_141', 'lay12_39', 'lay12_44', 'lay12_46', 'lay12_55', 'lay12_184', 'lay12_109', 'lay12_3', 'lay12_119', 'lay12_28', 'lay12_106', 'lay12_40', 'lay12_129', 'lay12_19', 'lay12_96', 'lay12_149', 'lay12_76', 'lay12_163', 'lay12_68', 'lay12_108', 'lay12_183', 'lay12_80', 'lay12_45', 'lay12_78', 'lay12_56', 'lay12_17', 'lay12_151', 'lay12_190', 'lay12_133', 'lay12_174', 'lay12_127', 'lay12_132', 'lay12_130', 'lay12_66', 'lay12_81', 'lay12_179', 'lay12_146', 'lay12_21', 'lay12_47', 'lay12_176', 'lay12_10', 'lay12_70', 'lay12_24', 'lay12_131', 'lay12_147', 'lay12_20', 'lay12_140', 'lay12_22', 'lay12_77', 'lay12_193', 'lay12_100', 'lay12_2', 'lay12_12', 'lay12_75', 'lay12_137', 'lay12_159', 'lay12_153', 'lay12_6', 'lay12_172', 'lay12_26', 'lay12_125', 'lay12_7', 'lay12_101', 'lay12_38', 'lay12_11', 'lay12_85', 'lay12_5', 'lay12_121', 'lay12_104', 'lay12_92', 'lay12_169', 'lay12_112', 'lay12_198', 'lay12_91', 'lay12_79', 'lay12_97', 'lay12_195', 'lay12_65', 'lay12_178', 'lay12_107', 'lay12_167', 'lay12_115', 'lay12_94', 'lay12_43', 'lay12_90', 'lay12_14', 'lay12_180', 'lay12_156', 'lay12_110', 'lay12_126', 'lay12_152', 'lay12_0', 'lay12_191', 'lay12_4', 'lay12_88', 'lay12_177', 'lay12_116', 'lay12_164', 'lay12_175', 'lay12_9', 'lay12_157', 'lay12_83', 'lay12_33', 'lay12_117', 'lay12_162', 'lay12_103', 'lay12_105', 'lay12_36', 'lay12_8', 'lay12_74', 'lay12_102', 'lay12_170', 'lay12_82', 'lay12_18', 'lay12_50', 'lay12_49', 'lay12_124', 'lay12_143', 'lay12_122', 'lay12_1', 'lay12_16', 'lay12_93', 'lay12_113', 'lay12_165', 'lay12_60', 'lay12_63', 'lay12_161', 'lay12_181', 'lay12_95', 'lay12_62', 'lay12_186', 'lay12_59', 'lay12_192', 'lay12_42', 'lay12_54', 'lay12_87', 'lay12_135', 'lay12_64', 'lay12_185', 'lay12_32', 'lay12_69', 'lay12_158', 'lay12_189', 'lay12_134', 'lay12_99', 'lay12_188', 'lay12_155', 'lay12_37', 'lay12_138', 'lay12_144', 'lay12_196', 'lay12_89', 'lay12_29', 'lay12_173'] filter: 1.0
Solving MIP for lay12_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7215s, #vars: 2325, #constrs: 1710, improved: True
Solving MIP for lay12_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7465s, #vars: 2325, #constrs: 1710, improved: True
Solving MIP for lay12_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7507s, #vars: 2325, #constrs: 1710, improved: True
Solving MIP for lay12_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7599s, #vars: 2325, #constrs: 1710, improved: True
Solving MIP for lay12_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7558s, #vars: 2325, #constrs: 1710, improved: True
Solving MIP for lay12_120, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7628s, #vars: 2325, #constrs: 1710, improved: True
Solving MIP for lay12_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7678s, #vars: 2325, #constrs: 1710, improved: True
Solving MIP for lay12_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7897s, #vars: 2325, #constrs: 1710, improved: True
Solving MIP for lay12_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8633s, #vars: 2325, #constrs: 1710, improved: True
Solving MIP for lay12_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8824s, #vars: 2325, #constrs: 1710, improved: True
Solving MIP for lay12_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8871s, #vars: 2325, #constrs: 1710, improved: True
Solving MIP for lay12_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9259s, #vars: 2325, #constrs: 1710, improved: True
Solving MIP for lay12_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9662s, #vars: 2325, #constrs: 1710, improved: True
Solving MIP for lay12_148, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6731s, #vars: 2325, #constrs: 1710, improved: True
Solving MIP for lay12_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7543s, #vars: 2325, #constrs: 1710, improved: True
Solving MIP for lay12_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7776s, #vars: 2325, #constrs: 1710, improved: True
Solving MIP for lay12_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6897s, #vars: 2325, #constrs: 1710, improved: True
Solving MIP for lay12_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7950s, #vars: 2325, #constrs: 1710, improved: True
Solving MIP for lay12_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6823s, #vars: 2325, #constrs: 1710, improved: True
PGD done for relu layer 6
Run alpha-CROWN after refining layer 10 and relu idx 4
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 4 has unstable to stable neurons: [(97, -1), (123, -1), (86, -1), (166, -1), (49, -1), (58, -1), (61, -1), (171, -1), (93, -1), (164, -1), (139, -1), (112, -1), (50, -1), (170, -1), (157, -1), (148, -1), (118, -1), (174, -1), (20, -1), (138, -1), (62, -1), (83, -1), (65, -1), (131, -1), (82, -1), (7, -1), (126, -1), (34, -1), (151, -1), (99, -1), (199, -1), (57, -1), (12, -1), (80, -1), (198, -1), (125, -1), (15, -1), (56, -1), (129, -1), (67, -1), (31, -1), (39, -1), (180, -1), (183, -1), (91, -1), (74, -1), (55, -1), (37, -1), (149, -1), (128, -1), (68, -1), (100, -1), (23, 1), (73, -1), (95, -1), (28, -1), (102, -1), (114, -1), (9, -1), (181, -1), (153, -1), (190, -1), (104, -1), (29, -1), (169, -1), (178, -1), (41, -1), (78, -1), (8, -1), (161, -1), (162, -1), (96, -1), (135, -1), (14, -1), (115, -1), (121, -1), (53, 1), (75, -1), (155, -1), (19, -1), (173, -1), (132, -1), (38, -1), (45, 1), (63, -1), (70, -1), (17, -1), (11, -1), (142, -1), (192, -1), (136, -1), (144, -1), (48, -1), (22, -1), (182, 1), (158, -1), (124, 1), (133, -1), (5, -1), (109, -1), (103, 1), (47, 1), (98, -1), (116, -1), (143, 1), (6, 1), (187, -1), (189, -1), (33, -1), (2, 1), (40, -1), (84, 1), (76, -1), (160, -1), (188, 1), (51, -1), (120, -1), (172, -1), (18, -1), (179, -1), (184, -1), (1, 1), (105, 1), (154, -1), (69, 1), (72, 1), (150, -1), (30, -1), (0, -1), (13, -1), (145, -1), (146, 1), (3, -1), (113, -1), (137, -1), (186, 1), (140, -1), (42, 1), (176, 1), (134, -1), (163, 1)]

all verified at 0th iter
best_l after optimization: 33.57177734375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.06531572341918945
alpha-CROWN with intermediate bounds by MIP: tensor([[5.68765020, 3.49460530, 2.33024693, 0.77018905, 4.86391592, 4.32087803,
         6.57298851, 3.19708490, 2.33422136]], device='cuda:0') None
min of alpha-CROWN bounds 0.7701890468597412>=0, verified!
MIP finished with 271.82854175567627s
Run final alpha-CROWN after MIP solving on layer 11 and relu idx 5
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: 33.57177734375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.06007218360900879
alpha-CROWN with intermediate bounds improved by MIP: tensor([[5.68765020, 3.49460530, 2.33024693, 0.77018905, 4.86391592, 4.32087803,
         6.57298851, 3.19708490, 2.33422136]], device='cuda:0') None
refined global lb: tensor([[5.68765020],
        [3.49460530],
        [2.33024693],
        [0.77018905],
        [4.86391592],
        [4.32087803],
        [6.57298851],
        [3.19708490],
        [2.33422136]], device='cuda:0') min: tensor(0.77018905, device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
Result: safe-incomplete-refine in 287.2053 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):287.2023832461718, max time: 287.2052552700043
mean time for verified SAFE instances(total 1): 287.2052552700043, max time: 287.2052552700043
safe-incomplete-refine (total 1), index: [0]
