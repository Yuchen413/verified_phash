Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: model_resnet
  path: cifar_resnet_8px.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 3529
  end: 3530
  select_instance: null
  num_outputs: 10
  mean: [0.485, 0.456, 0.406]
  std: [0.225, 0.225, 0.225]
  pkl_path: null
  dataset: CIFAR
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.03137254901
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 8
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 180
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 50
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 18:33:08 2023 on zeratul
DenseSequential(
  (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): ReLU()
  (2): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (3): ReLU()
  (4): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
      (1): None
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (5): ReLU()
  (6): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (7): ReLU()
  (8): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
      (1): None
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (9): ReLU()
  (10): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    )
  )
  (11): ReLU()
  (12): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 32, kernel_size=(2, 2), stride=(2, 2))
      (1): None
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (13): ReLU()
  (14): Dense(
    (Ws): ModuleList(
      (0): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    )
  )
  (15): ReLU()
  (16): Dense(
    (Ws): ModuleList(
      (0): Conv2d(32, 64, kernel_size=(2, 2), stride=(2, 2))
      (1): None
      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (17): ReLU()
  (18): Flatten()
  (19): Linear(in_features=4096, out_features=1000, bias=True)
  (20): ReLU()
  (21): Linear(in_features=1000, out_features=10, bias=True)
)
Trying generic MNIST/CIFAR data loader.
Files already downloaded and verified
Internal results will be saved to Verified_ret_[model_resnet]_start=3529_end=3530_iter=20_b=8_timeout=180_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 3529 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.03485840559005737, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.75144243, -0.05147142,  0.30275559,  0.37692752,  0.27600586,
          0.42056012,  0.58317059,  0.11710812, -0.69510394, -0.57856166]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.09371865e-01, -1.12429261e-04,  2.03350261e-01,  3.88648808e-01,
           1.38804808e-01,  4.35205400e-01,  4.37288851e-01,  1.21649787e-01,
          -5.84623098e-01, -4.30888236e-01],
         [-7.09371865e-01, -1.12429261e-04,  2.03350261e-01,  3.88648808e-01,
           1.38804808e-01,  4.35205400e-01,  4.37288851e-01,  1.21649787e-01,
          -5.84623098e-01, -4.30888236e-01]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.14666069, 0.43740129, 0.23393859, 0.04864004, 0.29848403,
          0.00208345, 0.31563908, 1.02191198, 0.86817706]]], device='cuda:0')
number of violation:  0
Attack finished in 3.6796 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundParams(name=/13, inputs=[])
  (/14): BoundParams(name=/14, inputs=[])
  (/15): BoundParams(name=/15, inputs=[])
  (/16): BoundParams(name=/16, inputs=[])
  (/17): BoundParams(name=/17, inputs=[])
  (/18): BoundParams(name=/18, inputs=[])
  (/19): BoundParams(name=/19, inputs=[])
  (/20): BoundParams(name=/20, inputs=[])
  (/21): BoundParams(name=/21, inputs=[])
  (/22): BoundParams(name=/22, inputs=[])
  (/23): BoundParams(name=/23, inputs=[])
  (/24): BoundParams(name=/24, inputs=[])
  (/25): BoundParams(name=/25, inputs=[])
  (/26): BoundParams(name=/26, inputs=[])
  (/27): BoundParams(name=/27, inputs=[])
  (/28): BoundParams(name=/28, inputs=[])
  (/29): BoundParams(name=/29, inputs=[])
  (/30): BoundParams(name=/30, inputs=[])
  (/input): BoundConv(name=/input, inputs=[/input.1, /1, /2])
  (/input.4): BoundRelu(name=/input.4, inputs=[/input])
  (/33): BoundConv(name=/33, inputs=[/input.4, /3, /4])
  (/input.8): BoundRelu(name=/input.8, inputs=[/33])
  (/35): BoundConv(name=/35, inputs=[/input.4, /5, /6])
  (/36): BoundConv(name=/36, inputs=[/input.8, /7, /8])
  (/input.12): BoundAdd(name=/input.12, inputs=[/35, /36])
  (/input.16): BoundRelu(name=/input.16, inputs=[/input.12])
  (/39): BoundConv(name=/39, inputs=[/input.16, /9, /10])
  (/input.20): BoundRelu(name=/input.20, inputs=[/39])
  (/41): BoundConv(name=/41, inputs=[/input.16, /11, /12])
  (/42): BoundConv(name=/42, inputs=[/input.20, /13, /14])
  (/input.24): BoundAdd(name=/input.24, inputs=[/41, /42])
  (/input.28): BoundRelu(name=/input.28, inputs=[/input.24])
  (/45): BoundConv(name=/45, inputs=[/input.28, /15, /16])
  (/input.32): BoundRelu(name=/input.32, inputs=[/45])
  (/47): BoundConv(name=/47, inputs=[/input.28, /17, /18])
  (/48): BoundConv(name=/48, inputs=[/input.32, /19, /20])
  (/input.36): BoundAdd(name=/input.36, inputs=[/47, /48])
  (/input.40): BoundRelu(name=/input.40, inputs=[/input.36])
  (/51): BoundConv(name=/51, inputs=[/input.40, /21, /22])
  (/input.44): BoundRelu(name=/input.44, inputs=[/51])
  (/53): BoundConv(name=/53, inputs=[/input.40, /23, /24])
  (/54): BoundConv(name=/54, inputs=[/input.44, /25, /26])
  (/input.48): BoundAdd(name=/input.48, inputs=[/53, /54])
  (/56): BoundRelu(name=/56, inputs=[/input.48])
  (/57): BoundShape(name=/57, inputs=[/56])
  (/58): BoundConstant(name=/58, inputs=[])
  (/59): BoundGather(name=/59, inputs=[/57, /58])
  (/60): BoundConstant(name=/60, inputs=[])
  (/61): BoundUnsqueeze(name=/61, inputs=[/59])
  (/62): BoundUnsqueeze(name=/62, inputs=[/60])
  (/63): BoundConcat(name=/63, inputs=[/61, /62])
  (/64): BoundReshape(name=/64, inputs=[/56, /63])
  (/input.52): BoundLinear(name=/input.52, inputs=[/64, /27, /28])
  (/66): BoundRelu(name=/66, inputs=[/input.52])
  (/67): BoundLinear(name=/67, inputs=[/66, /29, /30])
)
Model prediction is: tensor([[-0.75144243, -0.05147142,  0.30275559,  0.37692752,  0.27600586,
          0.42056012,  0.58317059,  0.11710812, -0.69510394, -0.57856166]],
       device='cuda:0')
layer /input.4 using sparse-features alpha with shape [1188]; unstable size 1188; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.4 start_node /input.12 using sparse-spec alpha with unstable size 416 total_size 16384 output_shape (16, 32, 32)
layer /input.4 start_node /39 using sparse-spec alpha with unstable size 3 total_size 16384 output_shape (16, 32, 32)
layer /input.4 start_node /input.24 using sparse-spec alpha with unstable size 67 total_size 16384 output_shape (16, 32, 32)
layer /input.4 start_node /45 using sparse-spec alpha with unstable size 2 total_size 8192 output_shape (32, 16, 16)
layer /input.4 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.4 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.4 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [0]; unstable size 0; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.8 start_node /input.12 using sparse-spec alpha with unstable size 416 total_size 16384 output_shape (16, 32, 32)
layer /input.8 start_node /39 using sparse-spec alpha with unstable size 3 total_size 16384 output_shape (16, 32, 32)
layer /input.8 start_node /input.24 using sparse-spec alpha with unstable size 67 total_size 16384 output_shape (16, 32, 32)
layer /input.8 start_node /45 using sparse-spec alpha with unstable size 2 total_size 8192 output_shape (32, 16, 16)
layer /input.8 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.8 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.8 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.16 using sparse-features alpha with shape [416]; unstable size 416; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.16 start_node /39 using sparse-spec alpha with unstable size 3 total_size 16384 output_shape (16, 32, 32)
layer /input.16 start_node /input.24 using sparse-spec alpha with unstable size 67 total_size 16384 output_shape (16, 32, 32)
layer /input.16 start_node /45 using sparse-spec alpha with unstable size 2 total_size 8192 output_shape (32, 16, 16)
layer /input.16 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.16 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.16 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.20 using sparse-features alpha with shape [3]; unstable size 3; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.20 start_node /input.24 using sparse-spec alpha with unstable size 67 total_size 16384 output_shape (16, 32, 32)
layer /input.20 start_node /45 using sparse-spec alpha with unstable size 2 total_size 8192 output_shape (32, 16, 16)
layer /input.20 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.20 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.20 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.28 using sparse-features alpha with shape [67]; unstable size 67; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.28 start_node /45 using sparse-spec alpha with unstable size 2 total_size 8192 output_shape (32, 16, 16)
layer /input.28 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.28 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.28 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.32 using sparse-features alpha with shape [2]; unstable size 2; total size 8192 (torch.Size([1, 32, 16, 16]))
layer /input.32 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.32 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.32 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.40 using sparse-features alpha with shape [0]; unstable size 0; total size 8192 (torch.Size([1, 32, 16, 16]))
layer /input.40 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.40 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.40 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.44 using sparse-features alpha with shape [0]; unstable size 0; total size 4096 (torch.Size([1, 64, 8, 8]))
layer /input.44 start_node /input.48 using sparse-spec alpha with unstable size 12 total_size 4096 output_shape (64, 8, 8)
layer /input.44 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /input.44 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /56 using sparse-features alpha with shape [12]; unstable size 12; total size 4096 (torch.Size([1, 64, 8, 8]))
layer /56 start_node /input.52 using sparse-spec alpha with unstable size 42 total_size 1000 output_shape torch.Size([1000])
layer /56 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /66 using sparse-features alpha with shape [42]; unstable size 42; total size 1000 (torch.Size([1, 1000]))
layer /66 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.08851933,  0.35092413,  0.22446933,  0.01692283,  0.27167255,
         -0.03671217,  0.25880569,  0.93270838,  0.77809882]], device='cuda:0') None
best_l after optimization: 4.138126850128174
alpha/beta optimization time: 32.375160932540894
initial alpha-CROWN bounds: tensor([[ 1.11739457,  0.39195704,  0.23118103,  0.03948998,  0.27991092,
         -0.00966817,  0.29045832,  0.97865367,  0.81874931]], device='cuda:0')
Worst class: (+ rhs) -0.009668171405792236
Split layers:
  BoundConv(name=/33, inputs=[/input.4, /3, /4]): [(BoundRelu(name=/input.8, inputs=[/33]), 0)]
  BoundLinear(name=/input.52, inputs=[/64, /27, /28]): [(BoundRelu(name=/66, inputs=[/input.52]), 0)]
  BoundConv(name=/45, inputs=[/input.28, /15, /16]): [(BoundRelu(name=/input.32, inputs=[/45]), 0)]
  BoundAdd(name=/input.48, inputs=[/53, /54]): [(BoundRelu(name=/56, inputs=[/input.48]), 0)]
  BoundAdd(name=/input.24, inputs=[/41, /42]): [(BoundRelu(name=/input.28, inputs=[/input.24]), 0)]
  BoundAdd(name=/input.12, inputs=[/35, /36]): [(BoundRelu(name=/input.16, inputs=[/input.12]), 0)]
  BoundConv(name=/51, inputs=[/input.40, /21, /22]): [(BoundRelu(name=/input.44, inputs=[/51]), 0)]
  BoundConv(name=/input, inputs=[/input.1, /1, /2]): [(BoundRelu(name=/input.4, inputs=[/input]), 0)]
  BoundAdd(name=/input.36, inputs=[/47, /48]): [(BoundRelu(name=/input.40, inputs=[/input.36]), 0)]
  BoundConv(name=/39, inputs=[/input.16, /9, /10]): [(BoundRelu(name=/input.20, inputs=[/39]), 0)]
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 16, 32, 32]), torch.Size([1, 9, 32, 16, 16]), torch.Size([1, 9, 32, 16, 16]), torch.Size([1, 9, 64, 8, 8]), torch.Size([1, 9, 64, 8, 8]), torch.Size([1, 9, 1000])]

Properties batch 0, size 1
Remaining timeout: 137.09019017219543
##### Instance 0 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.1173945665359497.

Properties batch 1, size 1
Remaining timeout: 136.86778855323792
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.39195704460144043.

Properties batch 2, size 1
Remaining timeout: 136.79228353500366
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.23118102550506592.

Properties batch 3, size 1
Remaining timeout: 136.71668910980225
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.0394899845123291.

Properties batch 4, size 1
Remaining timeout: 136.64003014564514
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.2799109220504761.

Properties batch 5, size 1
Remaining timeout: 136.564218044281
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.00966817]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundParams(name=/13, inputs=[])
  (/14): BoundParams(name=/14, inputs=[])
  (/15): BoundParams(name=/15, inputs=[])
  (/16): BoundParams(name=/16, inputs=[])
  (/17): BoundParams(name=/17, inputs=[])
  (/18): BoundParams(name=/18, inputs=[])
  (/19): BoundParams(name=/19, inputs=[])
  (/20): BoundParams(name=/20, inputs=[])
  (/21): BoundParams(name=/21, inputs=[])
  (/22): BoundParams(name=/22, inputs=[])
  (/23): BoundParams(name=/23, inputs=[])
  (/24): BoundParams(name=/24, inputs=[])
  (/25): BoundParams(name=/25, inputs=[])
  (/26): BoundParams(name=/26, inputs=[])
  (/27): BoundParams(name=/27, inputs=[])
  (/28): BoundParams(name=/28, inputs=[])
  (/29): BoundParams(name=/29, inputs=[])
  (/30): BoundParams(name=/30, inputs=[])
  (/input): BoundConv(name=/input, inputs=[/input.1, /1, /2])
  (/input.4): BoundRelu(name=/input.4, inputs=[/input])
  (/33): BoundConv(name=/33, inputs=[/input.4, /3, /4])
  (/input.8): BoundRelu(name=/input.8, inputs=[/33])
  (/35): BoundConv(name=/35, inputs=[/input.4, /5, /6])
  (/36): BoundConv(name=/36, inputs=[/input.8, /7, /8])
  (/input.12): BoundAdd(name=/input.12, inputs=[/35, /36])
  (/input.16): BoundRelu(name=/input.16, inputs=[/input.12])
  (/39): BoundConv(name=/39, inputs=[/input.16, /9, /10])
  (/input.20): BoundRelu(name=/input.20, inputs=[/39])
  (/41): BoundConv(name=/41, inputs=[/input.16, /11, /12])
  (/42): BoundConv(name=/42, inputs=[/input.20, /13, /14])
  (/input.24): BoundAdd(name=/input.24, inputs=[/41, /42])
  (/input.28): BoundRelu(name=/input.28, inputs=[/input.24])
  (/45): BoundConv(name=/45, inputs=[/input.28, /15, /16])
  (/input.32): BoundRelu(name=/input.32, inputs=[/45])
  (/47): BoundConv(name=/47, inputs=[/input.28, /17, /18])
  (/48): BoundConv(name=/48, inputs=[/input.32, /19, /20])
  (/input.36): BoundAdd(name=/input.36, inputs=[/47, /48])
  (/input.40): BoundRelu(name=/input.40, inputs=[/input.36])
  (/51): BoundConv(name=/51, inputs=[/input.40, /21, /22])
  (/input.44): BoundRelu(name=/input.44, inputs=[/51])
  (/53): BoundConv(name=/53, inputs=[/input.40, /23, /24])
  (/54): BoundConv(name=/54, inputs=[/input.44, /25, /26])
  (/input.48): BoundAdd(name=/input.48, inputs=[/53, /54])
  (/56): BoundRelu(name=/56, inputs=[/input.48])
  (/57): BoundShape(name=/57, inputs=[/56])
  (/58): BoundConstant(name=/58, inputs=[])
  (/59): BoundGather(name=/59, inputs=[/57, /58])
  (/60): BoundConstant(name=/60, inputs=[])
  (/61): BoundUnsqueeze(name=/61, inputs=[/59])
  (/62): BoundUnsqueeze(name=/62, inputs=[/60])
  (/63): BoundConcat(name=/63, inputs=[/61, /62])
  (/64): BoundReshape(name=/64, inputs=[/56, /63])
  (/input.52): BoundLinear(name=/input.52, inputs=[/64, /27, /28])
  (/66): BoundRelu(name=/66, inputs=[/input.52])
  (/67): BoundLinear(name=/67, inputs=[/66, /29, /30])
)
Model prediction is: tensor([-0.75144243, -0.05147142,  0.30275559,  0.37692752,  0.27600586,
         0.42056012,  0.58317059,  0.11710812, -0.69510394, -0.57856166],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /input.4 start_node /67 with alignment adjustment
setting alpha for layer /input.8 start_node /67 with alignment adjustment
setting alpha for layer /input.16 start_node /67 with alignment adjustment
setting alpha for layer /input.20 start_node /67 with alignment adjustment
setting alpha for layer /input.28 start_node /67 with alignment adjustment
setting alpha for layer /input.32 start_node /67 with alignment adjustment
setting alpha for layer /input.40 start_node /67 with alignment adjustment
setting alpha for layer /input.44 start_node /67 with alignment adjustment
setting alpha for layer /56 start_node /67 with alignment adjustment
setting alpha for layer /66 start_node /67 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 16, 32, 32]), torch.Size([1, 1, 32, 16, 16]), torch.Size([1, 1, 32, 16, 16]), torch.Size([1, 1, 64, 8, 8]), torch.Size([1, 1, 64, 8, 8]), torch.Size([1, 1, 1000])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.00966817]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /33,/input.52,/45,/input.48,/input.24,/input.12,/51,/input,/input.36,/39,/67
Split layers:
  BoundConv(name=/51, inputs=[/input.40, /21, /22]): [(BoundRelu(name=/input.44, inputs=[/51]), 0)]
  BoundAdd(name=/input.48, inputs=[/53, /54]): [(BoundRelu(name=/56, inputs=[/input.48]), 0)]
  BoundConv(name=/45, inputs=[/input.28, /15, /16]): [(BoundRelu(name=/input.32, inputs=[/45]), 0)]
  BoundLinear(name=/input.52, inputs=[/64, /27, /28]): [(BoundRelu(name=/66, inputs=[/input.52]), 0)]
  BoundAdd(name=/input.24, inputs=[/41, /42]): [(BoundRelu(name=/input.28, inputs=[/input.24]), 0)]
  BoundAdd(name=/input.12, inputs=[/35, /36]): [(BoundRelu(name=/input.16, inputs=[/input.12]), 0)]
  BoundConv(name=/input, inputs=[/input.1, /1, /2]): [(BoundRelu(name=/input.4, inputs=[/input]), 0)]
  BoundConv(name=/39, inputs=[/input.16, /9, /10]): [(BoundRelu(name=/input.20, inputs=[/39]), 0)]
  BoundAdd(name=/input.36, inputs=[/47, /48]): [(BoundRelu(name=/input.40, inputs=[/input.36]), 0)]
  BoundConv(name=/33, inputs=[/input.4, /3, /4]): [(BoundRelu(name=/input.8, inputs=[/33]), 0)]
Keeping slopes for these layers: ['/67']
Keeping slopes for these layers: ['/67']
Node /input.4 input 0: size torch.Size([16, 32, 32]) unstable 1188
Node /input.8 input 0: size torch.Size([16, 32, 32]) unstable 0
Node /input.16 input 0: size torch.Size([16, 32, 32]) unstable 416
Node /input.20 input 0: size torch.Size([16, 32, 32]) unstable 2
Node /input.28 input 0: size torch.Size([16, 32, 32]) unstable 64
Node /input.32 input 0: size torch.Size([32, 16, 16]) unstable 2
Node /input.40 input 0: size torch.Size([32, 16, 16]) unstable 0
Node /input.44 input 0: size torch.Size([64, 8, 8]) unstable 0
Node /56 input 0: size torch.Size([64, 8, 8]) unstable 12
Node /66 input 0: size torch.Size([1000]) unstable 41
-----------------
# of unstable neurons: 1725
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.52, 972] 
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.01242208480834961
Time: prepare 0.0011    beta_bound 0.9341    bound 0.9342    transfer 0.0009    finalize 0.0014    func 0.9376    
Accumulated time: func 0.9376    prepare 0.0017    bound 0.9342    beta_bound 0.9341    transfer 0.0009    finalize 0.0014    
batch bounding time:  0.9376749992370605
Current worst splitting domains lb-rhs (depth):
-0.00539 (1), 
length of domains: 1
Time: pickout 0.0034    decision 0.6335    set_bounds 0.0011    solve 0.9377    add 0.0020    
Accumulated time: pickout 0.0034    decision 0.6335    set_bounds 0.0011    solve 0.9377    add 0.0020    
Current (lb-rhs): -0.0053899288177490234
1 domains visited
Cumulative time: 2.4174466133117676

BaB round 2
batch: 1
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.48, 3300] 
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.009567975997924805
Time: prepare 0.0013    beta_bound 0.4097    bound 0.4098    transfer 0.0009    finalize 0.0013    func 0.4134    
Accumulated time: func 1.3510    prepare 0.0037    bound 1.3440    beta_bound 1.3438    transfer 0.0018    finalize 0.0027    
batch bounding time:  0.41350483894348145
Current worst splitting domains lb-rhs (depth):
-0.00529 (2), 
length of domains: 1
Time: pickout 0.0018    decision 0.0632    set_bounds 0.0012    solve 0.4135    add 0.0017    
Accumulated time: pickout 0.0051    decision 0.6967    set_bounds 0.0023    solve 1.3512    add 0.0037    
Current (lb-rhs): -0.00528562068939209
2 domains visited
Cumulative time: 2.8991429805755615

BaB round 3
batch: 1
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.48, 3302] 
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.011245965957641602
Time: prepare 0.0014    beta_bound 0.5978    bound 0.5979    transfer 0.0009    finalize 0.0013    func 0.6016    
Accumulated time: func 1.9526    prepare 0.0056    bound 1.9419    beta_bound 1.9416    transfer 0.0028    finalize 0.0040    
batch bounding time:  0.6016666889190674
Current worst splitting domains lb-rhs (depth):
-0.00525 (3), 
length of domains: 1
Time: pickout 0.0017    decision 0.0629    set_bounds 0.0011    solve 0.6017    add 0.0017    
Accumulated time: pickout 0.0069    decision 0.7596    set_bounds 0.0034    solve 1.9529    add 0.0054    
Current (lb-rhs): -0.005251467227935791
3 domains visited
Cumulative time: 3.5686726570129395

BaB round 4
batch: 1
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/input.52, 514] 
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.0217437744140625
Time: prepare 0.0029    beta_bound 1.0086    bound 1.0087    transfer 0.0018    finalize 0.0022    func 1.0158    
Accumulated time: func 2.9683    prepare 0.0093    bound 2.9506    beta_bound 2.9502    transfer 0.0046    finalize 0.0062    
batch bounding time:  1.0159204006195068
Current worst splitting domains lb-rhs (depth):
-0.00397 (4), 
length of domains: 1
Time: pickout 0.0017    decision 0.0716    set_bounds 0.0017    solve 1.0159    add 0.0033    
Accumulated time: pickout 0.0085    decision 0.8312    set_bounds 0.0050    solve 2.9688    add 0.0087    
Current (lb-rhs): -0.003971517086029053
4 domains visited
Cumulative time: 4.663550138473511

BaB round 5
batch: 1
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/input.48, 3292] 
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.02261519432067871
Time: prepare 0.0014    beta_bound 1.0524    bound 1.0525    transfer 0.0010    finalize 0.0013    func 1.0562    
Accumulated time: func 4.0246    prepare 0.0113    bound 4.0031    beta_bound 4.0027    transfer 0.0056    finalize 0.0075    
batch bounding time:  1.0563299655914307
Current worst splitting domains lb-rhs (depth):
-0.00395 (5), 
length of domains: 1
Time: pickout 0.0018    decision 0.0674    set_bounds 0.0012    solve 1.0563    add 0.0017    
Accumulated time: pickout 0.0104    decision 0.8986    set_bounds 0.0062    solve 4.0252    add 0.0105    
Current (lb-rhs): -0.00394594669342041
5 domains visited
Cumulative time: 5.7923502922058105

BaB round 6
batch: 1
Average branched neurons at iteration 6:  1.0000
splitting decisions: 
split level 0: [/input.48, 3273] 
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.01221776008605957
Time: prepare 0.0013    beta_bound 0.6457    bound 0.6458    transfer 0.0009    finalize 0.0013    func 0.6495    
Accumulated time: func 4.6740    prepare 0.0133    bound 4.6489    beta_bound 4.6484    transfer 0.0066    finalize 0.0089    
batch bounding time:  0.6495497226715088
Current worst splitting domains lb-rhs (depth):
-0.00394 (6), 
length of domains: 1
Time: pickout 0.0017    decision 0.0630    set_bounds 0.0012    solve 0.6496    add 0.0018    
Accumulated time: pickout 0.0121    decision 0.9615    set_bounds 0.0074    solve 4.6748    add 0.0122    
Current (lb-rhs): -0.003939568996429443
6 domains visited
Cumulative time: 6.509890556335449

BaB round 7
batch: 1
Average branched neurons at iteration 7:  1.0000
splitting decisions: 
split level 0: [/input.48, 3272] 
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.013890743255615234
Time: prepare 0.0013    beta_bound 0.6360    bound 0.6361    transfer 0.0010    finalize 0.0013    func 0.6398    
Accumulated time: func 5.3139    prepare 0.0153    bound 5.2850    beta_bound 5.2844    transfer 0.0076    finalize 0.0102    
batch bounding time:  0.639925479888916
Current worst splitting domains lb-rhs (depth):
-0.00393 (7), 
length of domains: 1
Time: pickout 0.0022    decision 0.0796    set_bounds 0.0012    solve 0.6399    add 0.0017    
Accumulated time: pickout 0.0143    decision 1.0411    set_bounds 0.0085    solve 5.3147    add 0.0140    
Current (lb-rhs): -0.00393223762512207
7 domains visited
Cumulative time: 7.234926223754883

BaB round 8
batch: 1
Average branched neurons at iteration 8:  1.0000
splitting decisions: 
split level 0: [/input.52, 564] 
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.013137340545654297
Time: prepare 0.0024    beta_bound 0.6710    bound 0.6710    transfer 0.0011    finalize 0.0013    func 0.6759    
Accumulated time: func 5.9898    prepare 0.0183    bound 5.9561    beta_bound 5.9554    transfer 0.0087    finalize 0.0116    
batch bounding time:  0.6760218143463135
Current worst splitting domains lb-rhs (depth):
-0.00293 (8), 
length of domains: 1
Time: pickout 0.0018    decision 0.0740    set_bounds 0.0023    solve 0.6760    add 0.0017    
Accumulated time: pickout 0.0161    decision 1.1151    set_bounds 0.0108    solve 5.9907    add 0.0157    
Current (lb-rhs): -0.002925097942352295
8 domains visited
Cumulative time: 7.991112232208252

BaB round 9
batch: 1
Average branched neurons at iteration 9:  1.0000
splitting decisions: 
split level 0: [/input.48, 3317] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 2 = 0.0
pruning-in-iteration extra time: 0.00010657310485839844
Time: prepare 0.0014    beta_bound 0.8828    bound 0.8829    transfer 0.0007    finalize 0.0013    func 0.8863    
Accumulated time: func 6.8762    prepare 0.0204    bound 6.8390    beta_bound 6.8382    transfer 0.0094    finalize 0.0129    
batch bounding time:  0.8863933086395264
Current worst splitting domains lb-rhs (depth):
-0.00292 (9), -0.00079 (9), 
length of domains: 2
Time: pickout 0.0017    decision 0.0761    set_bounds 0.0013    solve 0.8864    add 0.0021    
Accumulated time: pickout 0.0178    decision 1.1912    set_bounds 0.0121    solve 6.8771    add 0.0178    
Current (lb-rhs): -0.002920985221862793
10 domains visited
Cumulative time: 8.95905327796936

BaB round 10
batch: 2
Average branched neurons at iteration 10:  1.0000
splitting decisions: 
split level 0: [/input.52, 349] [/input.52, 349] 
pruning_in_iteration open status: True
ratio of positive domain = 3 / 4 = 0.75
pruning-in-iteration extra time: 0.011700868606567383
Time: prepare 0.0019    beta_bound 0.6308    bound 0.6309    transfer 0.0014    finalize 0.0020    func 0.6362    
Accumulated time: func 7.5123    prepare 0.0231    bound 7.4699    beta_bound 7.4690    transfer 0.0107    finalize 0.0149    
batch bounding time:  0.6362636089324951
Current worst splitting domains lb-rhs (depth):
-0.00180 (10), 
length of domains: 1
Time: pickout 0.0017    decision 0.0803    set_bounds 0.0024    solve 0.6363    add 0.0019    
Accumulated time: pickout 0.0195    decision 1.2715    set_bounds 0.0146    solve 7.5134    add 0.0197    
Current (lb-rhs): -0.0017967820167541504
11 domains visited
Cumulative time: 9.682116746902466

BaB round 11
batch: 1
Average branched neurons at iteration 11:  1.0000
splitting decisions: 
split level 0: [/input.48, 3294] 
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.019945621490478516
Time: prepare 0.0013    beta_bound 0.9860    bound 0.9861    transfer 0.0013    finalize 0.0016    func 0.9904    
Accumulated time: func 8.5027    prepare 0.0251    bound 8.4560    beta_bound 8.4550    transfer 0.0120    finalize 0.0165    
batch bounding time:  0.9904978275299072
Current worst splitting domains lb-rhs (depth):
-0.00180 (11), 
length of domains: 1
Time: pickout 0.0018    decision 0.0746    set_bounds 0.0012    solve 0.9905    add 0.0018    
Accumulated time: pickout 0.0213    decision 1.3460    set_bounds 0.0157    solve 8.5040    add 0.0215    
Current (lb-rhs): -0.0017957091331481934
12 domains visited
Cumulative time: 10.752379417419434

BaB round 12
batch: 1
Average branched neurons at iteration 12:  1.0000
splitting decisions: 
split level 0: [/input.48, 3316] 
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.015648603439331055
Time: prepare 0.0013    beta_bound 0.7440    bound 0.7441    transfer 0.0022    finalize 0.0031    func 0.7508    
Accumulated time: func 9.2535    prepare 0.0271    bound 9.2001    beta_bound 9.1991    transfer 0.0143    finalize 0.0195    
batch bounding time:  0.7509260177612305
Current worst splitting domains lb-rhs (depth):
-0.00180 (12), 
length of domains: 1
Time: pickout 0.0017    decision 0.0921    set_bounds 0.0012    solve 0.7510    add 0.0021    
Accumulated time: pickout 0.0230    decision 1.4381    set_bounds 0.0169    solve 9.2549    add 0.0236    
Current (lb-rhs): -0.0017954111099243164
13 domains visited
Cumulative time: 11.60086464881897

BaB round 13
batch: 1
Average branched neurons at iteration 13:  1.0000
splitting decisions: 
split level 0: [/input.52, 654] 
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.013694047927856445
Time: prepare 0.0014    beta_bound 0.6930    bound 0.6931    transfer 0.0011    finalize 0.0015    func 0.6970    
Accumulated time: func 9.9505    prepare 0.0291    bound 9.8932    beta_bound 9.8921    transfer 0.0153    finalize 0.0210    
batch bounding time:  0.6971147060394287
Current worst splitting domains lb-rhs (depth):
-0.00074 (13), 
length of domains: 1
Time: pickout 0.0019    decision 0.0720    set_bounds 0.0012    solve 0.6971    add 0.0023    
Accumulated time: pickout 0.0249    decision 1.5101    set_bounds 0.0181    solve 9.9521    add 0.0259    
Current (lb-rhs): -0.0007435083389282227
14 domains visited
Cumulative time: 12.375768899917603

BaB round 14
batch: 1
Average branched neurons at iteration 14:  1.0000
splitting decisions: 
split level 0: [/input.52, 62] 
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.012360095977783203
Time: prepare 0.0014    beta_bound 0.6331    bound 0.6332    transfer 0.0011    finalize 0.0014    func 0.6370    
Accumulated time: func 10.5875    prepare 0.0312    bound 10.5263    beta_bound 10.5252    transfer 0.0164    finalize 0.0224    
batch bounding time:  0.6371176242828369
Current worst splitting domains lb-rhs (depth):
-0.00072 (14), 
length of domains: 1
Time: pickout 0.0029    decision 0.0848    set_bounds 0.0012    solve 0.6371    add 0.0017    
Accumulated time: pickout 0.0278    decision 1.5949    set_bounds 0.0193    solve 10.5892    add 0.0276    
Current (lb-rhs): -0.0007166266441345215
15 domains visited
Cumulative time: 13.103868961334229

BaB round 15
batch: 1
Average branched neurons at iteration 15:  1.0000
splitting decisions: 
split level 0: [/input.48, 3308] 
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.012213945388793945
Time: prepare 0.0014    beta_bound 0.6038    bound 0.6039    transfer 0.0020    finalize 0.0021    func 0.6095    
Accumulated time: func 11.1970    prepare 0.0333    bound 11.1303    beta_bound 11.1290    transfer 0.0184    finalize 0.0245    
batch bounding time:  0.6095972061157227
Current worst splitting domains lb-rhs (depth):
-0.00068 (15), 
length of domains: 1
Time: pickout 0.0035    decision 0.0721    set_bounds 0.0021    solve 0.6096    add 0.0018    
Accumulated time: pickout 0.0312    decision 1.6670    set_bounds 0.0214    solve 11.1988    add 0.0294    
Current (lb-rhs): -0.0006829500198364258
16 domains visited
Cumulative time: 13.793351650238037

BaB round 16
batch: 1
Average branched neurons at iteration 16:  1.0000
splitting decisions: 
split level 0: [/input, 7826] 
pruning_in_iteration open status: True
ratio of positive domain = 1 / 2 = 0.5
pruning-in-iteration extra time: 0.013446807861328125
Time: prepare 0.0014    beta_bound 0.5720    bound 0.5721    transfer 0.0015    finalize 0.0014    func 0.5764    
Accumulated time: func 11.7734    prepare 0.0353    bound 11.7024    beta_bound 11.7010    transfer 0.0199    finalize 0.0259    
batch bounding time:  0.5764868259429932
Current worst splitting domains lb-rhs (depth):
-0.00064 (16), 
length of domains: 1
Time: pickout 0.0018    decision 0.0667    set_bounds 0.0012    solve 0.5765    add 0.0018    
Accumulated time: pickout 0.0330    decision 1.7337    set_bounds 0.0226    solve 11.7753    add 0.0312    
Current (lb-rhs): -0.0006413459777832031
17 domains visited
Cumulative time: 14.441699266433716

BaB round 17
batch: 1
Average branched neurons at iteration 17:  1.0000
splitting decisions: 
split level 0: [/input.52, 777] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 2 / 2 = 1.0
pruning-in-iteration extra time: 0.00010895729064941406
Time: prepare 0.0018    beta_bound 0.0265    bound 0.0266    transfer 0.0006    finalize 0.0016    func 0.0307    
Accumulated time: func 11.8041    prepare 0.0377    bound 11.7290    beta_bound 11.7275    transfer 0.0205    finalize 0.0275    
batch bounding time:  0.030752897262573242
length of domains: 0
Time: pickout 0.0018    decision 0.0745    set_bounds 0.0016    solve 0.0308    add 0.0002    
Accumulated time: pickout 0.0347    decision 1.8082    set_bounds 0.0242    solve 11.8061    add 0.0314    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
17 domains visited
Cumulative time: 14.550954103469849


Properties batch 6, size 1
Remaining timeout: 121.54437518119812
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.2904583215713501.

Properties batch 7, size 1
Remaining timeout: 121.44478988647461
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.9786536693572998.

Properties batch 8, size 1
Remaining timeout: 121.38172054290771
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.8187493085861206.
Result: safe in 58.6826 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):58.682009148154975, max time: 58.68259596824646
mean time for verified SAFE instances(total 1): 58.68259596824646, max time: 58.68259596824646
safe (total 1), index: [0]
