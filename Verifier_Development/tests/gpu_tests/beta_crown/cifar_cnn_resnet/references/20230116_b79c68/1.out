Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: model_resnet
  path: cifar_resnet_8px.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 9134
  end: 9135
  select_instance: null
  num_outputs: 10
  mean: [0.485, 0.456, 0.406]
  std: [0.225, 0.225, 0.225]
  pkl_path: null
  dataset: CIFAR
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.03137254901
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 8
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 180
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 50
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Sun Jan 15 22:47:48 2023 on diablo.cs.ucla.edu
DenseSequential(
  (0): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (1): ReLU()
  (2): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (3): ReLU()
  (4): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
      (1): None
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (5): ReLU()
  (6): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (7): ReLU()
  (8): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
      (1): None
      (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (9): ReLU()
  (10): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    )
  )
  (11): ReLU()
  (12): Dense(
    (Ws): ModuleList(
      (0): Conv2d(16, 32, kernel_size=(2, 2), stride=(2, 2))
      (1): None
      (2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (13): ReLU()
  (14): Dense(
    (Ws): ModuleList(
      (0): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    )
  )
  (15): ReLU()
  (16): Dense(
    (Ws): ModuleList(
      (0): Conv2d(32, 64, kernel_size=(2, 2), stride=(2, 2))
      (1): None
      (2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (17): ReLU()
  (18): Flatten()
  (19): Linear(in_features=4096, out_features=1000, bias=True)
  (20): ReLU()
  (21): Linear(in_features=1000, out_features=10, bias=True)
)
Trying generic MNIST/CIFAR data loader.
Files already downloaded and verified
Internal results will be saved to Verified_ret_[model_resnet]_start=9134_end=9135_iter=20_b=8_timeout=180_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 9134 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.03485840559005737, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.59828854,  0.12625828,  0.10629036,  0.24961883, -0.04826543,
          0.38121414,  0.18064415,  0.13789693, -0.44081759, -0.09459238]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.67715406,  0.04697692,  0.20717074,  0.29121250,  0.10057102,
           0.38928604,  0.36587292,  0.13424551, -0.58664531, -0.27158061],
         [-0.67715406,  0.04697692,  0.20717074,  0.29121250,  0.10057102,
           0.38928604,  0.36587292,  0.13424551, -0.58664531, -0.27158061]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.06644011, 0.34230912, 0.18211530, 0.09807354, 0.28871500,
          0.02341312, 0.25504053, 0.97593135, 0.66086662]]], device='cuda:0')
number of violation:  0
Attack finished in 5.0300 seconds.
PGD attack failed
Model prediction is: tensor([[-0.59828854,  0.12625828,  0.10629036,  0.24961883, -0.04826543,
          0.38121414,  0.18064415,  0.13789693, -0.44081759, -0.09459238]],
       device='cuda:0')
layer /input.4 using sparse-features alpha with shape [1680]; unstable size 1680; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.4 start_node /input.12 using sparse-spec alpha with unstable size 6 total_size 16 output_shape 16
layer /input.4 start_node /39 using sparse-spec alpha with unstable size 8 total_size 16384 output_shape (16, 32, 32)
layer /input.4 start_node /input.24 using sparse-spec alpha with unstable size 97 total_size 16384 output_shape (16, 32, 32)
layer /input.4 start_node /input.48 using sparse-spec alpha with unstable size 7 total_size 4096 output_shape (64, 8, 8)
layer /input.4 start_node /input.52 using sparse-spec alpha with unstable size 46 total_size 1000 output_shape torch.Size([1000])
layer /input.4 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [0]; unstable size 0; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.8 start_node /input.12 using sparse-spec alpha with unstable size 6 total_size 16 output_shape 16
layer /input.8 start_node /39 using sparse-spec alpha with unstable size 8 total_size 16384 output_shape (16, 32, 32)
layer /input.8 start_node /input.24 using sparse-spec alpha with unstable size 97 total_size 16384 output_shape (16, 32, 32)
layer /input.8 start_node /input.48 using sparse-spec alpha with unstable size 7 total_size 4096 output_shape (64, 8, 8)
layer /input.8 start_node /input.52 using sparse-spec alpha with unstable size 46 total_size 1000 output_shape torch.Size([1000])
layer /input.8 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.16 using sparse-features alpha with shape [564]; unstable size 564; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.16 start_node /39 using sparse-spec alpha with unstable size 8 total_size 16384 output_shape (16, 32, 32)
layer /input.16 start_node /input.24 using sparse-spec alpha with unstable size 97 total_size 16384 output_shape (16, 32, 32)
layer /input.16 start_node /input.48 using sparse-spec alpha with unstable size 7 total_size 4096 output_shape (64, 8, 8)
layer /input.16 start_node /input.52 using sparse-spec alpha with unstable size 46 total_size 1000 output_shape torch.Size([1000])
layer /input.16 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.20 using sparse-features alpha with shape [8]; unstable size 8; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.20 start_node /input.24 using sparse-spec alpha with unstable size 97 total_size 16384 output_shape (16, 32, 32)
layer /input.20 start_node /input.48 using sparse-spec alpha with unstable size 7 total_size 4096 output_shape (64, 8, 8)
layer /input.20 start_node /input.52 using sparse-spec alpha with unstable size 46 total_size 1000 output_shape torch.Size([1000])
layer /input.20 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.28 using sparse-features alpha with shape [97]; unstable size 97; total size 16384 (torch.Size([1, 16, 32, 32]))
layer /input.28 start_node /input.48 using sparse-spec alpha with unstable size 7 total_size 4096 output_shape (64, 8, 8)
layer /input.28 start_node /input.52 using sparse-spec alpha with unstable size 46 total_size 1000 output_shape torch.Size([1000])
layer /input.28 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.32 using sparse-features alpha with shape [0]; unstable size 0; total size 8192 (torch.Size([1, 32, 16, 16]))
layer /input.32 start_node /input.48 using sparse-spec alpha with unstable size 7 total_size 4096 output_shape (64, 8, 8)
layer /input.32 start_node /input.52 using sparse-spec alpha with unstable size 46 total_size 1000 output_shape torch.Size([1000])
layer /input.32 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.40 using sparse-features alpha with shape [0]; unstable size 0; total size 8192 (torch.Size([1, 32, 16, 16]))
layer /input.40 start_node /input.48 using sparse-spec alpha with unstable size 7 total_size 4096 output_shape (64, 8, 8)
layer /input.40 start_node /input.52 using sparse-spec alpha with unstable size 46 total_size 1000 output_shape torch.Size([1000])
layer /input.40 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.44 using sparse-features alpha with shape [0]; unstable size 0; total size 4096 (torch.Size([1, 64, 8, 8]))
layer /input.44 start_node /input.48 using sparse-spec alpha with unstable size 7 total_size 4096 output_shape (64, 8, 8)
layer /input.44 start_node /input.52 using sparse-spec alpha with unstable size 46 total_size 1000 output_shape torch.Size([1000])
layer /input.44 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /56 using sparse-features alpha with shape [7]; unstable size 7; total size 4096 (torch.Size([1, 64, 8, 8]))
layer /56 start_node /input.52 using sparse-spec alpha with unstable size 46 total_size 1000 output_shape torch.Size([1000])
layer /56 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
layer /66 using sparse-features alpha with shape [46]; unstable size 46; total size 1000 (torch.Size([1, 1000]))
layer /66 start_node /67 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.79195011,  0.05841744,  0.16422278,  0.04038174,  0.26246741,
         -0.00224352,  0.10815077,  0.55881691,  0.13666272]], device='cuda:0') None

all verified at 2th iter
best_l after optimization: 2.1479461193084717 with beta sum per layer: []
alpha/beta optimization time: 3.987149238586426
initial alpha-CROWN bounds: tensor([[0.79460847, 0.06122673, 0.16644686, 0.04168466, 0.26584724, 0.00162512,
         0.11085549, 0.56245124, 0.14320028]], device='cuda:0')
Worst class: (+ rhs) 0.0016251206398010254
verified with init bound!
Result: safe-incomplete in 13.1537 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):13.153548073817968, max time: 13.153679609298706
mean time for verified SAFE instances(total 1): 13.153679609298706, max time: 13.153679609298706
safe-incomplete (total 1), index: [0]
