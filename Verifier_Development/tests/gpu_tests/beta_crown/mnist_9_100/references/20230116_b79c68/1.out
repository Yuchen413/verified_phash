Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_9_100
  path: mnist_9_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 553
  end: 554
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 1080.0
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Mon Jan 16 00:24:25 2023 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=100, bias=True)
  (12): ReLU()
  (13): Linear(in_features=100, out_features=100, bias=True)
  (14): ReLU()
  (15): Linear(in_features=100, out_features=100, bias=True)
  (16): ReLU()
  (17): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_9_100]_start=553_end=554_iter=20_b=1024_timeout=1080.0_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 553 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-0.48489481, -1.39149702,  0.13246235,  0.24095291, -3.24257994,
          2.77433348,  0.52672923, -2.47505641,  7.48759794, -0.99461991]],
       device='cuda:0')
layer /28 using sparse-features alpha with shape [26]; unstable size 26; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [44]; unstable size 44; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [69]; unstable size 69; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([100]); unstable size 94; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-147.42314148, -168.20391846, -182.17903137, -186.23890686,
         -212.79032898, -158.79869080, -177.61752319, -221.10942078,
         -221.14599609]], device='cuda:0') None
best_l after optimization: -744.889404296875 with beta sum per layer: []
alpha/beta optimization time: 11.238462209701538
initial alpha-CROWN bounds: tensor([[-60.02152252, -72.36055756, -87.34172058, -85.40193939, -95.53430939,
         -72.72978210, -80.79795837, -96.67407990, -94.02754211]],
       device='cuda:0')
Worst class: (+ rhs) -96.67407989501953
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.48489481, -1.39149702,  0.13246235,  0.24095291, -3.24257994,
          2.77433348,  0.52672923, -2.47505641,  7.48759794, -0.99461991]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.08648968, -2.06381464, -0.61093831,  0.07889771, -3.13544846,
           4.11655521,  1.32141042, -2.94608855,  6.50336695, -0.54934031],
         [-0.08648968, -2.06381464, -0.61093831,  0.07889771, -3.13544846,
           4.11655521,  1.32141042, -2.94608855,  6.50336695, -0.54934031]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[6.58985662, 8.56718159, 7.11430550, 6.42446899, 9.63881493,
          2.38681173, 5.18195629, 9.44945526, 7.05270720]]], device='cuda:0')
number of violation:  0
Attack finished in 0.7032 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /28 using sparse-features alpha with shape [26]; unstable size 26; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [44]; unstable size 44; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [69]; unstable size 69; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([100]); unstable size 94; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 864.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_28', 'lay4_94', 'lay4_93', 'lay4_57', 'lay4_72', 'lay4_54', 'lay4_27', 'lay4_90', 'lay4_48', 'lay4_19', 'lay4_41', 'lay4_16', 'lay4_24', 'lay4_91', 'lay4_50', 'lay4_1', 'lay4_39', 'lay4_4', 'lay4_45', 'lay4_13', 'lay4_96', 'lay4_36', 'lay4_0', 'lay4_15', 'lay4_35', 'lay4_75', 'lay4_18', 'lay4_2', 'lay4_92', 'lay4_60', 'lay4_99', 'lay4_40', 'lay4_38', 'lay4_71', 'lay4_76', 'lay4_34', 'lay4_42', 'lay4_25', 'lay4_68', 'lay4_32', 'lay4_64', 'lay4_98', 'lay4_6', 'lay4_26'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/data_utils.py:255: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1432s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1900s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1734s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.16127169208099257,0.8770120647536238] (2,-1; 2,-1), time: 0.5392s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-0.9435748365732545,0.15409195770204898] (2,-1; 2,-1), time: 0.6016s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-0.2812106278871024,0.8794508468518673] (2,-1; 2,-1), time: 0.6709s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[1e-05,1.6344803124527691] (15,-1; 2,-1), time: 0.7937s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.3365354062113641,1.4394257208906158] (2,-1; 2,-1), time: 0.9251s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[-1.0797680522729018,0.4009385522345174] (2,-1; 2,-1), time: 0.6166s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[-0.8057025686060872,0.49486275740481567] (2,-1; 2,-1), time: 1.1264s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.6795443523232916,0.05455397794379864] (2,-1; 2,-1), time: 1.2073s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-1.1324817075806222,0.17837932876095436] (2,-1; 2,-1), time: 1.2865s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_90, [-inf,inf]=>[-1.7849900124611495,0.004193039319738634] (2,-1; 2,-1), time: 1.3004s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-0.9125096001294021,0.014382829210183135] (2,-1; 2,-1), time: 1.1237s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-0.9925815009776952,0.09745592362584875] (2,-1; 2,-1), time: 1.3550s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[0.00042972350324393645,1.0371843966581609] (2,-1; 2,-1), time: 1.4188s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_0, [-inf,inf]=>[-0.7907527612902845,0.8779443677376488] (2,-1; 2,-1), time: 0.6611s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1224s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.0932s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1216s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_72, [-inf,inf]=>[-1.150612714888913,0.24434390198542927] (2,-1; 2,-1), time: 1.6405s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-0.38201772177577886,0.7066500121856568] (2,-1; 2,-1), time: 1.6999s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-0.7324772652818818,0.12028916997752154] (2,-1; 2,-1), time: 0.5710s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[1e-05,1.2516531561273039] (15,-1; 2,-1), time: 0.4424s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[1e-05,1.026685755555075] (15,-1; 2,-1), time: 1.7775s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_36, [-inf,inf]=>[-0.874351706943283,0.5714869098304858] (2,-1; 2,-1), time: 1.1943s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-0.11549682195699412,1.3685119787349362] (2,-1; 2,-1), time: 1.4126s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.30851253676883544,0.9253713651468721] (2,-1; 2,-1), time: 0.6855s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[1e-05,1.370924471808543] (15,-1; 2,-1), time: 0.3433s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1181s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.0985s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[1e-05,1.6538041187730952] (15,-1; 2,-1), time: 0.2817s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[1e-05,1.4473036021366958] (15,-1; 2,-1), time: 0.3349s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-0.10906689510435248,0.8905389486048295] (2,-1; 2,-1), time: 1.5283s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-0.3665210421294706,0.7677515806919394] (2,-1; 2,-1), time: 0.5588s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_35, [-inf,inf]=>[-0.8051690612878829,0.2570489827757798] (2,-1; 2,-1), time: 1.3159s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.09140165827172828,0.9391699493409378] (2,-1; 2,-1), time: 0.7751s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_60, [-inf,inf]=>[-0.706874692414006,0.2376270895394695] (2,-1; 2,-1), time: 1.0645s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_25, [-inf,inf]=>[1e-05,1.180067658962486] (15,-1; 2,-1), time: 0.7686s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.7411975178581871,0.4243810808392289] (2,-1; 2,-1), time: 1.5700s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.2861559593972878,0.4667415520283591] (2,-1; 2,-1), time: 1.3309s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-0.014537188817303663,1.008588253461762] (2,-1; 2,-1), time: 1.3150s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[1e-05,1.0693629294828586] (15,-1; 2,-1), time: 0.9494s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-0.13456133463989667,1.0798040562384594] (2,-1; 2,-1), time: 1.2209s, #vars: 1037, #constrs: 278, improved: True
PGD done for relu layer 2
MIP improved 44 nodes out of 44 unstable nodes, lb improved 10.839727401733398, ub improved 9.184976577758789, time 4.3524
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_74', 'lay6_39', 'lay6_61', 'lay6_28', 'lay6_75', 'lay6_90', 'lay6_92', 'lay6_70', 'lay6_51', 'lay6_88', 'lay6_82', 'lay6_73', 'lay6_66', 'lay6_45', 'lay6_0', 'lay6_60', 'lay6_33', 'lay6_71', 'lay6_16', 'lay6_57', 'lay6_40', 'lay6_47', 'lay6_35', 'lay6_50', 'lay6_36', 'lay6_89', 'lay6_46', 'lay6_37', 'lay6_53', 'lay6_72', 'lay6_23', 'lay6_12', 'lay6_11', 'lay6_17', 'lay6_98', 'lay6_80', 'lay6_43', 'lay6_49', 'lay6_65', 'lay6_79', 'lay6_3', 'lay6_15', 'lay6_14', 'lay6_9', 'lay6_4', 'lay6_94', 'lay6_67', 'lay6_38', 'lay6_63', 'lay6_7', 'lay6_81', 'lay6_41', 'lay6_52', 'lay6_64', 'lay6_18', 'lay6_24', 'lay6_84', 'lay6_62', 'lay6_77', 'lay6_68', 'lay6_21', 'lay6_31', 'lay6_27', 'lay6_97', 'lay6_55', 'lay6_58', 'lay6_86'] filter: 1.0
Solving MIP for lay6_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3188s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3621s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3856s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1291s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7098s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3543s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6289s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2842s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1295s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-1.1025561072205756,0.14671988271342573] (2,-1; 2,-1), time: 3.2396s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.705248205098954,0.32451005718027115] (2,-1; 2,-1), time: 3.2642s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.186658515678743,0.940539103857259] (2,-1; 2,-1), time: 3.8023s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-0.1199084519113986,0.9860907819665319] (2,-1; 2,-1), time: 3.8759s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.6822410662467918,0.06303427791869058] (2,-1; 2,-1), time: 4.1710s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-1.2394423223394824,0.16628659850210498] (2,-1; 2,-1), time: 3.6552s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-0.031550018987585096,0.7609378316308315] (2,-1; 2,-1), time: 3.4996s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-0.48057565092252374,0.17596324047706205] (2,-1; 2,-1), time: 3.9050s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.5146370741490505,0.21058452666400887] (2,-1; 2,-1), time: 3.8778s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1328s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.22484930778538367,0.4551808951958788] (2,-1; 2,-1), time: 4.3898s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1313s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3084s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-0.7389405938531324,0.2311823752604254] (2,-1; 2,-1), time: 4.8692s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-0.19329426481744186,0.6941523262276029] (2,-1; 2,-1), time: 3.9201s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6629s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[1e-05,1.5895816907948455] (15,-1; 2,-1), time: 1.8719s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9299s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.28183141717451315,0.2320807334570557] (2,-1; 2,-1), time: 6.1288s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[-0.17394097430366903,0.7558011509967995] (2,-1; 2,-1), time: 6.1450s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-0.13869325558079548,0.8526517930716158] (2,-1; 2,-1), time: 4.5997s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3100s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3489s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-0.0063459296012351,0.7516870199528349] (2,-1; 2,-1), time: 3.4895s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-0.4609517279892043,0.12235214733226735] (2,-1; 2,-1), time: 4.5903s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.07264797309336798,1.3296386758138383] (2,-1; 2,-1), time: 3.4896s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-0.5243235850876383,0.23250922987913036] (2,-1; 2,-1), time: 3.2232s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-0.041856249969464854,1.3471143255106621] (2,-1; 2,-1), time: 4.3858s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1262s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9506s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.026186036044342532,1.0904875477790794] (2,-1; 2,-1), time: 3.3391s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[1e-05,1.5462986930717224] (15,-1; 2,-1), time: 1.5752s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-0.41554895982316953,0.02004154074050743] (2,-1; 2,-1), time: 4.4885s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1286s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2882s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-0.6149972461001425,0.7259746932908556] (2,-1; 2,-1), time: 3.5949s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[1e-05,1.3933310630071083] (15,-1; 2,-1), time: 1.4713s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1633s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1765s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1336s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-0.14559963847822854,0.818899076319278] (2,-1; 2,-1), time: 3.5622s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[1e-05,2.04362796607027] (15,-1; 2,-1), time: 1.9555s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-0.7312759721490348,0.059040916924348576] (2,-1; 2,-1), time: 5.6814s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1548s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-0.16608664287813518,0.41127729583331196] (2,-1; 2,-1), time: 3.7051s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.05990129788495083,0.8248033993725342] (2,-1; 2,-1), time: 4.2941s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[1e-05,0.7014113721865294] (15,-1; 2,-1), time: 4.7846s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-0.3471479430215307,0.4875383082822798] (2,-1; 2,-1), time: 3.3818s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[1e-05,1.5497770678087461] (15,-1; 2,-1), time: 1.7903s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[1e-05,0.7866684837961248] (15,-1; 2,-1), time: 1.8261s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[1e-05,0.9139591178872756] (15,-1; 2,-1), time: 5.5488s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-0.10323071611862589,0.6004599281554911] (2,-1; 2,-1), time: 3.7933s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[-0.5819758192264811,0.6645728641581887] (2,-1; 2,-1), time: 3.5581s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.6372378016945933,0.17463270515249124] (2,-1; 2,-1), time: 4.6173s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-0.7445244762631589,0.1308787073538166] (2,-1; 2,-1), time: 6.0737s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-0.8030452878367715,0.18988478526444266] (2,-1; 2,-1), time: 3.5274s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.7515303968802555,0.08060420619048314] (2,-1; 2,-1), time: 8.5556s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[1e-05,1.5529834551958217] (15,-1; 2,-1), time: 5.0284s, #vars: 1191, #constrs: 459, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(93, 1), (27, -1), (19, 1), (24, 1), (50, -1), (39, -1), (92, 1), (99, -1), (38, -1), (71, -1), (42, 1), (25, 1), (32, 1), (64, 1), (98, -1), (6, -1), (26, 1)]
best_l after optimization: -350.3948669433594 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.183810710906982
alpha-CROWN with intermediate bounds by MIP: tensor([[-28.20450783, -33.82584000, -41.11054611, -39.83738327, -44.88205719,
         -34.56341553, -38.74330521, -45.05676651, -44.17105103]],
       device='cuda:0') None
MIP improved 67 nodes out of 67 unstable nodes, lb improved 19.728059768676758, ub improved 26.821134567260742, time 14.9226
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_67', 'lay8_85', 'lay8_59', 'lay8_36', 'lay8_81', 'lay8_71', 'lay8_2', 'lay8_75', 'lay8_21', 'lay8_31', 'lay8_64', 'lay8_72', 'lay8_12', 'lay8_69', 'lay8_27', 'lay8_62', 'lay8_82', 'lay8_83', 'lay8_16', 'lay8_96', 'lay8_39', 'lay8_63', 'lay8_95', 'lay8_29', 'lay8_97', 'lay8_56', 'lay8_5', 'lay8_41', 'lay8_79', 'lay8_99', 'lay8_11', 'lay8_24', 'lay8_88', 'lay8_76', 'lay8_3', 'lay8_6', 'lay8_55', 'lay8_73', 'lay8_38', 'lay8_30', 'lay8_45', 'lay8_54', 'lay8_19', 'lay8_43', 'lay8_47', 'lay8_14', 'lay8_48', 'lay8_22', 'lay8_34', 'lay8_37', 'lay8_32', 'lay8_10', 'lay8_58', 'lay8_98', 'lay8_70', 'lay8_78', 'lay8_18', 'lay8_25', 'lay8_9', 'lay8_50', 'lay8_46', 'lay8_77', 'lay8_44', 'lay8_66', 'lay8_8', 'lay8_13', 'lay8_4', 'lay8_23', 'lay8_52', 'lay8_20', 'lay8_49', 'lay8_15', 'lay8_94', 'lay8_92', 'lay8_28', 'lay8_80', 'lay8_57', 'lay8_26', 'lay8_74', 'lay8_1', 'lay8_68', 'lay8_84', 'lay8_51', 'lay8_35', 'lay8_40', 'lay8_86', 'lay8_90', 'lay8_53', 'lay8_87', 'lay8_0', 'lay8_91'] filter: 1.0
Solving MIP for lay8_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1977s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2022s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2025s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2140s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2134s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2659s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1718s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2126s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2252s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1865s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8195s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[1e-05,0.53532915781949] (15,-1; 2,-1), time: 4.8502s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1331s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.8814669976340138,0.25665790092766155] (2,-1; 2,-1), time: 7.4099s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1881s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-0.8013222339271026,1.0089632268585218] (2,-1; 2,-1), time: 8.9342s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1277s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8442s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-0.4000681754070378,0.2558148661282611] (2,-1; 2,-1), time: 10.3316s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4764s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4576s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.3085s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1536s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.11551162039184922,0.3619846732649018] (2,-1; 2,-1), time: 14.7364s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1919s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-0.8267587698353238,0.6002987415800207] (2,-1; 2,-1), time: 7.3650s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-1.4313155081783038,0.17479886359840482] (2,-1; 9,-1), time: 16.0820s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[-0.2742268867539068,0.40544428091042367] (2,-1; 2,-1), time: 16.2496s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-0.72747722303169,0.29894666302000694] (2,-1; 2,-1), time: 11.7526s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1580s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1720s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-0.014008953630514168,1.144024258384822] (2,-1; 2,-1), time: 17.5008s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-1.5843107558232228,0.07607081226444676] (9,-1; 2,-1), time: 18.0960s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.8976455536332678,0.07177950551251429] (2,-1; 9,-1), time: 18.6706s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1856s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-0.1289149481166284,0.6398552885582276] (9,-1; 2,-1), time: 18.6969s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1567s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-0.2443463625875043,0.2231237635113726] (9,-1; 2,-1), time: 18.5037s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-0.06163615136953345,0.7218891652976516] (2,-1; 9,-1), time: 19.6652s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.8471s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-0.2103597273254678,0.6209581386095264] (2,-1; 9,-1), time: 21.4452s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.3024s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-0.3763450750288166,0.3131963211695193] (9,-1; 2,-1), time: 24.2793s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1578s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7800s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[-0.8759124302341459,0.09400263197876728] (2,-1; 2,-1), time: 9.1326s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[1e-05,1.116098251639538] (15,-1; 2,-1), time: 7.5057s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.1877151695842446,0.2671596993669996] (9,-1; 2,-1), time: 17.7434s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-0.4280720513939198,0.15954517307462768] (9,-1; 2,-1), time: 18.5826s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.572022469705497,0.040480019891637284] (2,-1; 2,-1), time: 8.9223s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-1.042256278081003,0.16182963438821169] (2,-1; 2,-1), time: 16.4628s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-0.3651358932742664,0.3460680462288983] (2,-1; 9,-1), time: 20.9914s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5511s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[1e-05,1.7380000938617315] (15,-1; 9,-1), time: 15.3953s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[1e-05,0.7374427748856441] (15,-1; 9,-1), time: 15.1676s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.37314428738002725,0.17879042310976184] (9,-1; 2,-1), time: 18.1361s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[1e-05,0.6580690612423026] (15,-1; 9,-1), time: 18.4412s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1578s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.4226936925248108,0.34231259748975806] (9,-1; 2,-1), time: 19.2443s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1812s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1539s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1579s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[0.001845210210611013,1.444431847835499] (2,-1; 9,-1), time: 17.6217s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[1e-05,1.2697234649390496] (15,-1; 2,-1), time: 2.5092s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.6314746524658353,0.2376027210642454] (2,-1; 2,-1), time: 7.4125s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1813s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7596s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1822s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1608s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[1e-05,1.4584917417511565] (15,-1; 2,-1), time: 2.1374s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1508s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[1e-05,1.9762156645144626] (15,-1; 2,-1), time: 2.9369s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[1e-05,0.9957294811394083] (15,-1; 2,-1), time: 4.3888s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[1e-05,0.9614588808477624] (15,-1; 2,-1), time: 3.4255s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-0.3493183076339035,0.711689249547278] (2,-1; 2,-1), time: 11.4957s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[1e-05,1.4527369804493198] (15,-1; 2,-1), time: 3.1791s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-0.16115270033095416,0.37510993222326866] (2,-1; 9,-1), time: 21.4273s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[1e-05,2.513629713964131] (15,-1; 2,-1), time: 2.9528s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[1e-05,1.722946685746311] (15,-1; 2,-1), time: 3.4841s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.07070248304968482,0.39738064922502947] (9,-1; 2,-1), time: 18.4008s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[1e-05,1.8618956375248978] (15,-1; 2,-1), time: 4.7182s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[1e-05,1.0235086900623962] (15,-1; 2,-1), time: 7.3910s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[1e-05,0.6846539897614004] (15,-1; 2,-1), time: 9.7233s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-0.526417486041838,0.7074028992825646] (9,-1; 2,-1), time: 18.3104s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.49946327240143235,0.019392417415496004] (9,-1; 2,-1), time: 18.8715s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.16858823601942963,0.4637255674388094] (2,-1; 9,-1), time: 18.0591s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-0.14984954716003265,0.38914955132047596] (2,-1; 2,-1), time: 13.5703s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-0.6335940778320275,0.01444579907203194] (2,-1; 9,-1), time: 24.8969s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[1e-05,0.9652867969699892] (15,-1; 2,-1), time: 14.6470s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[1e-05,1.6360838481551532] (15,-1; 9,-1), time: 15.1561s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.4358389174117442,0.1387387266611455] (2,-1; 2,-1), time: 16.5931s, #vars: 1359, #constrs: 661, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(74, -1), (39, -1), (28, -1), (88, -1), (82, -1), (66, -1), (45, -1), (16, -1), (50, -1), (53, -1), (23, -1), (12, 1), (11, -1), (17, -1), (80, -1), (79, -1), (14, 1), (9, 1), (4, -1), (38, 1), (7, -1), (52, -1), (64, 1), (24, 1), (62, -1), (77, -1), (68, -1), (21, 1), (31, 1), (27, -1), (97, -1), (58, 1), (86, -1)]
best_l after optimization: -131.44313049316406 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.804203271865845
alpha-CROWN with intermediate bounds by MIP: tensor([[-10.59159184, -12.49999142, -15.18821716, -14.58704948, -16.41033173,
         -13.64382553, -15.84755039, -16.32752228, -16.34705734]],
       device='cuda:0') None
MIP improved 91 nodes out of 91 unstable nodes, lb improved 38.216773986816406, ub improved 59.68644714355469, time 53.7851
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_74', 'lay10_99', 'lay10_46', 'lay10_97', 'lay10_25', 'lay10_49', 'lay10_27', 'lay10_8', 'lay10_10', 'lay10_24', 'lay10_60', 'lay10_30', 'lay10_22', 'lay10_58', 'lay10_98', 'lay10_42', 'lay10_70', 'lay10_85', 'lay10_88', 'lay10_66', 'lay10_13', 'lay10_76', 'lay10_72', 'lay10_75', 'lay10_80', 'lay10_41', 'lay10_63', 'lay10_5', 'lay10_86', 'lay10_55', 'lay10_44', 'lay10_18', 'lay10_57', 'lay10_9', 'lay10_87', 'lay10_82', 'lay10_23', 'lay10_17', 'lay10_52', 'lay10_2', 'lay10_14', 'lay10_77', 'lay10_43', 'lay10_29', 'lay10_4', 'lay10_7', 'lay10_28', 'lay10_51', 'lay10_59', 'lay10_35', 'lay10_20', 'lay10_95', 'lay10_68', 'lay10_36', 'lay10_96', 'lay10_38', 'lay10_69', 'lay10_50', 'lay10_26', 'lay10_40', 'lay10_21', 'lay10_65', 'lay10_48', 'lay10_73', 'lay10_92', 'lay10_89', 'lay10_79', 'lay10_81', 'lay10_93', 'lay10_45', 'lay10_1', 'lay10_16', 'lay10_53', 'lay10_94', 'lay10_91', 'lay10_39', 'lay10_0', 'lay10_33', 'lay10_54', 'lay10_12', 'lay10_71', 'lay10_3', 'lay10_47', 'lay10_6', 'lay10_34', 'lay10_78', 'lay10_15', 'lay10_31', 'lay10_90', 'lay10_32', 'lay10_84', 'lay10_11', 'lay10_64', 'lay10_61', 'lay10_56', 'lay10_37', 'lay10_83', 'lay10_19', 'lay10_67', 'lay10_62'] filter: 1.0
Solving MIP for lay10_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2900s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3241s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3451s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3498s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3498s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3536s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3611s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3610s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3677s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3921s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4239s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1900s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2775s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2682s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2841s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2757s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2389s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2358s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6530s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6176s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2006s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2163s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7427s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.2997s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.7594s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.1700s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[1e-05,1.2048518758110167] (15,-1; 9,-1), time: 15.2821s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[1e-05,0.9957181463048012] (15,-1; 9,-1), time: 15.2459s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-0.7080903718495575,0.6195393297906217] (2,-1; 9,-1), time: 21.1057s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2516s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.2965s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2507s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2364s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1807s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[-0.4818516640302834,0.34761378197726095] (9,-1; 2,-1), time: 22.5230s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[-0.3906895073998657,1.626862895789416] (2,-1; 9,-1), time: 23.4552s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2050s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2283s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[1e-05,0.7071068553404226] (15,-1; 9,-1), time: 22.8562s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.19777028710748631,0.4724587090943507] (9,-1; 2,-1), time: 24.8801s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1937s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-0.7280822999266687,0.6903738225590217] (2,-1; 9,-1), time: 26.0935s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-0.13717714556283628,1.4247114839859154] (9,-1; 9,-1), time: 30.0138s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-0.6987688891757842,0.4848850005679884] (9,-1; 2,-1), time: 24.4333s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-0.17491940863349992,0.6018673212337421] (9,-1; 9,-1), time: 30.0184s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[1e-05,0.8989441612023412] (15,-1; 9,-1), time: 15.2347s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-0.4753481936295054,0.09266460604362874] (9,-1; 9,-1), time: 30.0230s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.3001430075154821,0.30588264987858244] (9,-1; 9,-1), time: 30.0264s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[-0.6274752371604283,0.19856366344469842] (9,-1; 9,-1), time: 30.0163s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5253s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2076s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.4579771314079521,0.5209847688354189] (9,-1; 9,-1), time: 30.0135s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2096s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[1e-05,1.9629796240103743] (15,-1; 2,-1), time: 5.9079s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[1e-05,1.9662131404939256] (15,-1; 2,-1), time: 10.9562s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.2736s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[1e-05,0.7374017807285488] (15,-1; 9,-1), time: 15.1885s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-0.06264061128057394,0.9891697517250507] (9,-1; 9,-1), time: 30.0215s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-0.9880839059216042,0.1909802602890143] (2,-1; 9,-1), time: 21.0275s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-0.08715992543476983,1.7124444373391594] (2,-1; 9,-1), time: 25.2016s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2586s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[1e-05,0.7180759582416449] (15,-1; 9,-1), time: 15.1857s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-0.33710654005176954,0.6077751583629993] (9,-1; 9,-1), time: 30.0103s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[1e-05,1.533040060035238] (15,-1; 9,-1), time: 15.2436s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[1e-05,1.1829145053768928] (15,-1; 9,-1), time: 15.2024s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-0.5486088951729831,0.23769320280203288] (9,-1; 9,-1), time: 30.0213s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2393s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-0.2337925604004026,0.4332480335650214] (9,-1; 9,-1), time: 30.0248s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1966s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-0.4732868786582676,0.31244356156044784] (9,-1; 9,-1), time: 30.0123s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-0.11447643020619343,1.0443491434483443] (9,-1; 9,-1), time: 30.0103s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[1e-05,1.5772418295682766] (15,-1; 2,-1), time: 4.7758s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2046s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-0.6972772258525852,0.1625899585032184] (9,-1; 9,-1), time: 30.0135s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-0.15019450706904452,0.884792177752149] (9,-1; 9,-1), time: 30.0090s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2421s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-0.3575819014692091,0.3058046935830082] (2,-1; 9,-1), time: 27.0571s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[1e-05,1.437026458643524] (15,-1; 2,-1), time: 9.7406s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2299s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-0.6253086847699704,0.07017752715441669] (9,-1; 9,-1), time: 30.0190s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[1e-05,1.7974583365200025] (15,-1; 9,-1), time: 15.2097s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[1e-05,1.1582945808913265] (15,-1; 2,-1), time: 8.5941s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[-0.4908997776287435,0.3606028512783375] (9,-1; 9,-1), time: 30.0116s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-0.35372087395288865,0.14144021390319936] (9,-1; 9,-1), time: 30.0231s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[1e-05,1.6231217095499804] (15,-1; 9,-1), time: 15.2092s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-0.19392357711249764,0.6821152471923193] (9,-1; 9,-1), time: 30.0123s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5643s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[1e-05,2.8375990016514123] (15,-1; 2,-1), time: 7.5916s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[1e-05,1.7805706734916293] (15,-1; 9,-1), time: 15.2243s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[1e-05,1.8125763233007357] (15,-1; 9,-1), time: 15.2335s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-0.624406026248873,0.2179688474248386] (9,-1; 9,-1), time: 30.0670s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[-0.3387759647180166,0.5961007771263839] (9,-1; 9,-1), time: 30.0188s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[1e-05,0.870843310956631] (15,-1; 9,-1), time: 15.5772s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-0.2403781369486079,0.2396946959353787] (9,-1; 9,-1), time: 30.0302s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[1e-05,3.0679600705003356] (15,-1; 9,-1), time: 15.2265s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,1.1839539140121886] (15,-1; 9,-1), time: 15.2059s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-0.0150101661905691,0.42074215741648086] (9,-1; 9,-1), time: 30.0099s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-0.735769829886575,0.06093107110339158] (9,-1; 9,-1), time: 30.0122s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-0.0885595052801544,0.49489178979675835] (9,-1; 9,-1), time: 30.0094s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-0.22701079448968306,0.13523292297663517] (9,-1; 9,-1), time: 30.0084s, #vars: 1527, #constrs: 863, improved: True
PGD done for relu layer 5
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(59, -1), (36, -1), (81, -1), (2, 1), (75, -1), (31, -1), (72, -1), (12, -1), (27, -1), (82, -1), (83, -1), (96, -1), (29, -1), (41, -1), (99, -1), (24, -1), (88, -1), (76, -1), (6, -1), (73, -1), (30, -1), (54, -1), (43, -1), (47, 1), (14, -1), (34, -1), (37, -1), (32, 1), (10, -1), (58, 1), (70, 1), (78, 1), (18, -1), (9, -1), (4, -1), (23, -1), (52, 1), (20, 1), (49, 1), (15, -1), (94, -1), (92, -1), (28, -1), (80, 1), (57, 1), (26, 1), (1, -1), (84, -1), (51, -1), (35, 1), (40, 1), (86, -1), (90, 1), (53, 1), (87, 1), (0, 1), (91, 1)]
best_l after optimization: -25.118682861328125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.41848111152649
alpha-CROWN with intermediate bounds by MIP: tensor([[-1.65882921, -2.03749704, -3.11982632, -1.58013105, -3.14511824,
         -4.09625483, -5.48671627, -1.42817593, -2.56613493]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 78.92868041992188, ub improved 137.6576385498047, time 98.3715
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=100, bias=True) 5 12 torch.Size([100])
sorted candidates ['lay12_83', 'lay12_13', 'lay12_2', 'lay12_68', 'lay12_17', 'lay12_97', 'lay12_86', 'lay12_4', 'lay12_24', 'lay12_52', 'lay12_99', 'lay12_53', 'lay12_11', 'lay12_27', 'lay12_62', 'lay12_94', 'lay12_73', 'lay12_63', 'lay12_34', 'lay12_15', 'lay12_3', 'lay12_59', 'lay12_26', 'lay12_98', 'lay12_90', 'lay12_78', 'lay12_49', 'lay12_85', 'lay12_95', 'lay12_10', 'lay12_44', 'lay12_72', 'lay12_18', 'lay12_39', 'lay12_7', 'lay12_74', 'lay12_40', 'lay12_30', 'lay12_93', 'lay12_47', 'lay12_0', 'lay12_38', 'lay12_54', 'lay12_57', 'lay12_32', 'lay12_61', 'lay12_43', 'lay12_48', 'lay12_58', 'lay12_1', 'lay12_71', 'lay12_87', 'lay12_60', 'lay12_76', 'lay12_50', 'lay12_92', 'lay12_75', 'lay12_42', 'lay12_80', 'lay12_82', 'lay12_29', 'lay12_20', 'lay12_77', 'lay12_21', 'lay12_91', 'lay12_67', 'lay12_25', 'lay12_8', 'lay12_96', 'lay12_35', 'lay12_5', 'lay12_28', 'lay12_69', 'lay12_31', 'lay12_46', 'lay12_41', 'lay12_23', 'lay12_36', 'lay12_51', 'lay12_89', 'lay12_84', 'lay12_65', 'lay12_37', 'lay12_56', 'lay12_12', 'lay12_88', 'lay12_19', 'lay12_22', 'lay12_9', 'lay12_66', 'lay12_33', 'lay12_70', 'lay12_45', 'lay12_81', 'lay12_64', 'lay12_55', 'lay12_79', 'lay12_14', 'lay12_6', 'lay12_16'] filter: 1.0
Solving MIP for lay12_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3816s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3887s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3984s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4127s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4118s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4154s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4158s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4489s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4784s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3338s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_62, [-inf,inf]=>[1e-05,0.9168321315279466] (15,-1; 9,-1), time: 15.3188s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_94, [-inf,inf]=>[1e-05,1.282617854243876] (15,-1; 9,-1), time: 15.3204s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_27, [-inf,inf]=>[-0.38270253462340936,1.0440205909702422] (9,-1; 9,-1), time: 30.0126s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_4, [-inf,inf]=>[-0.8373231361445821,0.32557532054137883] (9,-1; 9,-1), time: 30.0242s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_24, [-inf,inf]=>[-0.5924398766765423,1.1944321238423266] (9,-1; 9,-1), time: 30.0283s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_86, [-inf,inf]=>[-0.320295157469625,1.2067677968325268] (9,-1; 9,-1), time: 30.0304s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_17, [-inf,inf]=>[-1.0748659985112368,0.009879807851398147] (9,-1; 9,-1), time: 30.1534s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2967s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3200s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_63, [-inf,inf]=>[-0.5751741129723298,0.1345239362740717] (9,-1; 9,-1), time: 30.0162s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_15, [-inf,inf]=>[-0.5119002953462326,1.177785907871606] (9,-1; 9,-1), time: 30.0164s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_34, [-inf,inf]=>[-0.6739134420705918,0.227512470926428] (9,-1; 9,-1), time: 30.0252s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_59, [-inf,inf]=>[-0.7910963708549005,0.7472340977075026] (9,-1; 9,-1), time: 30.0147s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_98, [-inf,inf]=>[-0.35783464632606826,1.568222439312573] (9,-1; 9,-1), time: 30.0202s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_26, [-inf,inf]=>[-0.8343968453362426,0.10324573759761392] (9,-1; 9,-1), time: 30.0652s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_90, [-inf,inf]=>[-1.0550569149474591,0.20660911215929934] (9,-1; 9,-1), time: 30.0198s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_3, [-inf,inf]=>[-0.5661830137361805,0.04994115576891031] (9,-1; 9,-1), time: 30.1695s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2895s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3214s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_78, [-inf,inf]=>[-0.6081616982970757,0.05197520951184732] (9,-1; 9,-1), time: 30.0189s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3271s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2944s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3239s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2781s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3181s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2693s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.8320s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_49, [-inf,inf]=>[-0.7089343403260239,0.08083801988802235] (9,-1; 9,-1), time: 30.0184s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_85, [-inf,inf]=>[-0.6737546810268344,0.2354882719792921] (9,-1; 9,-1), time: 30.0525s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_18, [-inf,inf]=>[1e-05,1.6828797831552242] (15,-1; 9,-1), time: 15.2923s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2884s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_87, [-inf,inf]=>[1e-05,1.1227195183027106] (15,-1; 9,-1), time: 15.3280s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2817s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7892s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3214s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_60, [-inf,inf]=>[1e-05,1.4576253778199972] (15,-1; 9,-1), time: 15.2986s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_95, [-inf,inf]=>[-0.5669092706301556,0.24505023114950536] (9,-1; 9,-1), time: 30.0269s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_72, [-inf,inf]=>[-0.16732387783592242,0.7966985855999782] (9,-1; 9,-1), time: 30.0638s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_7, [-inf,inf]=>[-0.5960432713943491,0.10095147132630553] (9,-1; 9,-1), time: 30.0299s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_40, [-inf,inf]=>[-0.26040096165839316,0.4286646638743746] (9,-1; 9,-1), time: 30.0169s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_93, [-inf,inf]=>[-0.5346730337549915,0.17760673595576476] (9,-1; 9,-1), time: 30.0133s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_0, [-inf,inf]=>[-0.3293014501826166,0.20269017514149332] (9,-1; 9,-1), time: 30.0357s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_38, [-inf,inf]=>[-0.6661459245347114,0.09265839515866998] (9,-1; 9,-1), time: 30.0183s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_47, [-inf,inf]=>[-0.7471298245365713,0.5680376061702361] (9,-1; 9,-1), time: 30.0577s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_50, [-inf,inf]=>[1e-05,2.0648825388973355] (15,-1; 9,-1), time: 15.3684s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_48, [-inf,inf]=>[-0.843549408878615,0.5402440454417547] (9,-1; 9,-1), time: 30.0123s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_58, [-inf,inf]=>[-0.5435753466369919,0.195071484177527] (9,-1; 9,-1), time: 30.0254s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2931s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_71, [-inf,inf]=>[-0.9386530577633387,0.03892743262038918] (9,-1; 9,-1), time: 30.0371s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2422s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_29, [-inf,inf]=>[1e-05,2.9174956009918223] (15,-1; 9,-1), time: 15.3229s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_75, [-inf,inf]=>[-0.8342722818261203,0.5987953456580506] (9,-1; 9,-1), time: 30.0098s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_35, [-inf,inf]=>[1e-05,1.9655317114091404] (15,-1; 9,-1), time: 15.2561s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3268s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_69, [-inf,inf]=>[1e-05,1.4438240098635111] (15,-1; 9,-1), time: 15.2775s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_31, [-inf,inf]=>[1e-05,2.084750428229175] (15,-1; 9,-1), time: 15.2849s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2781s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_46, [-inf,inf]=>[1e-05,0.971558731455404] (15,-1; 9,-1), time: 15.3729s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4104s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_80, [-inf,inf]=>[-0.6220236749182234,0.26423326613212034] (9,-1; 9,-1), time: 30.1923s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_23, [-inf,inf]=>[1e-05,1.3763334631318567] (15,-1; 9,-1), time: 15.3899s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1584s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.1813s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_20, [-inf,inf]=>[-0.506402901821968,0.08698853255240396] (9,-1; 9,-1), time: 30.0235s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.0328s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_77, [-inf,inf]=>[-0.2136321082404032,0.2827406891744696] (9,-1; 9,-1), time: 30.0109s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_21, [-inf,inf]=>[-0.4736853554132176,0.06402415296354073] (9,-1; 9,-1), time: 30.0425s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_91, [-inf,inf]=>[-0.07786388749009573,0.8892391673022467] (9,-1; 9,-1), time: 30.0202s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_67, [-inf,inf]=>[-0.7664567341288929,0.1992444175357349] (9,-1; 9,-1), time: 30.0519s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_8, [-inf,inf]=>[-0.006197699752693283,0.5478246981770715] (9,-1; 9,-1), time: 30.0258s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_96, [-inf,inf]=>[-0.004564242368588675,0.9004541928176367] (9,-1; 9,-1), time: 30.0656s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2819s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_28, [-inf,inf]=>[-0.6099393504482592,0.19581583371708833] (9,-1; 9,-1), time: 30.0148s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2837s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2584s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_41, [-inf,inf]=>[-0.42477884925552817,0.264698964836428] (9,-1; 9,-1), time: 30.0186s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_88, [-inf,inf]=>[1e-05,3.2928616848097443] (15,-1; 9,-1), time: 15.2711s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.9300s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_66, [-inf,inf]=>[1e-05,1.6163933155126073] (15,-1; 9,-1), time: 15.2681s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_70, [-inf,inf]=>[1e-05,2.4941620815006234] (15,-1; 9,-1), time: 15.2884s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_81, [-inf,inf]=>[1e-05,2.3411799244331646] (15,-1; 9,-1), time: 15.2787s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_51, [-inf,inf]=>[-1.1444358664489722,0.1131386434929976] (9,-1; 9,-1), time: 30.0201s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_64, [-inf,inf]=>[1e-05,1.3298953833258427] (15,-1; 9,-1), time: 15.3109s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_65, [-inf,inf]=>[-0.22924565683652356,0.3504182364328605] (9,-1; 9,-1), time: 30.0332s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_12, [-inf,inf]=>[-0.48171763396731015,0.19260534286606787] (9,-1; 9,-1), time: 30.1412s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_22, [-inf,inf]=>[-0.4318771029197519,0.17884879315071334] (9,-1; 9,-1), time: 30.0228s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_9, [-inf,inf]=>[-0.5927971087797637,0.5191763388448363] (9,-1; 9,-1), time: 30.0450s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_55, [-inf,inf]=>[1e-05,0.8868327036795646] (15,-1; 9,-1), time: 25.4317s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_33, [-inf,inf]=>[-0.3599403799478508,0.795656636802638] (9,-1; 9,-1), time: 30.0145s, #vars: 1695, #constrs: 1065, improved: True
Solving MIP for lay12_45, [-inf,inf]=>[-0.5712482437826184,0.0751884638479205] (9,-1; 9,-1), time: 30.0271s, #vars: 1695, #constrs: 1065, improved: True
PGD done for relu layer 6
Run alpha-CROWN after refining layer 10 and relu idx 4
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 4 has unstable to stable neurons: [(74, -1), (46, -1), (97, -1), (25, -1), (49, -1), (27, -1), (10, -1), (24, -1), (60, -1), (30, -1), (58, -1), (98, -1), (42, 1), (70, -1), (85, -1), (88, -1), (66, -1), (76, -1), (72, -1), (75, -1), (41, -1), (63, -1), (86, -1), (44, -1), (18, -1), (9, -1), (82, -1), (17, 1), (52, 1), (43, 1), (29, -1), (4, -1), (7, -1), (28, -1), (59, -1), (95, -1), (68, -1), (96, 1), (38, -1), (50, 1), (48, 1), (73, -1), (92, -1), (89, -1), (79, 1), (81, -1), (1, 1), (16, 1), (39, -1), (12, 1), (71, 1), (3, -1), (47, 1), (6, -1), (34, 1), (78, -1), (15, 1), (32, -1), (84, 1), (11, 1), (64, -1), (61, 1), (37, 1), (19, 1), (67, 1), (62, -1)]
best_l after optimization: 0.9953112602233887 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.108168125152588
alpha-CROWN with intermediate bounds by MIP: tensor([[ 0.69655037,  0.80927610, -0.17421031,  1.26603103,  0.43152070,
         -1.93148899, -2.89631248,  2.06516886,  0.72877598]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 214.54151916503906, ub improved 301.28643798828125, time 121.3578
maximum relu layer improved by MIP so far 5
Linear(in_features=100, out_features=100, bias=True) 6 14 torch.Size([100])
sorted candidates ['lay14_96', 'lay14_76', 'lay14_5', 'lay14_91', 'lay14_8', 'lay14_55', 'lay14_64', 'lay14_67', 'lay14_14', 'lay14_41', 'lay14_37', 'lay14_2', 'lay14_84', 'lay14_79', 'lay14_69', 'lay14_88', 'lay14_46', 'lay14_47', 'lay14_16', 'lay14_28', 'lay14_1', 'lay14_86', 'lay14_42', 'lay14_22', 'lay14_4', 'lay14_36', 'lay14_72', 'lay14_15', 'lay14_81', 'lay14_33', 'lay14_13', 'lay14_0', 'lay14_44', 'lay14_75', 'lay14_3', 'lay14_53', 'lay14_24', 'lay14_40', 'lay14_78', 'lay14_50', 'lay14_92', 'lay14_49', 'lay14_68', 'lay14_19', 'lay14_95', 'lay14_29', 'lay14_27', 'lay14_12', 'lay14_66', 'lay14_59', 'lay14_98', 'lay14_35', 'lay14_32', 'lay14_77', 'lay14_97', 'lay14_34', 'lay14_43', 'lay14_62', 'lay14_99', 'lay14_51', 'lay14_65', 'lay14_9', 'lay14_25', 'lay14_54', 'lay14_30', 'lay14_80', 'lay14_73', 'lay14_94', 'lay14_21', 'lay14_85', 'lay14_63', 'lay14_82', 'lay14_74', 'lay14_10', 'lay14_89', 'lay14_70', 'lay14_52', 'lay14_71', 'lay14_18', 'lay14_56', 'lay14_7', 'lay14_57', 'lay14_31', 'lay14_58', 'lay14_20', 'lay14_45', 'lay14_38', 'lay14_23', 'lay14_87', 'lay14_83', 'lay14_26', 'lay14_93', 'lay14_11', 'lay14_48', 'lay14_39', 'lay14_6', 'lay14_60', 'lay14_17', 'lay14_61', 'lay14_90'] filter: 1.0
Solving MIP for lay14_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3793s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4226s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4542s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4674s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5070s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5362s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5547s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4022s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1359s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3758s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4997s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.4810s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4501s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3729s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_41, [-inf,inf]=>[1e-05,2.1929012951167794] (15,-1; 9,-1), time: 15.3827s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4426s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9822s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_72, [-inf,inf]=>[1e-05,2.857783467072807] (15,-1; 9,-1), time: 15.4769s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_33, [-inf,inf]=>[1e-05,1.5983687391802435] (15,-1; 9,-1), time: 15.5764s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_37, [-inf,inf]=>[-0.6406746496183232,0.3120260434627512] (9,-1; 9,-1), time: 30.0168s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_67, [-inf,inf]=>[-0.7783460830685722,0.31924222216323067] (9,-1; 9,-1), time: 30.0301s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_88, [-inf,inf]=>[-0.5134185928092048,0.20944964734646] (9,-1; 9,-1), time: 30.0180s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_64, [-inf,inf]=>[-0.7361713718530125,0.05669521938020685] (9,-1; 9,-1), time: 30.0392s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_79, [-inf,inf]=>[-0.7701399347667962,0.51386586360732] (9,-1; 9,-1), time: 30.0642s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_76, [-inf,inf]=>[-0.6940264009738841,0.1473072524704858] (9,-1; 9,-1), time: 30.1581s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_46, [-inf,inf]=>[-0.7562253310698871,0.2528480769661853] (9,-1; 9,-1), time: 30.0432s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_47, [-inf,inf]=>[-1.0621945169544282,0.29601104102013986] (9,-1; 9,-1), time: 30.0310s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_28, [-inf,inf]=>[-0.6312904953336188,0.2268051071152994] (9,-1; 9,-1), time: 30.0563s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_1, [-inf,inf]=>[-0.3345544594011023,0.4217389509623372] (9,-1; 9,-1), time: 30.0233s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_16, [-inf,inf]=>[-0.1359519541878796,0.7059092735813797] (9,-1; 9,-1), time: 30.1132s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4076s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4169s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3509s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_4, [-inf,inf]=>[-0.34654648740002636,0.40212313787861054] (9,-1; 9,-1), time: 30.0130s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_36, [-inf,inf]=>[-0.39491929255967895,0.2945191117376603] (9,-1; 9,-1), time: 30.0220s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9542s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3740s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_92, [-inf,inf]=>[1e-05,1.1458557052255305] (15,-1; 9,-1), time: 15.4077s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4334s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_44, [-inf,inf]=>[-0.09035082569141069,0.366473788822198] (9,-1; 9,-1), time: 30.0369s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_75, [-inf,inf]=>[-0.43371388465493255,0.473692478373184] (9,-1; 9,-1), time: 30.0144s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3374s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_78, [-inf,inf]=>[1e-05,1.791577318562996] (15,-1; 9,-1), time: 21.9319s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_40, [-inf,inf]=>[1e-05,1.4389933793159773] (15,-1; 9,-1), time: 23.6896s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_53, [-inf,inf]=>[1e-05,0.9580934183178248] (15,-1; 9,-1), time: 23.7925s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_3, [-inf,inf]=>[-0.8765308368611188,0.06835019682800103] (9,-1; 9,-1), time: 30.0107s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_50, [-inf,inf]=>[-0.42882930198017444,0.3011607687242734] (9,-1; 9,-1), time: 30.0587s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_24, [-inf,inf]=>[-0.2642069493669475,0.7232087696328259] (9,-1; 9,-1), time: 30.1682s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3468s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_29, [-inf,inf]=>[-0.47219520776006546,0.7213652251334137] (9,-1; 9,-1), time: 30.0505s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2642s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3379s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_27, [-inf,inf]=>[-0.43481078561487424,0.7388201189100924] (9,-1; 9,-1), time: 30.0165s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_12, [-inf,inf]=>[-0.4046856264486873,0.32392898591551683] (9,-1; 9,-1), time: 30.0140s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_66, [-inf,inf]=>[-0.8259741198095546,0.4213873016955982] (9,-1; 9,-1), time: 30.0109s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_59, [-inf,inf]=>[-0.6316642831989487,0.3696121004168538] (9,-1; 9,-1), time: 30.0186s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4171s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_35, [-inf,inf]=>[-0.04634567501444251,1.3754607749804104] (9,-1; 9,-1), time: 30.0204s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_97, [-inf,inf]=>[1e-05,2.213952225687955] (15,-1; 9,-1), time: 15.5075s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_32, [-inf,inf]=>[-0.5161333287263546,0.6291733869114732] (9,-1; 9,-1), time: 30.0972s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_62, [-inf,inf]=>[1e-05,1.7003091089349682] (15,-1; 9,-1), time: 15.3851s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.7129s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_65, [-inf,inf]=>[1e-05,3.1096168325284976] (15,-1; 9,-1), time: 15.3794s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_73, [-inf,inf]=>[1e-05,1.1514056972502604] (15,-1; 9,-1), time: 15.4224s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_43, [-inf,inf]=>[-0.7132936060736871,0.301623876827915] (9,-1; 9,-1), time: 30.1333s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_70, [-inf,inf]=>[1e-05,2.6711575177280054] (15,-1; 9,-1), time: 15.5304s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3921s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3851s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_99, [-inf,inf]=>[-0.23038587892471327,0.6259536527194102] (9,-1; 9,-1), time: 30.0601s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_80, [-inf,inf]=>[1e-05,1.4034371991158872] (15,-1; 9,-1), time: 21.5097s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_51, [-inf,inf]=>[-0.12027979496148476,0.9161698919248863] (9,-1; 9,-1), time: 30.0148s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_18, [-inf,inf]=>[1e-05,0.8715245083905889] (15,-1; 9,-1), time: 15.3708s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_54, [-inf,inf]=>[-0.5743302835160801,0.5480001765518778] (9,-1; 9,-1), time: 30.0216s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_63, [-inf,inf]=>[-1.361618056582266,0.0025134798892239977] (9,-1; 9,-1), time: 30.0196s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_21, [-inf,inf]=>[-0.152715061089523,0.48655195311123983] (9,-1; 9,-1), time: 30.0596s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_82, [-inf,inf]=>[-0.23308060411818168,1.249397314246647] (9,-1; 9,-1), time: 30.0165s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_74, [-inf,inf]=>[-0.42469846478370926,0.5578136362906171] (9,-1; 9,-1), time: 30.0199s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_89, [-inf,inf]=>[-0.01684938715534979,1.0338992984101476] (9,-1; 9,-1), time: 30.0212s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_56, [-inf,inf]=>[1e-05,1.1762815906868065] (15,-1; 9,-1), time: 15.4472s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_10, [-inf,inf]=>[-0.27620909564723906,0.8970714234021954] (9,-1; 9,-1), time: 30.1128s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3047s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4222s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2437s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2985s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_52, [-inf,inf]=>[-0.6169417592919079,0.19213136494131305] (9,-1; 9,-1), time: 30.1587s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_31, [-inf,inf]=>[1e-05,2.28209308353434] (15,-1; 9,-1), time: 15.5385s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_71, [-inf,inf]=>[-0.30293105896453043,1.0769508602328506] (9,-1; 9,-1), time: 30.0131s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_38, [-inf,inf]=>[1e-05,2.083966672203744] (15,-1; 9,-1), time: 15.3625s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_23, [-inf,inf]=>[1e-05,2.6566400463261424] (15,-1; 9,-1), time: 15.3670s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_20, [-inf,inf]=>[1e-05,1.4885267095872703] (15,-1; 9,-1), time: 23.4754s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_87, [-inf,inf]=>[1e-05,1.885954815216183] (15,-1; 9,-1), time: 15.3953s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_83, [-inf,inf]=>[1e-05,1.4884102838527928] (15,-1; 9,-1), time: 15.5413s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_6, [-inf,inf]=>[1e-05,1.1613935951469974] (15,-1; 9,-1), time: 15.3782s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_58, [-inf,inf]=>[-0.02305171185666011,1.0207442596427305] (9,-1; 9,-1), time: 30.1106s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_90, [-inf,inf]=>[1e-05,1.4431687102251365] (15,-1; 9,-1), time: 15.3682s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_45, [-inf,inf]=>[-0.6993208688212851,0.28433513754749534] (9,-1; 9,-1), time: 30.0240s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_26, [-inf,inf]=>[-0.3665451393260339,0.8753973872023989] (9,-1; 9,-1), time: 30.1113s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_11, [-inf,inf]=>[-0.510772257724377,1.0569357290599204] (9,-1; 9,-1), time: 30.0151s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_39, [-inf,inf]=>[-0.6195270094513171,0.4533535084415391] (9,-1; 9,-1), time: 30.0223s, #vars: 1885, #constrs: 1300, improved: True
Solving MIP for lay14_61, [-inf,inf]=>[-0.5128362322424597,0.04170061438664125] (9,-1; 9,-1), time: 30.0154s, #vars: 1885, #constrs: 1300, improved: True
PGD done for relu layer 7
Run alpha-CROWN after refining layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 5 has unstable to stable neurons: [(83, -1), (13, -1), (2, -1), (68, -1), (97, -1), (52, -1), (99, -1), (53, -1), (11, -1), (62, 1), (94, 1), (73, -1), (10, -1), (44, -1), (18, 1), (39, -1), (74, -1), (30, -1), (54, -1), (57, -1), (32, -1), (61, -1), (43, -1), (1, -1), (87, 1), (60, 1), (76, -1), (50, 1), (92, -1), (42, -1), (82, -1), (29, 1), (25, -1), (35, 1), (5, -1), (69, 1), (31, 1), (46, 1), (23, 1), (36, -1), (89, -1), (84, -1), (37, -1), (56, -1), (88, 1), (19, -1), (66, 1), (70, 1), (81, 1), (64, 1), (55, 1), (79, -1), (14, -1), (6, -1), (16, -1)]
best_l after optimization: 14.691923141479492 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.168335914611816
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.86574149,  2.45909476,  1.40909326,  2.65683174,  2.23697090,
         -0.72079241, -1.42950809,  3.81984329,  2.39464760]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 497.8602600097656, ub improved 677.1477661132812, time 123.3101
maximum relu layer improved by MIP so far 6
Linear(in_features=100, out_features=100, bias=True) 7 16 torch.Size([100])
sorted candidates ['lay16_51', 'lay16_68', 'lay16_29', 'lay16_11', 'lay16_76', 'lay16_49', 'lay16_58', 'lay16_14', 'lay16_69', 'lay16_19', 'lay16_99', 'lay16_5', 'lay16_80', 'lay16_87', 'lay16_50', 'lay16_54', 'lay16_41', 'lay16_10', 'lay16_77', 'lay16_34', 'lay16_67', 'lay16_39', 'lay16_63', 'lay16_31', 'lay16_84', 'lay16_71', 'lay16_61', 'lay16_17', 'lay16_86', 'lay16_13', 'lay16_98', 'lay16_9', 'lay16_37', 'lay16_97', 'lay16_16', 'lay16_73', 'lay16_33', 'lay16_65', 'lay16_27', 'lay16_21', 'lay16_72', 'lay16_56', 'lay16_42', 'lay16_95', 'lay16_45', 'lay16_24', 'lay16_83', 'lay16_35', 'lay16_4', 'lay16_0', 'lay16_25', 'lay16_70', 'lay16_92', 'lay16_2', 'lay16_59', 'lay16_48', 'lay16_53', 'lay16_8', 'lay16_12', 'lay16_26', 'lay16_6', 'lay16_79', 'lay16_22', 'lay16_55', 'lay16_78', 'lay16_28', 'lay16_85', 'lay16_82', 'lay16_93', 'lay16_90', 'lay16_47', 'lay16_38', 'lay16_60', 'lay16_74', 'lay16_62', 'lay16_94', 'lay16_89', 'lay16_30', 'lay16_18', 'lay16_96', 'lay16_46', 'lay16_57', 'lay16_91', 'lay16_20', 'lay16_88', 'lay16_40', 'lay16_52', 'lay16_32', 'lay16_66', 'lay16_15', 'lay16_23', 'lay16_43', 'lay16_64', 'lay16_44', 'lay16_36', 'lay16_75', 'lay16_3', 'lay16_7', 'lay16_81', 'lay16_1'] filter: 1.0
Solving MIP for lay16_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5229s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5190s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5758s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6378s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6357s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4922s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6060s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5383s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4471s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5764s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_69, [-inf,inf]=>[-0.9481525736264025,0.5538796426860971] (9,-1; 9,-1), time: 30.0114s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_76, [-inf,inf]=>[-1.6365629091105525,0.31636966728434796] (9,-1; 9,-1), time: 30.0169s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_11, [-inf,inf]=>[-0.8254816861233351,0.11074917537722358] (9,-1; 9,-1), time: 30.0159s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_80, [-inf,inf]=>[-1.2632782739073964,0.1911536442676381] (9,-1; 9,-1), time: 30.0195s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_5, [-inf,inf]=>[-0.8977199473338997,0.5820710337830752] (9,-1; 9,-1), time: 30.0196s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_19, [-inf,inf]=>[-1.287993568407009,0.3034151382304836] (9,-1; 9,-1), time: 30.0272s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_99, [-inf,inf]=>[-1.510771617739661,0.04199147199714435] (9,-1; 9,-1), time: 30.0300s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_87, [-inf,inf]=>[-1.2474511759115652,0.15295927258078534] (9,-1; 9,-1), time: 30.0311s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_49, [-inf,inf]=>[-0.5831997438373796,1.8624608909564806] (9,-1; 9,-1), time: 30.0377s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_54, [-inf,inf]=>[-0.017313038941545504,1.6339469012455439] (9,-1; 9,-1), time: 30.0501s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4289s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_10, [-inf,inf]=>[-1.2291672779152985,0.0761419412156262] (9,-1; 9,-1), time: 30.0136s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4906s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5392s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5339s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_41, [-inf,inf]=>[-0.9031290212160704,0.3166305579446538] (9,-1; 9,-1), time: 30.0645s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_77, [-inf,inf]=>[-0.8889531485302348,0.5740824991522063] (9,-1; 9,-1), time: 30.0150s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5122s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5266s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_31, [-inf,inf]=>[-0.4678413388842618,0.7136321752992231] (9,-1; 9,-1), time: 30.0152s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_84, [-inf,inf]=>[-1.0074182203429876,0.8811159696213923] (9,-1; 9,-1), time: 30.0118s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_71, [-inf,inf]=>[-1.7182799329238445,0.6490367472364069] (9,-1; 9,-1), time: 30.0118s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4766s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4688s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5103s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.7557s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_45, [-inf,inf]=>[1e-05,3.0041557605829574] (15,-1; 9,-1), time: 15.4929s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_25, [-inf,inf]=>[1e-05,1.660017698970021] (15,-1; 9,-1), time: 16.9558s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_17, [-inf,inf]=>[-0.5399811784644871,0.4947064241281661] (9,-1; 9,-1), time: 30.0111s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_86, [-inf,inf]=>[-1.2521599734219888,0.05878718784267444] (9,-1; 9,-1), time: 30.0138s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_37, [-inf,inf]=>[-0.4332905922110965,0.8178424466790477] (9,-1; 9,-1), time: 30.0108s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_13, [-inf,inf]=>[-0.35322547264310133,0.5418815503367217] (9,-1; 9,-1), time: 30.0205s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_61, [-inf,inf]=>[-0.22470964993883213,1.5508620905244257] (9,-1; 9,-1), time: 30.0526s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_73, [-inf,inf]=>[-0.9963898330054308,0.07442390026385308] (9,-1; 9,-1), time: 30.0125s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_33, [-inf,inf]=>[-0.9986525510415716,0.04121350327027751] (9,-1; 9,-1), time: 30.0132s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4897s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_65, [-inf,inf]=>[-1.113445538509183,0.4647324134413565] (9,-1; 9,-1), time: 30.0289s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5291s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_21, [-inf,inf]=>[-0.5590663570810491,0.47713187861285034] (9,-1; 9,-1), time: 30.0155s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_72, [-inf,inf]=>[-0.5881447950323057,1.109767384751118] (9,-1; 9,-1), time: 30.0095s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4687s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5671s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_95, [-inf,inf]=>[-0.8990656425827221,0.3120257593118429] (9,-1; 9,-1), time: 30.0299s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4724s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5297s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_83, [-inf,inf]=>[-1.0065910587618538,0.24454517414963722] (9,-1; 9,-1), time: 30.0097s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_4, [-inf,inf]=>[-0.6778066467127256,0.48676680364885355] (9,-1; 9,-1), time: 30.0095s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.9619s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.4315s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_70, [-inf,inf]=>[-0.7949188982991587,0.3244238487866204] (9,-1; 9,-1), time: 30.0102s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 14.0958s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4702s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_92, [-inf,inf]=>[-0.9242413197290342,0.23850847826973248] (9,-1; 9,-1), time: 30.0118s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_2, [-inf,inf]=>[-1.415131540372124,0.33119993348321913] (9,-1; 9,-1), time: 30.0112s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_74, [-inf,inf]=>[1e-05,2.8455953011914263] (15,-1; 9,-1), time: 15.5507s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_60, [-inf,inf]=>[1e-05,1.2302645128613343] (15,-1; 9,-1), time: 26.6597s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_48, [-inf,inf]=>[-0.806162440608884,0.13509559285011233] (9,-1; 9,-1), time: 30.0196s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_53, [-inf,inf]=>[-0.5864231588130248,1.2279687946887985] (9,-1; 9,-1), time: 30.0118s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_12, [-inf,inf]=>[-0.3635984009111687,0.5199593028685056] (9,-1; 9,-1), time: 30.0108s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_26, [-inf,inf]=>[-0.14058490455978367,0.9228670016078989] (9,-1; 9,-1), time: 30.0088s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_78, [-inf,inf]=>[-0.663259047025356,0.6288405603654069] (9,-1; 9,-1), time: 30.0102s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_79, [-inf,inf]=>[-1.0284156726742477,0.948696477845864] (9,-1; 9,-1), time: 30.0946s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_30, [-inf,inf]=>[1e-05,1.5213395956563152] (15,-1; 9,-1), time: 15.4730s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_90, [-inf,inf]=>[-0.7072415967253942,0.42121417714034404] (9,-1; 9,-1), time: 30.0098s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_47, [-inf,inf]=>[-0.6695571557714549,0.734494051474369] (9,-1; 9,-1), time: 30.0114s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_38, [-inf,inf]=>[-0.7195719765010975,0.12910673630604216] (9,-1; 9,-1), time: 30.0156s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.5059s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_62, [-inf,inf]=>[-0.03772287367228533,1.0718302601480738] (9,-1; 9,-1), time: 30.0109s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_94, [-inf,inf]=>[-0.18673927871145043,0.6363873432997944] (9,-1; 9,-1), time: 30.0120s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_57, [-inf,inf]=>[1e-05,1.8217331389570552] (15,-1; 9,-1), time: 15.5031s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_88, [-inf,inf]=>[1e-05,1.5173815246099398] (15,-1; 9,-1), time: 15.5051s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_91, [-inf,inf]=>[1e-05,3.0940554746652413] (15,-1; 9,-1), time: 15.5341s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_40, [-inf,inf]=>[1e-05,2.8130267769123574] (15,-1; 9,-1), time: 15.7080s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5138s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5653s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4432s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_18, [-inf,inf]=>[-0.6654812762264298,0.1300808734953881] (9,-1; 9,-1), time: 30.0110s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_15, [-inf,inf]=>[1e-05,2.4268118548021573] (15,-1; 9,-1), time: 15.5163s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_23, [-inf,inf]=>[1e-05,2.835106368410522] (15,-1; 9,-1), time: 15.4932s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_43, [-inf,inf]=>[1e-05,4.241733103365855] (15,-1; 9,-1), time: 15.4942s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_96, [-inf,inf]=>[-0.8771794297939579,0.08535997052810122] (9,-1; 9,-1), time: 30.0118s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.4209s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_20, [-inf,inf]=>[-0.2590659930425262,1.143633887311451] (9,-1; 9,-1), time: 30.0264s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_52, [-inf,inf]=>[-0.4709336144094031,0.4398817628728812] (9,-1; 9,-1), time: 30.0131s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_32, [-inf,inf]=>[-0.20010051500180875,0.9418429838927435] (9,-1; 9,-1), time: 30.0200s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_66, [-inf,inf]=>[-0.005264743171138255,1.8013115039289023] (9,-1; 9,-1), time: 30.0191s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_64, [-inf,inf]=>[-0.12672064695852908,1.3396272239166287] (9,-1; 9,-1), time: 30.0258s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_44, [-inf,inf]=>[-0.7353158895682527,0.8730217899654321] (9,-1; 9,-1), time: 30.0300s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_36, [-inf,inf]=>[-0.04795783571026524,2.359824818290284] (9,-1; 9,-1), time: 30.1715s, #vars: 2071, #constrs: 1529, improved: True
Solving MIP for lay16_75, [-inf,inf]=>[-0.6302900189233382,0.14101241577097587] (9,-1; 9,-1), time: 30.0104s, #vars: 2071, #constrs: 1529, improved: True
Run alpha-CROWN after refining layer 14 and relu idx 6
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 6 has unstable to stable neurons: [(96, -1), (5, -1), (91, -1), (8, -1), (55, -1), (14, -1), (41, 1), (2, -1), (84, -1), (69, -1), (86, -1), (42, -1), (22, -1), (72, 1), (15, -1), (81, -1), (33, 1), (13, -1), (0, -1), (53, 1), (40, 1), (78, 1), (92, 1), (49, -1), (68, -1), (19, -1), (95, -1), (98, -1), (77, -1), (97, 1), (34, -1), (62, 1), (65, 1), (9, -1), (25, -1), (30, -1), (80, 1), (73, 1), (94, -1), (85, -1), (70, 1), (18, 1), (56, 1), (7, -1), (57, -1), (31, 1), (20, 1), (38, 1), (23, 1), (87, 1), (83, 1), (93, -1), (48, -1), (6, 1), (60, -1), (17, -1), (90, 1)]
best_l after optimization: 19.750057220458984 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 9.951144218444824
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.32014132,  3.04227018,  1.98909223,  3.14017272,  2.95511079,
         -0.29193008, -0.86157501,  4.41958046,  3.03719449]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 1146.6856689453125, ub improved 1474.579833984375, time 135.0269
maximum relu layer improved by MIP so far 7
Linear(in_features=100, out_features=10, bias=True) 8 18 torch.Size([9, 1])
MIP finished with 553.243189573288s
Run final alpha-CROWN after MIP solving on layer 18 and relu idx 8
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
best_l after optimization: 22.559961318969727 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 9.606460809707642
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 2.52867842,  3.33298135,  2.36684108,  3.36554766,  3.35140467,
         -0.04229331, -0.41922164,  4.73429394,  3.34172964]], device='cuda:0') None
refined global lb: tensor([[ 2.52867842],
        [ 3.33298135],
        [ 2.36684108],
        [ 3.36554766],
        [ 3.35140467],
        [-0.04229331],
        [-0.41922164],
        [ 4.73429394],
        [ 3.34172964]], device='cuda:0') min: tensor(-0.41922164, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 501.8844323158264
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  0.  0.  0.  0.  1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.5286784172058105.

Properties batch 1, size 1
Remaining timeout: 501.8082880973816
##### Instance 0 first 10 spec matrices: [[[ 0. -1.  0.  0.  0.  0.  0.  0.  1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.3329813480377197.

Properties batch 2, size 1
Remaining timeout: 501.767550945282
##### Instance 0 first 10 spec matrices: [[[ 0.  0. -1.  0.  0.  0.  0.  0.  1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.3668410778045654.

Properties batch 3, size 1
Remaining timeout: 501.72573232650757
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0. -1.  0.  0.  0.  0.  1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.3655476570129395.

Properties batch 4, size 1
Remaining timeout: 501.68456625938416
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0. -1.  0.  0.  0.  1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.3514046669006348.

Properties batch 5, size 1
Remaining timeout: 501.643310546875
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0. -1.  0.  0.  1.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.04229331]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.48489481, -1.39149702,  0.13246235,  0.24095291, -3.24257994,
         2.77433348,  0.52672923, -2.47505641,  7.48759794, -0.99461991],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.04229331]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
layer 0 name BoundLinear(name="/input") size torch.Size([100]) unstable 26
layer 1 name BoundLinear(name="/input.3") size torch.Size([100]) unstable 27
layer 2 name BoundLinear(name="/input.7") size torch.Size([100]) unstable 34
layer 3 name BoundLinear(name="/input.11") size torch.Size([100]) unstable 34
layer 4 name BoundLinear(name="/input.15") size torch.Size([100]) unstable 34
layer 5 name BoundLinear(name="/input.19") size torch.Size([100]) unstable 45
layer 6 name BoundLinear(name="/input.23") size torch.Size([100]) unstable 43
layer 7 name BoundLinear(name="/input.27") size torch.Size([100]) unstable 53
-----------------
# of unstable neurons: 296
-----------------

batch:  torch.Size([1, 100]) pre split depth:  6
post split depth:  6
splitting decisions: 
split level 0: [7, 49] 
split level 1: [7, 61] 
split level 2: [7, 72] 
split level 3: [7, 5] 
split level 4: [7, 69] 
split level 5: [7, 17] 
pruning_in_iteration open status: True
ratio of positive domain = 58 / 64 = 0.90625
pruning-in-iteration extra time: 0.018125295639038086
Time: prepare 0.0184    beta_bound 0.6552    bound 0.6553    transfer 0.0008    finalize 0.0147    func 0.6892    
Accumulated time: func 0.6892    prepare 0.0248    bound 0.6553    beta_bound 0.6552    transfer 0.0008    finalize 0.0147    
batch bounding time:  0.6893255710601807
Current worst splitting domains lb-rhs (depth):
-0.04229 (6), -0.04229 (6), -0.04229 (6), -0.04229 (6), -0.04229 (6), -0.02839 (6), 
length of domains: 6
Time: pickout 0.0017    decision 0.2721    solve 0.7013    add 0.0037    
Accumulated time: pickout 0.0017    decision 0.2721    solve 0.7013    add 0.0037    
Current (lb-rhs): -0.04229331016540527
6 domains visited
Cumulative time: 1.0031263828277588

batch:  torch.Size([6, 100]) pre split depth:  4
post split depth:  4
splitting decisions: 
split level 0: [5, 15] [5, 15] [5, 15] [5, 15] [5, 15] [5, 15] 
split level 1: [5, 27] [5, 27] [5, 27] [5, 27] [5, 27] [5, 27] 
split level 2: [5, 47] [5, 47] [5, 47] [5, 47] [5, 86] [5, 86] 
split level 3: [6, 27] [6, 27] [6, 27] [0, 82] [5, 47] [5, 47] 
pruning_in_iteration open status: True
ratio of positive domain = 95 / 96 = 0.9895833333333334
pruning-in-iteration extra time: 0.017924785614013672
Time: prepare 0.0248    beta_bound 0.4451    bound 0.4451    transfer 0.0008    finalize 0.0221    func 0.4929    
Accumulated time: func 1.1822    prepare 0.0546    bound 1.1004    beta_bound 1.1003    transfer 0.0016    finalize 0.0368    
batch bounding time:  0.4930083751678467
Current worst splitting domains lb-rhs (depth):
-0.00268 (10), 
length of domains: 1
Time: pickout 0.0021    decision 0.0474    solve 0.5089    add 0.0034    
Accumulated time: pickout 0.0038    decision 0.3196    solve 1.2103    add 0.0071    
Current (lb-rhs): -0.002675354480743408
7 domains visited
Cumulative time: 1.5656068325042725

batch:  torch.Size([1, 100]) pre split depth:  6
post split depth:  6
splitting decisions: 
split level 0: [1, 94] 
split level 1: [6, 27] 
split level 2: [0, 38] 
split level 3: [0, 82] 
split level 4: [1, 36] 
split level 5: [3, 67] 

all verified at 1th iter
pruning_in_iteration open status: True
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.0006694793701171875
Time: prepare 0.0175    beta_bound 0.0335    bound 0.0336    transfer 0.0008    finalize 0.0157    func 0.0676    
Accumulated time: func 1.2498    prepare 0.0789    bound 1.1340    beta_bound 1.1338    transfer 0.0024    finalize 0.0525    
batch bounding time:  0.06769561767578125
length of domains: 0
Time: pickout 0.0016    decision 0.0648    solve 0.0796    add 0.0022    
Accumulated time: pickout 0.0054    decision 0.3843    solve 1.2898    add 0.0093    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
7 domains visited
Cumulative time: 1.7143406867980957


Properties batch 6, size 1
Remaining timeout: 499.819043636322
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0. -1.  0.  1.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.41922164]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.48489481, -1.39149702,  0.13246235,  0.24095291, -3.24257994,
         2.77433348,  0.52672923, -2.47505641,  7.48759794, -0.99461991],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.41922164]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
layer 0 name BoundLinear(name="/input") size torch.Size([100]) unstable 26
layer 1 name BoundLinear(name="/input.3") size torch.Size([100]) unstable 27
layer 2 name BoundLinear(name="/input.7") size torch.Size([100]) unstable 34
layer 3 name BoundLinear(name="/input.11") size torch.Size([100]) unstable 34
layer 4 name BoundLinear(name="/input.15") size torch.Size([100]) unstable 34
layer 5 name BoundLinear(name="/input.19") size torch.Size([100]) unstable 45
layer 6 name BoundLinear(name="/input.23") size torch.Size([100]) unstable 43
layer 7 name BoundLinear(name="/input.27") size torch.Size([100]) unstable 53
-----------------
# of unstable neurons: 296
-----------------

batch:  torch.Size([1, 100]) pre split depth:  6
post split depth:  6
splitting decisions: 
split level 0: [7, 49] 
split level 1: [7, 84] 
split level 2: [7, 5] 
split level 3: [7, 71] 
split level 4: [7, 77] 
split level 5: [7, 69] 
pruning_in_iteration open status: True
ratio of positive domain = 61 / 64 = 0.953125
pruning-in-iteration extra time: 0.01811695098876953
Time: prepare 0.0178    beta_bound 0.4437    bound 0.4438    transfer 0.0010    finalize 0.0155    func 0.4782    
Accumulated time: func 0.4782    prepare 0.0240    bound 0.4438    beta_bound 0.4437    transfer 0.0010    finalize 0.0155    
batch bounding time:  0.4782602787017822
Current worst splitting domains lb-rhs (depth):
-0.41645 (6), -0.12923 (6), -0.02932 (6), 
length of domains: 3
Time: pickout 0.0016    decision 0.0648    solve 0.4901    add 0.0032    
Accumulated time: pickout 0.0016    decision 0.0648    solve 0.4901    add 0.0032    
Current (lb-rhs): -0.4164521098136902
3 domains visited
Cumulative time: 0.5706484317779541

batch:  torch.Size([3, 100]) pre split depth:  5
post split depth:  5
splitting decisions: 
split level 0: [4, 23] [5, 98] [5, 98] 
split level 1: [5, 98] [3, 63] [3, 63] 
split level 2: [5, 15] [5, 15] [5, 15] 
split level 3: [4, 22] [7, 76] [4, 22] 
split level 4: [7, 76] [5, 48] [7, 76] 
pruning_in_iteration open status: True
ratio of positive domain = 94 / 96 = 0.9791666666666666
pruning-in-iteration extra time: 0.017899274826049805
Time: prepare 0.0241    beta_bound 0.4402    bound 0.4403    transfer 0.0008    finalize 0.0225    func 0.4878    
Accumulated time: func 0.9660    prepare 0.0543    bound 0.8841    beta_bound 0.8839    transfer 0.0018    finalize 0.0380    
batch bounding time:  0.4878871440887451
Current worst splitting domains lb-rhs (depth):
-0.28267 (11), -0.00918 (11), 
length of domains: 2
Time: pickout 0.0018    decision 0.0565    solve 0.5045    add 0.0028    
Accumulated time: pickout 0.0034    decision 0.1213    solve 0.9947    add 0.0060    
Current (lb-rhs): -0.2826741933822632
5 domains visited
Cumulative time: 1.1369752883911133

batch:  torch.Size([2, 100]) pre split depth:  5
post split depth:  5
splitting decisions: 
split level 0: [3, 63] [4, 23] 
split level 1: [0, 82] [0, 82] 
split level 2: [5, 27] [5, 27] 
split level 3: [6, 29] [6, 32] 
split level 4: [6, 32] [5, 47] 
pruning_in_iteration open status: True
ratio of positive domain = 63 / 64 = 0.984375
pruning-in-iteration extra time: 0.01879739761352539
Time: prepare 0.0173    beta_bound 0.4463    bound 0.4463    transfer 0.0008    finalize 0.0159    func 0.4804    
Accumulated time: func 1.4464    prepare 0.0777    bound 1.3304    beta_bound 1.3302    transfer 0.0026    finalize 0.0540    
batch bounding time:  0.4804720878601074
Current worst splitting domains lb-rhs (depth):
-0.11628 (16), 
length of domains: 1
Time: pickout 0.0017    decision 0.0559    solve 0.4920    add 0.0027    
Accumulated time: pickout 0.0051    decision 0.1771    solve 1.4866    add 0.0087    
Current (lb-rhs): -0.1162818968296051
6 domains visited
Cumulative time: 1.6897056102752686

batch:  torch.Size([1, 100]) pre split depth:  6
post split depth:  6
splitting decisions: 
split level 0: [0, 68] 
split level 1: [5, 75] 
split level 2: [7, 37] 
split level 3: [5, 48] 
split level 4: [6, 67] 
split level 5: [5, 95] 

all verified at 7th iter
pruning_in_iteration open status: True
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.006433010101318359
Time: prepare 0.0170    beta_bound 0.1682    bound 0.1683    transfer 0.0008    finalize 0.0156    func 0.2017    
Accumulated time: func 1.6481    prepare 0.1014    bound 1.4987    beta_bound 1.4984    transfer 0.0034    finalize 0.0696    
batch bounding time:  0.20191621780395508
length of domains: 0
Time: pickout 0.0017    decision 0.0649    solve 0.2141    add 0.0023    
Accumulated time: pickout 0.0068    decision 0.2421    solve 1.7007    add 0.0109    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
6 domains visited
Cumulative time: 1.9732558727264404


Properties batch 7, size 1
Remaining timeout: 497.7345554828644
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0.  0. -1.  1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.7342939376831055.

Properties batch 8, size 1
Remaining timeout: 497.67414927482605
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0.  0.  0.  1. -1.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.3417296409606934.
Result: safe in 582.3673 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):582.3615200489688, max time: 582.3673436641693
mean time for verified SAFE instances(total 1): 582.3673436641693, max time: 582.3673436641693
safe (total 1), index: [0]
