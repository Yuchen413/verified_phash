Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_9_100
  path: mnist_9_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 1
  end: 2
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Mon Jan 16 00:34:10 2023 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=100, bias=True)
  (12): ReLU()
  (13): Linear(in_features=100, out_features=100, bias=True)
  (14): ReLU()
  (15): Linear(in_features=100, out_features=100, bias=True)
  (16): ReLU()
  (17): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_9_100]_start=1_end=2_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-0.21560705,  0.22183204,  5.10792542,  0.28054398,  0.00971119,
         -1.09514034,  2.48394465, -1.06155634, -0.56578505, -3.77237415]],
       device='cuda:0')
layer /28 using sparse-features alpha with shape [31]; unstable size 31; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [35]; unstable size 35; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [61]; unstable size 61; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using sparse-features alpha with shape [90]; unstable size 90; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-104.23632812, -117.78463745, -122.36059570, -139.74772644,
         -145.51248169, -129.51948547, -140.81066895, -146.80137634,
         -168.86378479]], device='cuda:0') None
best_l after optimization: -524.2750244140625 with beta sum per layer: []
alpha/beta optimization time: 11.147957801818848
initial alpha-CROWN bounds: tensor([[-40.09308243, -48.57859421, -59.77552032, -57.71333694, -62.78786469,
         -49.00809097, -64.72055054, -66.43741608, -75.16056824]],
       device='cuda:0')
Worst class: (+ rhs) -75.16056823730469
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.21560705,  0.22183204,  5.10792542,  0.28054398,  0.00971119,
         -1.09514034,  2.48394465, -1.06155634, -0.56578505, -3.77237415]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.07998258,  0.04224554,  4.13880396, -0.16885549,  0.18038554,
          -0.83400816,  2.59157395, -1.23931170, -0.16238016, -3.32218027],
         [-0.07998258,  0.04224554,  4.13880396, -0.16885549,  0.18038554,
          -0.83400816,  2.59157395, -1.23931170, -0.16238016, -3.32218027]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.21878672, 4.09655857, 4.30765963, 3.95841837, 4.97281218,
          1.54723001, 5.37811565, 4.30118418, 7.46098423]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6786 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /28 using sparse-features alpha with shape [31]; unstable size 31; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [35]; unstable size 35; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [61]; unstable size 61; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using sparse-features alpha with shape [90]; unstable size 90; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_27', 'lay4_22', 'lay4_66', 'lay4_44', 'lay4_94', 'lay4_20', 'lay4_87', 'lay4_54', 'lay4_76', 'lay4_36', 'lay4_49', 'lay4_37', 'lay4_96', 'lay4_52', 'lay4_98', 'lay4_57', 'lay4_42', 'lay4_78', 'lay4_18', 'lay4_79', 'lay4_85', 'lay4_71', 'lay4_75', 'lay4_55', 'lay4_43', 'lay4_68', 'lay4_24', 'lay4_91', 'lay4_81', 'lay4_8', 'lay4_26', 'lay4_64', 'lay4_63', 'lay4_2', 'lay4_97'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/data_utils.py:255: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_87, [-inf,inf]=>[1e-05,1.0471533977147236] (15,-1; 2,-1), time: 0.3891s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.047356551979484685,1.9640789795992255] (2,-1; 2,-1), time: 0.5973s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-0.26651087340361607,0.769565899573257] (2,-1; 2,-1), time: 0.7427s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-inf,-0.011425125513815707] (-1,-1; 2,-1), time: 0.2026s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.25641094647176993,0.7182556933579684] (2,-1; 2,-1), time: 0.8096s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-0.7959311690242213,0.6779371968310623] (2,-1; 2,-1), time: 0.8368s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_22, [-inf,inf]=>[-0.6155967814245604,0.8891458145161688] (2,-1; 2,-1), time: 0.8464s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4921s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-1.0206839218296213,0.044930044630675306] (2,-1; 2,-1), time: 0.8952s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-1.0196452388695931,0.0451167849629342] (2,-1; 2,-1), time: 0.9546s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_98, [-inf,inf]=>[-1.0537503747644485,0.27586585737808234] (2,-1; 2,-1), time: 1.2720s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.7707511175559433,0.2358414042776762] (2,-1; 2,-1), time: 1.3595s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_44, [-inf,inf]=>[-0.3034829392323355,0.840511754370992] (2,-1; 2,-1), time: 1.4673s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_85, [-inf,inf]=>[-0.9125403684202407,0.6811963109771886] (2,-1; 2,-1), time: 0.6580s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-0.29448634397863743,1.0201134876440552] (2,-1; 2,-1), time: 0.7534s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-1.1775019278782524,0.39015810736692] (2,-1; 2,-1), time: 1.5931s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.8144486777069153,0.23466889247244838] (2,-1; 2,-1), time: 0.8554s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3095s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_36, [-inf,inf]=>[-0.943580482732249,0.43413447545112166] (2,-1; 2,-1), time: 1.6957s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-0.8219190651982727,0.30231163470979766] (2,-1; 2,-1), time: 0.9164s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.594814283668853,0.5914967005928897] (2,-1; 2,-1), time: 0.8676s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-0.9653467164270397,0.3590491739427675] (2,-1; 2,-1), time: 1.8568s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_66, [-inf,inf]=>[-0.7525139102976289,0.3089772948760429] (2,-1; 2,-1), time: 1.9165s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.5195015043134535,0.4887539584478764] (2,-1; 2,-1), time: 0.6327s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-0.023564325308352896,1.3754902645549612] (2,-1; 2,-1), time: 1.2705s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[1e-05,1.7342061240698374] (15,-1; 2,-1), time: 0.8958s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-0.37489800847521687,1.1256464890664173] (2,-1; 2,-1), time: 1.5636s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-0.6486083644639825,0.5671071416678819] (2,-1; 2,-1), time: 1.5019s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[-0.6934819969421258,0.6804084293727974] (2,-1; 2,-1), time: 0.8806s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.013686822476846064,0.8577984861444877] (2,-1; 2,-1), time: 2.5458s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.4480653308090135,0.569144925471561] (2,-1; 2,-1), time: 1.1869s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.2712332363204422,0.8123044394463451] (2,-1; 2,-1), time: 1.5246s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[-0.7605726677474964,0.6946754715949617] (2,-1; 2,-1), time: 1.7721s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-0.336360076914139,0.717017471440123] (2,-1; 2,-1), time: 2.1464s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_97, [-inf,inf]=>[-0.10630712028600131,0.7609452091008619] (2,-1; 2,-1), time: 1.9017s, #vars: 1047, #constrs: 293, improved: True
PGD done for relu layer 2
MIP improved 35 nodes out of 35 unstable nodes, lb improved 8.994134902954102, ub improved 9.505269050598145, time 4.9105
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_34', 'lay6_85', 'lay6_37', 'lay6_16', 'lay6_70', 'lay6_93', 'lay6_64', 'lay6_31', 'lay6_61', 'lay6_68', 'lay6_92', 'lay6_49', 'lay6_82', 'lay6_57', 'lay6_38', 'lay6_5', 'lay6_8', 'lay6_60', 'lay6_6', 'lay6_21', 'lay6_73', 'lay6_14', 'lay6_7', 'lay6_42', 'lay6_22', 'lay6_24', 'lay6_51', 'lay6_98', 'lay6_32', 'lay6_99', 'lay6_33', 'lay6_46', 'lay6_75', 'lay6_91', 'lay6_53', 'lay6_72', 'lay6_18', 'lay6_47', 'lay6_11', 'lay6_63', 'lay6_97', 'lay6_10', 'lay6_28', 'lay6_9', 'lay6_29', 'lay6_65', 'lay6_74', 'lay6_35', 'lay6_87', 'lay6_88', 'lay6_66', 'lay6_3'] filter: 1.0
Solving MIP for lay6_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6209s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-inf,-0.0012458345387266756] (-1,-1; 2,-1), time: 1.5510s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5816s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6257s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7743s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8726s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0548s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.1686s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.8215s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.8999s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2755s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1242s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-0.7845978126652049,0.18907411937229512] (2,-1; 2,-1), time: 5.7687s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7131s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-0.7430751173819857,0.11814459238605586] (2,-1; 2,-1), time: 5.5613s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-0.5148430605984332,0.48508094851374317] (2,-1; 2,-1), time: 5.9004s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-0.5835705536033589,0.1326406123915002] (2,-1; 2,-1), time: 7.6620s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1737s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1653s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3319s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-0.3229581188025794,0.38536543679041524] (2,-1; 2,-1), time: 6.8278s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-0.2564552710473948,0.45077427304607726] (2,-1; 2,-1), time: 6.7688s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1724s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.05848347384509266,0.5452198292444819] (2,-1; 2,-1), time: 10.0165s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2298s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-1.013107827977993,0.14315784455147895] (2,-1; 2,-1), time: 10.2764s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1681s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5157s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.5963280923274022,0.4188136894559061] (2,-1; 2,-1), time: 10.7022s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4252s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[1e-05,0.6651130668528891] (15,-1; 2,-1), time: 5.2096s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.37336318618876185,0.31677774088318256] (2,-1; 2,-1), time: 8.6138s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.19574144656696582,0.8822880926239136] (2,-1; 2,-1), time: 11.5382s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0888s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2230s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-0.0606494157354026,0.6322731334631474] (2,-1; 2,-1), time: 5.4596s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-0.31071346096607333,0.3419857630236128] (2,-1; 2,-1), time: 6.6369s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.0015445245841981155,0.7602546702342148] (2,-1; 2,-1), time: 10.0325s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[1e-05,1.1966672611047497] (15,-1; 2,-1), time: 5.1472s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-0.46044920401799,0.29558469180840125] (2,-1; 2,-1), time: 9.5258s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-0.0233885221921687,0.5627389580166524] (2,-1; 2,-1), time: 6.6933s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.3583s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.3047558723751307,0.5971090305508214] (2,-1; 9,-1), time: 17.1747s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.6231688720884875,0.021035317392900238] (2,-1; 2,-1), time: 7.0201s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_66, [-inf,inf]=>[1e-05,1.0040100532965255] (15,-1; 2,-1), time: 4.6449s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-0.46603254256371673,0.08509444488765663] (2,-1; 2,-1), time: 6.2361s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-0.08895138268782692,0.37476095965651834] (2,-1; 2,-1), time: 6.6474s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[1e-05,1.3044528365263426] (15,-1; 2,-1), time: 4.6897s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-0.4565677365533405,0.05341948695437731] (2,-1; 2,-1), time: 11.5455s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-0.4230304446874903,0.23963314310635048] (2,-1; 2,-1), time: 8.3504s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.581556549489666,0.5868694085538795] (2,-1; 9,-1), time: 17.3152s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.3163873870844593,0.4382104243042373] (2,-1; 2,-1), time: 10.0253s, #vars: 1207, #constrs: 483, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(87, 1), (42, -1), (78, -1), (91, -1), (81, 1)]
best_l after optimization: -216.0145263671875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.21965742111206
alpha-CROWN with intermediate bounds by MIP: tensor([[-16.68206024, -19.43019676, -24.60132599, -23.25615311, -26.30462456,
         -20.91995430, -25.85196495, -28.15908813, -30.80915070]],
       device='cuda:0') None
MIP improved 52 nodes out of 52 unstable nodes, lb improved 12.423859596252441, ub improved 22.002012252807617, time 21.6924
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_87', 'lay8_56', 'lay8_49', 'lay8_30', 'lay8_12', 'lay8_70', 'lay8_67', 'lay8_80', 'lay8_72', 'lay8_57', 'lay8_32', 'lay8_77', 'lay8_36', 'lay8_85', 'lay8_79', 'lay8_42', 'lay8_25', 'lay8_52', 'lay8_58', 'lay8_50', 'lay8_0', 'lay8_16', 'lay8_66', 'lay8_33', 'lay8_78', 'lay8_68', 'lay8_38', 'lay8_75', 'lay8_64', 'lay8_31', 'lay8_89', 'lay8_69', 'lay8_59', 'lay8_17', 'lay8_34', 'lay8_8', 'lay8_73', 'lay8_9', 'lay8_99', 'lay8_5', 'lay8_83', 'lay8_98', 'lay8_55', 'lay8_2', 'lay8_61', 'lay8_90', 'lay8_74', 'lay8_88', 'lay8_96', 'lay8_62', 'lay8_27', 'lay8_20', 'lay8_82', 'lay8_39', 'lay8_93', 'lay8_4', 'lay8_48', 'lay8_86', 'lay8_41', 'lay8_60', 'lay8_97', 'lay8_22', 'lay8_76', 'lay8_43', 'lay8_44', 'lay8_46', 'lay8_28', 'lay8_84', 'lay8_1', 'lay8_35', 'lay8_47', 'lay8_94', 'lay8_54', 'lay8_65', 'lay8_71', 'lay8_13', 'lay8_63', 'lay8_26', 'lay8_3', 'lay8_40', 'lay8_6', 'lay8_53', 'lay8_51'] filter: 1.0
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2331s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2857s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2857s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2800s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2813s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3121s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3368s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3509s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2397s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2839s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6550s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2220s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6799s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3327s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2231s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7258s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2877s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6615s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.1457s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2419s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.1105s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2891s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.1606s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2774s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[1e-05,0.6975503445971011] (15,-1; 2,-1), time: 9.4192s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2355s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.5533s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.10234891381557285,0.3039676173561301] (2,-1; 2,-1), time: 16.8884s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-1.2649019325904813,0.010364349578117526] (2,-1; 9,-1), time: 18.2876s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2261s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-0.36508717340033847,0.30550932029884875] (9,-1; 2,-1), time: 20.7769s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-0.19232323204240848,0.406686574999172] (9,-1; 2,-1), time: 20.9506s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2851s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[-0.9810565555220752,0.013226055674605698] (2,-1; 9,-1), time: 22.5388s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6047s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[-0.3628758342525933,0.1904409565517574] (2,-1; 9,-1), time: 23.8478s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-0.21372401735705007,0.42408866234553316] (2,-1; 9,-1), time: 23.4181s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6527s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[1e-05,1.0827023969880742] (15,-1; 2,-1), time: 3.7395s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[1e-05,0.6011698671074825] (15,-1; 9,-1), time: 27.2153s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.1557304484166419,0.43072960962387136] (2,-1; 9,-1), time: 27.3868s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2266s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2365s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.4743312119806053,0.05209044167536265] (9,-1; 9,-1), time: 30.0125s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.08079740066290518,0.4305031900902479] (9,-1; 9,-1), time: 30.0129s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2185s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[1e-05,1.4744300854990002] (15,-1; 2,-1), time: 3.0063s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.48897853378798584,0.3109397901073908] (2,-1; 9,-1), time: 28.2576s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-0.661613300918928,0.0021790998052377613] (2,-1; 9,-1), time: 18.8348s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-0.20755724745032972,0.2951335860698527] (9,-1; 9,-1), time: 30.0097s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2323s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2388s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[1e-05,1.3662586228069904] (15,-1; 2,-1), time: 4.3793s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-0.17084700501545558,0.262114326884532] (9,-1; 9,-1), time: 30.0139s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2273s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,1.1755622995073307] (15,-1; 2,-1), time: 7.3451s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2715s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1835s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-0.05736162421388549,0.48014625897074237] (2,-1; 9,-1), time: 20.3307s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[1e-05,1.0718482808711294] (15,-1; 2,-1), time: 7.1088s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[1e-05,1.226034529118101] (15,-1; 2,-1), time: 10.8539s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[1e-05,2.0943065606957245] (15,-1; 2,-1), time: 4.7401s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-0.5378518734794813,0.025807650283957328] (9,-1; 2,-1), time: 27.7410s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[1e-05,2.4044998060159304] (15,-1; 2,-1), time: 5.8151s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2825s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2329s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-0.3097307965974977,0.21294739618154704] (9,-1; 9,-1), time: 30.0094s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2741s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[1e-05,0.5630955650139597] (15,-1; 9,-1), time: 21.2237s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[1e-05,2.239145057222605] (15,-1; 2,-1), time: 2.3160s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[1e-05,1.8390788147148809] (15,-1; 2,-1), time: 2.5548s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-0.43472790951451534,0.11116497019810226] (2,-1; 9,-1), time: 19.3538s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[1e-05,1.5272762705894816] (15,-1; 2,-1), time: 3.8225s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-0.17180078658516712,0.6032195955195127] (9,-1; 9,-1), time: 30.0114s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.01465675109223644,0.4161074399586868] (9,-1; 9,-1), time: 30.0119s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-0.18373252286604566,0.3812920343833719] (9,-1; 9,-1), time: 30.0166s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.06324205015117863,0.2722281638321194] (9,-1; 2,-1), time: 23.1621s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.44748640415559615,0.049668521072909366] (2,-1; 9,-1), time: 22.7354s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.2589141470959765,0.18609884474678146] (9,-1; 2,-1), time: 26.4806s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-0.18720303300897495,0.2346758644024885] (9,-1; 9,-1), time: 30.0115s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-0.22952445514744124,0.49961412680221523] (9,-1; 2,-1), time: 23.6681s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.2719231979876204,0.09750092911389646] (2,-1; 9,-1), time: 23.0542s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[-0.4160623569992628,0.24006614434329085] (2,-1; 9,-1), time: 27.0434s, #vars: 1355, #constrs: 655, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(34, -1), (85, -1), (16, -1), (70, -1), (31, -1), (68, -1), (82, -1), (57, -1), (38, -1), (5, -1), (42, -1), (22, -1), (24, -1), (98, 1), (99, -1), (75, -1), (91, -1), (72, -1), (18, -1), (47, -1), (63, -1), (97, -1), (28, 1), (9, -1), (29, -1), (88, -1), (66, 1), (3, 1)]
best_l after optimization: -13.129175186157227 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.49746561050415
alpha-CROWN with intermediate bounds by MIP: tensor([[-1.36905313, -0.19230390, -0.93417788, -1.23063874, -2.25800037,
         -3.74041939,  0.22463870, -3.39912200, -0.23009872]], device='cuda:0') None
MIP improved 83 nodes out of 83 unstable nodes, lb improved 23.884511947631836, ub improved 43.4443473815918, time 64.5177
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_50', 'lay10_99', 'lay10_8', 'lay10_25', 'lay10_87', 'lay10_18', 'lay10_96', 'lay10_75', 'lay10_10', 'lay10_0', 'lay10_74', 'lay10_94', 'lay10_58', 'lay10_55', 'lay10_42', 'lay10_12', 'lay10_44', 'lay10_77', 'lay10_11', 'lay10_48', 'lay10_5', 'lay10_52', 'lay10_17', 'lay10_16', 'lay10_9', 'lay10_37', 'lay10_60', 'lay10_29', 'lay10_86', 'lay10_28', 'lay10_76', 'lay10_93', 'lay10_24', 'lay10_2', 'lay10_35', 'lay10_98', 'lay10_84', 'lay10_13', 'lay10_73', 'lay10_51', 'lay10_69', 'lay10_66', 'lay10_20', 'lay10_19', 'lay10_15', 'lay10_4', 'lay10_57', 'lay10_85', 'lay10_7', 'lay10_95', 'lay10_43', 'lay10_22', 'lay10_79', 'lay10_82', 'lay10_89', 'lay10_21', 'lay10_3', 'lay10_27', 'lay10_1', 'lay10_70', 'lay10_83', 'lay10_40', 'lay10_34', 'lay10_68', 'lay10_46', 'lay10_14', 'lay10_49', 'lay10_71', 'lay10_36', 'lay10_90', 'lay10_47', 'lay10_80', 'lay10_26', 'lay10_92', 'lay10_31', 'lay10_63', 'lay10_45', 'lay10_39', 'lay10_32', 'lay10_78', 'lay10_88', 'lay10_56', 'lay10_64', 'lay10_53', 'lay10_38', 'lay10_6', 'lay10_23', 'lay10_30', 'lay10_67', 'lay10_97', 'lay10_54', 'lay10_61', 'lay10_33', 'lay10_59', 'lay10_81', 'lay10_65', 'lay10_41', 'lay10_72', 'lay10_91', 'lay10_62'] filter: 1.0
Solving MIP for lay10_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3403s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3612s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3684s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3671s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3767s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3773s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3833s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3842s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4083s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4223s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4601s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4642s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4245s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4031s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4051s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5715s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2997s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7030s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6200s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7133s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3524s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3657s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2816s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3284s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.8251s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4431s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3067s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[1e-05,1.444075568610962] (15,-1; 2,-1), time: 6.4457s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7448s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.9456s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[1e-05,0.4659636187589076] (15,-1; 2,-1), time: 9.9279s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[1e-05,1.0525466462312] (15,-1; 2,-1), time: 13.4117s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[1e-05,1.4839864096589896] (15,-1; 2,-1), time: 6.9105s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.4886s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4752s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3080s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2735s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3302s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3098s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2576s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[1e-05,1.9556140817084162] (15,-1; 2,-1), time: 14.4002s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[1e-05,1.490479046053397] (15,-1; 2,-1), time: 5.2201s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[1e-05,0.5210233941837628] (15,-1; 2,-1), time: 19.8341s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-0.7308249006579349,0.009132635193511015] (2,-1; 9,-1), time: 20.4562s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[1e-05,0.3751992273465685] (15,-1; 9,-1), time: 21.0287s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2696s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[1e-05,1.540266409103604] (15,-1; 2,-1), time: 4.5322s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[1e-05,2.014742683842201] (15,-1; 2,-1), time: 6.7475s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[-0.3248557776184637,0.13508666060969696] (9,-1; 2,-1), time: 29.1298s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[1e-05,1.3626977208130902] (15,-1; 9,-1), time: 15.2759s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.354436843280949,0.04648981637853511] (9,-1; 9,-1), time: 30.0158s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3465s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-0.3966930509611245,0.33508239660596223] (9,-1; 9,-1), time: 30.3846s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-0.29817930511066754,0.3152770557940953] (9,-1; 9,-1), time: 30.3972s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[-0.37169004229236924,0.14228553751945436] (9,-1; 9,-1), time: 30.0158s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2667s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-0.2549664244770444,0.22527210361239314] (9,-1; 9,-1), time: 30.0174s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-0.1285807900463405,0.43439482161307436] (9,-1; 9,-1), time: 30.0120s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[1e-05,1.766487584686705] (15,-1; 2,-1), time: 5.2652s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[1e-05,2.6661879769480374] (15,-1; 2,-1), time: 3.9449s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.6753s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2634s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[1e-05,0.5803188010434405] (15,-1; 9,-1), time: 16.5091s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2665s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3285s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-0.288479802965941,0.07144918090775958] (9,-1; 9,-1), time: 30.0136s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3086s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2723s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2829s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2723s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9550s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.2264429156713572,0.3014467821289654] (9,-1; 9,-1), time: 30.0119s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[1e-05,1.1629994899852645] (15,-1; 2,-1), time: 14.9739s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-0.377158729359896,0.007494569806291032] (9,-1; 9,-1), time: 30.0248s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[1e-05,3.719912495147921] (15,-1; 2,-1), time: 4.5898s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[1e-05,0.5862648796464918] (15,-1; 9,-1), time: 15.3626s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-0.34905813617931825,0.04337996883546347] (9,-1; 9,-1), time: 30.0132s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[1e-05,2.299479804664681] (15,-1; 9,-1), time: 15.2818s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2614s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[1e-05,1.2652105007889871] (15,-1; 2,-1), time: 11.7547s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[1e-05,0.47248574427544787] (15,-1; 9,-1), time: 19.8566s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2704s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-0.40729756846333204,0.06524197824979351] (9,-1; 9,-1), time: 30.0631s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[1e-05,1.2436663035814206] (15,-1; 2,-1), time: 10.9236s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[1e-05,0.6990478962466734] (15,-1; 9,-1), time: 15.3228s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[1e-05,2.1022661769778304] (15,-1; 2,-1), time: 5.5103s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[1e-05,2.929873702273191] (15,-1; 2,-1), time: 6.4371s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[1e-05,3.047523197032813] (15,-1; 2,-1), time: 6.4486s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[1e-05,0.4522770833471649] (15,-1; 9,-1), time: 22.7769s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[1e-05,2.832047358554894] (15,-1; 2,-1), time: 7.2796s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[1e-05,2.5246799683422947] (15,-1; 9,-1), time: 15.3246s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[1e-05,2.2241328909316964] (15,-1; 2,-1), time: 6.4218s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[1e-05,1.243072187877477] (15,-1; 2,-1), time: 11.0459s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-0.3515339440343227,0.1796553129568055] (9,-1; 9,-1), time: 30.2637s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,1.7973646576875226] (15,-1; 2,-1), time: 14.4728s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[1e-05,1.4686214814648] (15,-1; 2,-1), time: 14.3182s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[1e-05,0.5369026005579094] (15,-1; 9,-1), time: 15.2949s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-0.4845902034407856,0.019736916820214598] (9,-1; 9,-1), time: 30.0134s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[1e-05,3.379031586094977] (15,-1; 9,-1), time: 15.2665s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-0.4423472311907775,0.07146658251873199] (9,-1; 9,-1), time: 30.0118s, #vars: 1511, #constrs: 839, improved: True
PGD done for relu layer 5
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(87, -1), (56, -1), (12, -1), (70, -1), (72, -1), (57, -1), (32, -1), (77, -1), (36, -1), (85, -1), (79, -1), (42, -1), (52, -1), (58, -1), (50, -1), (16, -1), (78, -1), (68, -1), (75, 1), (31, -1), (89, -1), (69, -1), (17, -1), (8, 1), (73, -1), (9, -1), (99, -1), (83, -1), (61, -1), (74, -1), (62, -1), (20, 1), (82, -1), (39, 1), (93, 1), (48, -1), (86, -1), (41, 1), (60, 1), (97, -1), (22, 1), (44, 1), (46, -1), (28, -1), (35, -1), (94, -1), (54, -1), (71, 1), (63, 1), (26, -1), (3, -1), (40, 1), (6, 1), (53, 1), (51, -1)]
best_l after optimization: 15.286931037902832 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.085039854049683
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.38740814,  2.41336250,  2.08833694,  1.43418586,  1.79393005,
         -0.73877883,  3.02450967,  0.41289163,  3.47108483]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 48.818199157714844, ub improved 97.60342407226562, time 66.6575
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=100, bias=True) 5 12 torch.Size([100])
sorted candidates ['lay12_18', 'lay12_86', 'lay12_94', 'lay12_7', 'lay12_3', 'lay12_72', 'lay12_35', 'lay12_29', 'lay12_81', 'lay12_17', 'lay12_4', 'lay12_13', 'lay12_30', 'lay12_66', 'lay12_74', 'lay12_90', 'lay12_15', 'lay12_27', 'lay12_99', 'lay12_52', 'lay12_55', 'lay12_62', 'lay12_89', 'lay12_40', 'lay12_47', 'lay12_9', 'lay12_69', 'lay12_2', 'lay12_26', 'lay12_70', 'lay12_85', 'lay12_73', 'lay12_91', 'lay12_49', 'lay12_75', 'lay12_25', 'lay12_50', 'lay12_0', 'lay12_98', 'lay12_92', 'lay12_68', 'lay12_59', 'lay12_88', 'lay12_46', 'lay12_10', 'lay12_53', 'lay12_93', 'lay12_43', 'lay12_71', 'lay12_77', 'lay12_24', 'lay12_8', 'lay12_48', 'lay12_95', 'lay12_54', 'lay12_96', 'lay12_78', 'lay12_34', 'lay12_51', 'lay12_1', 'lay12_23', 'lay12_57', 'lay12_20', 'lay12_31', 'lay12_21', 'lay12_61', 'lay12_32', 'lay12_65', 'lay12_39', 'lay12_42', 'lay12_82', 'lay12_44', 'lay12_80', 'lay12_58', 'lay12_84', 'lay12_5', 'lay12_87', 'lay12_33', 'lay12_12', 'lay12_83', 'lay12_19', 'lay12_11', 'lay12_38', 'lay12_45', 'lay12_79', 'lay12_41', 'lay12_37', 'lay12_64', 'lay12_36', 'lay12_97', 'lay12_14', 'lay12_60', 'lay12_22', 'lay12_76', 'lay12_28', 'lay12_63', 'lay12_67', 'lay12_16', 'lay12_56', 'lay12_6'] filter: 1.0
Solving MIP for lay12_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3965s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4461s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5124s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5247s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5319s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5343s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5553s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5684s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5873s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5992s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5987s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6087s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6152s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4025s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3483s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3693s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4235s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9765s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4113s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3751s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4149s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4601s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8136s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3604s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4019s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4126s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8548s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.2733s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_35, [-inf,inf]=>[1e-05,0.8892577340213066] (15,-1; 2,-1), time: 9.7129s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4133s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4041s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3604s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3687s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_69, [-inf,inf]=>[1e-05,0.7363422654211103] (15,-1; 2,-1), time: 11.8506s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3611s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_50, [-inf,inf]=>[1e-05,1.046977911967636] (15,-1; 9,-1), time: 15.3298s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_98, [-inf,inf]=>[1e-05,4.609074916743962] (15,-1; 9,-1), time: 15.3638s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3394s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_25, [-inf,inf]=>[1e-05,0.4411076791881769] (15,-1; 9,-1), time: 21.8709s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_24, [-inf,inf]=>[1e-05,2.9969768845429505] (15,-1; 9,-1), time: 15.4063s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_66, [-inf,inf]=>[-0.5415671041600796,0.1777944503683994] (9,-1; 9,-1), time: 30.0411s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4069s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_52, [-inf,inf]=>[-0.10707402083927212,0.21560686646982025] (9,-1; 9,-1), time: 30.0174s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_62, [-inf,inf]=>[-0.07046333256665406,0.2598660864362161] (9,-1; 9,-1), time: 30.0176s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_70, [-inf,inf]=>[-0.004599648246549858,0.6887709665457908] (9,-1; 9,-1), time: 30.0596s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_85, [-inf,inf]=>[-0.2153575791750257,0.08184111371659702] (9,-1; 9,-1), time: 30.0591s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4340s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_75, [-inf,inf]=>[-0.04509657636262684,0.41513393915920666] (9,-1; 9,-1), time: 30.1616s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4371s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_92, [-inf,inf]=>[-0.13215902103243038,0.17064873665696204] (9,-1; 9,-1), time: 30.0297s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_68, [-inf,inf]=>[-0.41433858515121974,0.134922410586977] (9,-1; 9,-1), time: 30.0230s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_59, [-inf,inf]=>[-0.1645531162803682,0.6172639964988057] (9,-1; 9,-1), time: 30.0174s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3287s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3294s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3539s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4019s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3387s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3403s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_95, [-inf,inf]=>[1e-05,0.9566429084785717] (15,-1; 9,-1), time: 15.3729s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3938s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3526s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3996s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4063s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_88, [-inf,inf]=>[-0.23103099603729813,0.40393124435416516] (9,-1; 9,-1), time: 30.0192s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_71, [-inf,inf]=>[-0.16913827417959737,0.0861638929633148] (2,-1; 9,-1), time: 22.5085s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3715s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_46, [-inf,inf]=>[-0.3782049607322173,0.17921132146120092] (9,-1; 9,-1), time: 30.2831s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3517s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3747s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_83, [-inf,inf]=>[1e-05,2.976320054022837] (15,-1; 2,-1), time: 11.5883s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_34, [-inf,inf]=>[1e-05,2.5051981094606575] (15,-1; 9,-1), time: 15.3733s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_23, [-inf,inf]=>[1e-05,0.552015724189016] (15,-1; 9,-1), time: 15.3694s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_20, [-inf,inf]=>[1e-05,0.7352609610693209] (15,-1; 9,-1), time: 15.4741s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_31, [-inf,inf]=>[1e-05,2.0394586221135467] (15,-1; 9,-1), time: 15.3648s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_48, [-inf,inf]=>[-0.3936893472592002,0.10115241515210203] (9,-1; 9,-1), time: 30.0293s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4532s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3448s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3774s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_80, [-inf,inf]=>[1e-05,0.615981738872494] (15,-1; 9,-1), time: 15.3624s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_58, [-inf,inf]=>[1e-05,1.3610835509492594] (15,-1; 9,-1), time: 15.3789s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_87, [-inf,inf]=>[1e-05,3.4355836181127035] (15,-1; 9,-1), time: 15.4050s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3586s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4146s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3973s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3817s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.4182s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_11, [-inf,inf]=>[1e-05,1.4806719379036337] (15,-1; 9,-1), time: 15.3770s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_54, [-inf,inf]=>[-0.1947225691425344,0.2776582838200064] (9,-1; 9,-1), time: 30.0511s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.1066s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_96, [-inf,inf]=>[-0.43367913279874604,0.019998829426945888] (9,-1; 9,-1), time: 30.1259s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_41, [-inf,inf]=>[1e-05,0.9866619413823147] (15,-1; 9,-1), time: 15.3591s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_1, [-inf,inf]=>[-0.6423771484489892,0.01240012519515877] (9,-1; 9,-1), time: 30.1294s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_37, [-inf,inf]=>[1e-05,1.0298338389581165] (15,-1; 9,-1), time: 15.3334s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_64, [-inf,inf]=>[1e-05,0.4967231315162984] (15,-1; 9,-1), time: 15.3567s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_63, [-inf,inf]=>[1e-05,3.723460418934603] (15,-1; 2,-1), time: 14.2134s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_97, [-inf,inf]=>[1e-05,1.5070104517668075] (15,-1; 9,-1), time: 15.3473s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_60, [-inf,inf]=>[1e-05,2.1865758032628695] (15,-1; 9,-1), time: 15.4509s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_33, [-inf,inf]=>[-0.3269905829613899,0.0712401289545819] (9,-1; 9,-1), time: 30.0155s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_12, [-inf,inf]=>[-0.15338079711001112,0.0739245298229131] (9,-1; 9,-1), time: 30.0168s, #vars: 1643, #constrs: 987, improved: True
Solving MIP for lay12_28, [-inf,inf]=>[1e-05,1.3063763759620834] (15,-1; 9,-1), time: 15.3959s, #vars: 1643, #constrs: 987, improved: True
PGD done for relu layer 6
Run alpha-CROWN after refining layer 10 and relu idx 4
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 4 has unstable to stable neurons: [(50, -1), (99, -1), (8, -1), (25, -1), (87, -1), (18, -1), (96, -1), (75, -1), (10, -1), (0, -1), (74, -1), (58, -1), (55, -1), (12, 1), (44, -1), (48, -1), (5, 1), (52, -1), (17, -1), (9, -1), (37, 1), (60, -1), (29, -1), (86, -1), (76, 1), (93, -1), (24, -1), (2, -1), (98, 1), (84, -1), (13, 1), (73, -1), (69, -1), (66, -1), (20, -1), (19, 1), (15, -1), (85, -1), (7, -1), (95, -1), (43, -1), (22, 1), (79, 1), (82, -1), (89, -1), (1, 1), (70, 1), (83, -1), (40, 1), (68, 1), (46, 1), (14, 1), (49, -1), (71, 1), (36, -1), (90, -1), (47, 1), (80, 1), (26, 1), (31, 1), (63, 1), (45, -1), (32, -1), (78, -1), (88, -1), (56, -1), (64, -1), (53, -1), (38, -1), (6, 1), (23, 1), (30, 1), (67, 1), (97, 1), (54, 1), (61, 1), (33, 1), (59, -1), (81, -1), (65, 1), (41, 1), (72, 1), (91, 1), (62, 1)]
best_l after optimization: 18.901161193847656 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.552502870559692
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.78219342,  2.69966650,  2.41933155,  1.80799413,  2.27308702,
         -0.35185486,  3.33808470,  0.97041488,  3.96224451]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 104.24848175048828, ub improved 221.75730895996094, time 63.5462
maximum relu layer improved by MIP so far 5
Linear(in_features=100, out_features=100, bias=True) 6 14 torch.Size([100])
sorted candidates ['lay14_65', 'lay14_79', 'lay14_70', 'lay14_82', 'lay14_14', 'lay14_72', 'lay14_64', 'lay14_3', 'lay14_36', 'lay14_2', 'lay14_97', 'lay14_24', 'lay14_47', 'lay14_71', 'lay14_73', 'lay14_92', 'lay14_46', 'lay14_41', 'lay14_16', 'lay14_11', 'lay14_38', 'lay14_67', 'lay14_75', 'lay14_91', 'lay14_98', 'lay14_80', 'lay14_1', 'lay14_99', 'lay14_69', 'lay14_81', 'lay14_8', 'lay14_96', 'lay14_12', 'lay14_33', 'lay14_44', 'lay14_90', 'lay14_78', 'lay14_19', 'lay14_28', 'lay14_22', 'lay14_18', 'lay14_86', 'lay14_37', 'lay14_88', 'lay14_83', 'lay14_50', 'lay14_29', 'lay14_27', 'lay14_59', 'lay14_84', 'lay14_39', 'lay14_31', 'lay14_68', 'lay14_58', 'lay14_9', 'lay14_56', 'lay14_20', 'lay14_45', 'lay14_62', 'lay14_25', 'lay14_76', 'lay14_21', 'lay14_4', 'lay14_43', 'lay14_40', 'lay14_87', 'lay14_52', 'lay14_93', 'lay14_54', 'lay14_32', 'lay14_89', 'lay14_26', 'lay14_15', 'lay14_66', 'lay14_35', 'lay14_51', 'lay14_95', 'lay14_57', 'lay14_5', 'lay14_55', 'lay14_77', 'lay14_94', 'lay14_34', 'lay14_63', 'lay14_60', 'lay14_49', 'lay14_0', 'lay14_7', 'lay14_23', 'lay14_61', 'lay14_30', 'lay14_13', 'lay14_10', 'lay14_42', 'lay14_17', 'lay14_74', 'lay14_48', 'lay14_6', 'lay14_53', 'lay14_85'] filter: 1.0
Solving MIP for lay14_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4538s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4630s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4941s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5096s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5601s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5684s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5911s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5954s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6180s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6635s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4300s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4211s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4215s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4846s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4393s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4806s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6347s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4259s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4198s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4102s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4266s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4113s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5500s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4049s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3881s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6339s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5349s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5328s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5101s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_92, [-inf,inf]=>[1e-05,0.3393893402151414] (15,-1; 9,-1), time: 15.4535s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_97, [-inf,inf]=>[1e-05,0.7636574380129779] (15,-1; 9,-1), time: 15.5233s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_41, [-inf,inf]=>[1e-05,2.049227561377921] (15,-1; 9,-1), time: 15.4005s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4158s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_67, [-inf,inf]=>[1e-05,1.032036115161263] (15,-1; 9,-1), time: 15.4949s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4072s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_90, [-inf,inf]=>[1e-05,0.4882415877563365] (15,-1; 2,-1), time: 15.1475s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_96, [-inf,inf]=>[1e-05,1.8801661952704989] (15,-1; 9,-1), time: 15.4972s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_33, [-inf,inf]=>[1e-05,1.6320422943432709] (15,-1; 9,-1), time: 15.4508s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_44, [-inf,inf]=>[1e-05,0.34070917270920603] (15,-1; 9,-1), time: 15.4536s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_78, [-inf,inf]=>[1e-05,1.3862521678159456] (15,-1; 9,-1), time: 15.4495s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4201s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3766s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4288s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4028s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_18, [-inf,inf]=>[1e-05,0.6753018921041728] (15,-1; 9,-1), time: 15.4459s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_64, [-inf,inf]=>[-0.4318936345629192,0.004185456517428405] (9,-1; 9,-1), time: 30.0153s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_73, [-inf,inf]=>[-0.4455662612106152,0.0717446407880204] (9,-1; 9,-1), time: 30.0874s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_72, [-inf,inf]=>[-0.12114086142258525,0.26768750372067845] (9,-1; 9,-1), time: 30.1321s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_36, [-inf,inf]=>[-0.06563030472457816,0.2520589932360577] (9,-1; 9,-1), time: 30.1856s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3941s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_75, [-inf,inf]=>[-0.172518139610189,0.10655414796878818] (9,-1; 9,-1), time: 30.0290s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_29, [-inf,inf]=>[1e-05,0.7692473141714411] (15,-1; 9,-1), time: 15.5043s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4922s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_59, [-inf,inf]=>[1e-05,0.6361772953528455] (15,-1; 9,-1), time: 15.5187s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5211s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_84, [-inf,inf]=>[1e-05,0.5067489788657373] (15,-1; 9,-1), time: 15.5699s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_39, [-inf,inf]=>[1e-05,0.5741556086597218] (15,-1; 9,-1), time: 15.4974s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_31, [-inf,inf]=>[1e-05,0.9125353840047691] (15,-1; 9,-1), time: 15.4153s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4359s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4160s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_20, [-inf,inf]=>[1e-05,1.1432132594593367] (15,-1; 9,-1), time: 15.4849s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_62, [-inf,inf]=>[1e-05,2.3230243320806476] (15,-1; 9,-1), time: 15.4929s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_76, [-inf,inf]=>[1e-05,1.6441508689365616] (15,-1; 9,-1), time: 15.4115s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_83, [-inf,inf]=>[-0.2767570256884913,0.03294990315673999] (9,-1; 9,-1), time: 30.0650s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_5, [-inf,inf]=>[1e-05,4.108709820213589] (15,-1; 2,-1), time: 8.0962s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.4067s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_21, [-inf,inf]=>[1e-05,0.5914828091617973] (15,-1; 9,-1), time: 15.4251s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_4, [-inf,inf]=>[1e-05,1.4141480660262276] (15,-1; 9,-1), time: 15.4639s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_40, [-inf,inf]=>[1e-05,1.829964447528966] (15,-1; 9,-1), time: 15.3896s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4280s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_87, [-inf,inf]=>[1e-05,0.35428908987117813] (15,-1; 9,-1), time: 15.5005s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4852s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4596s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4273s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4036s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_58, [-inf,inf]=>[-0.11716757038882743,0.17569280885016744] (9,-1; 9,-1), time: 30.1324s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_32, [-inf,inf]=>[1e-05,1.2454312737132054] (15,-1; 9,-1), time: 15.6213s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_35, [-inf,inf]=>[1e-05,1.8912417785029532] (15,-1; 9,-1), time: 15.4487s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_25, [-inf,inf]=>[-0.19057811702203986,0.04896518383386276] (9,-1; 9,-1), time: 30.0221s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_66, [-inf,inf]=>[1e-05,0.5425632120124259] (15,-1; 9,-1), time: 15.6511s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_51, [-inf,inf]=>[1e-05,2.3753169261304303] (15,-1; 9,-1), time: 15.5122s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_95, [-inf,inf]=>[1e-05,0.5758577782087227] (15,-1; 9,-1), time: 15.3979s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5168s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_89, [-inf,inf]=>[1e-05,0.4855391912645015] (15,-1; 9,-1), time: 16.6250s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_55, [-inf,inf]=>[1e-05,1.429080123856626] (15,-1; 9,-1), time: 15.6619s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_77, [-inf,inf]=>[1e-05,0.5862241828998856] (15,-1; 9,-1), time: 15.4557s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_10, [-inf,inf]=>[1e-05,2.3876472737935166] (15,-1; 2,-1), time: 10.5207s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_42, [-inf,inf]=>[1e-05,1.9404986938838862] (15,-1; 2,-1), time: 11.6149s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_63, [-inf,inf]=>[1e-05,2.196363645591717] (15,-1; 9,-1), time: 15.4425s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_54, [-inf,inf]=>[-0.05163141600260628,0.2580224360276326] (9,-1; 9,-1), time: 30.0106s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_0, [-inf,inf]=>[1e-05,1.5102840056233031] (15,-1; 9,-1), time: 15.4791s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_23, [-inf,inf]=>[1e-05,1.1023425679001542] (15,-1; 9,-1), time: 15.5008s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_13, [-inf,inf]=>[1e-05,1.2533141492487723] (15,-1; 9,-1), time: 15.3977s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_30, [-inf,inf]=>[1e-05,1.2416613523217486] (15,-1; 9,-1), time: 15.4388s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_48, [-inf,inf]=>[1e-05,1.208034792753788] (15,-1; 9,-1), time: 15.4717s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_74, [-inf,inf]=>[1e-05,0.8726335991705736] (15,-1; 9,-1), time: 15.5637s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_53, [-inf,inf]=>[1e-05,0.8012092285465554] (15,-1; 9,-1), time: 15.4182s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_94, [-inf,inf]=>[-0.09325489908364497,0.17211342886384592] (9,-1; 9,-1), time: 30.0105s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_6, [-inf,inf]=>[-0.13819398141645298,0.12019600486067775] (9,-1; 9,-1), time: 30.1930s, #vars: 1779, #constrs: 1141, improved: True
Solving MIP for lay14_85, [-inf,inf]=>[-0.09366289500395023,0.19201786302169768] (9,-1; 9,-1), time: 30.0164s, #vars: 1779, #constrs: 1141, improved: True
PGD done for relu layer 7
Run alpha-CROWN after refining layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 5 has unstable to stable neurons: [(18, -1), (86, -1), (94, -1), (7, -1), (3, -1), (72, -1), (35, 1), (29, -1), (81, -1), (17, -1), (4, -1), (13, -1), (30, -1), (74, -1), (90, -1), (15, -1), (27, -1), (99, -1), (55, -1), (89, -1), (40, -1), (47, -1), (9, -1), (69, 1), (2, -1), (26, -1), (73, -1), (91, -1), (49, -1), (25, 1), (50, 1), (0, -1), (98, 1), (10, -1), (53, -1), (93, -1), (43, -1), (77, -1), (24, 1), (8, -1), (95, 1), (78, -1), (34, 1), (51, -1), (23, 1), (57, -1), (20, 1), (31, 1), (21, -1), (61, -1), (32, -1), (65, -1), (39, -1), (42, -1), (82, -1), (44, -1), (80, 1), (58, 1), (84, -1), (5, -1), (87, 1), (83, 1), (19, -1), (11, 1), (38, -1), (45, -1), (79, -1), (41, 1), (37, 1), (64, 1), (36, -1), (97, 1), (14, -1), (60, 1), (22, -1), (76, -1), (28, 1), (63, 1), (67, -1), (16, -1), (56, -1), (6, -1)]
best_l after optimization: 20.879911422729492 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 11.567525625228882
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.02853656,  2.85021734,  2.57506323,  2.02348661,  2.54011321,
         -0.10782415,  3.48889136,  1.25954986,  4.22187757]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 300.6167907714844, ub improved 500.80389404296875, time 78.8639
maximum relu layer improved by MIP so far 6
Linear(in_features=100, out_features=100, bias=True) 7 16 torch.Size([100])
sorted candidates ['lay16_45', 'lay16_19', 'lay16_87', 'lay16_53', 'lay16_49', 'lay16_51', 'lay16_79', 'lay16_40', 'lay16_91', 'lay16_62', 'lay16_29', 'lay16_41', 'lay16_60', 'lay16_2', 'lay16_88', 'lay16_61', 'lay16_55', 'lay16_67', 'lay16_43', 'lay16_25', 'lay16_44', 'lay16_32', 'lay16_82', 'lay16_37', 'lay16_98', 'lay16_99', 'lay16_68', 'lay16_92', 'lay16_4', 'lay16_36', 'lay16_17', 'lay16_11', 'lay16_58', 'lay16_81', 'lay16_9', 'lay16_78', 'lay16_47', 'lay16_84', 'lay16_64', 'lay16_89', 'lay16_1', 'lay16_54', 'lay16_69', 'lay16_72', 'lay16_3', 'lay16_21', 'lay16_97', 'lay16_74', 'lay16_48', 'lay16_90', 'lay16_13', 'lay16_66', 'lay16_71', 'lay16_52', 'lay16_86', 'lay16_31', 'lay16_85', 'lay16_10', 'lay16_63', 'lay16_35', 'lay16_5', 'lay16_24', 'lay16_30', 'lay16_23', 'lay16_15', 'lay16_7', 'lay16_77', 'lay16_95', 'lay16_8', 'lay16_18', 'lay16_28', 'lay16_22', 'lay16_16', 'lay16_83', 'lay16_42', 'lay16_76', 'lay16_0', 'lay16_70', 'lay16_26', 'lay16_6', 'lay16_75', 'lay16_93', 'lay16_14', 'lay16_57', 'lay16_38', 'lay16_34', 'lay16_80', 'lay16_96', 'lay16_65', 'lay16_39', 'lay16_59', 'lay16_12', 'lay16_73', 'lay16_27', 'lay16_50', 'lay16_20', 'lay16_56', 'lay16_94', 'lay16_33', 'lay16_46'] filter: 1.0
Solving MIP for lay16_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5843s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6004s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6296s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6530s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6577s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6619s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6671s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6680s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6942s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7098s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7394s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7713s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7833s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4925s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5535s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5093s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4566s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6034s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5899s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4376s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5354s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4252s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5099s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0867s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5012s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4761s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4693s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5446s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4965s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4649s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4782s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7754s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4621s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4690s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.3774s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5580s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_61, [-inf,inf]=>[1e-05,0.44263798550349687] (15,-1; 9,-1), time: 15.5533s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_37, [-inf,inf]=>[1e-05,0.6152281328382952] (15,-1; 9,-1), time: 15.5114s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_32, [-inf,inf]=>[1e-05,0.5926185084901492] (15,-1; 9,-1), time: 15.6410s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_25, [-inf,inf]=>[1e-05,1.347656619534448] (15,-1; 9,-1), time: 15.6950s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5552s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4663s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_78, [-inf,inf]=>[1e-05,0.8153215706794259] (15,-1; 9,-1), time: 15.5241s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4996s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_84, [-inf,inf]=>[1e-05,2.134854406110376] (15,-1; 9,-1), time: 15.4574s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4369s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4210s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_69, [-inf,inf]=>[1e-05,0.8768638374727008] (15,-1; 9,-1), time: 15.4870s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_74, [-inf,inf]=>[1e-05,1.618538252698955] (15,-1; 9,-1), time: 15.4735s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_40, [-inf,inf]=>[-0.1454832610668609,0.5470095211626331] (9,-1; 9,-1), time: 30.0304s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_49, [-inf,inf]=>[-0.58155203953672,0.04016818427171494] (9,-1; 9,-1), time: 30.1127s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4722s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_82, [-inf,inf]=>[-0.16206854173103513,0.008510118338593484] (9,-1; 9,-1), time: 30.0126s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_43, [-inf,inf]=>[-0.8144370123441222,0.09865675955275358] (9,-1; 9,-1), time: 30.1026s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_71, [-inf,inf]=>[1e-05,1.6468754129587049] (15,-1; 9,-1), time: 15.5214s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4441s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_11, [-inf,inf]=>[-0.16163032572246233,0.06771436598694754] (9,-1; 9,-1), time: 30.0746s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5137s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4703s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4693s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5587s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_31, [-inf,inf]=>[1e-05,1.1521564777031015] (15,-1; 9,-1), time: 15.5025s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_64, [-inf,inf]=>[-0.2442134095861981,0.14480212485336555] (9,-1; 9,-1), time: 30.1662s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4714s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_10, [-inf,inf]=>[1e-05,0.7970678563157048] (15,-1; 9,-1), time: 15.4440s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6097s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4322s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4088s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_63, [-inf,inf]=>[1e-05,0.2474317665234068] (15,-1; 9,-1), time: 15.4534s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_5, [-inf,inf]=>[1e-05,1.797741679614323] (15,-1; 9,-1), time: 15.6035s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4390s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4362s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4690s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_30, [-inf,inf]=>[1e-05,0.4763993240300137] (15,-1; 9,-1), time: 15.6224s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_23, [-inf,inf]=>[1e-05,1.220679034466145] (15,-1; 9,-1), time: 15.6287s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5162s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_90, [-inf,inf]=>[-0.47998546024589966,0.010314153943871158] (9,-1; 9,-1), time: 30.0857s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_15, [-inf,inf]=>[1e-05,1.447815427152683] (15,-1; 9,-1), time: 15.5049s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_66, [-inf,inf]=>[-0.17481186247200747,0.3616617888766436] (9,-1; 9,-1), time: 30.1080s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_80, [-inf,inf]=>[1e-05,2.6902574488645183] (15,-1; 2,-1), time: 9.8821s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_77, [-inf,inf]=>[1e-05,1.7085804195119159] (15,-1; 9,-1), time: 15.5248s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_83, [-inf,inf]=>[1e-05,0.6500943959020425] (15,-1; 9,-1), time: 15.5460s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_76, [-inf,inf]=>[1e-05,2.5301567867220136] (15,-1; 9,-1), time: 15.5300s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_26, [-inf,inf]=>[1e-05,0.6609042621836575] (15,-1; 9,-1), time: 15.4312s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_70, [-inf,inf]=>[1e-05,0.4282147837313964] (15,-1; 9,-1), time: 15.6022s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4679s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_14, [-inf,inf]=>[1e-05,2.7914917922739986] (15,-1; 9,-1), time: 15.5601s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_34, [-inf,inf]=>[1e-05,1.7984498970231584] (15,-1; 9,-1), time: 15.6574s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_65, [-inf,inf]=>[1e-05,1.0697826194105104] (15,-1; 9,-1), time: 15.4797s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_12, [-inf,inf]=>[1e-05,0.9116712140340903] (15,-1; 9,-1), time: 15.5647s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_27, [-inf,inf]=>[1e-05,1.9746260501543136] (15,-1; 9,-1), time: 15.6063s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_50, [-inf,inf]=>[1e-05,0.9713316676636414] (15,-1; 9,-1), time: 15.4332s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_33, [-inf,inf]=>[1e-05,1.4817495955640676] (15,-1; 2,-1), time: 10.6550s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_20, [-inf,inf]=>[1e-05,1.0920458604858854] (15,-1; 9,-1), time: 15.5140s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_95, [-inf,inf]=>[-0.17537992502052768,0.1841187028397306] (9,-1; 9,-1), time: 30.0264s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_56, [-inf,inf]=>[1e-05,0.4799358734137754] (15,-1; 9,-1), time: 15.5777s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_57, [-inf,inf]=>[-0.33001607568777325,0.3794897931046731] (9,-1; 9,-1), time: 30.1175s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_39, [-inf,inf]=>[-0.3425169236366823,0.3570371023058728] (9,-1; 9,-1), time: 30.1113s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_73, [-inf,inf]=>[-0.17210355085534487,0.35127562895008085] (9,-1; 9,-1), time: 30.2439s, #vars: 1903, #constrs: 1277, improved: True
Solving MIP for lay16_94, [-inf,inf]=>[-0.22988103889184044,0.06203252597642297] (9,-1; 9,-1), time: 30.0330s, #vars: 1903, #constrs: 1277, improved: True
Run alpha-CROWN after refining layer 14 and relu idx 6
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 6 has unstable to stable neurons: [(65, -1), (79, -1), (70, -1), (82, -1), (14, -1), (3, -1), (2, -1), (97, 1), (24, -1), (47, -1), (71, -1), (92, 1), (46, -1), (41, 1), (16, -1), (11, -1), (38, -1), (67, 1), (91, -1), (98, -1), (80, -1), (1, -1), (99, -1), (69, -1), (81, -1), (8, -1), (96, 1), (12, -1), (33, 1), (44, 1), (90, 1), (78, 1), (19, -1), (28, -1), (22, -1), (18, 1), (86, -1), (37, -1), (88, -1), (50, -1), (29, 1), (27, -1), (59, 1), (84, 1), (39, 1), (31, 1), (68, -1), (9, -1), (56, -1), (20, 1), (45, -1), (62, 1), (76, 1), (21, 1), (4, 1), (43, -1), (40, 1), (87, 1), (52, -1), (93, -1), (32, 1), (89, 1), (26, -1), (15, -1), (66, 1), (35, 1), (51, 1), (95, 1), (57, -1), (5, 1), (55, 1), (77, 1), (34, -1), (63, 1), (60, -1), (49, -1), (0, 1), (7, -1), (23, 1), (61, -1), (30, 1), (13, 1), (10, 1), (42, 1), (17, -1), (74, 1), (48, 1), (53, 1)]
best_l after optimization: 21.3321475982666 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.122409582138062
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.07436538,  2.88441730,  2.61234617,  2.08141422,  2.58491850,
         -0.08916914,  3.53900433,  1.34151292,  4.30333710]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 585.1813354492188, ub improved 1111.734375, time 77.5488
maximum relu layer improved by MIP so far 7
Linear(in_features=100, out_features=10, bias=True) 8 18 torch.Size([9, 1])
MIP finished with 379.8376889228821s
Run final alpha-CROWN after MIP solving on layer 18 and relu idx 8
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
best_l after optimization: 21.8226318359375 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 8.005659580230713
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 2.13441157,  2.89476609,  2.64927578,  2.13163567,  2.67483425,
         -0.03246391,  3.56104422,  1.45026565,  4.35886335]], device='cuda:0') None
refined global lb: tensor([[ 2.13441157],
        [ 2.89476609],
        [ 2.64927578],
        [ 2.13163567],
        [ 2.67483425],
        [-0.03246391],
        [ 3.56104422],
        [ 1.45026565],
        [ 4.35886335]], device='cuda:0') min: tensor(-0.03246391, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 497.08148527145386
##### Instance 0 first 10 spec matrices: [[[-1.  0.  1.  0.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.134411573410034.

Properties batch 1, size 1
Remaining timeout: 497.00215435028076
##### Instance 0 first 10 spec matrices: [[[ 0. -1.  1.  0.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.894766092300415.

Properties batch 2, size 1
Remaining timeout: 496.95657992362976
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1. -1.  0.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.649275779724121.

Properties batch 3, size 1
Remaining timeout: 496.91122603416443
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0. -1.  0.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.1316356658935547.

Properties batch 4, size 1
Remaining timeout: 496.86587405204773
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0. -1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.6748342514038086.

Properties batch 5, size 1
Remaining timeout: 496.8205418586731
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0.  0. -1.  0.  0.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.03246391]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.21560705,  0.22183204,  5.10792542,  0.28054398,  0.00971119,
        -1.09514034,  2.48394465, -1.06155634, -0.56578505, -3.77237415],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.03246391]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
layer 0 name BoundLinear(name="/input") size torch.Size([100]) unstable 31
layer 1 name BoundLinear(name="/input.3") size torch.Size([100]) unstable 30
layer 2 name BoundLinear(name="/input.7") size torch.Size([100]) unstable 24
layer 3 name BoundLinear(name="/input.11") size torch.Size([100]) unstable 28
layer 4 name BoundLinear(name="/input.15") size torch.Size([100]) unstable 16
layer 5 name BoundLinear(name="/input.19") size torch.Size([100]) unstable 18
layer 6 name BoundLinear(name="/input.23") size torch.Size([100]) unstable 12
layer 7 name BoundLinear(name="/input.27") size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 172
-----------------

batch:  torch.Size([1, 100]) pre split depth:  6
post split depth:  6
splitting decisions: 
split level 0: [2, 60] 
split level 1: [4, 11] 
split level 2: [7, 40] 
split level 3: [7, 49] 
split level 4: [7, 43] 
split level 5: [5, 46] 
pruning_in_iteration open status: True
ratio of positive domain = 60 / 64 = 0.9375
pruning-in-iteration extra time: 0.016245126724243164
Time: prepare 0.0194    beta_bound 0.6411    bound 0.6412    transfer 0.0008    finalize 0.0148    func 0.6762    
Accumulated time: func 0.6762    prepare 0.0259    bound 0.6412    beta_bound 0.6411    transfer 0.0008    finalize 0.0148    
batch bounding time:  0.6763207912445068
Current worst splitting domains lb-rhs (depth):
-0.03246 (6), -0.02064 (6), -0.01515 (6), -0.00661 (6), 
length of domains: 4
Time: pickout 0.0017    decision 0.2688    solve 0.6876    add 0.0035    
Accumulated time: pickout 0.0017    decision 0.2688    solve 0.6876    add 0.0035    
Current (lb-rhs): -0.032463908195495605
4 domains visited
Cumulative time: 0.9860444068908691

batch:  torch.Size([4, 100]) pre split depth:  4
post split depth:  4
splitting decisions: 
split level 0: [2, 21] [2, 21] [2, 21] [2, 21] 
split level 1: [4, 77] [4, 77] [4, 77] [1, 49] 
split level 2: [1, 96] [1, 96] [1, 96] [1, 96] 
split level 3: [0, 85] [0, 85] [4, 57] [5, 54] 

all verified at 5th iter
pruning_in_iteration open status: True
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.003923654556274414
Time: prepare 0.0186    beta_bound 0.1196    bound 0.1197    transfer 0.0008    finalize 0.0158    func 0.1548    
Accumulated time: func 0.8311    prepare 0.0495    bound 0.7609    beta_bound 0.7607    transfer 0.0015    finalize 0.0306    
batch bounding time:  0.15496826171875
length of domains: 0
Time: pickout 0.0020    decision 0.0456    solve 0.1652    add 0.0030    
Accumulated time: pickout 0.0036    decision 0.3144    solve 0.8528    add 0.0065    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
4 domains visited
Cumulative time: 1.2023272514343262


Properties batch 6, size 1
Remaining timeout: 495.503545999527
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0.  0.  0. -1.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.561044216156006.

Properties batch 7, size 1
Remaining timeout: 495.45420026779175
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0.  0.  0.  0. -1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.450265645980835.

Properties batch 8, size 1
Remaining timeout: 495.40862011909485
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  1.  0.  0.  0.  0.  0.  0. -1.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.358863353729248.
Result: safe in 404.6371 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):404.6330135968507, max time: 404.6370599269867
mean time for verified SAFE instances(total 1): 404.6370599269867, max time: 404.6370599269867
safe (total 1), index: [0]
