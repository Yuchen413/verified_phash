Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_9_100
  path: mnist_9_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 553
  end: 554
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 1080.0
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 14:03:35 2023 on zeratul
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=100, bias=True)
  (12): ReLU()
  (13): Linear(in_features=100, out_features=100, bias=True)
  (14): ReLU()
  (15): Linear(in_features=100, out_features=100, bias=True)
  (16): ReLU()
  (17): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226457)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_9_100]_start=553_end=554_iter=20_b=1024_timeout=1080.0_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 553 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundParams(name=/13, inputs=[])
  (/14): BoundParams(name=/14, inputs=[])
  (/15): BoundParams(name=/15, inputs=[])
  (/16): BoundParams(name=/16, inputs=[])
  (/17): BoundParams(name=/17, inputs=[])
  (/18): BoundParams(name=/18, inputs=[])
  (/19): BoundShape(name=/19, inputs=[/0])
  (/20): BoundConstant(name=/20, inputs=[])
  (/21): BoundGather(name=/21, inputs=[/19, /20])
  (/22): BoundConstant(name=/22, inputs=[])
  (/23): BoundUnsqueeze(name=/23, inputs=[/21])
  (/24): BoundUnsqueeze(name=/24, inputs=[/22])
  (/25): BoundConcat(name=/25, inputs=[/23, /24])
  (/26): BoundReshape(name=/26, inputs=[/0, /25])
  (/input): BoundLinear(name=/input, inputs=[/26, /1, /2])
  (/28): BoundRelu(name=/28, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/28, /3, /4])
  (/30): BoundRelu(name=/30, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/30, /5, /6])
  (/32): BoundRelu(name=/32, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/32, /7, /8])
  (/34): BoundRelu(name=/34, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/34, /9, /10])
  (/36): BoundRelu(name=/36, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/36, /11, /12])
  (/38): BoundRelu(name=/38, inputs=[/input.19])
  (/input.23): BoundLinear(name=/input.23, inputs=[/38, /13, /14])
  (/40): BoundRelu(name=/40, inputs=[/input.23])
  (/input.27): BoundLinear(name=/input.27, inputs=[/40, /15, /16])
  (/42): BoundRelu(name=/42, inputs=[/input.27])
  (/43): BoundLinear(name=/43, inputs=[/42, /17, /18])
)
Model prediction is: tensor([[-0.48489553, -1.39149714,  0.13246238,  0.24095330, -3.24258041,
          2.77433348,  0.52672815, -2.47505617,  7.48759937, -0.99461943]],
       device='cuda:0')
layer /28 using sparse-features alpha with shape [26]; unstable size 26; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [44]; unstable size 44; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [69]; unstable size 69; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([100]); unstable size 94; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-147.42314148, -168.20391846, -182.17903137, -186.23892212,
         -212.79032898, -158.79867554, -177.61752319, -221.10942078,
         -221.14598083]], device='cuda:0') None
best_l after optimization: -744.8880004882812
alpha/beta optimization time: 14.07392168045044
initial alpha-CROWN bounds: tensor([[-60.02154160, -72.36040497, -87.34156036, -85.40172577, -95.53403473,
         -72.72961426, -80.79787445, -96.67400360, -94.02723694]],
       device='cuda:0')
Worst class: (+ rhs) -96.67400360107422
Split layers:
  BoundLinear(name=/input.11, inputs=[/32, /7, /8]): [(BoundRelu(name=/34, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.3, inputs=[/28, /3, /4]): [(BoundRelu(name=/30, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.19, inputs=[/36, /11, /12]): [(BoundRelu(name=/38, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.27, inputs=[/40, /15, /16]): [(BoundRelu(name=/42, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.23, inputs=[/38, /13, /14]): [(BoundRelu(name=/40, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.7, inputs=[/30, /5, /6]): [(BoundRelu(name=/32, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.15, inputs=[/34, /9, /10]): [(BoundRelu(name=/36, inputs=[/input.15]), 0)]
  BoundLinear(name=/input, inputs=[/26, /1, /2]): [(BoundRelu(name=/28, inputs=[/input]), 0)]
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.48489553, -1.39149714,  0.13246238,  0.24095330, -3.24258041,
          2.77433348,  0.52672815, -2.47505617,  7.48759937, -0.99461943]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.08649573, -2.06381845, -0.61094278,  0.07889980, -3.13545370,
           4.11656284,  1.32140291, -2.94608951,  6.50337505, -0.54933232],
         [-0.08649573, -2.06381845, -0.61094278,  0.07889980, -3.13545370,
           4.11656284,  1.32140291, -2.94608951,  6.50337505, -0.54933232]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[6.58987093, 8.56719398, 7.11431789, 6.42447519, 9.63882828,
          2.38681221, 5.18197203, 9.44946480, 7.05270720]]], device='cuda:0')
number of violation:  0
Attack finished in 0.9174 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /28 using sparse-features alpha with shape [26]; unstable size 26; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [44]; unstable size 44; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 69 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [69]; unstable size 69; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using full alpha with unstable size 94 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([100]); unstable size 94; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2024-02-29
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 864.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_28', 'lay4_94', 'lay4_93', 'lay4_57', 'lay4_72', 'lay4_54', 'lay4_27', 'lay4_90', 'lay4_48', 'lay4_19', 'lay4_41', 'lay4_16', 'lay4_24', 'lay4_91', 'lay4_50', 'lay4_1', 'lay4_39', 'lay4_4', 'lay4_45', 'lay4_13', 'lay4_96', 'lay4_36', 'lay4_0', 'lay4_15', 'lay4_35', 'lay4_75', 'lay4_18', 'lay4_2', 'lay4_92', 'lay4_60', 'lay4_99', 'lay4_40', 'lay4_38', 'lay4_71', 'lay4_76', 'lay4_34', 'lay4_42', 'lay4_25', 'lay4_68', 'lay4_32', 'lay4_64', 'lay4_98', 'lay4_6', 'lay4_26'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/Verifier_Development/complete_verifier/data_utils.py:257: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2119s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3057s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2791s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.16127169081342968,0.8770120647286547] (2,-1; 2,-1), time: 0.7589s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-0.28121062704420013,0.8794508468518674] (2,-1; 2,-1), time: 0.8772s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-0.9488495276483763,0.15409195757247668] (2,-1; 2,-1), time: 0.8938s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.3370384883376486,1.4362988235549121] (2,-1; 2,-1), time: 1.3288s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[-1.0797680520949744,0.40089655181292216] (2,-1; 2,-1), time: 0.9867s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[-0.8110213838612779,0.4948627572744366] (2,-1; 2,-1), time: 1.7392s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[1e-05,1.6344527942456453] (15,-1; 2,-1), time: 1.8280s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-1.1341253500807325,0.17837932914989885] (2,-1; 2,-1), time: 1.8495s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.6795005340271248,0.05462105607606102] (2,-1; 2,-1), time: 1.8681s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-0.38222858718978686,0.708620477083146] (2,-1; 2,-1), time: 2.0260s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-0.913754156734227,0.014402510192498249] (2,-1; 2,-1), time: 1.7295s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_90, [-inf,inf]=>[-1.7860230425999684,0.004193039310706137] (2,-1; 2,-1), time: 2.2077s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_0, [-inf,inf]=>[-0.7907527612628239,0.877292163685749] (2,-1; 2,-1), time: 0.9664s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1707s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-0.9965500821341245,0.08871428159472118] (2,-1; 2,-1), time: 2.4022s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1505s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[0.0020393906978789364,1.0351726469083953] (2,-1; 2,-1), time: 2.5957s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_72, [-inf,inf]=>[-1.1411370335800675,0.25334524313410783] (2,-1; 2,-1), time: 2.6194s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2221s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[1e-05,1.2516531561171538] (15,-1; 2,-1), time: 0.6813s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_36, [-inf,inf]=>[-0.871906100395723,0.5750096452901703] (2,-1; 2,-1), time: 1.8372s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[1e-05,1.0282402297192967] (15,-1; 2,-1), time: 2.7948s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-0.7289741624943621,0.12039332967134932] (2,-1; 2,-1), time: 0.9852s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-0.12134618263017179,1.3698588822199553] (2,-1; 2,-1), time: 2.2037s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.3085125364197625,0.9266409826656193] (2,-1; 2,-1), time: 1.0984s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1911s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[1e-05,1.3709244718216294] (15,-1; 2,-1), time: 0.4564s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1467s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[1e-05,1.6538041187697141] (15,-1; 2,-1), time: 0.4313s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-0.10718064497591342,0.8914568779986541] (2,-1; 2,-1), time: 2.3530s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[1e-05,1.447303601941959] (15,-1; 2,-1), time: 0.5319s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-0.3665210422999885,0.7677515805514987] (2,-1; 2,-1), time: 0.8036s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_35, [-inf,inf]=>[-0.8134641717876256,0.2570489830209011] (2,-1; 2,-1), time: 1.8089s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.7403989745810587,0.42389593235643624] (2,-1; 2,-1), time: 2.1473s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_60, [-inf,inf]=>[-0.6981646298114785,0.23762708983614053] (2,-1; 2,-1), time: 1.6496s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.29155587243667586,0.4667415520283591] (2,-1; 2,-1), time: 1.8451s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-0.014111739388100744,1.0077749244314833] (2,-1; 2,-1), time: 1.6320s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.09104537065868368,0.9391699493409377] (2,-1; 2,-1), time: 1.6208s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-0.13383876375783205,1.078647070274231] (2,-1; 2,-1), time: 1.6012s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[1e-05,1.0704462232323646] (15,-1; 2,-1), time: 1.3789s, #vars: 1037, #constrs: 278, improved: True
Solving MIP for lay4_25, [-inf,inf]=>[1e-05,1.180067658616657] (15,-1; 2,-1), time: 1.9734s, #vars: 1037, #constrs: 278, improved: True
PGD done for relu layer 2
MIP improved 44 nodes out of 44 unstable nodes, lb improved 10.830961227416992, ub improved 9.181175231933594, time 7.1478
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_74', 'lay6_39', 'lay6_61', 'lay6_28', 'lay6_75', 'lay6_90', 'lay6_92', 'lay6_70', 'lay6_51', 'lay6_88', 'lay6_82', 'lay6_73', 'lay6_66', 'lay6_45', 'lay6_0', 'lay6_60', 'lay6_33', 'lay6_71', 'lay6_16', 'lay6_57', 'lay6_40', 'lay6_47', 'lay6_35', 'lay6_50', 'lay6_36', 'lay6_89', 'lay6_46', 'lay6_37', 'lay6_53', 'lay6_72', 'lay6_23', 'lay6_12', 'lay6_11', 'lay6_17', 'lay6_98', 'lay6_80', 'lay6_43', 'lay6_49', 'lay6_65', 'lay6_79', 'lay6_3', 'lay6_15', 'lay6_14', 'lay6_9', 'lay6_4', 'lay6_94', 'lay6_67', 'lay6_38', 'lay6_63', 'lay6_7', 'lay6_81', 'lay6_41', 'lay6_52', 'lay6_64', 'lay6_18', 'lay6_24', 'lay6_84', 'lay6_62', 'lay6_77', 'lay6_68', 'lay6_21', 'lay6_31', 'lay6_27', 'lay6_97', 'lay6_55', 'lay6_58', 'lay6_86'] filter: 1.0
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3825s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4783s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4835s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2305s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0527s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7418s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7814s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.1794s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2021s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.7058946163977867,0.32463069073261425] (2,-1; 2,-1), time: 4.7549s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-0.11941036893216916,0.9857700311219768] (2,-1; 2,-1), time: 5.4210s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-0.48002401612623224,0.17780017890457836] (2,-1; 2,-1), time: 5.1308s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-1.1045610964099357,0.14570206135655592] (2,-1; 2,-1), time: 5.6509s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.2243806704658239,0.45576901516536117] (2,-1; 2,-1), time: 5.8314s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-0.03346854911823009,0.7630680908754721] (2,-1; 2,-1), time: 5.0265s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.5142152735801561,0.20402775276937887] (2,-1; 2,-1), time: 5.7109s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-1.2375289909522473,0.1658579946356931] (2,-1; 2,-1), time: 5.5958s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2070s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-0.7383506298663607,0.23251468514751797] (2,-1; 2,-1), time: 6.5436s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.18722094450063595,0.9415899121771739] (2,-1; 2,-1), time: 6.7270s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2063s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.6817335839370505,0.06307984337902457] (2,-1; 2,-1), time: 6.8130s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-0.14387525621262368,0.8521774618202778] (2,-1; 2,-1), time: 5.0406s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3883s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-0.19305450961185355,0.6939852225500893] (2,-1; 2,-1), time: 6.0053s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[1e-05,1.5903058999946964] (15,-1; 2,-1), time: 2.3152s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.9205s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4954s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0666s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5294s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[-0.16709400774841976,0.7545689704801857] (2,-1; 2,-1), time: 9.8125s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.2813091588439531,0.23193149479922254] (2,-1; 2,-1), time: 9.8333s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.07071371921590702,1.3299224943254433] (2,-1; 2,-1), time: 4.8165s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-0.4619946581917146,0.1221939386238312] (2,-1; 2,-1), time: 6.9687s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-0.007322789505939452,0.7516235465792955] (2,-1; 2,-1), time: 4.9934s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-0.04665130091603119,1.3487083640711615] (2,-1; 2,-1), time: 6.1525s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-0.5239054144908556,0.22896940399139498] (2,-1; 2,-1), time: 4.3568s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2255s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[1e-05,1.5588627831759614] (15,-1; 2,-1), time: 2.0390s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.025188382330944063,1.0879387600650534] (2,-1; 2,-1), time: 5.4506s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-0.6138575754169561,0.7245135411988097] (2,-1; 2,-1), time: 4.5908s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0295s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2428s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-0.4151606657763304,0.02084967726865284] (2,-1; 2,-1), time: 7.0856s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3830s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1814s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[1e-05,1.3911176320159384] (15,-1; 2,-1), time: 2.2696s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2394s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1744s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-0.1416940557268399,0.818676927974526] (2,-1; 2,-1), time: 4.9777s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-0.166178638435591,0.4105877589419319] (2,-1; 2,-1), time: 4.9080s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[1e-05,0.7012032996850742] (15,-1; 2,-1), time: 6.7641s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1837s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-0.3472361354457023,0.4914865217993821] (2,-1; 2,-1), time: 4.6830s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-0.7311121871987099,0.061107765472586596] (2,-1; 2,-1), time: 9.0808s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[1e-05,1.5501193831211364] (15,-1; 2,-1), time: 2.9991s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[1e-05,2.045592103882555] (15,-1; 2,-1), time: 3.9457s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-0.7434129166426077,0.1318371341514451] (2,-1; 2,-1), time: 8.1576s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[1e-05,0.9137687901111854] (15,-1; 2,-1), time: 8.1004s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.06368878480584107,0.8248424429913814] (2,-1; 2,-1), time: 6.9067s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[1e-05,0.7852528638181987] (15,-1; 2,-1), time: 2.4986s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[-0.5794615421796633,0.6673889480844878] (2,-1; 2,-1), time: 5.2175s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-0.09889329721697099,0.5998235234419619] (2,-1; 2,-1), time: 6.2411s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.6360278176181867,0.17148692275536107] (2,-1; 2,-1), time: 8.5788s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-0.8035119357538083,0.18965860414098126] (2,-1; 2,-1), time: 5.4503s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.751290418259782,0.0827423713373743] (2,-1; 2,-1), time: 13.3932s, #vars: 1191, #constrs: 459, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[1e-05,1.5529606526023785] (15,-1; 2,-1), time: 8.0903s, #vars: 1191, #constrs: 459, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(93, 1), (27, -1), (19, 1), (24, 1), (50, -1), (39, -1), (92, 1), (99, -1), (38, -1), (71, -1), (42, 1), (25, 1), (32, 1), (64, 1), (98, -1), (6, -1), (26, 1)]
best_l after optimization: -350.7281799316406
beta sum per layer: []
alpha/beta optimization time: 15.212126016616821
alpha-CROWN with intermediate bounds by MIP: tensor([[-28.23139763, -33.85846329, -41.14928055, -39.87604141, -44.92478180,
         -34.59585190, -38.77976227, -45.09944153, -44.21316910]],
       device='cuda:0') None
MIP improved 67 nodes out of 67 unstable nodes, lb improved 19.737415313720703, ub improved 26.810876846313477, time 22.4772
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_67', 'lay8_85', 'lay8_59', 'lay8_36', 'lay8_81', 'lay8_71', 'lay8_2', 'lay8_75', 'lay8_21', 'lay8_31', 'lay8_64', 'lay8_72', 'lay8_12', 'lay8_69', 'lay8_27', 'lay8_62', 'lay8_82', 'lay8_83', 'lay8_16', 'lay8_96', 'lay8_39', 'lay8_63', 'lay8_95', 'lay8_29', 'lay8_97', 'lay8_56', 'lay8_5', 'lay8_79', 'lay8_41', 'lay8_99', 'lay8_11', 'lay8_24', 'lay8_88', 'lay8_76', 'lay8_3', 'lay8_6', 'lay8_55', 'lay8_73', 'lay8_38', 'lay8_30', 'lay8_45', 'lay8_54', 'lay8_19', 'lay8_43', 'lay8_47', 'lay8_14', 'lay8_48', 'lay8_22', 'lay8_34', 'lay8_37', 'lay8_32', 'lay8_10', 'lay8_58', 'lay8_98', 'lay8_70', 'lay8_78', 'lay8_18', 'lay8_25', 'lay8_9', 'lay8_50', 'lay8_46', 'lay8_77', 'lay8_44', 'lay8_66', 'lay8_13', 'lay8_8', 'lay8_4', 'lay8_23', 'lay8_52', 'lay8_20', 'lay8_49', 'lay8_15', 'lay8_94', 'lay8_92', 'lay8_28', 'lay8_80', 'lay8_57', 'lay8_26', 'lay8_74', 'lay8_1', 'lay8_68', 'lay8_84', 'lay8_51', 'lay8_35', 'lay8_40', 'lay8_86', 'lay8_90', 'lay8_53', 'lay8_87', 'lay8_0', 'lay8_91'] filter: 1.0
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3318s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3284s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3474s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3554s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3845s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3884s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2739s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2914s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3784s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3199s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0469s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.3854s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[1e-05,0.5370992937439558] (15,-1; 2,-1), time: 10.5336s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2274s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2564s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.8815109899312675,0.2564748775174608] (2,-1; 2,-1), time: 11.9353s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2273s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0837s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7477s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-1.4214665181814181,0.23623006899071095] (2,-1; 9,-1), time: 17.8400s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-0.40070494679920754,0.2557327062173789] (2,-1; 2,-1), time: 17.7640s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0459s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2800s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-0.8018385031314683,1.0089533083821163] (2,-1; 2,-1), time: 19.1908s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3272s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-1.7311346618563617,0.07580596944413588] (9,-1; 2,-1), time: 20.3499s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.8977285567406429,0.13012991044384864] (2,-1; 9,-1), time: 22.1225s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-0.06180099585880788,0.7451546325403574] (2,-1; 9,-1), time: 22.5077s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-0.16532560157795917,0.6398470267048048] (9,-1; 2,-1), time: 22.3969s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2640s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-0.8268345350920902,0.6017973230875424] (2,-1; 2,-1), time: 11.7723s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3417s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[-0.31790732128513666,0.4051553927145103] (9,-1; 2,-1), time: 22.7382s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-0.2637969015612209,0.2228220787485807] (9,-1; 2,-1), time: 22.5927s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2828s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-0.21042573841937828,0.6702740206727238] (2,-1; 9,-1), time: 23.0389s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2848s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-0.40129938189456155,0.31325214430455417] (9,-1; 2,-1), time: 27.2539s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-0.014259799824776799,1.246470120460636] (2,-1; 9,-1), time: 26.5685s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.11561697134197914,0.3620224104989538] (2,-1; 2,-1), time: 27.7168s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-0.7289553502846076,0.2988617089401372] (2,-1; 2,-1), time: 19.3264s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.5338s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.9187s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2646s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.20850067238617545,0.2688548566909197] (9,-1; 2,-1), time: 19.7222s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.7212s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[-0.8763008495540411,0.09454514661648072] (2,-1; 2,-1), time: 15.0924s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-1.0424821859051872,0.2660901441719497] (2,-1; 9,-1), time: 20.0937s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[1e-05,1.7905511088456108] (15,-1; 9,-1), time: 15.7169s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-0.43167852503707177,0.1588877915252324] (9,-1; 2,-1), time: 21.9918s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[1e-05,0.7372208971514266] (15,-1; 9,-1), time: 15.2992s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.43426419853918197,0.17879164215790358] (9,-1; 2,-1), time: 20.0181s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[0.0010610369584681074,1.485909156793277] (2,-1; 9,-1), time: 18.9915s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[1e-05,1.1725382983687862] (15,-1; 9,-1), time: 15.3124s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[1e-05,0.6477845627557213] (15,-1; 9,-1), time: 21.7944s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.42632619399992194,0.3427450670131614] (9,-1; 2,-1), time: 22.9470s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2688s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-0.36516799643880665,0.3676974184348517] (2,-1; 9,-1), time: 26.2173s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2920s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3218s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2597s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[1e-05,1.2689312645035355] (15,-1; 2,-1), time: 4.2817s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.5362s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.7424s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3502s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[1e-05,1.9759864554275304] (15,-1; 2,-1), time: 5.6778s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2996s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[1e-05,1.4582366668303723] (15,-1; 2,-1), time: 4.7125s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[1e-05,0.9957196131049064] (15,-1; 2,-1), time: 7.8862s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2738s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2620s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-0.16135408617921435,0.4008572094405448] (2,-1; 9,-1), time: 24.5295s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.5927061696577631,0.03960354133295079] (9,-1; 2,-1), time: 21.2094s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.1014354190545649,0.39762331069623646] (9,-1; 2,-1), time: 20.5821s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-0.6315028403759391,0.23667998089842243] (2,-1; 2,-1), time: 12.7667s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[1e-05,0.9597939446076866] (15,-1; 2,-1), time: 7.5967s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[1e-05,1.4521468171357106] (15,-1; 2,-1), time: 4.5365s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-0.34968171761476596,0.7115511667357352] (2,-1; 2,-1), time: 18.1857s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-0.5941875014606451,0.7071650016220055] (9,-1; 2,-1), time: 22.1477s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[1e-05,2.5135890463508685] (15,-1; 2,-1), time: 4.7199s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[1e-05,1.722898615646688] (15,-1; 2,-1), time: 6.0587s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.16848945218397776,0.49680028120224706] (2,-1; 9,-1), time: 19.7146s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.5357830321482752,0.019461743344984933] (9,-1; 2,-1), time: 21.2399s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[1e-05,0.6847812999945557] (15,-1; 2,-1), time: 13.9543s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[1e-05,1.8618701525745998] (15,-1; 2,-1), time: 8.8984s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[1e-05,1.0227593221454538] (15,-1; 2,-1), time: 10.1984s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-0.6516453892504012,0.05561581665099492] (9,-1; 9,-1), time: 30.0203s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[1e-05,0.998457569079856] (15,-1; 9,-1), time: 15.2168s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[1e-05,1.7476982122327336] (15,-1; 9,-1), time: 15.2975s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-0.14981824152502043,0.38922917490823944] (2,-1; 2,-1), time: 18.8396s, #vars: 1359, #constrs: 661, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.43586633771683336,0.13893629024208687] (2,-1; 2,-1), time: 24.3255s, #vars: 1359, #constrs: 661, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(74, -1), (39, -1), (28, -1), (88, -1), (82, -1), (66, -1), (45, -1), (16, -1), (50, -1), (53, -1), (23, -1), (12, 1), (11, -1), (17, -1), (80, -1), (79, -1), (14, 1), (9, 1), (4, -1), (38, 1), (7, -1), (52, -1), (64, 1), (24, 1), (62, -1), (77, -1), (68, -1), (21, 1), (31, 1), (27, -1), (97, -1), (58, 1), (86, -1)]
best_l after optimization: -131.62420654296875
beta sum per layer: []
alpha/beta optimization time: 22.104981422424316
alpha-CROWN with intermediate bounds by MIP: tensor([[-10.60627460, -12.51721382, -15.20934200, -14.60742950, -16.43293190,
         -13.66095257, -15.86804295, -16.35214043, -16.36988449]],
       device='cuda:0') None
MIP improved 91 nodes out of 91 unstable nodes, lb improved 37.687252044677734, ub improved 58.8827018737793, time 74.1033
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_74', 'lay10_99', 'lay10_46', 'lay10_97', 'lay10_25', 'lay10_49', 'lay10_27', 'lay10_8', 'lay10_10', 'lay10_24', 'lay10_60', 'lay10_30', 'lay10_22', 'lay10_58', 'lay10_98', 'lay10_42', 'lay10_70', 'lay10_85', 'lay10_13', 'lay10_88', 'lay10_66', 'lay10_76', 'lay10_72', 'lay10_75', 'lay10_80', 'lay10_41', 'lay10_63', 'lay10_5', 'lay10_86', 'lay10_55', 'lay10_44', 'lay10_18', 'lay10_57', 'lay10_9', 'lay10_87', 'lay10_82', 'lay10_23', 'lay10_17', 'lay10_52', 'lay10_2', 'lay10_14', 'lay10_77', 'lay10_43', 'lay10_29', 'lay10_4', 'lay10_7', 'lay10_28', 'lay10_51', 'lay10_59', 'lay10_35', 'lay10_20', 'lay10_95', 'lay10_68', 'lay10_36', 'lay10_96', 'lay10_38', 'lay10_69', 'lay10_50', 'lay10_26', 'lay10_40', 'lay10_21', 'lay10_65', 'lay10_48', 'lay10_73', 'lay10_92', 'lay10_89', 'lay10_79', 'lay10_93', 'lay10_81', 'lay10_45', 'lay10_1', 'lay10_16', 'lay10_53', 'lay10_94', 'lay10_91', 'lay10_39', 'lay10_0', 'lay10_33', 'lay10_54', 'lay10_12', 'lay10_71', 'lay10_3', 'lay10_47', 'lay10_6', 'lay10_34', 'lay10_78', 'lay10_15', 'lay10_31', 'lay10_90', 'lay10_32', 'lay10_84', 'lay10_11', 'lay10_64', 'lay10_61', 'lay10_56', 'lay10_37', 'lay10_83', 'lay10_19', 'lay10_67', 'lay10_62'] filter: 1.0
Solving MIP for lay10_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3276s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3379s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3502s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3503s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3560s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3688s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3686s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3903s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4006s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4156s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4298s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3559s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3472s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3275s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3491s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3680s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9051s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9606s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5445s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3465s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3777s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9432s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.4042s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.5245s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.8912s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[1e-05,1.258037600096834] (15,-1; 9,-1), time: 15.4110s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[1e-05,1.0307068015766536] (15,-1; 9,-1), time: 15.7070s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-0.7084108800573647,0.6369936512777594] (2,-1; 9,-1), time: 25.1634s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[-0.5012965891244863,0.3482408215776352] (9,-1; 9,-1), time: 30.0217s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-0.17842025742885487,1.4484900136908505] (9,-1; 9,-1), time: 30.0323s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-0.7678641010515644,0.707957171722822] (9,-1; 9,-1), time: 30.1168s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3144s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-0.609572083943046,0.004513867918148541] (9,-1; 9,-1), time: 30.0271s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3355s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3116s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-0.19804249966098872,0.6284920457519687] (9,-1; 9,-1), time: 30.0684s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2711s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.2042771924325504,0.4883125642476785] (9,-1; 9,-1), time: 30.0224s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-0.5103766810664822,0.07636763105592223] (9,-1; 9,-1), time: 30.0138s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3524s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4372s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4967s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.30822000612866374,0.33885918964303546] (9,-1; 9,-1), time: 30.0557s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[-0.6355062521764431,0.20849253988263552] (9,-1; 9,-1), time: 30.1293s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[-0.399165212658038,1.6587906337213425] (9,-1; 9,-1), time: 30.5167s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[1e-05,0.9330368965872688] (15,-1; 9,-1), time: 15.3460s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.2138s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-0.006808664885262271,0.7548813523581666] (9,-1; 9,-1), time: 30.1658s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-0.7197304530704101,0.4886471260240629] (9,-1; 9,-1), time: 30.0207s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.482938782828769,0.5537509170090695] (9,-1; 9,-1), time: 30.0264s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3875s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[1e-05,1.9630590633249823] (15,-1; 2,-1), time: 10.0084s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-0.08061148282400127,1.0432760588178798] (9,-1; 9,-1), time: 30.0321s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.1144s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3244s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[1e-05,0.7652501645234816] (15,-1; 9,-1), time: 15.9205s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.7213s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[1e-05,1.9993795950908224] (15,-1; 9,-1), time: 17.4675s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-0.9881347256721641,0.21011542838887445] (2,-1; 9,-1), time: 23.3345s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[1e-05,0.736953385852768] (15,-1; 9,-1), time: 15.4442s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3743s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-0.08692331061691,1.7237697096844258] (2,-1; 9,-1), time: 26.8934s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-0.3448285652470929,0.6501119275750044] (9,-1; 9,-1), time: 30.0395s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-0.5796894684909379,0.28996892737590624] (9,-1; 9,-1), time: 30.1650s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-0.26852783204812875,0.4399936833556463] (9,-1; 9,-1), time: 30.0748s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[1e-05,1.5536244604027347] (15,-1; 9,-1), time: 15.4707s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-0.482958749919037,0.329188850131159] (9,-1; 9,-1), time: 30.2073s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3460s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-0.1341147606637865,1.1061324940215116] (9,-1; 9,-1), time: 30.0282s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3408s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[1e-05,1.1901918057938128] (15,-1; 9,-1), time: 15.3171s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3785s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-0.716183332135729,0.15511720860137213] (9,-1; 9,-1), time: 30.2122s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-0.15634703670569547,0.9151310830443881] (9,-1; 9,-1), time: 30.0579s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3572s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[1e-05,1.5774495369726145] (15,-1; 2,-1), time: 10.3428s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-0.3937430531076767,0.31545561772174757] (9,-1; 9,-1), time: 30.0226s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3655s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-0.6267297568621766,0.07584097172109423] (9,-1; 9,-1), time: 30.0301s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[1e-05,1.8314144594099855] (15,-1; 9,-1), time: 15.4502s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[1e-05,1.4972261147674275] (15,-1; 9,-1), time: 15.4052s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[1e-05,1.6375166679787443] (15,-1; 9,-1), time: 15.4653s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[1e-05,1.8584606438212732] (15,-1; 9,-1), time: 15.3576s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-0.3775555110499212,0.15557601542154947] (9,-1; 9,-1), time: 30.0167s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[-0.5180894052179265,0.3803738203478156] (9,-1; 9,-1), time: 30.0195s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[1e-05,1.1858839383988133] (15,-1; 9,-1), time: 15.3430s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-0.1957557956956845,0.723154210530535] (9,-1; 9,-1), time: 30.1916s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.9211s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-0.6442495778480876,0.24785485771161883] (9,-1; 9,-1), time: 30.0231s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[1e-05,1.8307242272234154] (15,-1; 9,-1), time: 15.3948s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[-0.36870611128797054,0.6325440557988825] (9,-1; 9,-1), time: 30.1437s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[1e-05,2.837645510567117] (15,-1; 2,-1), time: 11.6171s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-0.22541957805339777,0.25503559465158765] (9,-1; 9,-1), time: 30.1474s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[1e-05,0.8880472106429759] (15,-1; 9,-1), time: 15.7446s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-0.034219158458074835,0.47957110785605694] (9,-1; 9,-1), time: 30.0281s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[1e-05,3.118441415372481] (15,-1; 9,-1), time: 15.2610s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,1.228529600505113] (15,-1; 9,-1), time: 15.3138s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-0.7700606664605324,0.06244736479834749] (9,-1; 9,-1), time: 30.0180s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-0.09173765862790162,0.513721338224883] (9,-1; 9,-1), time: 30.0096s, #vars: 1527, #constrs: 863, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-0.24651669394810277,0.13822609749526443] (9,-1; 9,-1), time: 30.0072s, #vars: 1527, #constrs: 863, improved: True
PGD done for relu layer 5
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(59, -1), (36, -1), (81, -1), (2, 1), (75, -1), (31, -1), (72, -1), (12, -1), (27, -1), (82, -1), (83, -1), (96, -1), (29, -1), (41, -1), (99, -1), (24, -1), (88, -1), (76, -1), (6, -1), (73, -1), (30, -1), (54, -1), (43, -1), (47, 1), (14, -1), (34, -1), (37, -1), (32, 1), (10, -1), (58, 1), (70, 1), (78, 1), (18, -1), (9, -1), (4, -1), (23, -1), (52, 1), (20, 1), (49, 1), (15, -1), (94, -1), (92, -1), (28, -1), (80, 1), (57, 1), (26, 1), (1, -1), (84, -1), (51, -1), (35, 1), (40, 1), (86, -1), (90, 1), (53, 1), (87, 1), (0, 1), (91, 1)]
best_l after optimization: -29.076988220214844
beta sum per layer: []
alpha/beta optimization time: 15.735416650772095
alpha-CROWN with intermediate bounds by MIP: tensor([[-2.02429914, -2.45054150, -3.55110693, -2.03843808, -3.67629719,
         -4.43957615, -5.89188766, -1.94678831, -3.05805254]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 79.83443450927734, ub improved 136.2920379638672, time 108.0414
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=100, bias=True) 5 12 torch.Size([100])
sorted candidates ['lay12_83', 'lay12_13', 'lay12_2', 'lay12_68', 'lay12_17', 'lay12_97', 'lay12_86', 'lay12_4', 'lay12_24', 'lay12_52', 'lay12_99', 'lay12_53', 'lay12_11', 'lay12_27', 'lay12_62', 'lay12_94', 'lay12_73', 'lay12_63', 'lay12_34', 'lay12_15', 'lay12_3', 'lay12_59', 'lay12_26', 'lay12_98', 'lay12_90', 'lay12_78', 'lay12_49', 'lay12_85', 'lay12_95', 'lay12_10', 'lay12_44', 'lay12_72', 'lay12_18', 'lay12_39', 'lay12_7', 'lay12_74', 'lay12_40', 'lay12_93', 'lay12_30', 'lay12_47', 'lay12_0', 'lay12_38', 'lay12_54', 'lay12_57', 'lay12_32', 'lay12_61', 'lay12_43', 'lay12_48', 'lay12_58', 'lay12_1', 'lay12_71', 'lay12_87', 'lay12_60', 'lay12_76', 'lay12_50', 'lay12_92', 'lay12_75', 'lay12_42', 'lay12_80', 'lay12_82', 'lay12_29', 'lay12_20', 'lay12_77', 'lay12_21', 'lay12_91', 'lay12_67', 'lay12_25', 'lay12_8', 'lay12_96', 'lay12_35', 'lay12_5', 'lay12_28', 'lay12_69', 'lay12_31', 'lay12_46', 'lay12_41', 'lay12_23', 'lay12_36', 'lay12_51', 'lay12_84', 'lay12_89', 'lay12_65', 'lay12_37', 'lay12_56', 'lay12_12', 'lay12_88', 'lay12_19', 'lay12_22', 'lay12_9', 'lay12_66', 'lay12_33', 'lay12_70', 'lay12_45', 'lay12_81', 'lay12_64', 'lay12_55', 'lay12_79', 'lay12_14', 'lay12_6', 'lay12_16'] filter: 1.0
Solving MIP for lay12_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4114s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4624s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4941s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5022s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5001s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5123s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5175s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5381s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5616s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5306s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.1520s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_62, [-inf,inf]=>[1e-05,0.9954503693187821] (15,-1; 9,-1), time: 15.4865s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_94, [-inf,inf]=>[1e-05,1.3234549726336569] (15,-1; 9,-1), time: 15.5085s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_4, [-inf,inf]=>[-0.8776428655604258,0.433291605437404] (9,-1; 9,-1), time: 30.0151s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_27, [-inf,inf]=>[-0.36772447522807716,1.110750335793708] (9,-1; 9,-1), time: 30.0344s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_24, [-inf,inf]=>[-0.7043760947180011,1.2142582554026613] (9,-1; 9,-1), time: 30.0534s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_86, [-inf,inf]=>[-0.3385595700030551,1.3070001435757443] (9,-1; 9,-1), time: 30.1264s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_63, [-inf,inf]=>[-0.6130349568670079,0.16383838584250054] (9,-1; 9,-1), time: 30.0142s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4450s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_34, [-inf,inf]=>[-0.6768919460676706,0.2391220512164991] (9,-1; 9,-1), time: 30.0253s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4999s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_59, [-inf,inf]=>[-0.8151361545070155,0.7550163354317925] (9,-1; 9,-1), time: 30.0154s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_3, [-inf,inf]=>[-0.5878156136221483,0.057474420531863676] (9,-1; 9,-1), time: 30.0251s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_26, [-inf,inf]=>[-0.8493991261476005,0.1664892482706517] (9,-1; 9,-1), time: 30.0198s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_15, [-inf,inf]=>[-0.5084893146128919,1.2251340108168332] (9,-1; 9,-1), time: 30.0442s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_90, [-inf,inf]=>[-1.1011891821205002,0.23057066073755933] (9,-1; 9,-1), time: 30.0232s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_98, [-inf,inf]=>[-0.3707401801159549,1.6593542798480148] (9,-1; 9,-1), time: 30.0780s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4187s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_78, [-inf,inf]=>[-0.6237018647605179,0.0903211139683354] (9,-1; 9,-1), time: 30.0155s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4492s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4022s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5046s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5084s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4082s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4757s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3788s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_49, [-inf,inf]=>[-0.7222892254095353,0.07109534168708505] (9,-1; 9,-1), time: 30.0389s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_95, [-inf,inf]=>[-0.6022013475914182,0.26738764120236574] (9,-1; 9,-1), time: 30.0110s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_85, [-inf,inf]=>[-0.7007975843243512,0.2833754527819025] (9,-1; 9,-1), time: 30.0341s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_18, [-inf,inf]=>[1e-05,1.6993982145327526] (15,-1; 9,-1), time: 16.4888s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6285s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_87, [-inf,inf]=>[1e-05,1.1438329261609452] (15,-1; 9,-1), time: 15.6067s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5362s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.1075s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6127s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_60, [-inf,inf]=>[1e-05,1.4905360448426261] (15,-1; 9,-1), time: 15.5594s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_72, [-inf,inf]=>[-0.23898103866207301,0.851754672398913] (9,-1; 9,-1), time: 30.0218s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_7, [-inf,inf]=>[-0.6364996611457323,0.1284206762254935] (9,-1; 9,-1), time: 30.0174s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_40, [-inf,inf]=>[-0.2755320208450606,0.48408186793606756] (9,-1; 9,-1), time: 30.0149s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_93, [-inf,inf]=>[-0.549881837395613,0.18585677492395075] (9,-1; 9,-1), time: 30.0111s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_0, [-inf,inf]=>[-0.38366832075420554,0.2027918278033628] (9,-1; 9,-1), time: 30.0114s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_47, [-inf,inf]=>[-0.771837721707866,0.6117410547886546] (9,-1; 9,-1), time: 30.0479s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_38, [-inf,inf]=>[-0.7137622083908728,0.09666539393744576] (9,-1; 9,-1), time: 30.0143s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_32, [-inf,inf]=>[-0.6476160271905829,0.061954272691150204] (9,-1; 9,-1), time: 30.0124s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_50, [-inf,inf]=>[1e-05,2.1530744673324413] (15,-1; 9,-1), time: 15.5661s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_48, [-inf,inf]=>[-0.9011320844260118,0.5747560680779699] (9,-1; 9,-1), time: 30.0697s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_58, [-inf,inf]=>[-0.5551877921623565,0.2369235424355433] (9,-1; 9,-1), time: 30.0396s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_71, [-inf,inf]=>[-0.9461426429485794,0.05959348114044993] (9,-1; 9,-1), time: 30.0108s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6393s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.8534s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_29, [-inf,inf]=>[1e-05,2.9395974413888823] (15,-1; 9,-1), time: 15.5482s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_35, [-inf,inf]=>[1e-05,2.038265876702228] (15,-1; 9,-1), time: 15.5296s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_69, [-inf,inf]=>[1e-05,1.4673150540119348] (15,-1; 9,-1), time: 15.5686s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_31, [-inf,inf]=>[1e-05,2.166824350849472] (15,-1; 9,-1), time: 15.5807s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5337s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_75, [-inf,inf]=>[-0.8464667384572295,0.6564647759029029] (9,-1; 9,-1), time: 30.0160s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_46, [-inf,inf]=>[1e-05,1.0146617407504492] (15,-1; 9,-1), time: 15.5609s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5443s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_80, [-inf,inf]=>[-0.6541281638233327,0.18615593363768904] (9,-1; 9,-1), time: 30.0134s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1920s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_23, [-inf,inf]=>[1e-05,1.3974314508663974] (15,-1; 9,-1), time: 15.6093s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.2247s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_20, [-inf,inf]=>[-0.5170435379661208,0.12409956077597327] (9,-1; 9,-1), time: 30.0134s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_77, [-inf,inf]=>[-0.2678361701044131,0.340662515599957] (9,-1; 9,-1), time: 30.0297s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_21, [-inf,inf]=>[-0.48359860620482525,0.09696066737307571] (9,-1; 9,-1), time: 30.0191s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_91, [-inf,inf]=>[-0.09893341869935332,0.9344690671913638] (9,-1; 9,-1), time: 30.0160s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_67, [-inf,inf]=>[-0.8030759486824082,0.19230268596302028] (9,-1; 9,-1), time: 30.0202s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_8, [-inf,inf]=>[-0.004260097314796147,0.5980938390420507] (9,-1; 9,-1), time: 30.0161s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_96, [-inf,inf]=>[-0.05377584005805235,0.9339032105794932] (9,-1; 9,-1), time: 30.0129s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_28, [-inf,inf]=>[-0.6802839773302386,0.22456034693529353] (9,-1; 9,-1), time: 30.0163s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.6203s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_88, [-inf,inf]=>[1e-05,3.3229838244581242] (15,-1; 9,-1), time: 15.5907s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5315s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5867s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5704s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_41, [-inf,inf]=>[-0.47244637882474666,0.3191771210103113] (9,-1; 9,-1), time: 30.0143s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.3852s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_66, [-inf,inf]=>[1e-05,1.6768765884831227] (15,-1; 9,-1), time: 15.4191s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_70, [-inf,inf]=>[1e-05,2.603875835353949] (15,-1; 9,-1), time: 15.4433s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_81, [-inf,inf]=>[1e-05,2.352287983117131] (15,-1; 9,-1), time: 15.4629s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_64, [-inf,inf]=>[1e-05,1.342125319101246] (15,-1; 9,-1), time: 15.5116s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_51, [-inf,inf]=>[-1.1713403258777708,0.1259804581424977] (9,-1; 9,-1), time: 30.0168s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_84, [-inf,inf]=>[-0.584128535682018,0.00530550814830191] (9,-1; 9,-1), time: 30.0266s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_65, [-inf,inf]=>[-0.28067501828252855,0.3697647368394799] (9,-1; 9,-1), time: 30.0209s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_12, [-inf,inf]=>[-0.5106850503154499,0.21523059459461075] (9,-1; 9,-1), time: 30.0134s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_22, [-inf,inf]=>[-0.44838087256577713,0.207976391990083] (9,-1; 9,-1), time: 30.0785s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_9, [-inf,inf]=>[-0.6245334097752823,0.5666904288925223] (9,-1; 9,-1), time: 30.0134s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_33, [-inf,inf]=>[-0.4159511450206306,0.8426180610750842] (9,-1; 9,-1), time: 30.0169s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_45, [-inf,inf]=>[-0.5773237304599211,0.13719415396344467] (9,-1; 9,-1), time: 30.0260s, #vars: 1699, #constrs: 1071, improved: True
Solving MIP for lay12_55, [-inf,inf]=>[-0.00941499873275435,0.9021657789064451] (9,-1; 9,-1), time: 30.2533s, #vars: 1699, #constrs: 1071, improved: True
PGD done for relu layer 6
Run alpha-CROWN after refining layer 10 and relu idx 4
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 4 has unstable to stable neurons: [(74, -1), (46, -1), (97, -1), (25, -1), (49, -1), (27, -1), (10, -1), (24, -1), (60, -1), (30, -1), (58, -1), (98, -1), (42, 1), (85, -1), (88, -1), (66, -1), (76, -1), (72, -1), (75, -1), (41, -1), (63, -1), (86, -1), (44, -1), (18, -1), (9, -1), (82, -1), (17, 1), (43, 1), (29, -1), (4, -1), (7, -1), (28, -1), (59, -1), (95, -1), (68, -1), (96, 1), (38, -1), (50, 1), (48, 1), (73, -1), (92, -1), (89, -1), (79, 1), (81, -1), (1, 1), (16, 1), (39, -1), (12, 1), (71, 1), (3, -1), (47, 1), (6, -1), (34, 1), (78, -1), (15, 1), (32, -1), (84, 1), (11, 1), (64, -1), (61, 1), (37, 1), (19, 1), (67, 1), (62, -1)]
best_l after optimization: -2.443751335144043
beta sum per layer: []
alpha/beta optimization time: 15.777420282363892
alpha-CROWN with intermediate bounds by MIP: tensor([[ 0.38157511,  0.41372371, -0.57011199,  0.91138220, -0.02969933,
         -2.23213339, -3.26845384,  1.62421274,  0.32575345]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 216.82046508789062, ub improved 298.92742919921875, time 122.7411
maximum relu layer improved by MIP so far 5
Linear(in_features=100, out_features=100, bias=True) 6 14 torch.Size([100])
sorted candidates ['lay14_96', 'lay14_76', 'lay14_5', 'lay14_91', 'lay14_8', 'lay14_55', 'lay14_64', 'lay14_67', 'lay14_14', 'lay14_41', 'lay14_37', 'lay14_2', 'lay14_84', 'lay14_79', 'lay14_69', 'lay14_88', 'lay14_46', 'lay14_47', 'lay14_16', 'lay14_28', 'lay14_1', 'lay14_86', 'lay14_42', 'lay14_22', 'lay14_4', 'lay14_36', 'lay14_72', 'lay14_15', 'lay14_81', 'lay14_33', 'lay14_13', 'lay14_0', 'lay14_44', 'lay14_75', 'lay14_3', 'lay14_53', 'lay14_24', 'lay14_40', 'lay14_78', 'lay14_50', 'lay14_92', 'lay14_49', 'lay14_68', 'lay14_19', 'lay14_95', 'lay14_29', 'lay14_27', 'lay14_12', 'lay14_66', 'lay14_59', 'lay14_98', 'lay14_35', 'lay14_32', 'lay14_77', 'lay14_97', 'lay14_34', 'lay14_43', 'lay14_62', 'lay14_99', 'lay14_51', 'lay14_65', 'lay14_9', 'lay14_25', 'lay14_54', 'lay14_30', 'lay14_80', 'lay14_73', 'lay14_94', 'lay14_21', 'lay14_85', 'lay14_63', 'lay14_82', 'lay14_74', 'lay14_10', 'lay14_89', 'lay14_70', 'lay14_52', 'lay14_71', 'lay14_18', 'lay14_56', 'lay14_7', 'lay14_57', 'lay14_31', 'lay14_58', 'lay14_20', 'lay14_45', 'lay14_38', 'lay14_23', 'lay14_87', 'lay14_83', 'lay14_26', 'lay14_93', 'lay14_11', 'lay14_48', 'lay14_39', 'lay14_6', 'lay14_60', 'lay14_17', 'lay14_61', 'lay14_90'] filter: 1.0
Solving MIP for lay14_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6304s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6289s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6463s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6666s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7565s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4505s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8831s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6050s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6382s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.9726s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_41, [-inf,inf]=>[1e-05,2.2507274482842607] (15,-1; 9,-1), time: 15.7410s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_76, [-inf,inf]=>[-0.7113316228731139,0.18832198842243994] (9,-1; 9,-1), time: 30.0177s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_67, [-inf,inf]=>[-0.7932740512122035,0.4424869886897658] (9,-1; 9,-1), time: 30.0193s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_79, [-inf,inf]=>[-0.8025673057446214,0.5568586248520698] (9,-1; 9,-1), time: 30.0190s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_88, [-inf,inf]=>[-0.5648083725777718,0.2787115321264965] (9,-1; 9,-1), time: 30.0188s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_37, [-inf,inf]=>[-0.7147723474303292,0.3839036203742456] (9,-1; 9,-1), time: 30.0250s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_64, [-inf,inf]=>[-0.8318207953062002,0.12546920963437097] (9,-1; 9,-1), time: 30.0318s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_14, [-inf,inf]=>[-1.0526393173601363,0.010787381680840202] (9,-1; 9,-1), time: 30.2363s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5629s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_47, [-inf,inf]=>[-1.1851618074447277,0.3399052290390696] (9,-1; 9,-1), time: 30.0133s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_46, [-inf,inf]=>[-0.8585617435298092,0.28972933283441316] (9,-1; 9,-1), time: 30.0197s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_16, [-inf,inf]=>[-0.2207073756906059,0.7159962895558533] (9,-1; 9,-1), time: 30.0134s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_28, [-inf,inf]=>[-0.6962580015007372,0.3055300519878696] (9,-1; 9,-1), time: 30.0170s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6772s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7347s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_1, [-inf,inf]=>[-0.37097194049530524,0.49694256201383846] (9,-1; 9,-1), time: 30.0446s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_72, [-inf,inf]=>[1e-05,2.964013249162532] (15,-1; 9,-1), time: 15.6653s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6929s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_42, [-inf,inf]=>[-0.915543524377924,0.05111645226282016] (9,-1; 9,-1), time: 30.0182s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5495s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7596s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_4, [-inf,inf]=>[-0.39336063523123815,0.4673635265682943] (9,-1; 9,-1), time: 30.0091s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0750s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.0312s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_36, [-inf,inf]=>[-0.4596166024807782,0.34632744422168793] (9,-1; 9,-1), time: 30.0301s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6166s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_33, [-inf,inf]=>[1e-05,1.7346136262504854] (15,-1; 9,-1), time: 15.6934s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_92, [-inf,inf]=>[1e-05,1.176727531057853] (15,-1; 9,-1), time: 15.6041s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5841s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_40, [-inf,inf]=>[1e-05,1.5044834957860098] (15,-1; 9,-1), time: 28.9557s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_44, [-inf,inf]=>[-0.14426107435047728,0.41735893703171667] (9,-1; 9,-1), time: 30.0132s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_75, [-inf,inf]=>[-0.5022803554294436,0.5678502435731845] (9,-1; 9,-1), time: 30.0167s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6885s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_3, [-inf,inf]=>[-0.9302218176928566,0.1148133603340618] (9,-1; 9,-1), time: 30.0105s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_53, [-inf,inf]=>[-0.07541147028437546,0.9982508880937785] (9,-1; 9,-1), time: 30.0138s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_24, [-inf,inf]=>[-0.27812580719413976,0.7447379973874028] (9,-1; 9,-1), time: 30.0110s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_78, [-inf,inf]=>[-0.011453820835248029,1.9098428853685705] (9,-1; 9,-1), time: 30.0189s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_50, [-inf,inf]=>[-0.5504656505067326,0.336969217452752] (9,-1; 9,-1), time: 30.0212s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4904s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_29, [-inf,inf]=>[-0.5265464272110708,0.79498705532349] (9,-1; 9,-1), time: 30.0115s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_27, [-inf,inf]=>[-0.4793022527167271,0.7890118866451237] (9,-1; 9,-1), time: 30.0171s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_97, [-inf,inf]=>[1e-05,2.283116246229809] (15,-1; 9,-1), time: 15.6033s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_12, [-inf,inf]=>[-0.4678630013714673,0.4386039263450979] (9,-1; 9,-1), time: 30.0113s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6205s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_66, [-inf,inf]=>[-0.9703690913073408,0.49980924887914907] (9,-1; 9,-1), time: 30.0159s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6467s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_59, [-inf,inf]=>[-0.6801866449880487,0.42367418963403436] (9,-1; 9,-1), time: 30.0098s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_35, [-inf,inf]=>[-0.179969558125872,1.4075468602793877] (9,-1; 9,-1), time: 30.0113s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.4747s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_32, [-inf,inf]=>[-0.5520899496530561,0.6717584385689187] (9,-1; 9,-1), time: 30.0135s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_62, [-inf,inf]=>[1e-05,1.813672751531422] (15,-1; 9,-1), time: 15.5751s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_65, [-inf,inf]=>[1e-05,3.26452181771136] (15,-1; 9,-1), time: 15.5920s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_73, [-inf,inf]=>[1e-05,1.2174336765718559] (15,-1; 9,-1), time: 17.9162s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_43, [-inf,inf]=>[-0.7255829167244139,0.4001136339890038] (9,-1; 9,-1), time: 30.0116s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_99, [-inf,inf]=>[-0.29483131770239157,0.6956269219010968] (9,-1; 9,-1), time: 30.0362s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_51, [-inf,inf]=>[-0.1954385105905853,0.9280700453926554] (9,-1; 9,-1), time: 30.0129s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_54, [-inf,inf]=>[-0.6871043872909532,0.5993927990590362] (9,-1; 9,-1), time: 30.0176s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6363s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5201s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_70, [-inf,inf]=>[1e-05,2.744216168085315] (15,-1; 9,-1), time: 15.6320s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_80, [-inf,inf]=>[-0.036420878026176634,1.4472836779745444] (9,-1; 9,-1), time: 30.0124s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_94, [-inf,inf]=>[-0.8510619500164203,0.025604032639550897] (9,-1; 9,-1), time: 30.0104s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_21, [-inf,inf]=>[-0.21188430195013447,0.5397395722137724] (9,-1; 9,-1), time: 30.0146s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_63, [-inf,inf]=>[-1.4638722648585218,0.0662622666125507] (9,-1; 9,-1), time: 30.0099s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_82, [-inf,inf]=>[-0.28394893572713403,1.2533948307275482] (9,-1; 9,-1), time: 30.0178s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_18, [-inf,inf]=>[1e-05,0.9204063998447186] (15,-1; 9,-1), time: 15.5870s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_74, [-inf,inf]=>[-0.5066250247535056,0.5766363275115332] (9,-1; 9,-1), time: 30.0126s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_10, [-inf,inf]=>[-0.34422189955808896,0.9440973373999109] (9,-1; 9,-1), time: 30.0150s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_89, [-inf,inf]=>[-0.0720931180915613,1.188139011849104] (9,-1; 9,-1), time: 30.0118s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4766s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_56, [-inf,inf]=>[1e-05,1.239775946033641] (15,-1; 9,-1), time: 15.5948s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_52, [-inf,inf]=>[-0.7697064217191324,0.24293065117052487] (9,-1; 9,-1), time: 30.0103s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_71, [-inf,inf]=>[-0.3640831280618059,1.1469633287952297] (9,-1; 9,-1), time: 30.0103s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_31, [-inf,inf]=>[1e-05,2.3309908070433547] (15,-1; 9,-1), time: 15.5571s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5330s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5736s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_38, [-inf,inf]=>[1e-05,2.0944943828008964] (15,-1; 9,-1), time: 15.6074s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_23, [-inf,inf]=>[1e-05,2.719081266985467] (15,-1; 9,-1), time: 15.6345s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_87, [-inf,inf]=>[1e-05,1.8972031549969524] (15,-1; 9,-1), time: 15.6791s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_83, [-inf,inf]=>[1e-05,1.5265489055656478] (15,-1; 9,-1), time: 15.5778s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_6, [-inf,inf]=>[1e-05,1.2120985177771049] (15,-1; 9,-1), time: 15.7373s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_58, [-inf,inf]=>[-0.0689021364003878,1.0820730099784934] (9,-1; 9,-1), time: 30.0109s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_20, [-inf,inf]=>[-0.05225481799527623,1.4861428654817213] (9,-1; 9,-1), time: 30.0382s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_45, [-inf,inf]=>[-0.8214608810871679,0.30088084666670056] (9,-1; 9,-1), time: 30.0172s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_90, [-inf,inf]=>[1e-05,1.460671409886797] (15,-1; 9,-1), time: 15.5243s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_26, [-inf,inf]=>[-0.4834626709689783,0.8930456334068883] (9,-1; 9,-1), time: 30.0071s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_93, [-inf,inf]=>[-1.1097079549453976,0.005162119653361687] (9,-1; 9,-1), time: 30.0285s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_11, [-inf,inf]=>[-0.6411801912821975,1.079551624145077] (9,-1; 9,-1), time: 30.0122s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_39, [-inf,inf]=>[-0.6617211824401922,0.5035349027923323] (9,-1; 9,-1), time: 30.0166s, #vars: 1893, #constrs: 1312, improved: True
Solving MIP for lay14_61, [-inf,inf]=>[-0.5594015937813864,0.0857564871069982] (9,-1; 9,-1), time: 30.0128s, #vars: 1893, #constrs: 1312, improved: True
PGD done for relu layer 7
Run alpha-CROWN after refining layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 5 has unstable to stable neurons: [(83, -1), (13, -1), (2, -1), (68, -1), (17, -1), (97, -1), (52, -1), (99, -1), (53, -1), (11, -1), (62, 1), (94, 1), (73, -1), (10, -1), (44, -1), (18, 1), (39, -1), (74, -1), (30, -1), (54, -1), (57, -1), (61, -1), (43, -1), (1, -1), (87, 1), (60, 1), (76, -1), (50, 1), (92, -1), (42, -1), (82, -1), (29, 1), (25, -1), (35, 1), (5, -1), (69, 1), (31, 1), (46, 1), (23, 1), (36, -1), (89, -1), (37, -1), (56, -1), (88, 1), (19, -1), (66, 1), (70, 1), (81, 1), (64, 1), (79, -1), (14, -1), (6, -1), (16, -1)]
best_l after optimization: 10.705316543579102
beta sum per layer: []
alpha/beta optimization time: 15.296321153640747
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.50818026,  1.96931362,  0.94782233,  2.26314116,  1.71298695,
         -1.08896971, -1.90421057,  3.35594320,  1.94110954]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 522.6325073242188, ub improved 673.2503662109375, time 137.6598
maximum relu layer improved by MIP so far 6
Linear(in_features=100, out_features=100, bias=True) 7 16 torch.Size([100])
sorted candidates ['lay16_51', 'lay16_68', 'lay16_29', 'lay16_11', 'lay16_76', 'lay16_49', 'lay16_58', 'lay16_14', 'lay16_69', 'lay16_19', 'lay16_99', 'lay16_5', 'lay16_80', 'lay16_87', 'lay16_50', 'lay16_54', 'lay16_41', 'lay16_10', 'lay16_77', 'lay16_34', 'lay16_67', 'lay16_39', 'lay16_63', 'lay16_31', 'lay16_84', 'lay16_71', 'lay16_61', 'lay16_17', 'lay16_86', 'lay16_13', 'lay16_98', 'lay16_9', 'lay16_37', 'lay16_97', 'lay16_16', 'lay16_73', 'lay16_33', 'lay16_65', 'lay16_27', 'lay16_21', 'lay16_72', 'lay16_56', 'lay16_42', 'lay16_95', 'lay16_45', 'lay16_24', 'lay16_83', 'lay16_35', 'lay16_4', 'lay16_0', 'lay16_25', 'lay16_70', 'lay16_92', 'lay16_2', 'lay16_59', 'lay16_48', 'lay16_53', 'lay16_8', 'lay16_12', 'lay16_26', 'lay16_6', 'lay16_79', 'lay16_22', 'lay16_55', 'lay16_78', 'lay16_28', 'lay16_85', 'lay16_82', 'lay16_93', 'lay16_90', 'lay16_47', 'lay16_38', 'lay16_60', 'lay16_74', 'lay16_62', 'lay16_94', 'lay16_89', 'lay16_30', 'lay16_18', 'lay16_96', 'lay16_46', 'lay16_57', 'lay16_91', 'lay16_20', 'lay16_88', 'lay16_40', 'lay16_52', 'lay16_32', 'lay16_66', 'lay16_15', 'lay16_23', 'lay16_43', 'lay16_64', 'lay16_44', 'lay16_36', 'lay16_75', 'lay16_3', 'lay16_7', 'lay16_81', 'lay16_1'] filter: 1.0
Solving MIP for lay16_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6750s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7760s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8430s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5540s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5245s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6602s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6534s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8182s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.5273s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_29, [-inf,inf]=>[-1.7348621736157654,0.01975517521486916] (9,-1; 9,-1), time: 30.0186s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_11, [-inf,inf]=>[-0.9854856899738567,0.1691496085584609] (9,-1; 9,-1), time: 30.0295s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_69, [-inf,inf]=>[-1.0744647635078937,0.6439328422155584] (9,-1; 9,-1), time: 30.0308s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_54, [-inf,inf]=>[-0.0759977538541336,1.7225992828054137] (9,-1; 9,-1), time: 30.0239s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_80, [-inf,inf]=>[-1.4706866969680146,0.32595221814237413] (9,-1; 9,-1), time: 30.0305s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_49, [-inf,inf]=>[-0.721259451178521,1.9941355605953948] (9,-1; 9,-1), time: 30.0436s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_87, [-inf,inf]=>[-1.4006301611203202,0.2999779776591509] (9,-1; 9,-1), time: 30.0495s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_19, [-inf,inf]=>[-1.456391746373363,0.4923259868724548] (9,-1; 9,-1), time: 30.0802s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_76, [-inf,inf]=>[-1.7513366752424486,0.5149317325223992] (9,-1; 9,-1), time: 30.1824s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_99, [-inf,inf]=>[-1.6289752290635495,0.18208173923055182] (9,-1; 9,-1), time: 30.1849s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_5, [-inf,inf]=>[-0.9187984595873127,0.7203258566166127] (9,-1; 9,-1), time: 30.1948s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6461s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_41, [-inf,inf]=>[-1.0155127748122827,0.44087916203087496] (9,-1; 9,-1), time: 30.0290s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_10, [-inf,inf]=>[-1.308289485785116,0.19911793020566293] (9,-1; 9,-1), time: 30.0372s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8474s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7388s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_77, [-inf,inf]=>[-1.0288184769726838,0.6764824205011244] (9,-1; 9,-1), time: 30.1303s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8157s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9225s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.8800s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_31, [-inf,inf]=>[-0.6179048091050174,0.8507006202643463] (9,-1; 9,-1), time: 30.0108s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6520s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_84, [-inf,inf]=>[-1.109924275790398,1.0490759234811196] (9,-1; 9,-1), time: 30.0393s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7870s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_45, [-inf,inf]=>[1e-05,3.0866241678116153] (15,-1; 9,-1), time: 15.5733s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6786s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_71, [-inf,inf]=>[-1.7959325439042384,0.7356963018814398] (9,-1; 9,-1), time: 30.0128s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_86, [-inf,inf]=>[-1.4138732442071926,0.1818358198951814] (9,-1; 9,-1), time: 30.0136s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_17, [-inf,inf]=>[-0.6483186545547059,0.6260190620057844] (9,-1; 9,-1), time: 30.0575s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_61, [-inf,inf]=>[-0.34328592511425915,1.691429429062371] (9,-1; 9,-1), time: 30.0947s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_13, [-inf,inf]=>[-0.4662938728624129,0.6877743246470653] (9,-1; 9,-1), time: 30.1567s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_73, [-inf,inf]=>[-1.1021126676418211,0.1696473890893938] (9,-1; 9,-1), time: 30.0403s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_37, [-inf,inf]=>[-0.5634163422574698,0.9098536340111201] (9,-1; 9,-1), time: 30.3998s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_65, [-inf,inf]=>[-1.2103713345745266,0.6081415273259339] (9,-1; 9,-1), time: 30.0147s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_33, [-inf,inf]=>[-1.0879733964989282,0.13778419756854815] (9,-1; 9,-1), time: 30.0574s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7445s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_21, [-inf,inf]=>[-0.6024589551813262,0.5776521770069424] (9,-1; 9,-1), time: 30.0124s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_42, [-inf,inf]=>[-1.0797642283175928,0.12322132555794542] (9,-1; 9,-1), time: 30.0640s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_72, [-inf,inf]=>[-0.7071671463619276,1.2318549599465556] (9,-1; 9,-1), time: 30.2102s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7223s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7202s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8059s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_95, [-inf,inf]=>[-1.0228204685757014,0.426118761550081] (9,-1; 9,-1), time: 30.2191s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7630s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1075s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_83, [-inf,inf]=>[-1.1118998564330036,0.3562722722177385] (9,-1; 9,-1), time: 30.0082s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_4, [-inf,inf]=>[-0.7910031364736838,0.607212838618967] (9,-1; 9,-1), time: 30.0278s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_25, [-inf,inf]=>[-0.03547503098553898,1.8020510238937921] (9,-1; 9,-1), time: 30.3658s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_70, [-inf,inf]=>[-0.939521899547383,0.42071977535921273] (9,-1; 9,-1), time: 30.0813s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_2, [-inf,inf]=>[-1.5122343850759115,0.44929068650953446] (9,-1; 9,-1), time: 30.1063s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_48, [-inf,inf]=>[-0.8799482538733354,0.2450188660529864] (9,-1; 9,-1), time: 30.0137s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_53, [-inf,inf]=>[-0.7477401969001831,1.3936849141972052] (9,-1; 9,-1), time: 30.0530s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_92, [-inf,inf]=>[-1.0436773601199387,0.3360540653849151] (9,-1; 9,-1), time: 30.5726s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_12, [-inf,inf]=>[-0.4613712910743505,0.5868025267586021] (9,-1; 9,-1), time: 30.0425s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_79, [-inf,inf]=>[-1.1578573278124353,1.0761227803120645] (9,-1; 9,-1), time: 30.0306s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_26, [-inf,inf]=>[-0.31933780137453344,0.9961228918003808] (9,-1; 9,-1), time: 30.1830s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_55, [-inf,inf]=>[-1.0457154590138527,0.10752929986914073] (9,-1; 9,-1), time: 30.0386s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_78, [-inf,inf]=>[-0.7371300573246725,0.7564318820333833] (9,-1; 9,-1), time: 30.0400s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_28, [-inf,inf]=>[-1.1717349627058893,0.11273788768118506] (9,-1; 9,-1), time: 30.0135s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_93, [-inf,inf]=>[-1.62069531050136,0.029424443786041022] (9,-1; 9,-1), time: 30.2925s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_90, [-inf,inf]=>[-0.7600127166507706,0.4929331336141904] (9,-1; 9,-1), time: 30.0137s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.6743s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_47, [-inf,inf]=>[-0.8179692605031098,0.8098431471823704] (9,-1; 9,-1), time: 30.3655s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_38, [-inf,inf]=>[-0.8103318970300905,0.1815320044217303] (9,-1; 9,-1), time: 30.0134s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_74, [-inf,inf]=>[1e-05,2.9090785954025717] (15,-1; 9,-1), time: 15.8260s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_30, [-inf,inf]=>[1e-05,1.6005361944320406] (15,-1; 9,-1), time: 15.7507s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_91, [-inf,inf]=>[1e-05,3.225783766989791] (15,-1; 9,-1), time: 15.7084s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_57, [-inf,inf]=>[1e-05,1.9249776717790965] (15,-1; 9,-1), time: 15.8125s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_88, [-inf,inf]=>[1e-05,1.6806590717691574] (15,-1; 9,-1), time: 15.7536s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_40, [-inf,inf]=>[1e-05,3.004438699329238] (15,-1; 9,-1), time: 15.7908s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_60, [-inf,inf]=>[-0.1246795741674008,1.2961633607528187] (9,-1; 9,-1), time: 30.2166s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_94, [-inf,inf]=>[-0.29272871157160946,0.6949491646131397] (9,-1; 9,-1), time: 30.0112s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_62, [-inf,inf]=>[-0.12430077051694459,1.2071517356879324] (9,-1; 9,-1), time: 30.1112s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_18, [-inf,inf]=>[-0.798283071098917,0.20855985995833431] (9,-1; 9,-1), time: 30.0087s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7440s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_96, [-inf,inf]=>[-0.9695665978190793,0.16283856599727714] (9,-1; 9,-1), time: 30.0176s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_46, [-inf,inf]=>[-0.9429384514591862,0.06041181120836323] (9,-1; 9,-1), time: 30.0540s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7514s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6556s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_20, [-inf,inf]=>[-0.34295873384288567,1.2034435393731522] (9,-1; 9,-1), time: 30.0652s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_15, [-inf,inf]=>[1e-05,2.560313720647663] (15,-1; 9,-1), time: 15.8167s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_23, [-inf,inf]=>[1e-05,2.927760793111144] (15,-1; 9,-1), time: 15.7186s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_43, [-inf,inf]=>[1e-05,4.370711687243016] (15,-1; 9,-1), time: 15.7253s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_52, [-inf,inf]=>[-0.6206518312911724,0.5470599434318535] (9,-1; 9,-1), time: 30.0529s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_32, [-inf,inf]=>[-0.29974619603002445,1.0893039522462815] (9,-1; 9,-1), time: 30.2228s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_66, [-inf,inf]=>[-0.12484306639262412,1.9096204947695563] (9,-1; 9,-1), time: 30.0099s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_64, [-inf,inf]=>[-0.24373683652172973,1.4330966941196237] (9,-1; 9,-1), time: 30.0678s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_44, [-inf,inf]=>[-0.8787881294790276,0.9579911197563288] (9,-1; 9,-1), time: 30.0222s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_36, [-inf,inf]=>[-0.1292056693916133,2.506537170767702] (9,-1; 9,-1), time: 30.0127s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_75, [-inf,inf]=>[-0.6673162675311554,0.19003662246179553] (9,-1; 9,-1), time: 30.0173s, #vars: 2095, #constrs: 1565, improved: True
Solving MIP for lay16_81, [-inf,inf]=>[-1.3020772559919545,0.042875752924214375] (9,-1; 9,-1), time: 30.0072s, #vars: 2095, #constrs: 1565, improved: True
Run alpha-CROWN after refining layer 14 and relu idx 6
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 6 has unstable to stable neurons: [(96, -1), (5, -1), (91, -1), (8, -1), (55, -1), (41, 1), (2, -1), (84, -1), (69, -1), (86, -1), (22, -1), (72, 1), (15, -1), (81, -1), (33, 1), (13, -1), (0, -1), (40, 1), (92, 1), (49, -1), (68, -1), (19, -1), (95, -1), (98, -1), (77, -1), (97, 1), (34, -1), (62, 1), (65, 1), (9, -1), (25, -1), (30, -1), (73, 1), (85, -1), (70, 1), (18, 1), (56, 1), (7, -1), (57, -1), (31, 1), (38, 1), (23, 1), (87, 1), (83, 1), (48, -1), (6, 1), (60, -1), (17, -1), (90, 1)]
best_l after optimization: 15.429065704345703
beta sum per layer: []
alpha/beta optimization time: 14.954642295837402
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.94937873,  2.50952649,  1.52288735,  2.74827337,  2.34626436,
         -0.69334185, -1.36851001,  3.92008924,  2.49449706]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 1267.8323974609375, ub improved 1466.7801513671875, time 152.2495
maximum relu layer improved by MIP so far 7
Linear(in_features=100, out_features=10, bias=True) 8 18 torch.Size([9, 1])
MIP finished with 626.8575823307037s
Run final alpha-CROWN after MIP solving on layer 18 and relu idx 8
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
best_l after optimization: 17.698650360107422
beta sum per layer: []
alpha/beta optimization time: 11.159649848937988
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 2.16216850,  2.73534918,  1.81683469,  2.95948887,  2.63649416,
         -0.48657823, -1.05715275,  4.19916677,  2.73288083]], device='cuda:0') None
Split layers:
  BoundLinear(name=/input.11, inputs=[/32, /7, /8]): [(BoundRelu(name=/34, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.3, inputs=[/28, /3, /4]): [(BoundRelu(name=/30, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.19, inputs=[/36, /11, /12]): [(BoundRelu(name=/38, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.27, inputs=[/40, /15, /16]): [(BoundRelu(name=/42, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.23, inputs=[/38, /13, /14]): [(BoundRelu(name=/40, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.7, inputs=[/30, /5, /6]): [(BoundRelu(name=/32, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.15, inputs=[/34, /9, /10]): [(BoundRelu(name=/36, inputs=[/input.15]), 0)]
  BoundLinear(name=/input, inputs=[/26, /1, /2]): [(BoundRelu(name=/28, inputs=[/input]), 0)]
refined global lb: tensor([[ 2.16216850],
        [ 2.73534918],
        [ 1.81683469],
        [ 2.95948887],
        [ 2.63649416],
        [-0.48657823],
        [-1.05715275],
        [ 4.19916677],
        [ 2.73288083]], device='cuda:0') min: tensor(-1.05715275, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 419.97847533226013
##### Instance 0 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.162168502807617.

Properties batch 1, size 1
Remaining timeout: 419.8731987476349
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.735349178314209.

Properties batch 2, size 1
Remaining timeout: 419.8055365085602
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.8168346881866455.

Properties batch 3, size 1
Remaining timeout: 419.7410960197449
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.959488868713379.

Properties batch 4, size 1
Remaining timeout: 419.6761429309845
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.6364941596984863.

Properties batch 5, size 1
Remaining timeout: 419.61166644096375
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.48657823]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundParams(name=/13, inputs=[])
  (/14): BoundParams(name=/14, inputs=[])
  (/15): BoundParams(name=/15, inputs=[])
  (/16): BoundParams(name=/16, inputs=[])
  (/17): BoundParams(name=/17, inputs=[])
  (/18): BoundParams(name=/18, inputs=[])
  (/19): BoundShape(name=/19, inputs=[/0])
  (/20): BoundConstant(name=/20, inputs=[])
  (/21): BoundGather(name=/21, inputs=[/19, /20])
  (/22): BoundConstant(name=/22, inputs=[])
  (/23): BoundUnsqueeze(name=/23, inputs=[/21])
  (/24): BoundUnsqueeze(name=/24, inputs=[/22])
  (/25): BoundConcat(name=/25, inputs=[/23, /24])
  (/26): BoundReshape(name=/26, inputs=[/0, /25])
  (/input): BoundLinear(name=/input, inputs=[/26, /1, /2])
  (/28): BoundRelu(name=/28, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/28, /3, /4])
  (/30): BoundRelu(name=/30, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/30, /5, /6])
  (/32): BoundRelu(name=/32, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/32, /7, /8])
  (/34): BoundRelu(name=/34, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/34, /9, /10])
  (/36): BoundRelu(name=/36, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/36, /11, /12])
  (/38): BoundRelu(name=/38, inputs=[/input.19])
  (/input.23): BoundLinear(name=/input.23, inputs=[/38, /13, /14])
  (/40): BoundRelu(name=/40, inputs=[/input.23])
  (/input.27): BoundLinear(name=/input.27, inputs=[/40, /15, /16])
  (/42): BoundRelu(name=/42, inputs=[/input.27])
  (/43): BoundLinear(name=/43, inputs=[/42, /17, /18])
)
Model prediction is: tensor([-0.48489553, -1.39149714,  0.13246238,  0.24095330, -3.24258041,
         2.77433348,  0.52672815, -2.47505617,  7.48759937, -0.99461943],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.48657823]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input.11,/input.3,/input.19,/input.27,/input.23,/input.7,/input.15,/input,/43
Split layers:
  BoundLinear(name=/input, inputs=[/26, /1, /2]): [(BoundRelu(name=/28, inputs=[/input]), 0)]
  BoundLinear(name=/input.19, inputs=[/36, /11, /12]): [(BoundRelu(name=/38, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.15, inputs=[/34, /9, /10]): [(BoundRelu(name=/36, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.23, inputs=[/38, /13, /14]): [(BoundRelu(name=/40, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.7, inputs=[/30, /5, /6]): [(BoundRelu(name=/32, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.3, inputs=[/28, /3, /4]): [(BoundRelu(name=/30, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.11, inputs=[/32, /7, /8]): [(BoundRelu(name=/34, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.27, inputs=[/40, /15, /16]): [(BoundRelu(name=/42, inputs=[/input.27]), 0)]
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
Node /28 input 0: size torch.Size([100]) unstable 26
Node /30 input 0: size torch.Size([100]) unstable 27
Node /32 input 0: size torch.Size([100]) unstable 34
Node /34 input 0: size torch.Size([100]) unstable 34
Node /36 input 0: size torch.Size([100]) unstable 36
Node /38 input 0: size torch.Size([100]) unstable 47
Node /40 input 0: size torch.Size([100]) unstable 51
Node /42 input 0: size torch.Size([100]) unstable 62
-----------------
# of unstable neurons: 317
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.27, 49] 
split level 1: [/input.27, 61] 
split level 2: [/input.27, 72] 
split level 3: [/input.27, 5] 
split level 4: [/input.27, 69] 
split level 5: [/input.27, 10] 
pruning_in_iteration open status: True
ratio of positive domain = 52 / 64 = 0.8125
pruning-in-iteration extra time: 0.018544673919677734
Time: prepare 0.0176    beta_bound 0.8055    bound 0.8056    transfer 0.0007    finalize 0.0123    func 0.8363    
Accumulated time: func 0.8363    prepare 0.0189    bound 0.8056    beta_bound 0.8055    transfer 0.0007    finalize 0.0123    
batch bounding time:  0.836421012878418
Current worst splitting domains lb-rhs (depth):
-0.48658 (6), -0.48658 (6), -0.48658 (6), -0.48658 (6), -0.46270 (6), -0.43167 (6), -0.31135 (6), -0.29153 (6), -0.09095 (6), -0.07225 (6), -0.06475 (6), -0.06236 (6), 
length of domains: 12
Time: pickout 0.0014    decision 0.2947    set_bounds 0.0053    solve 0.8364    add 0.0021    
Accumulated time: pickout 0.0014    decision 0.2947    set_bounds 0.0053    solve 0.8364    add 0.0021    
Current (lb-rhs): -0.48657822608947754
12 domains visited
Cumulative time: 1.1752126216888428

BaB round 2
batch: 12
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.19, 15] [/input.19, 15] [/input.19, 15] [/input.19, 15] [/input.19, 15] [/input.19, 15] [/input.19, 15] [/input.19, 15] [/input.19, 15] [/input.19, 15] 
split level 1: [/input.19, 47] [/input.23, 79] [/input.19, 47] [/input.23, 27] [/input.19, 75] [/input.23, 28] [/input.19, 47] [/input, 82] [/input.19, 27] [/input.19, 47] 
split level 2: [/input.23, 27] [/input.19, 48] [/input.27, 17] [/input.23, 37] [/input.19, 48] [/input.23, 37] [/input.23, 27] [/input.23, 66] [/input.19, 47] [/input.23, 27] 
pruning_in_iteration open status: True
ratio of positive domain = 79 / 96 = 0.8229166666666666
pruning-in-iteration extra time: 0.027843236923217773
Time: prepare 0.0227    beta_bound 0.7111    bound 0.7113    transfer 0.0007    finalize 0.0171    func 0.7519    
Accumulated time: func 1.5881    prepare 0.0422    bound 1.5169    beta_bound 1.5166    transfer 0.0014    finalize 0.0294    
batch bounding time:  0.752410888671875
Current worst splitting domains lb-rhs (depth):
-0.45995 (9), -0.37457 (9), -0.37015 (9), -0.34577 (9), -0.33793 (9), -0.29819 (9), -0.28769 (9), -0.15530 (9), -0.14160 (9), -0.13574 (9), -0.12325 (9), -0.12272 (9), -0.10392 (9), -0.07563 (9), -0.07165 (9), -0.07142 (9), -0.03737 (9), 
length of domains: 17
Time: pickout 0.0018    decision 0.0414    set_bounds 0.0054    solve 0.7525    add 0.0025    
Accumulated time: pickout 0.0032    decision 0.3361    set_bounds 0.0108    solve 1.5889    add 0.0046    
Current (lb-rhs): -0.4599514603614807
29 domains visited
Cumulative time: 1.9804999828338623

BaB round 3
batch: 17
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.19, 27] [/input.19, 47] [/input.27, 77] [/input.19, 47] [/input.19, 86] [/input.19, 86] [/input, 82] [/input.19, 27] [/input.19, 27] [/input.19, 86] 
split level 1: [/input.23, 27] [/input.23, 27] [/input.23, 37] [/input.23, 28] [/input.27, 17] [/input.23, 27] [/input.23, 67] [/input.23, 27] [/input.19, 47] [/input.23, 37] 
pruning_in_iteration open status: True
ratio of positive domain = 54 / 68 = 0.7941176470588236
pruning-in-iteration extra time: 0.01697707176208496
Time: prepare 0.0193    beta_bound 0.6275    bound 0.6276    transfer 0.0013    finalize 0.0160    func 0.6644    
Accumulated time: func 2.2525    prepare 0.0625    bound 2.1445    beta_bound 2.1441    transfer 0.0027    finalize 0.0454    
batch bounding time:  0.6646561622619629
Current worst splitting domains lb-rhs (depth):
-0.32118 (11), -0.25013 (11), -0.24263 (11), -0.20972 (11), -0.18739 (11), -0.18170 (11), -0.13904 (11), -0.13707 (11), -0.12342 (11), -0.10264 (11), -0.09097 (11), -0.08177 (11), -0.05542 (11), -0.02245 (11), 
length of domains: 14
Time: pickout 0.0020    decision 0.0450    set_bounds 0.0032    solve 0.6647    add 0.0033    
Accumulated time: pickout 0.0052    decision 0.3812    set_bounds 0.0140    solve 2.2536    add 0.0078    
Current (lb-rhs): -0.3211839199066162
43 domains visited
Cumulative time: 2.7010412216186523

BaB round 4
batch: 14
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/input.23, 28] [/input.19, 27] [/input.23, 67] [/input.23, 37] [/input, 82] [/input.19, 27] [/input.19, 27] [/input.19, 27] [/input.23, 27] [/input.27, 77] 
split level 1: [/input.23, 43] [/input.19, 86] [/input.27, 77] [/input.27, 77] [/input.11, 67] [/input.27, 76] [/input.27, 17] [/input.19, 75] [/input, 82] [/input.23, 67] 
pruning_in_iteration open status: True
ratio of positive domain = 45 / 56 = 0.8035714285714286
pruning-in-iteration extra time: 0.020552873611450195
Time: prepare 0.0144    beta_bound 0.6337    bound 0.6339    transfer 0.0014    finalize 0.0143    func 0.6641    
Accumulated time: func 2.9166    prepare 0.0778    bound 2.7783    beta_bound 2.7778    transfer 0.0041    finalize 0.0598    
batch bounding time:  0.6643116474151611
Current worst splitting domains lb-rhs (depth):
-0.27877 (13), -0.22154 (13), -0.17475 (13), -0.09950 (13), -0.08674 (13), -0.08373 (13), -0.07435 (13), -0.06599 (13), -0.05519 (13), -0.04358 (13), -0.01702 (13), 
length of domains: 11
Time: pickout 0.0020    decision 0.0532    set_bounds 0.0033    solve 0.6643    add 0.0150    
Accumulated time: pickout 0.0072    decision 0.4344    set_bounds 0.0173    solve 2.9179    add 0.0229    
Current (lb-rhs): -0.2787731885910034
54 domains visited
Cumulative time: 3.4432289600372314

BaB round 5
batch: 11
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/input, 82] [/input.19, 86] [/input.11, 67] [/input.3, 36] [/input, 38] [/input, 82] [/input.19, 86] [/input, 82] [/input.19, 86] [/input.3, 94] 
split level 1: [/input.11, 67] [/input.11, 67] [/input.27, 17] [/input.23, 67] [/input.3, 36] [/input.23, 67] [/input.3, 36] [/input.11, 67] [/input.11, 67] [/input.11, 67] 
split level 2: [/input.27, 77] [/input.19, 75] [/input.27, 77] [/input, 94] [/input.23, 67] [/input.23, 43] [/input.23, 67] [/input.23, 67] [/input.19, 75] [/input.27, 17] 
pruning_in_iteration open status: True
ratio of positive domain = 82 / 88 = 0.9318181818181819
pruning-in-iteration extra time: 0.020228147506713867
Time: prepare 0.0351    beta_bound 0.6410    bound 0.6411    transfer 0.0007    finalize 0.0184    func 0.6954    
Accumulated time: func 3.6120    prepare 0.1141    bound 3.4194    beta_bound 3.4188    transfer 0.0048    finalize 0.0782    
batch bounding time:  0.6957056522369385
Current worst splitting domains lb-rhs (depth):
-0.12316 (16), -0.09890 (16), -0.04849 (16), -0.02527 (16), -0.01282 (16), -0.00092 (16), 
length of domains: 6
Time: pickout 0.0043    decision 0.0628    set_bounds 0.0073    solve 0.6958    add 0.0016    
Accumulated time: pickout 0.0116    decision 0.4972    set_bounds 0.0246    solve 3.6137    add 0.0245    
Current (lb-rhs): -0.1231604814529419
60 domains visited
Cumulative time: 4.216879367828369

BaB round 6
batch: 6
Average branched neurons at iteration 6:  1.0000
splitting decisions: 
split level 0: [/input.3, 94] [/input.19, 86] [/input.3, 94] [/input.19, 86] [/input.3, 94] [/input.3, 94] 
split level 1: [/input, 81] [/input.3, 36] [/input, 81] [/input.3, 36] [/input, 38] [/input, 81] 
split level 2: [/input, 94] [/input.23, 67] [/input, 38] [/input.19, 75] [/input.3, 36] [/input, 94] 
split level 3: [/input.27, 17] [/input.19, 75] [/input, 94] [/input, 68] [/input, 94] [/input, 85] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 96 / 96 = 1.0
pruning-in-iteration extra time: 9.489059448242188e-05
Time: prepare 0.0268    beta_bound 0.0141    bound 0.0143    transfer 0.0004    finalize 0.0180    func 0.0595    
Accumulated time: func 3.6714    prepare 0.1419    bound 3.4337    beta_bound 3.4329    transfer 0.0051    finalize 0.0962    
batch bounding time:  0.059711456298828125
length of domains: 0
Time: pickout 0.0018    decision 0.0548    set_bounds 0.0039    solve 0.0597    add 0.0002    
Accumulated time: pickout 0.0133    decision 0.5520    set_bounds 0.0285    solve 3.6734    add 0.0246    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
60 domains visited
Cumulative time: 4.338712215423584


Properties batch 6, size 1
Remaining timeout: 415.1220908164978
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  0.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-1.05715275]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundParams(name=/13, inputs=[])
  (/14): BoundParams(name=/14, inputs=[])
  (/15): BoundParams(name=/15, inputs=[])
  (/16): BoundParams(name=/16, inputs=[])
  (/17): BoundParams(name=/17, inputs=[])
  (/18): BoundParams(name=/18, inputs=[])
  (/19): BoundShape(name=/19, inputs=[/0])
  (/20): BoundConstant(name=/20, inputs=[])
  (/21): BoundGather(name=/21, inputs=[/19, /20])
  (/22): BoundConstant(name=/22, inputs=[])
  (/23): BoundUnsqueeze(name=/23, inputs=[/21])
  (/24): BoundUnsqueeze(name=/24, inputs=[/22])
  (/25): BoundConcat(name=/25, inputs=[/23, /24])
  (/26): BoundReshape(name=/26, inputs=[/0, /25])
  (/input): BoundLinear(name=/input, inputs=[/26, /1, /2])
  (/28): BoundRelu(name=/28, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/28, /3, /4])
  (/30): BoundRelu(name=/30, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/30, /5, /6])
  (/32): BoundRelu(name=/32, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/32, /7, /8])
  (/34): BoundRelu(name=/34, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/34, /9, /10])
  (/36): BoundRelu(name=/36, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/36, /11, /12])
  (/38): BoundRelu(name=/38, inputs=[/input.19])
  (/input.23): BoundLinear(name=/input.23, inputs=[/38, /13, /14])
  (/40): BoundRelu(name=/40, inputs=[/input.23])
  (/input.27): BoundLinear(name=/input.27, inputs=[/40, /15, /16])
  (/42): BoundRelu(name=/42, inputs=[/input.27])
  (/43): BoundLinear(name=/43, inputs=[/42, /17, /18])
)
Model prediction is: tensor([-0.48489553, -1.39149714,  0.13246238,  0.24095330, -3.24258041,
         2.77433348,  0.52672815, -2.47505617,  7.48759937, -0.99461943],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-1.05715275]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input.11,/input.3,/input.19,/input.27,/input.23,/input.7,/input.15,/input,/43
Split layers:
  BoundLinear(name=/input.3, inputs=[/28, /3, /4]): [(BoundRelu(name=/30, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.23, inputs=[/38, /13, /14]): [(BoundRelu(name=/40, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.27, inputs=[/40, /15, /16]): [(BoundRelu(name=/42, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.19, inputs=[/36, /11, /12]): [(BoundRelu(name=/38, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.15, inputs=[/34, /9, /10]): [(BoundRelu(name=/36, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.11, inputs=[/32, /7, /8]): [(BoundRelu(name=/34, inputs=[/input.11]), 0)]
  BoundLinear(name=/input, inputs=[/26, /1, /2]): [(BoundRelu(name=/28, inputs=[/input]), 0)]
  BoundLinear(name=/input.7, inputs=[/30, /5, /6]): [(BoundRelu(name=/32, inputs=[/input.7]), 0)]
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
Node /28 input 0: size torch.Size([100]) unstable 26
Node /30 input 0: size torch.Size([100]) unstable 27
Node /32 input 0: size torch.Size([100]) unstable 34
Node /34 input 0: size torch.Size([100]) unstable 34
Node /36 input 0: size torch.Size([100]) unstable 36
Node /38 input 0: size torch.Size([100]) unstable 47
Node /40 input 0: size torch.Size([100]) unstable 51
Node /42 input 0: size torch.Size([100]) unstable 62
-----------------
# of unstable neurons: 317
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.27, 49] 
split level 1: [/input.27, 84] 
split level 2: [/input.27, 5] 
split level 3: [/input.27, 71] 
split level 4: [/input.27, 76] 
split level 5: [/input.27, 77] 
pruning_in_iteration open status: True
ratio of positive domain = 54 / 64 = 0.84375
pruning-in-iteration extra time: 0.025490999221801758
Time: prepare 0.0167    beta_bound 0.6653    bound 0.6654    transfer 0.0010    finalize 0.0134    func 0.6968    
Accumulated time: func 0.6968    prepare 0.0178    bound 0.6654    beta_bound 0.6653    transfer 0.0010    finalize 0.0134    
batch bounding time:  0.6969490051269531
Current worst splitting domains lb-rhs (depth):
-1.05715 (6), -0.70450 (6), -0.55476 (6), -0.46805 (6), -0.42336 (6), -0.33311 (6), -0.26444 (6), -0.21822 (6), -0.07789 (6), -0.06512 (6), 
length of domains: 10
Time: pickout 0.0014    decision 0.0645    set_bounds 0.0029    solve 0.6970    add 0.0015    
Accumulated time: pickout 0.0014    decision 0.0645    set_bounds 0.0029    solve 0.6970    add 0.0015    
Current (lb-rhs): -1.0571527481079102
10 domains visited
Cumulative time: 0.7812478542327881

BaB round 2
batch: 10
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.19, 15] [/input.19, 15] [/input.19, 15] [/input.11, 63] [/input.15, 23] [/input.11, 63] [/input.19, 15] [/input.15, 23] [/input.15, 23] [/input.15, 23] 
split level 1: [/input.27, 69] [/input.27, 69] [/input.27, 69] [/input.19, 15] [/input.19, 15] [/input.19, 15] [/input.27, 69] [/input.19, 15] [/input.27, 69] [/input.19, 15] 
split level 2: [/input.23, 66] [/input.23, 67] [/input.23, 32] [/input.27, 69] [/input.27, 69] [/input.27, 69] [/input.23, 32] [/input.27, 69] [/input.19, 48] [/input.27, 69] 
pruning_in_iteration open status: True
ratio of positive domain = 73 / 80 = 0.9125
pruning-in-iteration extra time: 0.01901531219482422
Time: prepare 0.0260    beta_bound 0.6555    bound 0.6556    transfer 0.0007    finalize 0.0156    func 0.6979    
Accumulated time: func 1.3947    prepare 0.0447    bound 1.3209    beta_bound 1.3207    transfer 0.0017    finalize 0.0291    
batch bounding time:  0.6980843544006348
Current worst splitting domains lb-rhs (depth):
-0.82879 (9), -0.56559 (9), -0.33351 (9), -0.28753 (9), -0.17362 (9), -0.04098 (9), -0.02932 (9), 
length of domains: 7
Time: pickout 0.0023    decision 0.0562    set_bounds 0.0053    solve 0.6981    add 0.0015    
Accumulated time: pickout 0.0037    decision 0.1208    set_bounds 0.0082    solve 1.3951    add 0.0031    
Current (lb-rhs): -0.8287932872772217
17 domains visited
Cumulative time: 1.5460519790649414

BaB round 3
batch: 7
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.19, 98] [/input.19, 48] [/input.19, 98] [/input.19, 98] [/input.19, 98] [/input.23, 29] [/input.19, 98] 
split level 1: [/input.15, 22] [/input.23, 66] [/input.11, 63] [/input.11, 63] [/input.19, 48] [/input.19, 48] [/input.11, 63] 
split level 2: [/input.23, 32] [/input.19, 47] [/input.15, 22] [/input.15, 22] [/input.23, 66] [/input.27, 80] [/input.15, 22] 
pruning_in_iteration open status: True
ratio of positive domain = 51 / 56 = 0.9107142857142857
pruning-in-iteration extra time: 0.018137693405151367
Time: prepare 0.0159    beta_bound 0.6698    bound 0.6699    transfer 0.0006    finalize 0.0154    func 0.7021    
Accumulated time: func 2.0969    prepare 0.0614    bound 1.9908    beta_bound 1.9905    transfer 0.0023    finalize 0.0444    
batch bounding time:  0.7027029991149902
Current worst splitting domains lb-rhs (depth):
-0.74853 (12), -0.46347 (12), -0.10846 (12), -0.08308 (12), -0.03551 (12), 
length of domains: 5
Time: pickout 0.0016    decision 0.0413    set_bounds 0.0031    solve 0.7028    add 0.0024    
Accumulated time: pickout 0.0054    decision 0.1620    set_bounds 0.0113    solve 2.0979    add 0.0055    
Current (lb-rhs): -0.7485324144363403
22 domains visited
Cumulative time: 2.2995502948760986

BaB round 4
batch: 5
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/input.19, 27] [/input, 82] [/input.19, 27] [/input, 82] [/input.19, 27] 
split level 1: [/input.23, 29] [/input.23, 32] [/input.23, 29] [/input.15, 22] [/input.23, 29] 
split level 2: [/input.23, 32] [/input.27, 80] [/input.23, 32] [/input.23, 88] [/input.23, 32] 
split level 3: [/input.19, 48] [/input.23, 67] [/input.19, 48] [/input.23, 12] [/input.19, 48] 
pruning_in_iteration open status: True
ratio of positive domain = 75 / 80 = 0.9375
pruning-in-iteration extra time: 0.0189054012298584
Time: prepare 0.0192    beta_bound 0.6677    bound 0.6678    transfer 0.0011    finalize 0.0201    func 0.7083    
Accumulated time: func 2.8052    prepare 0.0817    bound 2.6586    beta_bound 2.6582    transfer 0.0034    finalize 0.0646    
batch bounding time:  0.7085459232330322
Current worst splitting domains lb-rhs (depth):
-0.58351 (16), -0.21872 (16), -0.13860 (16), -0.08183 (16), -0.04409 (16), 
length of domains: 5
Time: pickout 0.0023    decision 0.0498    set_bounds 0.0039    solve 0.7086    add 0.0024    
Accumulated time: pickout 0.0077    decision 0.2119    set_bounds 0.0152    solve 2.8065    add 0.0079    
Current (lb-rhs): -0.5835095643997192
27 domains visited
Cumulative time: 3.068527936935425

BaB round 5
batch: 5
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/input, 82] [/input.19, 27] [/input.19, 75] [/input, 82] [/input, 82] 
split level 1: [/input.19, 75] [/input, 68] [/input.27, 37] [/input.27, 37] [/input.19, 75] 
split level 2: [/input.27, 80] [/input.19, 75] [/input.23, 79] [/input.27, 80] [/input.15, 13] 
split level 3: [/input.23, 67] [/input.19, 47] [/input.19, 47] [/input.23, 67] [/input.27, 80] 
pruning_in_iteration open status: True
ratio of positive domain = 76 / 80 = 0.95
pruning-in-iteration extra time: 0.018236160278320312
Time: prepare 0.0286    beta_bound 0.6518    bound 0.6519    transfer 0.0014    finalize 0.0156    func 0.6977    
Accumulated time: func 3.5029    prepare 0.1115    bound 3.3105    beta_bound 3.3100    transfer 0.0049    finalize 0.0802    
batch bounding time:  0.6979146003723145
Current worst splitting domains lb-rhs (depth):
-0.39024 (20), -0.21193 (20), -0.12748 (20), -0.03264 (20), 
length of domains: 4
Time: pickout 0.0025    decision 0.0705    set_bounds 0.0059    solve 0.6979    add 0.0017    
Accumulated time: pickout 0.0102    decision 0.2824    set_bounds 0.0211    solve 3.5044    add 0.0095    
Current (lb-rhs): -0.3902382254600525
31 domains visited
Cumulative time: 3.8483219146728516

BaB round 6
batch: 4
Average branched neurons at iteration 6:  1.0000
splitting decisions: 
split level 0: [/input, 68] [/input, 68] [/input.19, 27] [/input, 68] 
split level 1: [/input.27, 37] [/input.27, 37] [/input, 68] [/input.27, 37] 
split level 2: [/input.3, 16] [/input.23, 67] [/input.27, 83] [/input.23, 67] 
split level 3: [/input.23, 67] [/input.27, 83] [/input.23, 43] [/input.19, 95] 
pruning_in_iteration open status: True
ratio of positive domain = 60 / 64 = 0.9375
pruning-in-iteration extra time: 0.019378185272216797
Time: prepare 0.0156    beta_bound 0.6509    bound 0.6510    transfer 0.0006    finalize 0.0106    func 0.6779    
Accumulated time: func 4.1807    prepare 0.1278    bound 3.9615    beta_bound 3.9609    transfer 0.0055    finalize 0.0908    
batch bounding time:  0.6781668663024902
Current worst splitting domains lb-rhs (depth):
-0.08665 (24), -0.07184 (24), -0.01474 (24), -0.00445 (24), 
length of domains: 4
Time: pickout 0.0017    decision 0.0487    set_bounds 0.0032    solve 0.6782    add 0.0014    
Accumulated time: pickout 0.0118    decision 0.3310    set_bounds 0.0243    solve 4.1826    add 0.0109    
Current (lb-rhs): -0.0866495668888092
35 domains visited
Cumulative time: 4.582497835159302

BaB round 7
batch: 4
Average branched neurons at iteration 7:  1.0000
splitting decisions: 
split level 0: [/input.27, 61] [/input.27, 61] [/input.27, 61] [/input.27, 61] 
split level 1: [/input.3, 16] [/input.3, 16] [/input.3, 16] [/input.3, 16] 
split level 2: [/input.27, 70] [/input.27, 70] [/input.11, 67] [/input.11, 67] 
split level 3: [/input.11, 67] [/input.11, 67] [/input.27, 70] [/input.27, 70] 

all verified at 1th iter
pruning_in_iteration open status: True
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.0011763572692871094
Time: prepare 0.0153    beta_bound 0.0508    bound 0.0509    transfer 0.0014    finalize 0.0142    func 0.0819    
Accumulated time: func 4.2627    prepare 0.1440    bound 4.0124    beta_bound 4.0116    transfer 0.0069    finalize 0.1050    
batch bounding time:  0.08204865455627441
length of domains: 0
Time: pickout 0.0016    decision 0.0446    set_bounds 0.0029    solve 0.0821    add 0.0002    
Accumulated time: pickout 0.0134    decision 0.3756    set_bounds 0.0272    solve 4.2647    add 0.0111    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
35 domains visited
Cumulative time: 4.71553373336792


Properties batch 7, size 1
Remaining timeout: 410.2080056667328
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.199166774749756.

Properties batch 8, size 1
Remaining timeout: 410.0800712108612
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.7328808307647705.
Result: safe in 669.9805 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):669.9738274242776, max time: 669.9805271625519
mean time for verified SAFE instances(total 1): 669.9805271625519, max time: 669.9805271625519
safe (total 1), index: [0]
