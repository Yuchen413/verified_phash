Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_9_100
  path: mnist_9_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 1
  end: 2
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 14:14:49 2023 on zeratul
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=100, bias=True)
  (12): ReLU()
  (13): Linear(in_features=100, out_features=100, bias=True)
  (14): ReLU()
  (15): Linear(in_features=100, out_features=100, bias=True)
  (16): ReLU()
  (17): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226457)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_9_100]_start=1_end=2_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundParams(name=/13, inputs=[])
  (/14): BoundParams(name=/14, inputs=[])
  (/15): BoundParams(name=/15, inputs=[])
  (/16): BoundParams(name=/16, inputs=[])
  (/17): BoundParams(name=/17, inputs=[])
  (/18): BoundParams(name=/18, inputs=[])
  (/19): BoundShape(name=/19, inputs=[/0])
  (/20): BoundConstant(name=/20, inputs=[])
  (/21): BoundGather(name=/21, inputs=[/19, /20])
  (/22): BoundConstant(name=/22, inputs=[])
  (/23): BoundUnsqueeze(name=/23, inputs=[/21])
  (/24): BoundUnsqueeze(name=/24, inputs=[/22])
  (/25): BoundConcat(name=/25, inputs=[/23, /24])
  (/26): BoundReshape(name=/26, inputs=[/0, /25])
  (/input): BoundLinear(name=/input, inputs=[/26, /1, /2])
  (/28): BoundRelu(name=/28, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/28, /3, /4])
  (/30): BoundRelu(name=/30, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/30, /5, /6])
  (/32): BoundRelu(name=/32, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/32, /7, /8])
  (/34): BoundRelu(name=/34, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/34, /9, /10])
  (/36): BoundRelu(name=/36, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/36, /11, /12])
  (/38): BoundRelu(name=/38, inputs=[/input.19])
  (/input.23): BoundLinear(name=/input.23, inputs=[/38, /13, /14])
  (/40): BoundRelu(name=/40, inputs=[/input.23])
  (/input.27): BoundLinear(name=/input.27, inputs=[/40, /15, /16])
  (/42): BoundRelu(name=/42, inputs=[/input.27])
  (/43): BoundLinear(name=/43, inputs=[/42, /17, /18])
)
Model prediction is: tensor([[-0.21560693,  0.22183228,  5.10792494,  0.28054345,  0.00971133,
         -1.09514022,  2.48394561, -1.06155658, -0.56578517, -3.77237463]],
       device='cuda:0')
layer /28 using sparse-features alpha with shape [31]; unstable size 31; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [35]; unstable size 35; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [61]; unstable size 61; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using sparse-features alpha with shape [90]; unstable size 90; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-104.23632050, -117.78462219, -122.36059570, -139.74771118,
         -145.51246643, -129.51948547, -140.81065369, -146.80137634,
         -168.86378479]], device='cuda:0') None
best_l after optimization: -524.2747802734375
alpha/beta optimization time: 13.93554973602295
initial alpha-CROWN bounds: tensor([[-40.09304810, -48.57860565, -59.77550125, -57.71330261, -62.78781509,
         -49.00802231, -64.72055817, -66.43737793, -75.16057587]],
       device='cuda:0')
Worst class: (+ rhs) -75.16057586669922
Split layers:
  BoundLinear(name=/input.7, inputs=[/30, /5, /6]): [(BoundRelu(name=/32, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.11, inputs=[/32, /7, /8]): [(BoundRelu(name=/34, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.19, inputs=[/36, /11, /12]): [(BoundRelu(name=/38, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.27, inputs=[/40, /15, /16]): [(BoundRelu(name=/42, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.23, inputs=[/38, /13, /14]): [(BoundRelu(name=/40, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.3, inputs=[/28, /3, /4]): [(BoundRelu(name=/30, inputs=[/input.3]), 0)]
  BoundLinear(name=/input, inputs=[/26, /1, /2]): [(BoundRelu(name=/28, inputs=[/input]), 0)]
  BoundLinear(name=/input.15, inputs=[/34, /9, /10]): [(BoundRelu(name=/36, inputs=[/input.15]), 0)]
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.21560693,  0.22183228,  5.10792494,  0.28054345,  0.00971133,
         -1.09514022,  2.48394561, -1.06155658, -0.56578517, -3.77237463]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.98507768e-02, -1.79260969e-04,  4.11153984e+00, -1.72595441e-01,
           1.63199767e-01, -8.20152581e-01,  2.58033586e+00, -1.24569297e+00,
          -1.05943680e-01, -3.30701637e+00],
         [-4.98507768e-02, -1.79260969e-04,  4.11153984e+00, -1.72595441e-01,
           1.63199767e-01, -8.20152581e-01,  2.58033586e+00, -1.24569297e+00,
          -1.05943680e-01, -3.30701637e+00]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.16139078, 4.11171913, 4.28413534, 3.94834018, 4.93169260,
          1.53120399, 5.35723305, 4.21748352, 7.41855621]]], device='cuda:0')
number of violation:  0
Attack finished in 1.0381 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /28 using sparse-features alpha with shape [31]; unstable size 31; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [35]; unstable size 35; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [61]; unstable size 61; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using sparse-features alpha with shape [90]; unstable size 90; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2024-02-29
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_27', 'lay4_22', 'lay4_66', 'lay4_44', 'lay4_94', 'lay4_20', 'lay4_87', 'lay4_54', 'lay4_76', 'lay4_36', 'lay4_49', 'lay4_37', 'lay4_96', 'lay4_52', 'lay4_98', 'lay4_57', 'lay4_42', 'lay4_78', 'lay4_18', 'lay4_79', 'lay4_85', 'lay4_71', 'lay4_75', 'lay4_55', 'lay4_43', 'lay4_68', 'lay4_24', 'lay4_91', 'lay4_81', 'lay4_8', 'lay4_26', 'lay4_64', 'lay4_63', 'lay4_2', 'lay4_97'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/Verifier_Development/complete_verifier/data_utils.py:257: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_87, [-inf,inf]=>[1e-05,1.0471533978336613] (15,-1; 2,-1), time: 0.6456s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.04735655198466686,1.9640789774633471] (2,-1; 2,-1), time: 0.8378s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-0.2665108734049822,0.7695659009007745] (2,-1; 2,-1), time: 1.0581s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_22, [-inf,inf]=>[-0.6155967815904326,0.8891458132364378] (2,-1; 2,-1), time: 1.1486s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-inf,-0.011425126161425575] (-1,-1; 2,-1), time: 0.2918s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-0.796675597627962,0.6779371971375566] (2,-1; 2,-1), time: 1.2615s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.25641094793531044,0.7182556899138482] (2,-1; 2,-1), time: 1.3039s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-1.0206839095700693,0.044624481188500625] (2,-1; 2,-1), time: 1.3437s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7787s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-1.0192934810323235,0.04511678498732413] (2,-1; 2,-1), time: 1.4759s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-1.1775019276603544,0.39173160399016815] (2,-1; 2,-1), time: 1.5609s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_44, [-inf,inf]=>[-0.30329694858415546,0.8405117538105291] (2,-1; 2,-1), time: 1.8208s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.7764058445685645,0.23584140445133314] (2,-1; 2,-1), time: 2.0655s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_85, [-inf,inf]=>[-0.912540369421126,0.6804765746442247] (2,-1; 2,-1), time: 0.9416s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_98, [-inf,inf]=>[-1.052350887897514,0.2758658573348319] (2,-1; 2,-1), time: 2.1151s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.8144486777069869,0.2346963898030951] (2,-1; 2,-1), time: 1.1521s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5020s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-0.29400624165752526,1.0201134841779673] (2,-1; 2,-1), time: 1.2751s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-0.8212001192322804,0.3040902896731212] (2,-1; 2,-1), time: 1.2508s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_36, [-inf,inf]=>[-0.9435804826082099,0.4331210372579947] (2,-1; 2,-1), time: 2.5987s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.011110612157842537,0.8671970436313101] (2,-1; 2,-1), time: 2.7552s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_66, [-inf,inf]=>[-0.7525139080066874,0.30430506353857706] (2,-1; 2,-1), time: 2.8459s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-0.9653467164240328,0.3536399338480298] (2,-1; 2,-1), time: 2.9183s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.593376253366082,0.5914967006105034] (2,-1; 2,-1), time: 1.4675s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-0.02356432531385974,1.3732133530836108] (2,-1; 2,-1), time: 1.4464s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.5195015039634491,0.4884352579314554] (2,-1; 2,-1), time: 0.8793s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-0.3708912525552942,1.1256464887342355] (2,-1; 2,-1), time: 2.0538s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[1e-05,1.7342061248582403] (15,-1; 2,-1), time: 1.3194s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-0.6443437415452407,0.5671071420966892] (2,-1; 2,-1), time: 2.1235s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[-0.6934819967336141,0.6796217922478718] (2,-1; 2,-1), time: 1.3341s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.44251389434471644,0.5691449233530491] (2,-1; 2,-1), time: 1.7596s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[-0.7653321543522983,0.6989815174234126] (2,-1; 2,-1), time: 1.7487s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-0.3429485119862151,0.7174421247368536] (2,-1; 2,-1), time: 2.7465s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.2638337971157569,0.8102505350190183] (2,-1; 2,-1), time: 2.6315s, #vars: 1047, #constrs: 293, improved: True
Solving MIP for lay4_97, [-inf,inf]=>[-0.10918046567171094,0.752586380211328] (2,-1; 2,-1), time: 2.8024s, #vars: 1047, #constrs: 293, improved: True
PGD done for relu layer 2
MIP improved 35 nodes out of 35 unstable nodes, lb improved 9.001885414123535, ub improved 9.513676643371582, time 7.9363
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_34', 'lay6_85', 'lay6_37', 'lay6_16', 'lay6_70', 'lay6_93', 'lay6_64', 'lay6_31', 'lay6_61', 'lay6_68', 'lay6_92', 'lay6_49', 'lay6_82', 'lay6_57', 'lay6_38', 'lay6_5', 'lay6_8', 'lay6_60', 'lay6_6', 'lay6_21', 'lay6_73', 'lay6_14', 'lay6_7', 'lay6_42', 'lay6_22', 'lay6_24', 'lay6_51', 'lay6_98', 'lay6_32', 'lay6_99', 'lay6_33', 'lay6_46', 'lay6_75', 'lay6_91', 'lay6_53', 'lay6_72', 'lay6_18', 'lay6_47', 'lay6_11', 'lay6_63', 'lay6_97', 'lay6_10', 'lay6_28', 'lay6_9', 'lay6_29', 'lay6_65', 'lay6_74', 'lay6_35', 'lay6_87', 'lay6_88', 'lay6_66', 'lay6_3'] filter: 1.0
Solving MIP for lay6_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7789s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4319s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-inf,-0.001293371641497676] (-1,-1; 2,-1), time: 2.6460s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.9971s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.0060s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.3700s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.5973s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.9631s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.4211s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.6421s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5174s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.4237s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.2880s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-0.7897887606698226,0.18764231412794277] (2,-1; 2,-1), time: 8.2924s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-0.7481870280384153,0.11804040956224826] (2,-1; 2,-1), time: 7.4619s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-0.5139249196725314,0.4854014628864758] (2,-1; 2,-1), time: 9.4158s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-0.5833625350835417,0.13313299716630117] (2,-1; 2,-1), time: 11.0925s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3356s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2491s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.9378s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-0.3228734103131975,0.3856255953992565] (2,-1; 2,-1), time: 9.8157s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4712s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2478s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-0.25449413325267733,0.4507667323352777] (2,-1; 2,-1), time: 11.0356s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[1e-05,0.668123783440081] (15,-1; 2,-1), time: 6.9279s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2972s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6281s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.37334322737867137,0.3170670987151972] (2,-1; 2,-1), time: 12.6330s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.1957659684534368,0.8821591587744299] (2,-1; 2,-1), time: 17.0767s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6767s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.0589041406965425,0.5462093890327143] (2,-1; 2,-1), time: 17.7655s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.5960382275942924,0.4185523192810098] (2,-1; 2,-1), time: 17.9522s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.30334425956353367,0.60309839420172] (2,-1; 9,-1), time: 18.3181s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-1.014490246111894,0.17943267545382974] (2,-1; 9,-1), time: 18.8193s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.7470s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-0.06171921265556372,0.6323488970641453] (2,-1; 2,-1), time: 7.3133s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3102s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-0.3109353789847293,0.34191226457004886] (2,-1; 2,-1), time: 8.7038s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-0.4600278445580407,0.295756428290053] (2,-1; 2,-1), time: 12.5644s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.5771966488421039,0.6118660124097337] (2,-1; 9,-1), time: 18.6243s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[1e-05,1.1965956623205414] (15,-1; 2,-1), time: 6.2512s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-0.02342742579938444,0.5630022947781362] (2,-1; 2,-1), time: 8.7803s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_66, [-inf,inf]=>[1e-05,1.0040886882113553] (15,-1; 2,-1), time: 6.6859s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.001693006397166479,0.763173131742415] (2,-1; 2,-1), time: 18.1900s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-0.08918866358664614,0.37575655464482166] (2,-1; 2,-1), time: 8.7411s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[1e-05,1.3045408915835297] (15,-1; 2,-1), time: 7.8880s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.6229617126008087,0.01988340348694826] (2,-1; 2,-1), time: 10.9678s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.6143s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-0.4658791022753715,0.08476993187884581] (2,-1; 2,-1), time: 10.7592s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-0.45594615759453,0.05341857645387357] (2,-1; 2,-1), time: 19.1346s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-0.42296374211421406,0.2398241462597199] (2,-1; 2,-1), time: 12.6683s, #vars: 1207, #constrs: 483, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.31641143227253155,0.4379555474158673] (2,-1; 2,-1), time: 15.5390s, #vars: 1207, #constrs: 483, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(87, 1), (42, -1), (78, -1), (91, -1), (81, 1)]
best_l after optimization: -215.54214477539062
beta sum per layer: []
alpha/beta optimization time: 15.749631881713867
alpha-CROWN with intermediate bounds by MIP: tensor([[-16.64617538, -19.38556862, -24.54749870, -23.20273209, -26.24884605,
         -20.87797928, -25.79168320, -28.10103035, -30.74064064]],
       device='cuda:0') None
MIP improved 52 nodes out of 52 unstable nodes, lb improved 12.4207124710083, ub improved 21.928464889526367, time 34.1657
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_87', 'lay8_56', 'lay8_49', 'lay8_30', 'lay8_12', 'lay8_70', 'lay8_67', 'lay8_80', 'lay8_72', 'lay8_57', 'lay8_32', 'lay8_77', 'lay8_36', 'lay8_85', 'lay8_79', 'lay8_42', 'lay8_25', 'lay8_52', 'lay8_58', 'lay8_50', 'lay8_0', 'lay8_16', 'lay8_66', 'lay8_33', 'lay8_78', 'lay8_68', 'lay8_38', 'lay8_75', 'lay8_64', 'lay8_31', 'lay8_89', 'lay8_69', 'lay8_59', 'lay8_17', 'lay8_34', 'lay8_8', 'lay8_73', 'lay8_9', 'lay8_99', 'lay8_5', 'lay8_83', 'lay8_98', 'lay8_55', 'lay8_2', 'lay8_61', 'lay8_90', 'lay8_74', 'lay8_88', 'lay8_96', 'lay8_62', 'lay8_27', 'lay8_20', 'lay8_82', 'lay8_39', 'lay8_93', 'lay8_4', 'lay8_48', 'lay8_86', 'lay8_41', 'lay8_60', 'lay8_97', 'lay8_22', 'lay8_76', 'lay8_43', 'lay8_44', 'lay8_46', 'lay8_28', 'lay8_84', 'lay8_1', 'lay8_35', 'lay8_47', 'lay8_94', 'lay8_54', 'lay8_65', 'lay8_71', 'lay8_13', 'lay8_63', 'lay8_26', 'lay8_3', 'lay8_40', 'lay8_6', 'lay8_53', 'lay8_51'] filter: 1.0
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3598s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3616s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3639s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3874s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4526s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4567s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4774s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4790s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3306s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3074s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8140s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3603s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0230s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7340s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4002s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8446s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3841s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.4468s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3584s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.9634s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.7056s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3679s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.4639s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4157s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.4065s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4238s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[1e-05,0.6974957902786123] (15,-1; 2,-1), time: 15.3350s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[1e-05,0.6754909913960161] (15,-1; 9,-1), time: 22.7861s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.10229761962976637,0.3042093222893208] (2,-1; 2,-1), time: 23.9092s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4489s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-0.20332787300469177,0.40661083526082614] (9,-1; 2,-1), time: 24.9067s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4312s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-0.3501401385805896,0.303970460015807] (9,-1; 2,-1), time: 25.4297s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[-0.364184009337989,0.1908843302544457] (2,-1; 9,-1), time: 27.8140s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-0.2137591114221165,0.4315747969740843] (2,-1; 9,-1), time: 27.7045s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[-0.98150918700751,0.00790626672176826] (2,-1; 9,-1), time: 28.5426s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8851s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7956s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.5002932532842397,0.06859785076964682] (9,-1; 9,-1), time: 30.0151s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.09990509563499535,0.4445215411011844] (9,-1; 9,-1), time: 30.2628s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.17860492379373405,0.43823496160292735] (9,-1; 9,-1), time: 30.0246s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3406s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3905s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[1e-05,1.083544811241506] (15,-1; 2,-1), time: 4.5768s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.5194950428612385,0.34752048408435277] (9,-1; 9,-1), time: 30.0205s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3465s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-0.6614631738067934,0.009741127610872775] (2,-1; 9,-1), time: 20.4415s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-0.22535997781075545,0.3085549866982391] (9,-1; 9,-1), time: 30.0156s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-0.727392603039988,0.008322672123962132] (9,-1; 9,-1), time: 30.0138s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[1e-05,1.4727971743810324] (15,-1; 2,-1), time: 6.3133s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3443s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3197s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-0.17853150082152688,0.2799060910688976] (9,-1; 9,-1), time: 30.0118s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[1e-05,1.3685679835232447] (15,-1; 2,-1), time: 7.0906s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3646s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[1e-05,1.1767834235743482] (15,-1; 2,-1), time: 10.7882s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4595s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3182s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-0.05823688404886359,0.49916837322767377] (2,-1; 9,-1), time: 22.3570s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[1e-05,1.0719635425047085] (15,-1; 2,-1), time: 10.3459s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[1e-05,1.2456607842525467] (15,-1; 9,-1), time: 15.4131s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-0.32232268393331914,0.23590179275535664] (9,-1; 9,-1), time: 30.0134s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3422s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-0.434337913813299,0.1292816336168956] (2,-1; 9,-1), time: 21.2373s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3304s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-0.556893626348698,0.025845211892188368] (9,-1; 2,-1), time: 29.6620s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[1e-05,2.0954865116186934] (15,-1; 2,-1), time: 6.2267s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3942s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[1e-05,2.397416944241597] (15,-1; 2,-1), time: 7.8105s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[1e-05,0.5902533247666687] (15,-1; 9,-1), time: 25.6785s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[1e-05,1.839467233502159] (15,-1; 2,-1), time: 3.6936s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-0.16544181960705281,0.6172097133099121] (9,-1; 9,-1), time: 30.0288s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.047299241358009975,0.41113760779513614] (9,-1; 9,-1), time: 30.0470s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[1e-05,2.238892362282653] (15,-1; 2,-1), time: 3.4519s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[1e-05,1.5272019974769009] (15,-1; 2,-1), time: 5.2746s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-0.21347317473847685,0.4089250397092167] (9,-1; 9,-1), time: 30.0153s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.07392595798487028,0.27233131463643956] (9,-1; 2,-1), time: 26.2480s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.2818179304495454,0.1863448364839344] (9,-1; 2,-1), time: 23.8819s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.4474386265235808,0.0751354445496362] (2,-1; 9,-1), time: 24.3424s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-0.20127270276370451,0.24120626781417379] (9,-1; 9,-1), time: 30.0143s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[-0.4293450407437589,0.24336181553189917] (9,-1; 9,-1), time: 30.1270s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-0.23703460713097751,0.4994573732571253] (9,-1; 2,-1), time: 27.0007s, #vars: 1355, #constrs: 655, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.2715729329082981,0.11241271307595502] (2,-1; 9,-1), time: 25.6682s, #vars: 1355, #constrs: 655, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(34, -1), (85, -1), (16, -1), (70, -1), (31, -1), (68, -1), (82, -1), (57, -1), (38, -1), (5, -1), (42, -1), (22, -1), (24, -1), (98, 1), (99, -1), (75, -1), (91, -1), (72, -1), (18, -1), (47, -1), (63, -1), (97, -1), (28, 1), (9, -1), (29, -1), (88, -1), (66, 1), (3, 1)]
best_l after optimization: -14.396039009094238
beta sum per layer: []
alpha/beta optimization time: 15.494518756866455
alpha-CROWN with intermediate bounds by MIP: tensor([[-1.48201966, -0.30545354, -1.08225918, -1.34376955, -2.44190192,
         -3.85890698,  0.10075903, -3.57571650, -0.40677071]], device='cuda:0') None
MIP improved 83 nodes out of 83 unstable nodes, lb improved 23.955169677734375, ub improved 43.06652069091797, time 74.2500
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_50', 'lay10_99', 'lay10_8', 'lay10_25', 'lay10_87', 'lay10_18', 'lay10_96', 'lay10_75', 'lay10_10', 'lay10_0', 'lay10_74', 'lay10_94', 'lay10_58', 'lay10_55', 'lay10_42', 'lay10_12', 'lay10_44', 'lay10_77', 'lay10_11', 'lay10_48', 'lay10_5', 'lay10_52', 'lay10_17', 'lay10_16', 'lay10_9', 'lay10_37', 'lay10_60', 'lay10_29', 'lay10_86', 'lay10_28', 'lay10_76', 'lay10_93', 'lay10_24', 'lay10_2', 'lay10_35', 'lay10_98', 'lay10_84', 'lay10_13', 'lay10_73', 'lay10_51', 'lay10_69', 'lay10_66', 'lay10_20', 'lay10_19', 'lay10_15', 'lay10_4', 'lay10_57', 'lay10_85', 'lay10_7', 'lay10_95', 'lay10_43', 'lay10_22', 'lay10_79', 'lay10_82', 'lay10_89', 'lay10_21', 'lay10_3', 'lay10_27', 'lay10_1', 'lay10_70', 'lay10_83', 'lay10_40', 'lay10_34', 'lay10_68', 'lay10_46', 'lay10_14', 'lay10_49', 'lay10_71', 'lay10_36', 'lay10_90', 'lay10_47', 'lay10_80', 'lay10_26', 'lay10_92', 'lay10_31', 'lay10_63', 'lay10_45', 'lay10_39', 'lay10_32', 'lay10_78', 'lay10_88', 'lay10_56', 'lay10_64', 'lay10_53', 'lay10_38', 'lay10_6', 'lay10_23', 'lay10_30', 'lay10_67', 'lay10_97', 'lay10_54', 'lay10_61', 'lay10_33', 'lay10_59', 'lay10_81', 'lay10_65', 'lay10_41', 'lay10_72', 'lay10_91', 'lay10_62'] filter: 1.0
Solving MIP for lay10_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3708s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3998s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4465s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4518s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4537s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4601s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4694s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4760s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5000s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5168s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5335s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5504s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4928s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4287s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4081s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4767s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4328s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5656s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5554s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4383s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4490s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4421s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7935s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4634s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.0592s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4605s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4710s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[1e-05,1.4439477588218055] (15,-1; 2,-1), time: 7.6992s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.8664s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.6969s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[1e-05,1.0911490357310776] (15,-1; 9,-1), time: 15.5934s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[1e-05,2.0301222448235388] (15,-1; 9,-1), time: 15.7293s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3987s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4597s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4041s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[1e-05,0.46593508330050715] (15,-1; 2,-1), time: 17.7962s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4865s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[1e-05,1.483839196868678] (15,-1; 2,-1), time: 11.4838s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5393s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4101s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.9406s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-0.7306355376740735,0.01908228599613198] (2,-1; 9,-1), time: 23.5222s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-0.009503902189316907,0.5209413424660132] (9,-1; 2,-1), time: 25.1002s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[1e-05,1.4904050290468855] (15,-1; 2,-1), time: 7.7475s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[1e-05,0.3913540271068763] (15,-1; 9,-1), time: 25.5068s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4737s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.3588412834093623,0.05825026358837378] (9,-1; 9,-1), time: 30.0191s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[-0.3491383697719946,0.1459628579295036] (9,-1; 9,-1), time: 30.3252s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-0.3241379259301476,0.33166404998851706] (9,-1; 9,-1), time: 30.0142s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-0.43220568782119345,0.3403776641085859] (9,-1; 9,-1), time: 30.0215s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-0.25972729740646183,0.23800586520039907] (9,-1; 9,-1), time: 30.0265s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[-0.3990731075570175,0.15350194672928644] (9,-1; 9,-1), time: 30.4770s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5627s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-0.15426728943811882,0.44482190384082143] (9,-1; 9,-1), time: 30.0221s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4180s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[1e-05,1.3986464916627304] (15,-1; 9,-1), time: 15.8624s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[1e-05,2.0141669255489316] (15,-1; 2,-1), time: 10.3283s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[1e-05,1.5408961257920564] (15,-1; 2,-1), time: 8.9339s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.8382s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[1e-05,1.7663868419894686] (15,-1; 2,-1), time: 8.1577s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[1e-05,2.665552255680399] (15,-1; 2,-1), time: 6.8702s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5229s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[1e-05,0.5972053729249565] (15,-1; 9,-1), time: 16.9095s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4044s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4165s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-0.30604381920889906,0.0780385208569173] (9,-1; 9,-1), time: 30.0300s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4164s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4448s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5390s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3953s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-0.22683814869359328,0.3124966127839086] (9,-1; 9,-1), time: 30.0299s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[1e-05,1.2339190657108685] (15,-1; 9,-1), time: 15.4908s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[1e-05,0.6064278083319863] (15,-1; 9,-1), time: 15.6789s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.3840s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-0.3787092121953348,0.0201489666928447] (9,-1; 9,-1), time: 30.0449s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[1e-05,2.3208235153594345] (15,-1; 9,-1), time: 15.5429s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[1e-05,3.720369970583557] (15,-1; 2,-1), time: 6.4251s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[1e-05,0.48263596419649313] (15,-1; 9,-1), time: 22.3638s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4263s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6216s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-0.36938394573177846,0.036285947319122915] (9,-1; 9,-1), time: 30.0188s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-0.41746736986931055,0.0814394034652191] (9,-1; 9,-1), time: 30.0926s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[1e-05,1.2972019755973936] (15,-1; 9,-1), time: 15.5327s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[1e-05,0.7002837541002812] (15,-1; 9,-1), time: 15.6492s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[1e-05,0.4814198317767664] (15,-1; 9,-1), time: 23.2779s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[1e-05,1.2436504852433068] (15,-1; 2,-1), time: 11.9583s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[1e-05,2.9300250561364782] (15,-1; 2,-1), time: 6.1046s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-0.3868855825124003,0.18174588278063367] (9,-1; 9,-1), time: 30.0203s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[1e-05,2.566744877182736] (15,-1; 9,-1), time: 15.3662s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[1e-05,2.8319274901114198] (15,-1; 2,-1), time: 7.8978s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,1.826304148511393] (15,-1; 9,-1), time: 15.3820s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[1e-05,1.4687143103804303] (15,-1; 2,-1), time: 12.6765s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[1e-05,2.224438541175116] (15,-1; 2,-1), time: 9.4579s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[1e-05,2.1025249901089444] (15,-1; 2,-1), time: 12.5003s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[1e-05,0.5474141910272023] (15,-1; 9,-1), time: 15.3482s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-0.4910761017213281,0.024006717983409333] (9,-1; 9,-1), time: 30.2882s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[1e-05,1.252855529239902] (15,-1; 9,-1), time: 15.3040s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[1e-05,3.408233046067374] (15,-1; 9,-1), time: 15.3583s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[1e-05,3.0769837054330584] (15,-1; 9,-1), time: 15.4717s, #vars: 1511, #constrs: 839, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-0.4676474347318069,0.08760976929979367] (9,-1; 9,-1), time: 30.0099s, #vars: 1511, #constrs: 839, improved: True
PGD done for relu layer 5
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(87, -1), (56, -1), (12, -1), (70, -1), (67, -1), (72, -1), (57, -1), (32, -1), (77, -1), (36, -1), (85, -1), (79, -1), (42, -1), (52, -1), (58, -1), (50, -1), (16, -1), (78, -1), (68, -1), (75, 1), (31, -1), (89, -1), (69, -1), (17, -1), (8, 1), (73, -1), (99, -1), (83, -1), (61, -1), (74, -1), (62, -1), (20, 1), (82, -1), (39, 1), (93, 1), (48, -1), (86, -1), (41, 1), (60, 1), (97, -1), (22, 1), (44, 1), (46, -1), (28, -1), (35, -1), (94, -1), (54, -1), (71, 1), (63, 1), (26, -1), (3, -1), (40, 1), (6, 1), (53, 1), (51, -1)]
best_l after optimization: 14.44125747680664
beta sum per layer: []
alpha/beta optimization time: 15.565133810043335
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.29018116,  2.35059047,  2.01790404,  1.35191321,  1.66977906,
         -0.83628714,  2.95199609,  0.28489184,  3.36028934]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 48.54377365112305, ub improved 96.93580627441406, time 73.4750
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=100, bias=True) 5 12 torch.Size([100])
sorted candidates ['lay12_18', 'lay12_86', 'lay12_94', 'lay12_7', 'lay12_3', 'lay12_72', 'lay12_35', 'lay12_29', 'lay12_81', 'lay12_17', 'lay12_4', 'lay12_13', 'lay12_30', 'lay12_66', 'lay12_74', 'lay12_90', 'lay12_15', 'lay12_27', 'lay12_99', 'lay12_52', 'lay12_55', 'lay12_62', 'lay12_89', 'lay12_40', 'lay12_47', 'lay12_9', 'lay12_69', 'lay12_2', 'lay12_26', 'lay12_70', 'lay12_85', 'lay12_73', 'lay12_91', 'lay12_49', 'lay12_75', 'lay12_25', 'lay12_50', 'lay12_0', 'lay12_98', 'lay12_92', 'lay12_68', 'lay12_59', 'lay12_88', 'lay12_46', 'lay12_10', 'lay12_53', 'lay12_93', 'lay12_43', 'lay12_71', 'lay12_77', 'lay12_24', 'lay12_8', 'lay12_48', 'lay12_95', 'lay12_54', 'lay12_96', 'lay12_78', 'lay12_34', 'lay12_51', 'lay12_1', 'lay12_23', 'lay12_57', 'lay12_20', 'lay12_31', 'lay12_21', 'lay12_61', 'lay12_32', 'lay12_65', 'lay12_39', 'lay12_42', 'lay12_82', 'lay12_44', 'lay12_80', 'lay12_58', 'lay12_84', 'lay12_5', 'lay12_87', 'lay12_33', 'lay12_12', 'lay12_83', 'lay12_19', 'lay12_11', 'lay12_38', 'lay12_45', 'lay12_79', 'lay12_41', 'lay12_37', 'lay12_64', 'lay12_36', 'lay12_97', 'lay12_14', 'lay12_60', 'lay12_22', 'lay12_76', 'lay12_28', 'lay12_63', 'lay12_67', 'lay12_16', 'lay12_56', 'lay12_6'] filter: 1.0
Solving MIP for lay12_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4267s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5651s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5665s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5614s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5975s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5972s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6044s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6130s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6272s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6510s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6643s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6851s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6840s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5489s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5988s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5895s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5636s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6107s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7037s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6843s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7033s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6572s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1573s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5941s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7151s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6284s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.2492s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_35, [-inf,inf]=>[1e-05,0.9130553890028233] (15,-1; 9,-1), time: 15.5852s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_69, [-inf,inf]=>[1e-05,0.7482777059739395] (15,-1; 9,-1), time: 15.6019s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5098s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_50, [-inf,inf]=>[1e-05,1.073957608320439] (15,-1; 9,-1), time: 15.5639s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_98, [-inf,inf]=>[1e-05,4.68751372219632] (15,-1; 9,-1), time: 15.6282s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5755s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5828s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5178s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5323s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5612s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_25, [-inf,inf]=>[1e-05,0.4652803408645] (15,-1; 9,-1), time: 27.1538s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_66, [-inf,inf]=>[-0.5687244761505201,0.19470570409538496] (9,-1; 9,-1), time: 30.0441s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_62, [-inf,inf]=>[-0.06164985909350025,0.2744806146360103] (9,-1; 9,-1), time: 30.0179s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_52, [-inf,inf]=>[-0.10986570480535549,0.2169455757406125] (9,-1; 9,-1), time: 30.0607s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_70, [-inf,inf]=>[-0.011189084157270136,0.690344490185267] (9,-1; 9,-1), time: 30.0568s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5127s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_85, [-inf,inf]=>[-0.23315709505832974,0.09031744672270528] (9,-1; 9,-1), time: 30.0135s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_73, [-inf,inf]=>[-0.45269477109603345,0.0003407762954180668] (9,-1; 9,-1), time: 30.0183s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_75, [-inf,inf]=>[-0.05427705185531928,0.42512801243545284] (9,-1; 9,-1), time: 30.0468s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5604s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5223s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_92, [-inf,inf]=>[-0.14362166370423926,0.1757043453848127] (9,-1; 9,-1), time: 30.0294s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_68, [-inf,inf]=>[-0.4294204609496456,0.14307173421574096] (9,-1; 9,-1), time: 30.0235s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_59, [-inf,inf]=>[-0.19605738535595674,0.6342930767539195] (9,-1; 9,-1), time: 30.0235s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5491s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6441s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5633s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5852s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4864s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_24, [-inf,inf]=>[1e-05,3.0232082469046255] (15,-1; 9,-1), time: 15.5897s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5740s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5572s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5265s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5094s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4979s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_88, [-inf,inf]=>[-0.24288690477243116,0.4081161938173852] (9,-1; 9,-1), time: 30.1155s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_95, [-inf,inf]=>[1e-05,0.9718850791404908] (15,-1; 9,-1), time: 15.5879s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_71, [-inf,inf]=>[-0.1690124747298241,0.09755218541707189] (2,-1; 9,-1), time: 26.7187s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5493s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_46, [-inf,inf]=>[-0.38850752307272785,0.18894822187569457] (9,-1; 9,-1), time: 30.0264s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5540s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_34, [-inf,inf]=>[1e-05,2.5193717369506383] (15,-1; 9,-1), time: 15.6250s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5902s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_23, [-inf,inf]=>[1e-05,0.5559882924627796] (15,-1; 9,-1), time: 15.5900s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_20, [-inf,inf]=>[1e-05,0.7425951874020139] (15,-1; 9,-1), time: 15.5693s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_31, [-inf,inf]=>[1e-05,2.055540920006984] (15,-1; 9,-1), time: 15.5916s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5417s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_48, [-inf,inf]=>[-0.3994329802667024,0.11228078848392355] (9,-1; 9,-1), time: 30.0275s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_80, [-inf,inf]=>[1e-05,0.621862563629069] (15,-1; 9,-1), time: 15.5891s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_58, [-inf,inf]=>[1e-05,1.367986649214824] (15,-1; 9,-1), time: 15.6254s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5940s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5127s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_87, [-inf,inf]=>[1e-05,3.4667973486386026] (15,-1; 9,-1), time: 15.6408s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5027s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5628s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5386s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4966s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.5215s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_83, [-inf,inf]=>[1e-05,3.004568357161846] (15,-1; 9,-1), time: 15.5610s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_54, [-inf,inf]=>[-0.21390470797588196,0.28101525014177736] (9,-1; 9,-1), time: 30.0324s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_11, [-inf,inf]=>[1e-05,1.4920815126715705] (15,-1; 9,-1), time: 15.5163s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_96, [-inf,inf]=>[-0.4347186665075339,0.026757102877325585] (9,-1; 9,-1), time: 30.1094s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_1, [-inf,inf]=>[-0.6465887860323365,0.025816267900603002] (9,-1; 9,-1), time: 30.0215s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_37, [-inf,inf]=>[1e-05,1.0480510397369711] (15,-1; 9,-1), time: 15.5928s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_41, [-inf,inf]=>[1e-05,1.0006961365086877] (15,-1; 9,-1), time: 15.8166s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_64, [-inf,inf]=>[1e-05,0.50295127016309] (15,-1; 9,-1), time: 15.5127s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_97, [-inf,inf]=>[1e-05,1.5183944165343861] (15,-1; 9,-1), time: 15.4564s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_33, [-inf,inf]=>[-0.35013045061829356,0.07477717478170669] (9,-1; 9,-1), time: 30.0284s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_60, [-inf,inf]=>[1e-05,2.177063196561305] (15,-1; 9,-1), time: 15.4553s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_28, [-inf,inf]=>[1e-05,1.3241758637811516] (15,-1; 9,-1), time: 15.4387s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_63, [-inf,inf]=>[1e-05,3.759161112781811] (15,-1; 9,-1), time: 15.5190s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_12, [-inf,inf]=>[-0.15639590932863076,0.08598900936148691] (9,-1; 9,-1), time: 30.0214s, #vars: 1645, #constrs: 990, improved: True
Solving MIP for lay12_6, [-inf,inf]=>[-0.44407578935802017,0.00466255529500112] (2,-1; 9,-1), time: 29.4926s, #vars: 1645, #constrs: 990, improved: True
PGD done for relu layer 6
Run alpha-CROWN after refining layer 10 and relu idx 4
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 4 has unstable to stable neurons: [(50, -1), (99, -1), (8, -1), (25, -1), (87, -1), (18, -1), (96, -1), (75, -1), (10, -1), (0, -1), (74, -1), (58, -1), (55, -1), (12, 1), (44, -1), (48, -1), (5, 1), (52, -1), (17, -1), (9, -1), (60, -1), (29, -1), (86, -1), (76, 1), (93, -1), (24, -1), (2, -1), (98, 1), (84, -1), (13, 1), (73, -1), (69, -1), (66, -1), (20, -1), (19, 1), (15, -1), (85, -1), (7, -1), (95, -1), (43, -1), (22, 1), (79, 1), (82, -1), (89, -1), (1, 1), (70, 1), (83, -1), (40, 1), (68, 1), (46, 1), (14, 1), (49, -1), (71, 1), (36, -1), (90, -1), (47, 1), (80, 1), (26, 1), (31, 1), (63, 1), (45, -1), (32, -1), (78, -1), (88, -1), (56, -1), (64, -1), (53, -1), (38, -1), (6, 1), (23, 1), (30, 1), (67, 1), (97, 1), (54, 1), (61, 1), (33, 1), (59, -1), (81, -1), (65, 1), (41, 1), (72, 1), (91, 1), (62, 1)]
best_l after optimization: 18.36164093017578
beta sum per layer: []
alpha/beta optimization time: 16.104953289031982
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.71616018,  2.66022992,  2.37849712,  1.75037229,  2.20239115,
         -0.42219764,  3.29676771,  0.88310122,  3.89631987]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 109.84198760986328, ub improved 221.167724609375, time 82.3458
maximum relu layer improved by MIP so far 5
Linear(in_features=100, out_features=100, bias=True) 6 14 torch.Size([100])
sorted candidates ['lay14_65', 'lay14_79', 'lay14_70', 'lay14_82', 'lay14_14', 'lay14_72', 'lay14_64', 'lay14_3', 'lay14_36', 'lay14_2', 'lay14_97', 'lay14_24', 'lay14_47', 'lay14_71', 'lay14_73', 'lay14_92', 'lay14_46', 'lay14_41', 'lay14_16', 'lay14_11', 'lay14_38', 'lay14_67', 'lay14_75', 'lay14_91', 'lay14_98', 'lay14_80', 'lay14_1', 'lay14_99', 'lay14_69', 'lay14_81', 'lay14_8', 'lay14_96', 'lay14_12', 'lay14_33', 'lay14_44', 'lay14_90', 'lay14_78', 'lay14_19', 'lay14_28', 'lay14_22', 'lay14_18', 'lay14_86', 'lay14_37', 'lay14_88', 'lay14_83', 'lay14_50', 'lay14_29', 'lay14_27', 'lay14_59', 'lay14_84', 'lay14_39', 'lay14_31', 'lay14_68', 'lay14_58', 'lay14_9', 'lay14_56', 'lay14_20', 'lay14_45', 'lay14_62', 'lay14_25', 'lay14_76', 'lay14_21', 'lay14_4', 'lay14_43', 'lay14_40', 'lay14_87', 'lay14_52', 'lay14_93', 'lay14_54', 'lay14_32', 'lay14_89', 'lay14_26', 'lay14_15', 'lay14_66', 'lay14_35', 'lay14_51', 'lay14_95', 'lay14_57', 'lay14_5', 'lay14_55', 'lay14_77', 'lay14_94', 'lay14_34', 'lay14_63', 'lay14_60', 'lay14_49', 'lay14_0', 'lay14_7', 'lay14_23', 'lay14_61', 'lay14_30', 'lay14_13', 'lay14_10', 'lay14_42', 'lay14_17', 'lay14_74', 'lay14_48', 'lay14_6', 'lay14_53', 'lay14_85'] filter: 1.0
Solving MIP for lay14_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6736s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6890s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6902s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6913s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7124s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7257s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7533s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7708s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7880s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7918s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6072s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6507s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6378s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6124s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6967s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6510s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6629s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5891s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6104s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6235s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7914s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7468s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8064s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6130s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6709s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5487s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6894s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6893s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6488s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_92, [-inf,inf]=>[1e-05,0.36212681661286955] (15,-1; 9,-1), time: 15.6134s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_97, [-inf,inf]=>[1e-05,0.7720089616288903] (15,-1; 9,-1), time: 15.6779s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_41, [-inf,inf]=>[1e-05,2.0648558495364466] (15,-1; 9,-1), time: 15.6348s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7062s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_67, [-inf,inf]=>[1e-05,1.080598491623386] (15,-1; 9,-1), time: 15.6529s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6312s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_96, [-inf,inf]=>[1e-05,1.8763765638805945] (15,-1; 9,-1), time: 15.7743s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_33, [-inf,inf]=>[1e-05,1.6667054610789225] (15,-1; 9,-1), time: 15.5820s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_78, [-inf,inf]=>[1e-05,1.4194578446044825] (15,-1; 9,-1), time: 15.6635s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_90, [-inf,inf]=>[1e-05,0.4893239234749646] (15,-1; 9,-1), time: 15.6852s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_44, [-inf,inf]=>[1e-05,0.34808001238454167] (15,-1; 9,-1), time: 15.9225s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6681s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5805s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7360s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_18, [-inf,inf]=>[1e-05,0.6816943627253976] (15,-1; 9,-1), time: 15.6805s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6586s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_72, [-inf,inf]=>[-0.13750999433915634,0.280315818303164] (9,-1; 9,-1), time: 30.0219s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_73, [-inf,inf]=>[-0.4539215853139189,0.10193492011197942] (9,-1; 9,-1), time: 30.0350s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_64, [-inf,inf]=>[-0.4408662380553005,0.009772403257257797] (9,-1; 9,-1), time: 30.0522s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_36, [-inf,inf]=>[-0.08731094083410885,0.2641062697607739] (9,-1; 9,-1), time: 30.4181s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7062s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_75, [-inf,inf]=>[-0.17843596054928454,0.11858643968460189] (9,-1; 9,-1), time: 30.0119s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_29, [-inf,inf]=>[1e-05,0.7763180195315534] (15,-1; 9,-1), time: 15.5724s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7143s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6064s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_59, [-inf,inf]=>[1e-05,0.6358949474825656] (15,-1; 9,-1), time: 15.7133s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_84, [-inf,inf]=>[1e-05,0.5270789084489923] (15,-1; 9,-1), time: 15.6994s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_39, [-inf,inf]=>[1e-05,0.5912569149112562] (15,-1; 9,-1), time: 15.6107s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5901s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_31, [-inf,inf]=>[1e-05,0.9236410184851273] (15,-1; 9,-1), time: 15.7166s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_20, [-inf,inf]=>[1e-05,1.1479245285668402] (15,-1; 9,-1), time: 15.6671s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3681s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_62, [-inf,inf]=>[1e-05,2.403615473354703] (15,-1; 9,-1), time: 15.6201s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_76, [-inf,inf]=>[1e-05,1.6654783736459056] (15,-1; 9,-1), time: 15.6723s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_83, [-inf,inf]=>[-0.27961435159302483,0.03769423576980848] (9,-1; 9,-1), time: 30.0474s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_4, [-inf,inf]=>[1e-05,1.4108209927162052] (15,-1; 9,-1), time: 15.6494s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_21, [-inf,inf]=>[1e-05,0.608998969072871] (15,-1; 9,-1), time: 15.6796s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_40, [-inf,inf]=>[1e-05,1.8443784323718129] (15,-1; 9,-1), time: 15.6900s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_87, [-inf,inf]=>[1e-05,0.36398147521357094] (15,-1; 9,-1), time: 15.6044s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7616s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_32, [-inf,inf]=>[1e-05,1.2481645994129031] (15,-1; 9,-1), time: 15.6396s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6419s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_58, [-inf,inf]=>[-0.12769304737627465,0.19002702030540836] (9,-1; 9,-1), time: 30.0139s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.8325s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6995s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_66, [-inf,inf]=>[1e-05,0.5666833941410171] (15,-1; 9,-1), time: 15.5946s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6440s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_25, [-inf,inf]=>[-0.20726940515960887,0.049924081681303814] (9,-1; 9,-1), time: 30.0156s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_35, [-inf,inf]=>[1e-05,1.8922251404273656] (15,-1; 9,-1), time: 15.6924s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6903s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_89, [-inf,inf]=>[1e-05,0.5002198787113096] (15,-1; 9,-1), time: 16.9997s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_51, [-inf,inf]=>[1e-05,2.384310710585711] (15,-1; 9,-1), time: 15.6076s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_95, [-inf,inf]=>[1e-05,0.5936441372378979] (15,-1; 9,-1), time: 15.6027s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6747s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_5, [-inf,inf]=>[1e-05,4.10853562229318] (15,-1; 9,-1), time: 15.6489s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_55, [-inf,inf]=>[1e-05,1.4273985860737923] (15,-1; 9,-1), time: 15.6261s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_77, [-inf,inf]=>[1e-05,0.6098779393663898] (15,-1; 9,-1), time: 15.6315s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_54, [-inf,inf]=>[-0.07016088143184064,0.26573679048165016] (9,-1; 9,-1), time: 30.0161s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_63, [-inf,inf]=>[1e-05,2.230297838605386] (15,-1; 9,-1), time: 15.6448s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_0, [-inf,inf]=>[1e-05,1.5144676140966238] (15,-1; 9,-1), time: 15.6240s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_23, [-inf,inf]=>[1e-05,1.1033361219366595] (15,-1; 9,-1), time: 15.5677s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_30, [-inf,inf]=>[1e-05,1.2444385990904008] (15,-1; 9,-1), time: 15.6262s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_13, [-inf,inf]=>[1e-05,1.250205554882309] (15,-1; 9,-1), time: 15.6080s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_42, [-inf,inf]=>[1e-05,1.9669458152524273] (15,-1; 9,-1), time: 15.6154s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_10, [-inf,inf]=>[1e-05,2.404387013646051] (15,-1; 9,-1), time: 15.7885s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_74, [-inf,inf]=>[1e-05,0.8772762231943142] (15,-1; 9,-1), time: 15.6715s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_48, [-inf,inf]=>[1e-05,1.2149139819009396] (15,-1; 9,-1), time: 15.5986s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_53, [-inf,inf]=>[1e-05,0.8020340233210486] (15,-1; 9,-1), time: 15.5413s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_94, [-inf,inf]=>[-0.09692075601713193,0.18099807452518826] (9,-1; 9,-1), time: 30.0383s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_6, [-inf,inf]=>[-0.14593701105161477,0.13420283535349858] (9,-1; 9,-1), time: 30.0149s, #vars: 1785, #constrs: 1150, improved: True
Solving MIP for lay14_85, [-inf,inf]=>[-0.10862766616031896,0.19626624354108207] (9,-1; 9,-1), time: 30.0140s, #vars: 1785, #constrs: 1150, improved: True
PGD done for relu layer 7
Run alpha-CROWN after refining layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 5 has unstable to stable neurons: [(18, -1), (86, -1), (94, -1), (7, -1), (3, -1), (72, -1), (35, 1), (29, -1), (81, -1), (17, -1), (4, -1), (13, -1), (30, -1), (74, -1), (90, -1), (15, -1), (27, -1), (99, -1), (55, -1), (89, -1), (40, -1), (47, -1), (9, -1), (69, 1), (2, -1), (26, -1), (91, -1), (49, -1), (25, 1), (50, 1), (0, -1), (98, 1), (10, -1), (53, -1), (93, -1), (43, -1), (77, -1), (24, 1), (8, -1), (95, 1), (78, -1), (34, 1), (51, -1), (23, 1), (57, -1), (20, 1), (31, 1), (21, -1), (61, -1), (32, -1), (65, -1), (39, -1), (42, -1), (82, -1), (44, -1), (80, 1), (58, 1), (84, -1), (5, -1), (87, 1), (83, 1), (19, -1), (11, 1), (38, -1), (45, -1), (79, -1), (41, 1), (37, 1), (64, 1), (36, -1), (97, 1), (14, -1), (60, 1), (22, -1), (76, -1), (28, 1), (63, 1), (67, -1), (16, -1), (56, -1)]
best_l after optimization: 20.47724151611328
beta sum per layer: []
alpha/beta optimization time: 15.785389184951782
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.97554421,  2.82272100,  2.54927397,  1.97654593,  2.48982143,
         -0.16716075,  3.46446347,  1.18943572,  4.17659569]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 300.4808349609375, ub improved 500.1160583496094, time 81.9738
maximum relu layer improved by MIP so far 6
Linear(in_features=100, out_features=100, bias=True) 7 16 torch.Size([100])
sorted candidates ['lay16_45', 'lay16_19', 'lay16_87', 'lay16_53', 'lay16_49', 'lay16_51', 'lay16_79', 'lay16_40', 'lay16_91', 'lay16_62', 'lay16_29', 'lay16_41', 'lay16_60', 'lay16_2', 'lay16_88', 'lay16_61', 'lay16_55', 'lay16_67', 'lay16_43', 'lay16_25', 'lay16_44', 'lay16_32', 'lay16_82', 'lay16_37', 'lay16_98', 'lay16_99', 'lay16_68', 'lay16_92', 'lay16_4', 'lay16_36', 'lay16_17', 'lay16_11', 'lay16_58', 'lay16_81', 'lay16_9', 'lay16_78', 'lay16_47', 'lay16_84', 'lay16_64', 'lay16_89', 'lay16_1', 'lay16_54', 'lay16_69', 'lay16_72', 'lay16_3', 'lay16_21', 'lay16_97', 'lay16_74', 'lay16_48', 'lay16_90', 'lay16_13', 'lay16_66', 'lay16_71', 'lay16_52', 'lay16_86', 'lay16_31', 'lay16_85', 'lay16_10', 'lay16_63', 'lay16_35', 'lay16_5', 'lay16_24', 'lay16_30', 'lay16_23', 'lay16_15', 'lay16_7', 'lay16_77', 'lay16_95', 'lay16_8', 'lay16_18', 'lay16_28', 'lay16_22', 'lay16_16', 'lay16_83', 'lay16_42', 'lay16_76', 'lay16_0', 'lay16_70', 'lay16_26', 'lay16_6', 'lay16_75', 'lay16_93', 'lay16_14', 'lay16_57', 'lay16_38', 'lay16_34', 'lay16_80', 'lay16_96', 'lay16_65', 'lay16_39', 'lay16_59', 'lay16_12', 'lay16_73', 'lay16_27', 'lay16_50', 'lay16_20', 'lay16_56', 'lay16_94', 'lay16_33', 'lay16_46'] filter: 1.0
Solving MIP for lay16_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7182s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7288s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7436s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7733s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7911s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8192s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8380s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8706s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8954s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8956s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8961s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9125s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9220s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7130s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8021s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7985s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7917s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7976s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7956s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7494s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7091s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6863s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9196s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8621s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6811s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7518s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7058s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.2177s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8169s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6853s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7097s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6573s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_61, [-inf,inf]=>[1e-05,0.46997334955507486] (15,-1; 9,-1), time: 15.6650s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8130s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_25, [-inf,inf]=>[1e-05,1.3908217581698032] (15,-1; 9,-1), time: 15.7057s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_37, [-inf,inf]=>[1e-05,0.6362110874871483] (15,-1; 9,-1), time: 15.7432s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_32, [-inf,inf]=>[1e-05,0.6091306229970936] (15,-1; 9,-1), time: 16.0407s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8171s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_78, [-inf,inf]=>[1e-05,0.8422347505152309] (15,-1; 9,-1), time: 15.7213s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_84, [-inf,inf]=>[1e-05,2.197948013978157] (15,-1; 9,-1), time: 15.7143s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8370s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6739s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7243s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_69, [-inf,inf]=>[1e-05,0.8961804808441803] (15,-1; 9,-1), time: 15.8627s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8194s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_74, [-inf,inf]=>[1e-05,1.6465356879940167] (15,-1; 9,-1), time: 15.6816s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6435s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_40, [-inf,inf]=>[-0.17259718319035708,0.5869782608029246] (9,-1; 9,-1), time: 30.0179s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_49, [-inf,inf]=>[-0.595943474810048,0.05450508858867844] (9,-1; 9,-1), time: 30.0173s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_43, [-inf,inf]=>[-0.8287939542411454,0.13890980960190688] (9,-1; 9,-1), time: 30.0235s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_82, [-inf,inf]=>[-0.17195141489092286,0.02460562128334569] (9,-1; 9,-1), time: 30.0429s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_99, [-inf,inf]=>[-0.4253718244210061,0.008092557862132874] (9,-1; 9,-1), time: 30.0162s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_36, [-inf,inf]=>[-0.6354630248989457,0.011302636371166066] (9,-1; 9,-1), time: 30.0141s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7593s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_11, [-inf,inf]=>[-0.1720262548293526,0.07443969791350849] (9,-1; 9,-1), time: 30.0203s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7211s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8133s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7445s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_64, [-inf,inf]=>[-0.26761408153177013,0.16288936045274388] (9,-1; 9,-1), time: 30.0167s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_71, [-inf,inf]=>[1e-05,1.7018184921979376] (15,-1; 9,-1), time: 15.8082s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7100s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7242s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6020s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7497s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_31, [-inf,inf]=>[1e-05,1.1515282242769562] (15,-1; 9,-1), time: 15.7329s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_10, [-inf,inf]=>[1e-05,0.8010124275990012] (15,-1; 9,-1), time: 15.6562s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7099s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_63, [-inf,inf]=>[1e-05,0.25420406441451177] (15,-1; 9,-1), time: 15.6267s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7484s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7491s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6942s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_5, [-inf,inf]=>[1e-05,1.817688157635251] (15,-1; 9,-1), time: 15.6822s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7129s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_30, [-inf,inf]=>[1e-05,0.5002947153260117] (15,-1; 9,-1), time: 15.8316s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_23, [-inf,inf]=>[1e-05,1.2410282735531362] (15,-1; 9,-1), time: 15.7016s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_15, [-inf,inf]=>[1e-05,1.4817618187050565] (15,-1; 9,-1), time: 15.7829s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7146s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_90, [-inf,inf]=>[-0.49682840207133616,0.03191272461015805] (9,-1; 9,-1), time: 30.0209s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_66, [-inf,inf]=>[-0.19064617077650198,0.4079494584345524] (9,-1; 9,-1), time: 30.0110s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_77, [-inf,inf]=>[1e-05,1.7516550910361048] (15,-1; 9,-1), time: 15.8789s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_83, [-inf,inf]=>[1e-05,0.6629582988212737] (15,-1; 9,-1), time: 15.7114s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_76, [-inf,inf]=>[1e-05,2.588426272409431] (15,-1; 9,-1), time: 15.8044s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_70, [-inf,inf]=>[1e-05,0.44944693398085805] (15,-1; 9,-1), time: 15.6890s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_26, [-inf,inf]=>[1e-05,0.6696120156634491] (15,-1; 9,-1), time: 15.7727s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7123s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_14, [-inf,inf]=>[1e-05,2.8479149189373407] (15,-1; 9,-1), time: 15.6926s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_80, [-inf,inf]=>[1e-05,2.6903890344621915] (15,-1; 2,-1), time: 15.1849s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_34, [-inf,inf]=>[1e-05,1.8358057493324853] (15,-1; 9,-1), time: 15.7358s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_65, [-inf,inf]=>[1e-05,1.0967654076001192] (15,-1; 9,-1), time: 15.7528s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_95, [-inf,inf]=>[-0.18957991326560844,0.19613335625760464] (9,-1; 9,-1), time: 30.0186s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_12, [-inf,inf]=>[1e-05,0.9126760259597999] (15,-1; 9,-1), time: 15.7280s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_27, [-inf,inf]=>[1e-05,1.994703495986866] (15,-1; 9,-1), time: 15.6342s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_50, [-inf,inf]=>[1e-05,0.9732709791453844] (15,-1; 9,-1), time: 15.8202s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_20, [-inf,inf]=>[1e-05,1.106758187680226] (15,-1; 9,-1), time: 15.6925s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_56, [-inf,inf]=>[1e-05,0.4910862132356409] (15,-1; 9,-1), time: 15.5992s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_33, [-inf,inf]=>[1e-05,1.4926214788943502] (15,-1; 9,-1), time: 15.7233s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_57, [-inf,inf]=>[-0.35710712402203665,0.4000340774633121] (9,-1; 9,-1), time: 30.0109s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_39, [-inf,inf]=>[-0.35747688074316,0.3755579717079855] (9,-1; 9,-1), time: 30.0104s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_73, [-inf,inf]=>[-0.18059630476462038,0.36801110438081575] (9,-1; 9,-1), time: 30.0172s, #vars: 1909, #constrs: 1286, improved: True
Solving MIP for lay16_94, [-inf,inf]=>[-0.23980888364100716,0.07015353752806232] (9,-1; 9,-1), time: 30.0231s, #vars: 1909, #constrs: 1286, improved: True
Run alpha-CROWN after refining layer 14 and relu idx 6
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 6 has unstable to stable neurons: [(65, -1), (79, -1), (70, -1), (82, -1), (14, -1), (3, -1), (2, -1), (97, 1), (24, -1), (47, -1), (71, -1), (92, 1), (46, -1), (41, 1), (16, -1), (11, -1), (38, -1), (67, 1), (91, -1), (98, -1), (80, -1), (1, -1), (99, -1), (69, -1), (81, -1), (8, -1), (96, 1), (12, -1), (33, 1), (44, 1), (90, 1), (78, 1), (19, -1), (28, -1), (22, -1), (18, 1), (86, -1), (37, -1), (88, -1), (50, -1), (29, 1), (27, -1), (59, 1), (84, 1), (39, 1), (31, 1), (68, -1), (9, -1), (56, -1), (20, 1), (45, -1), (62, 1), (76, 1), (21, 1), (4, 1), (43, -1), (40, 1), (87, 1), (52, -1), (93, -1), (32, 1), (89, 1), (26, -1), (15, -1), (66, 1), (35, 1), (51, 1), (95, 1), (57, -1), (5, 1), (55, 1), (77, 1), (34, -1), (63, 1), (60, -1), (49, -1), (0, 1), (7, -1), (23, 1), (61, -1), (30, 1), (13, 1), (10, 1), (42, 1), (17, -1), (74, 1), (48, 1), (53, 1)]
best_l after optimization: 20.89854621887207
beta sum per layer: []
alpha/beta optimization time: 14.530303001403809
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.01904583,  2.85353994,  2.58280563,  2.03249526,  2.53132677,
         -0.14796686,  3.51196289,  1.26331663,  4.25201988]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 611.962158203125, ub improved 1110.7020263671875, time 80.1576
maximum relu layer improved by MIP so far 7
Linear(in_features=100, out_features=10, bias=True) 8 18 torch.Size([9, 1])
MIP finished with 436.82036685943604s
Run final alpha-CROWN after MIP solving on layer 18 and relu idx 8
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
best_l after optimization: 21.35013771057129
beta sum per layer: []
alpha/beta optimization time: 9.741333246231079
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 2.08233047,  2.86352706,  2.61512756,  2.08425689,  2.61010528,
         -0.09754246,  3.53308344,  1.35682487,  4.30242348]], device='cuda:0') None
Split layers:
  BoundLinear(name=/input.7, inputs=[/30, /5, /6]): [(BoundRelu(name=/32, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.11, inputs=[/32, /7, /8]): [(BoundRelu(name=/34, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.19, inputs=[/36, /11, /12]): [(BoundRelu(name=/38, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.27, inputs=[/40, /15, /16]): [(BoundRelu(name=/42, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.23, inputs=[/38, /13, /14]): [(BoundRelu(name=/40, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.3, inputs=[/28, /3, /4]): [(BoundRelu(name=/30, inputs=[/input.3]), 0)]
  BoundLinear(name=/input, inputs=[/26, /1, /2]): [(BoundRelu(name=/28, inputs=[/input]), 0)]
  BoundLinear(name=/input.15, inputs=[/34, /9, /10]): [(BoundRelu(name=/36, inputs=[/input.15]), 0)]
refined global lb: tensor([[ 2.08233047],
        [ 2.86352706],
        [ 2.61512756],
        [ 2.08425689],
        [ 2.61010528],
        [-0.09754246],
        [ 3.53308344],
        [ 1.35682487],
        [ 4.30242348]], device='cuda:0') min: tensor(-0.09754246, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 431.6826026439667
##### Instance 0 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.0823304653167725.

Properties batch 1, size 1
Remaining timeout: 431.52746963500977
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.8635270595550537.

Properties batch 2, size 1
Remaining timeout: 431.4606502056122
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.6151275634765625.

Properties batch 3, size 1
Remaining timeout: 431.3943066596985
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.084256887435913.

Properties batch 4, size 1
Remaining timeout: 431.3229262828827
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.610105276107788.

Properties batch 5, size 1
Remaining timeout: 431.2556645870209
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.09754246]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundParams(name=/13, inputs=[])
  (/14): BoundParams(name=/14, inputs=[])
  (/15): BoundParams(name=/15, inputs=[])
  (/16): BoundParams(name=/16, inputs=[])
  (/17): BoundParams(name=/17, inputs=[])
  (/18): BoundParams(name=/18, inputs=[])
  (/19): BoundShape(name=/19, inputs=[/0])
  (/20): BoundConstant(name=/20, inputs=[])
  (/21): BoundGather(name=/21, inputs=[/19, /20])
  (/22): BoundConstant(name=/22, inputs=[])
  (/23): BoundUnsqueeze(name=/23, inputs=[/21])
  (/24): BoundUnsqueeze(name=/24, inputs=[/22])
  (/25): BoundConcat(name=/25, inputs=[/23, /24])
  (/26): BoundReshape(name=/26, inputs=[/0, /25])
  (/input): BoundLinear(name=/input, inputs=[/26, /1, /2])
  (/28): BoundRelu(name=/28, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/28, /3, /4])
  (/30): BoundRelu(name=/30, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/30, /5, /6])
  (/32): BoundRelu(name=/32, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/32, /7, /8])
  (/34): BoundRelu(name=/34, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/34, /9, /10])
  (/36): BoundRelu(name=/36, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/36, /11, /12])
  (/38): BoundRelu(name=/38, inputs=[/input.19])
  (/input.23): BoundLinear(name=/input.23, inputs=[/38, /13, /14])
  (/40): BoundRelu(name=/40, inputs=[/input.23])
  (/input.27): BoundLinear(name=/input.27, inputs=[/40, /15, /16])
  (/42): BoundRelu(name=/42, inputs=[/input.27])
  (/43): BoundLinear(name=/43, inputs=[/42, /17, /18])
)
Model prediction is: tensor([-0.21560693,  0.22183228,  5.10792494,  0.28054345,  0.00971133,
        -1.09514022,  2.48394561, -1.06155658, -0.56578517, -3.77237463],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.09754246]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input.7,/input.11,/input.19,/input.27,/input.23,/input.3,/input,/input.15,/43
Split layers:
  BoundLinear(name=/input.19, inputs=[/36, /11, /12]): [(BoundRelu(name=/38, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.27, inputs=[/40, /15, /16]): [(BoundRelu(name=/42, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.15, inputs=[/34, /9, /10]): [(BoundRelu(name=/36, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.7, inputs=[/30, /5, /6]): [(BoundRelu(name=/32, inputs=[/input.7]), 0)]
  BoundLinear(name=/input, inputs=[/26, /1, /2]): [(BoundRelu(name=/28, inputs=[/input]), 0)]
  BoundLinear(name=/input.11, inputs=[/32, /7, /8]): [(BoundRelu(name=/34, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.23, inputs=[/38, /13, /14]): [(BoundRelu(name=/40, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.3, inputs=[/28, /3, /4]): [(BoundRelu(name=/30, inputs=[/input.3]), 0)]
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
Node /28 input 0: size torch.Size([100]) unstable 31
Node /30 input 0: size torch.Size([100]) unstable 30
Node /32 input 0: size torch.Size([100]) unstable 24
Node /34 input 0: size torch.Size([100]) unstable 28
Node /36 input 0: size torch.Size([100]) unstable 17
Node /38 input 0: size torch.Size([100]) unstable 20
Node /40 input 0: size torch.Size([100]) unstable 12
Node /42 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 177
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.15, 51] 
split level 1: [/input.7, 60] 
split level 2: [/input.15, 11] 
split level 3: [/input.27, 40] 
split level 4: [/input.27, 49] 
split level 5: [/input.27, 43] 
pruning_in_iteration open status: True
ratio of positive domain = 59 / 64 = 0.921875
pruning-in-iteration extra time: 0.01998114585876465
Time: prepare 0.0316    beta_bound 0.8835    bound 0.8836    transfer 0.0006    finalize 0.0104    func 0.9263    
Accumulated time: func 0.9263    prepare 0.0334    bound 0.8836    beta_bound 0.8835    transfer 0.0006    finalize 0.0104    
batch bounding time:  0.92647385597229
Current worst splitting domains lb-rhs (depth):
-0.09754 (6), -0.06948 (6), -0.04890 (6), -0.02155 (6), -0.00188 (6), 
length of domains: 5
Time: pickout 0.0018    decision 0.4036    set_bounds 0.0048    solve 0.9265    add 0.0019    
Accumulated time: pickout 0.0018    decision 0.4036    set_bounds 0.0048    solve 0.9265    add 0.0019    
Current (lb-rhs): -0.09754246473312378
5 domains visited
Cumulative time: 1.3924472332000732

BaB round 2
batch: 5
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.7, 21] [/input.7, 21] [/input.7, 21] [/input.7, 21] [/input.7, 21] 
split level 1: [/input.15, 77] [/input.11, 33] [/input.15, 77] [/input.15, 77] [/input.15, 77] 
split level 2: [/input.3, 96] [/input.3, 49] [/input.3, 96] [/input.3, 49] [/input.3, 96] 
split level 3: [/input.19, 54] [/input.3, 96] [/input.19, 54] [/input.3, 96] [/input.19, 54] 
pruning_in_iteration open status: True
ratio of positive domain = 79 / 80 = 0.9875
pruning-in-iteration extra time: 0.017943620681762695
Time: prepare 0.0191    beta_bound 0.5966    bound 0.5967    transfer 0.0008    finalize 0.0146    func 0.6313    
Accumulated time: func 1.5576    prepare 0.0533    bound 1.4803    beta_bound 1.4802    transfer 0.0015    finalize 0.0249    
batch bounding time:  0.6314854621887207
Current worst splitting domains lb-rhs (depth):
-0.01642 (10), 
length of domains: 1
Time: pickout 0.0018    decision 0.0525    set_bounds 0.0042    solve 0.6315    add 0.0015    
Accumulated time: pickout 0.0036    decision 0.4561    set_bounds 0.0090    solve 1.5580    add 0.0034    
Current (lb-rhs): -0.016418933868408203
6 domains visited
Cumulative time: 2.0856435298919678

BaB round 3
batch: 1
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input, 94] 
split level 1: [/input.11, 33] 
split level 2: [/input, 88] 
split level 3: [/input.3, 49] 
split level 4: [/input, 82] 
split level 5: [/input, 81] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 9.632110595703125e-05
Time: prepare 0.0182    beta_bound 0.0159    bound 0.0160    transfer 0.0004    finalize 0.0109    func 0.0456    
Accumulated time: func 1.6032    prepare 0.0728    bound 1.4963    beta_bound 1.4961    transfer 0.0019    finalize 0.0358    
batch bounding time:  0.045677900314331055
length of domains: 0
Time: pickout 0.0032    decision 0.0749    set_bounds 0.0036    solve 0.0457    add 0.0002    
Accumulated time: pickout 0.0068    decision 0.5310    set_bounds 0.0126    solve 1.6037    add 0.0036    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
6 domains visited
Cumulative time: 2.214725971221924


Properties batch 6, size 1
Remaining timeout: 428.8738615512848
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.533083438873291.

Properties batch 7, size 1
Remaining timeout: 428.77456855773926
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.3568248748779297.

Properties batch 8, size 1
Remaining timeout: 428.70941042900085
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.302423477172852.
Result: safe in 471.3559 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):471.3512256376002, max time: 471.35593914985657
mean time for verified SAFE instances(total 1): 471.35593914985657, max time: 471.35593914985657
safe (total 1), index: [0]
