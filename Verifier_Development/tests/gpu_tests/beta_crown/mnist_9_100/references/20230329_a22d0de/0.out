Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_9_100
  path: mnist_9_100_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 53
  end: 54
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.026
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 13:50:57 2023 on zeratul
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=100, bias=True)
  (2): ReLU()
  (3): Linear(in_features=100, out_features=100, bias=True)
  (4): ReLU()
  (5): Linear(in_features=100, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=100, bias=True)
  (8): ReLU()
  (9): Linear(in_features=100, out_features=100, bias=True)
  (10): ReLU()
  (11): Linear(in_features=100, out_features=100, bias=True)
  (12): ReLU()
  (13): Linear(in_features=100, out_features=100, bias=True)
  (14): ReLU()
  (15): Linear(in_features=100, out_features=100, bias=True)
  (16): ReLU()
  (17): Linear(in_features=100, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226457)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_9_100]_start=53_end=54_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 53 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundParams(name=/13, inputs=[])
  (/14): BoundParams(name=/14, inputs=[])
  (/15): BoundParams(name=/15, inputs=[])
  (/16): BoundParams(name=/16, inputs=[])
  (/17): BoundParams(name=/17, inputs=[])
  (/18): BoundParams(name=/18, inputs=[])
  (/19): BoundShape(name=/19, inputs=[/0])
  (/20): BoundConstant(name=/20, inputs=[])
  (/21): BoundGather(name=/21, inputs=[/19, /20])
  (/22): BoundConstant(name=/22, inputs=[])
  (/23): BoundUnsqueeze(name=/23, inputs=[/21])
  (/24): BoundUnsqueeze(name=/24, inputs=[/22])
  (/25): BoundConcat(name=/25, inputs=[/23, /24])
  (/26): BoundReshape(name=/26, inputs=[/0, /25])
  (/input): BoundLinear(name=/input, inputs=[/26, /1, /2])
  (/28): BoundRelu(name=/28, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/28, /3, /4])
  (/30): BoundRelu(name=/30, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/30, /5, /6])
  (/32): BoundRelu(name=/32, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/32, /7, /8])
  (/34): BoundRelu(name=/34, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/34, /9, /10])
  (/36): BoundRelu(name=/36, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/36, /11, /12])
  (/38): BoundRelu(name=/38, inputs=[/input.19])
  (/input.23): BoundLinear(name=/input.23, inputs=[/38, /13, /14])
  (/40): BoundRelu(name=/40, inputs=[/input.23])
  (/input.27): BoundLinear(name=/input.27, inputs=[/40, /15, /16])
  (/42): BoundRelu(name=/42, inputs=[/input.27])
  (/43): BoundLinear(name=/43, inputs=[/42, /17, /18])
)
Model prediction is: tensor([[-0.80867857, -2.37042356, -2.23100662,  1.94248557, -3.40118361,
          6.53264761,  0.59598196, -3.86019969,  2.94964790,  1.43447471]],
       device='cuda:0')
layer /28 using sparse-features alpha with shape [40]; unstable size 40; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [61]; unstable size 61; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [90]; unstable size 90; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-198.43608093, -282.37454224, -298.01733398, -275.85653687,
         -333.24002075, -268.87957764, -360.65878296, -271.77770996,
         -317.30404663]], device='cuda:0') None
best_l after optimization: -1345.822021484375
alpha/beta optimization time: 16.697129011154175
initial alpha-CROWN bounds: tensor([[ -88.89572906, -151.17684937, -161.79235840, -149.01934814,
         -171.73025513, -131.35900879, -181.01083374, -146.41548157,
         -164.42211914]], device='cuda:0')
Worst class: (+ rhs) -181.01083374023438
Split layers:
  BoundLinear(name=/input.15, inputs=[/34, /9, /10]): [(BoundRelu(name=/36, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.27, inputs=[/40, /15, /16]): [(BoundRelu(name=/42, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.3, inputs=[/28, /3, /4]): [(BoundRelu(name=/30, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.11, inputs=[/32, /7, /8]): [(BoundRelu(name=/34, inputs=[/input.11]), 0)]
  BoundLinear(name=/input, inputs=[/26, /1, /2]): [(BoundRelu(name=/28, inputs=[/input]), 0)]
  BoundLinear(name=/input.19, inputs=[/36, /11, /12]): [(BoundRelu(name=/38, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.23, inputs=[/38, /13, /14]): [(BoundRelu(name=/40, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.7, inputs=[/30, /5, /6]): [(BoundRelu(name=/32, inputs=[/input.7]), 0)]
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0065000057220458984, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.80867857, -2.37042356, -2.23100662,  1.94248557, -3.40118361,
          6.53264761,  0.59598196, -3.86019969,  2.94964790,  1.43447471]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.79266435, -1.99811614, -1.72904468,  1.54812884, -2.49473000,
           4.95486546,  0.12718812, -2.94377995,  2.60641336,  1.52581382],
         [-0.79266435, -1.99811614, -1.72904468,  1.54812884, -2.49473000,
           4.95486546,  0.12718812, -2.94377995,  2.60641336,  1.52581382]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[5.74752998, 6.95298147, 6.68391037, 3.40673661, 7.44959545,
          4.82767725, 7.89864540, 2.34845209, 3.42905164]]], device='cuda:0')
number of violation:  0
Attack finished in 1.0563 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /28 using sparse-features alpha with shape [40]; unstable size 40; total size 100 (torch.Size([1, 100]))
layer /28 start_node /input.3 using sparse-spec alpha with unstable size 61 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.7 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /28 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using sparse-features alpha with shape [61]; unstable size 61; total size 100 (torch.Size([1, 100]))
layer /30 start_node /input.7 using sparse-spec alpha with unstable size 90 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /30 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /32 using sparse-features alpha with shape [90]; unstable size 90; total size 100 (torch.Size([1, 100]))
layer /32 start_node /input.11 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /32 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /34 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /34 start_node /input.15 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /34 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /36 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /36 start_node /input.19 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /36 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /38 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /38 start_node /input.23 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /38 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /40 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /40 start_node /input.27 using full alpha with unstable size 100 total_size 100 output_shape torch.Size([100])
layer /40 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
layer /42 using full alpha with shape torch.Size([100]); unstable size 100; total size 100 (torch.Size([1, 100]))
layer /42 start_node /43 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2024-02-29
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=100, bias=True) 0 2 torch.Size([100])
Linear(in_features=100, out_features=100, bias=True) 1 4 torch.Size([100])
sorted candidates ['lay4_85', 'lay4_88', 'lay4_16', 'lay4_96', 'lay4_49', 'lay4_7', 'lay4_78', 'lay4_90', 'lay4_86', 'lay4_23', 'lay4_75', 'lay4_97', 'lay4_0', 'lay4_53', 'lay4_82', 'lay4_28', 'lay4_18', 'lay4_1', 'lay4_40', 'lay4_10', 'lay4_95', 'lay4_99', 'lay4_3', 'lay4_43', 'lay4_20', 'lay4_21', 'lay4_67', 'lay4_42', 'lay4_11', 'lay4_70', 'lay4_60', 'lay4_24', 'lay4_38', 'lay4_39', 'lay4_52', 'lay4_79', 'lay4_83', 'lay4_5', 'lay4_98', 'lay4_59', 'lay4_37', 'lay4_50', 'lay4_54', 'lay4_33', 'lay4_65', 'lay4_41', 'lay4_6', 'lay4_8', 'lay4_77', 'lay4_30', 'lay4_63', 'lay4_48', 'lay4_62', 'lay4_87', 'lay4_72', 'lay4_45', 'lay4_74', 'lay4_51', 'lay4_26', 'lay4_47', 'lay4_9'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/Verifier_Development/complete_verifier/data_utils.py:257: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9250s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-0.7854210810680282,0.8693745034324765] (2,-1; 2,-1), time: 1.3383s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_0, [-inf,inf]=>[-1.5927265530012666,0.19583197089131835] (2,-1; 2,-1), time: 1.9697s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3055s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[-0.9682968994309594,0.4073287327143679] (2,-1; 2,-1), time: 2.9927s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.1556s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-1.2923096623673294,0.1059747460986927] (2,-1; 2,-1), time: 3.3313s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-1.3131882327034672,0.03041298420898917] (2,-1; 2,-1), time: 3.3912s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_90, [-inf,inf]=>[-2.050829303695331,0.08750187177782616] (2,-1; 2,-1), time: 3.4264s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_7, [-inf,inf]=>[-0.1738873163327626,0.9930584992904046] (2,-1; 2,-1), time: 3.4901s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4249s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2924s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-0.7329940402691948,0.2091617643172407] (2,-1; 2,-1), time: 3.7168s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5434s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3079s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2863s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-0.23422548384535752,0.5629176420064437] (2,-1; 2,-1), time: 4.0942s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2984s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3193s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-0.2938748543722067,0.942194126183047] (2,-1; 2,-1), time: 4.4058s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_88, [-inf,inf]=>[-0.7208191310009486,0.4037026683969253] (2,-1; 2,-1), time: 4.4891s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5947s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_97, [-inf,inf]=>[-0.7984366173188332,0.2756901113823842] (2,-1; 2,-1), time: 4.7086s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3057s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3448s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7720s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4410s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_85, [-inf,inf]=>[-0.42077111756083163,0.8945528761687164] (2,-1; 2,-1), time: 5.3835s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-0.5570132254467631,0.22864605242264527] (2,-1; 2,-1), time: 6.2283s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.4502310189330198,0.3562139799962669] (2,-1; 2,-1), time: 5.0492s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_83, [-inf,inf]=>[-0.4990660312769507,0.8405199928906648] (2,-1; 2,-1), time: 2.4964s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-0.995587676893845,0.08041355443569242] (2,-1; 2,-1), time: 3.4840s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.5340393026979986,0.3146845389770775] (2,-1; 2,-1), time: 6.4758s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-0.7984023470470786,0.021812673371826446] (2,-1; 2,-1), time: 3.9832s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-0.8930497273153484,0.3961230927711308] (2,-1; 2,-1), time: 2.3685s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_10, [-inf,inf]=>[-0.9339042407904619,0.15819422268313968] (2,-1; 2,-1), time: 5.2930s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-0.06504506027675626,1.1300083882849625] (2,-1; 2,-1), time: 2.6162s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2920s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_95, [-inf,inf]=>[-0.25926103556239066,0.6297566981265277] (2,-1; 2,-1), time: 4.8987s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_21, [-inf,inf]=>[-0.6696960585105517,0.561383071579481] (2,-1; 2,-1), time: 4.6303s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2785s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2911s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2721s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_5, [-inf,inf]=>[-0.6494649221470483,0.6635794569724527] (2,-1; 2,-1), time: 4.0794s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_39, [-inf,inf]=>[-0.9605406684339287,0.4090980479602205] (2,-1; 2,-1), time: 4.5303s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.7224930309573716,0.2328118378707528] (2,-1; 2,-1), time: 4.7416s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7233s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2445s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_77, [-inf,inf]=>[1e-05,1.7830244869666707] (15,-1; 2,-1), time: 1.5303s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_50, [-inf,inf]=>[-0.02521653512495965,0.9556630249334903] (2,-1; 2,-1), time: 4.2347s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[1e-05,1.2185344224722323] (15,-1; 2,-1), time: 2.8053s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[-0.4307005086655588,0.45629862556569206] (2,-1; 2,-1), time: 2.5056s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-1.0129485539011316,0.32738928411687696] (2,-1; 2,-1), time: 5.0465s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-0.8543225535744903,0.3201029448251444] (2,-1; 2,-1), time: 4.1958s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_30, [-inf,inf]=>[1e-05,1.1437261498729525] (15,-1; 2,-1), time: 3.5543s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_65, [-inf,inf]=>[-0.590912248005065,0.3135817866227708] (2,-1; 2,-1), time: 5.2214s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.5636075813242428,0.22443124842227843] (2,-1; 2,-1), time: 5.4576s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_62, [-inf,inf]=>[1e-05,1.0699195288440912] (15,-1; 2,-1), time: 5.0935s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[-0.2693693969555996,0.5321591531935775] (2,-1; 2,-1), time: 4.7206s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[-0.27878635840089844,0.5855907250071006] (2,-1; 2,-1), time: 4.5406s, #vars: 1065, #constrs: 320, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[1e-05,0.7630712403440939] (15,-1; 2,-1), time: 4.8070s, #vars: 1065, #constrs: 320, improved: True
PGD done for relu layer 2
MIP improved 61 nodes out of 61 unstable nodes, lb improved 15.385199546813965, ub improved 16.198766708374023, time 15.9902
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=100, out_features=100, bias=True) 2 6 torch.Size([100])
sorted candidates ['lay6_85', 'lay6_30', 'lay6_60', 'lay6_13', 'lay6_91', 'lay6_56', 'lay6_12', 'lay6_1', 'lay6_39', 'lay6_23', 'lay6_61', 'lay6_62', 'lay6_38', 'lay6_90', 'lay6_74', 'lay6_34', 'lay6_64', 'lay6_36', 'lay6_4', 'lay6_42', 'lay6_14', 'lay6_78', 'lay6_51', 'lay6_8', 'lay6_5', 'lay6_87', 'lay6_97', 'lay6_19', 'lay6_50', 'lay6_82', 'lay6_26', 'lay6_9', 'lay6_95', 'lay6_68', 'lay6_33', 'lay6_27', 'lay6_32', 'lay6_6', 'lay6_99', 'lay6_96', 'lay6_3', 'lay6_48', 'lay6_21', 'lay6_46', 'lay6_75', 'lay6_71', 'lay6_28', 'lay6_40', 'lay6_88', 'lay6_25', 'lay6_72', 'lay6_35', 'lay6_22', 'lay6_0', 'lay6_83', 'lay6_93', 'lay6_20', 'lay6_77', 'lay6_15', 'lay6_43', 'lay6_66', 'lay6_80', 'lay6_67', 'lay6_24', 'lay6_45', 'lay6_81', 'lay6_86', 'lay6_29', 'lay6_10', 'lay6_79', 'lay6_55', 'lay6_11', 'lay6_98', 'lay6_63', 'lay6_59', 'lay6_7', 'lay6_54', 'lay6_73', 'lay6_69', 'lay6_44', 'lay6_52', 'lay6_53', 'lay6_76', 'lay6_94', 'lay6_41', 'lay6_18', 'lay6_58', 'lay6_84'] filter: 1.0
Solving MIP for lay6_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3631s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3734s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3681s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3496s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8586s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2256s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4026s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3800s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.6372s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.9423s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.8265s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.8511s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.3352s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.1272s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.2224s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-0.7131979332292812,0.3937032469254796] (2,-1; 2,-1), time: 12.7708s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.8579s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8796s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-0.5812431630071704,0.4542174287199154] (2,-1; 2,-1), time: 17.1605s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5299s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-0.7904764208574322,0.154850858751167] (9,-1; 2,-1), time: 20.6732s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3108s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.36552406666787385,0.37220998746930467] (2,-1; 9,-1), time: 21.9417s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.4779s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3307s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4710s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8444s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4469s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-0.48064324719742707,0.29834931936709513] (2,-1; 9,-1), time: 26.2139s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-0.7475665708113964,0.19796321180493234] (2,-1; 9,-1), time: 26.9299s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-0.2865436882475712,0.4966430238920569] (2,-1; 9,-1), time: 27.8374s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4277s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-0.7286729302127204,0.038944496596263416] (9,-1; 2,-1), time: 27.9670s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-0.2709714437980655,0.26348090629844206] (2,-1; 2,-1), time: 23.8780s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.0769s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-0.32569777185951737,0.25910274479912954] (9,-1; 9,-1), time: 30.0257s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-0.21265202560375207,0.4085090983947018] (2,-1; 9,-1), time: 26.7335s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-0.6293471997788469,0.09588762957131154] (9,-1; 9,-1), time: 30.0224s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-0.3594816967601359,0.5417419191753411] (2,-1; 2,-1), time: 22.0495s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-0.5315736269204553,0.13362960201236435] (2,-1; 9,-1), time: 25.2057s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.3792s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.7675517579088073,0.2592131565162836] (2,-1; 2,-1), time: 12.8930s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4051s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3026s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3036s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[1e-05,1.4818313153050715] (15,-1; 2,-1), time: 5.0766s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-0.6858412672938494,0.08339780424327892] (2,-1; 9,-1), time: 28.8855s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3778s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1030s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8992s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3641s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-0.4180158035325158,0.08432554283582357] (2,-1; 2,-1), time: 21.0979s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[1e-05,1.1351994995908714] (15,-1; 2,-1), time: 12.4457s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3865s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7604s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-0.5718545528112163,0.20253324275975915] (9,-1; 2,-1), time: 21.2428s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5865s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-0.13490297029116483,0.8020736217969442] (9,-1; 9,-1), time: 30.0253s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4246s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[1e-05,1.1172424133902181] (15,-1; 2,-1), time: 5.8702s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.3188288384454264,0.42611017923941974] (2,-1; 9,-1), time: 19.6428s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.674567474616188,0.2803344198408369] (2,-1; 2,-1), time: 21.3519s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[-0.37551714212734805,0.26029111992254955] (2,-1; 9,-1), time: 20.8499s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3986s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3203s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-0.4975727326733021,0.035005140451739136] (9,-1; 9,-1), time: 30.0420s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[1e-05,0.8462907401450076] (15,-1; 2,-1), time: 6.5612s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-0.2838237903091477,0.24223669396075873] (2,-1; 9,-1), time: 29.9935s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-0.32968686654645263,0.3075290967221721] (9,-1; 2,-1), time: 28.8849s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-0.4361383077366685,0.2776479835037343] (9,-1; 9,-1), time: 30.3680s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.19320082370673325,0.40384683556308615] (9,-1; 9,-1), time: 30.0197s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4069s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.5714428246672929,0.030219681185803402] (9,-1; 2,-1), time: 21.4170s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-0.5218927727599042,0.0961547467471163] (9,-1; 2,-1), time: 22.0362s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_59, [-inf,inf]=>[-0.029747579929374907,0.7178411361832234] (9,-1; 2,-1), time: 20.0564s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[-0.15258610253696522,0.35828023913489526] (9,-1; 9,-1), time: 30.0975s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[1e-05,1.7345099638295332] (15,-1; 2,-1), time: 4.9299s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-0.32362099729186194,0.2716478854784705] (9,-1; 2,-1), time: 23.7165s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[1e-05,0.8375719540463727] (15,-1; 2,-1), time: 5.9865s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-0.22344256256355516,0.5175881623386545] (2,-1; 9,-1), time: 24.6521s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.6031273466832774,0.019142906275650264] (9,-1; 9,-1), time: 30.0149s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.3401238283022824,0.2125121059257989] (2,-1; 2,-1), time: 23.1619s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[1e-05,0.651582474891866] (15,-1; 9,-1), time: 24.5902s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[1e-05,0.6434812537869274] (15,-1; 2,-1), time: 17.1912s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-0.2754134408541724,0.33841700343898007] (9,-1; 2,-1), time: 29.9535s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[1e-05,0.9317072606235778] (15,-1; 9,-1), time: 19.1659s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-0.40965500748249634,0.10467174100989093] (9,-1; 2,-1), time: 23.7033s, #vars: 1235, #constrs: 525, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-0.061736423281481975,0.7015058562775252] (9,-1; 9,-1), time: 30.0139s, #vars: 1235, #constrs: 525, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 1 has unstable to stable neurons: [(16, -1), (49, -1), (40, -1), (99, -1), (3, -1), (43, -1), (42, -1), (11, -1), (70, -1), (60, -1), (24, -1), (52, -1), (79, -1), (98, -1), (59, -1), (6, 1), (77, 1), (30, 1), (48, -1), (62, 1), (87, -1), (72, -1), (45, -1), (51, -1), (26, 1), (47, -1)]
best_l after optimization: -502.0731201171875
beta sum per layer: []
alpha/beta optimization time: 24.185628414154053
alpha-CROWN with intermediate bounds by MIP: tensor([[-33.04157257, -55.94246292, -60.28588104, -55.64191055, -64.24504089,
         -48.50673294, -67.32437897, -55.01541519, -62.06970978]],
       device='cuda:0') None
MIP improved 88 nodes out of 88 unstable nodes, lb improved 28.96910285949707, ub improved 42.69271469116211, time 92.1699
maximum relu layer improved by MIP so far 2
Linear(in_features=100, out_features=100, bias=True) 3 8 torch.Size([100])
sorted candidates ['lay8_71', 'lay8_87', 'lay8_59', 'lay8_17', 'lay8_77', 'lay8_75', 'lay8_19', 'lay8_89', 'lay8_28', 'lay8_57', 'lay8_39', 'lay8_33', 'lay8_30', 'lay8_79', 'lay8_20', 'lay8_48', 'lay8_24', 'lay8_16', 'lay8_31', 'lay8_7', 'lay8_34', 'lay8_62', 'lay8_11', 'lay8_81', 'lay8_41', 'lay8_88', 'lay8_25', 'lay8_72', 'lay8_38', 'lay8_3', 'lay8_97', 'lay8_92', 'lay8_0', 'lay8_60', 'lay8_52', 'lay8_69', 'lay8_98', 'lay8_63', 'lay8_22', 'lay8_66', 'lay8_27', 'lay8_40', 'lay8_4', 'lay8_5', 'lay8_65', 'lay8_78', 'lay8_93', 'lay8_2', 'lay8_85', 'lay8_43', 'lay8_6', 'lay8_61', 'lay8_29', 'lay8_14', 'lay8_53', 'lay8_55', 'lay8_50', 'lay8_95', 'lay8_45', 'lay8_21', 'lay8_36', 'lay8_10', 'lay8_58', 'lay8_73', 'lay8_82', 'lay8_15', 'lay8_76', 'lay8_56', 'lay8_9', 'lay8_67', 'lay8_44', 'lay8_90', 'lay8_74', 'lay8_83', 'lay8_94', 'lay8_13', 'lay8_80', 'lay8_54', 'lay8_96', 'lay8_26', 'lay8_68', 'lay8_1', 'lay8_70', 'lay8_91', 'lay8_51', 'lay8_32', 'lay8_46', 'lay8_37', 'lay8_99', 'lay8_42', 'lay8_23', 'lay8_18', 'lay8_35', 'lay8_49', 'lay8_86', 'lay8_64', 'lay8_84', 'lay8_47', 'lay8_8', 'lay8_12'] filter: 1.0
Solving MIP for lay8_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4723s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4938s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5603s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3853s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4841s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1601s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2870s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3133s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5618s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6952s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6894s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8370s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9863s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4370s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1036s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4872s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9214s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5592s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.1545s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.1018s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.3300s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1891s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4663s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4144s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[1e-05,1.4091358171220536] (15,-1; 9,-1), time: 15.3689s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[1e-05,1.4363320974014016] (15,-1; 9,-1), time: 15.4473s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9650s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3884s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[1e-05,0.5960999160067946] (15,-1; 9,-1), time: 16.3680s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3698s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[1e-05,1.1607950677173] (15,-1; 9,-1), time: 21.4666s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5379s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-0.24689438933999608,0.37281906300474915] (9,-1; 9,-1), time: 30.0256s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-0.5151711365748453,0.4848786887407033] (9,-1; 9,-1), time: 30.0688s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-0.26562556830449346,0.4608671041941556] (9,-1; 9,-1), time: 30.1293s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-0.14884467921996847,0.5341415742006361] (9,-1; 9,-1), time: 30.1855s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-0.377046891879576,0.27067890685055085] (9,-1; 9,-1), time: 30.2921s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4416s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4391s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1846s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-0.4820254571729372,0.09969252295078528] (9,-1; 9,-1), time: 30.0408s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.3223701615901887,0.27999157849433537] (9,-1; 9,-1), time: 30.1006s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5126s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_72, [-inf,inf]=>[-0.39084821620187193,0.26418215158767766] (9,-1; 9,-1), time: 30.0496s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-0.25898254376723123,0.468262802417653] (9,-1; 9,-1), time: 30.0182s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4558s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4076s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-0.7174861167466261,0.05483918073786016] (9,-1; 9,-1), time: 30.0296s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[1e-05,1.5834983371673852] (15,-1; 9,-1), time: 15.5882s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4480s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-0.18414253932930288,0.29942824683265046] (9,-1; 9,-1), time: 30.0229s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4615s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-0.013647467841465331,0.5539472769175052] (9,-1; 9,-1), time: 30.0222s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-0.67138484496335,0.0038356065558521283] (9,-1; 9,-1), time: 30.0203s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[1e-05,0.7116812291834641] (15,-1; 9,-1), time: 17.0328s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[1e-05,2.1189957815651725] (15,-1; 9,-1), time: 15.7684s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-0.05018682921918482,0.6300806813922742] (9,-1; 9,-1), time: 30.0139s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[1e-05,0.7548016080414135] (15,-1; 9,-1), time: 16.1097s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[1e-05,1.6798536959258228] (15,-1; 9,-1), time: 15.6870s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[1e-05,1.0016937648459048] (15,-1; 9,-1), time: 22.8658s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-0.4322513005297183,0.09990572237715471] (9,-1; 9,-1), time: 30.0176s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-0.5997365219384485,0.0634692789760677] (9,-1; 9,-1), time: 30.0293s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-0.6198026733180837,0.04417468953482224] (9,-1; 9,-1), time: 30.1373s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4294s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-0.1039709230666381,0.5545990797797252] (9,-1; 9,-1), time: 30.0252s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.2054021096022375,0.3965161041876185] (9,-1; 9,-1), time: 30.0488s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[-0.5809109607396071,0.13176881209391306] (9,-1; 9,-1), time: 30.3496s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[1e-05,2.340374545158487] (15,-1; 9,-1), time: 15.9675s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-0.2895435224169524,0.28403281130910907] (9,-1; 9,-1), time: 30.0221s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-0.15551618792914831,0.3534666642801075] (9,-1; 9,-1), time: 30.0193s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[1e-05,0.7461674985863548] (15,-1; 9,-1), time: 17.6489s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[1e-05,2.3270418714686603] (15,-1; 2,-1), time: 10.2963s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-0.7556226107857712,0.032264505877197674] (9,-1; 9,-1), time: 30.0331s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-0.5694191224391976,0.21837657021023377] (9,-1; 9,-1), time: 30.0165s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-0.23304582938986323,0.431528548978338] (9,-1; 9,-1), time: 30.0188s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[1e-05,1.626598555894378] (15,-1; 9,-1), time: 15.4686s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[1e-05,0.6792086492535198] (15,-1; 9,-1), time: 16.3029s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-0.6648510229961357,0.03762630740727684] (9,-1; 9,-1), time: 30.2281s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5243s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[1e-05,1.526738900614527] (15,-1; 9,-1), time: 15.4803s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[1e-05,0.7940346032291589] (15,-1; 9,-1), time: 26.0648s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.0939810751075956,0.50035129764566] (9,-1; 9,-1), time: 30.0143s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.5414265250537206,0.154382263539703] (9,-1; 9,-1), time: 30.2907s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-0.6541321136494893,0.03961169485320876] (9,-1; 9,-1), time: 30.2473s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-0.12506570037980316,0.5015424443503554] (9,-1; 9,-1), time: 30.0273s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.821974885095734,0.01973758993505537] (9,-1; 9,-1), time: 30.2698s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[1e-05,2.4914862421258954] (15,-1; 2,-1), time: 13.5867s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[1e-05,1.7444245983484126] (15,-1; 9,-1), time: 15.4454s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[1e-05,0.920966218572852] (15,-1; 9,-1), time: 15.4919s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-0.3297363756421379,0.09953836931721304] (9,-1; 9,-1), time: 30.0355s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-0.4726375773877167,0.13709393149860047] (9,-1; 9,-1), time: 30.0749s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[1e-05,1.4394072645436864] (15,-1; 9,-1), time: 15.6855s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-0.19024549486816775,0.433350894895614] (9,-1; 9,-1), time: 30.0169s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[1e-05,0.8530645531551334] (15,-1; 9,-1), time: 16.5528s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-0.3813410976215026,0.29980886678279023] (9,-1; 9,-1), time: 30.1361s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[1e-05,1.588100123678346] (15,-1; 9,-1), time: 15.4341s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[1e-05,2.4742914348113403] (15,-1; 9,-1), time: 15.4177s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-0.5717907568708249,0.03938481777915252] (9,-1; 9,-1), time: 30.2373s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-0.46884108386323337,0.10158627675764124] (9,-1; 9,-1), time: 30.8513s, #vars: 1411, #constrs: 739, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.15433595124783375,0.2701559725307008] (9,-1; 9,-1), time: 30.0134s, #vars: 1411, #constrs: 739, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 2 has unstable to stable neurons: [(30, -1), (13, -1), (56, -1), (12, -1), (1, -1), (39, -1), (23, -1), (38, -1), (34, -1), (64, -1), (36, -1), (42, -1), (78, -1), (51, -1), (87, -1), (19, -1), (9, -1), (95, -1), (33, -1), (32, -1), (99, -1), (96, -1), (3, -1), (48, -1), (46, -1), (75, -1), (71, -1), (88, 1), (93, 1), (77, -1), (15, -1), (43, -1), (66, -1), (80, -1), (24, -1), (45, -1), (86, 1), (29, -1), (10, -1), (79, -1), (63, -1), (73, 1), (69, -1), (44, -1), (52, 1), (76, 1), (94, 1), (18, -1), (58, 1), (84, 1)]
best_l after optimization: -112.23983764648438
beta sum per layer: []
alpha/beta optimization time: 16.23386311531067
alpha-CROWN with intermediate bounds by MIP: tensor([[ -7.30108976, -11.78653526, -13.07114315, -12.54712868, -14.50508213,
         -10.38626480, -14.82649708, -12.73696423, -15.07913780]],
       device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 71.72698211669922, ub improved 107.16496276855469, time 112.8773
maximum relu layer improved by MIP so far 3
Linear(in_features=100, out_features=100, bias=True) 4 10 torch.Size([100])
sorted candidates ['lay10_80', 'lay10_14', 'lay10_40', 'lay10_46', 'lay10_86', 'lay10_74', 'lay10_58', 'lay10_8', 'lay10_27', 'lay10_17', 'lay10_7', 'lay10_35', 'lay10_42', 'lay10_79', 'lay10_2', 'lay10_1', 'lay10_18', 'lay10_30', 'lay10_75', 'lay10_57', 'lay10_5', 'lay10_33', 'lay10_0', 'lay10_91', 'lay10_72', 'lay10_13', 'lay10_37', 'lay10_97', 'lay10_52', 'lay10_10', 'lay10_93', 'lay10_66', 'lay10_94', 'lay10_82', 'lay10_51', 'lay10_87', 'lay10_98', 'lay10_60', 'lay10_50', 'lay10_15', 'lay10_39', 'lay10_88', 'lay10_89', 'lay10_96', 'lay10_95', 'lay10_47', 'lay10_29', 'lay10_28', 'lay10_4', 'lay10_23', 'lay10_48', 'lay10_22', 'lay10_3', 'lay10_6', 'lay10_69', 'lay10_85', 'lay10_77', 'lay10_21', 'lay10_44', 'lay10_76', 'lay10_99', 'lay10_63', 'lay10_65', 'lay10_53', 'lay10_59', 'lay10_36', 'lay10_43', 'lay10_49', 'lay10_70', 'lay10_54', 'lay10_55', 'lay10_26', 'lay10_41', 'lay10_71', 'lay10_84', 'lay10_24', 'lay10_90', 'lay10_9', 'lay10_20', 'lay10_81', 'lay10_78', 'lay10_45', 'lay10_73', 'lay10_19', 'lay10_31', 'lay10_34', 'lay10_68', 'lay10_67', 'lay10_56', 'lay10_92', 'lay10_11', 'lay10_25', 'lay10_83', 'lay10_32', 'lay10_64', 'lay10_38', 'lay10_61', 'lay10_12', 'lay10_62', 'lay10_16'] filter: 1.0
Solving MIP for lay10_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5059s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5491s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5996s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4309s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4561s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5703s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4429s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4872s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4201s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5529s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5471s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.9233s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[1e-05,1.1519123745464956] (15,-1; 9,-1), time: 15.4974s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[1e-05,1.3713734194334803] (15,-1; 9,-1), time: 15.5138s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-0.6305469471925791,0.20998520444657098] (9,-1; 9,-1), time: 30.0151s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-0.8392433471204288,0.04554860088990609] (9,-1; 9,-1), time: 30.0164s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-0.6219627860132676,0.19274458506444275] (9,-1; 9,-1), time: 30.0246s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-0.5113098100297884,0.19633048104003734] (9,-1; 9,-1), time: 30.0249s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-0.20471359872362171,0.3070527607569823] (9,-1; 9,-1), time: 30.0335s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-0.09682119553571017,0.7067511044500119] (9,-1; 9,-1), time: 30.1254s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.10629362514498158,0.8379006487265633] (9,-1; 9,-1), time: 30.1298s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-0.9930686253341988,0.19420081430315847] (9,-1; 9,-1), time: 30.1549s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-0.7792561702692606,0.031429327414096875] (9,-1; 9,-1), time: 30.1926s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-0.6036440848460027,0.08962061519706613] (9,-1; 9,-1), time: 30.0183s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5100s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[1e-05,1.6831045754196563] (15,-1; 9,-1), time: 15.5634s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-0.5603284731489346,0.3269200282450336] (9,-1; 9,-1), time: 30.0295s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4515s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-0.3793258554586275,0.23981964392355715] (9,-1; 9,-1), time: 30.0263s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-0.6380546210535825,0.0074511050484180885] (9,-1; 9,-1), time: 30.0146s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5950s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8205s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5442s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4134s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-0.9778658060946481,0.04342421292053421] (9,-1; 9,-1), time: 30.0398s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-0.6343483110333467,0.048718115329855705] (9,-1; 9,-1), time: 30.1333s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[1e-05,3.008148625627431] (15,-1; 9,-1), time: 15.4779s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[1e-05,0.9871520286822743] (15,-1; 9,-1), time: 16.3274s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4429s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[1e-05,1.117835182917083] (15,-1; 9,-1), time: 16.1872s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3849s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[-0.007605739025674074,0.6745217019160875] (9,-1; 9,-1), time: 30.0132s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[-0.13416648341598097,0.4553167646066083] (9,-1; 9,-1), time: 30.0152s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-0.14584216755593793,0.5685489037318562] (9,-1; 9,-1), time: 30.0147s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-0.5706718826701015,0.0599583017301995] (9,-1; 9,-1), time: 30.0402s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-0.03903112152903279,0.5619976433825289] (9,-1; 9,-1), time: 30.0201s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-0.5342282483398021,0.02332909895111789] (9,-1; 9,-1), time: 30.0796s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4888s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-0.6660867229609645,0.04337245256363466] (9,-1; 9,-1), time: 30.0137s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-0.5887052972282203,0.009535190393310262] (9,-1; 9,-1), time: 30.0648s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4359s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4793s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[-0.6381319406253201,0.022018702501363792] (9,-1; 9,-1), time: 30.0150s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4914s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[1e-05,0.8941481228032067] (15,-1; 9,-1), time: 15.4936s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-0.27674756610203805,0.5079627279548071] (9,-1; 9,-1), time: 30.0280s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5683s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[1e-05,1.953044828981172] (15,-1; 9,-1), time: 15.5382s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5621s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[-0.211031105064706,0.541422682197833] (9,-1; 9,-1), time: 30.0124s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.7649s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-0.8218124984509916,0.006198646696027151] (9,-1; 9,-1), time: 30.0490s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[1e-05,1.1425468618735006] (15,-1; 9,-1), time: 15.4738s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[1e-05,3.4494770891249273] (15,-1; 9,-1), time: 15.5554s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-0.24398687563026744,0.2664284252871179] (9,-1; 9,-1), time: 30.0192s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[1e-05,0.8855507077462726] (15,-1; 9,-1), time: 15.4801s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-0.15972958274528204,0.3138121104603297] (9,-1; 9,-1), time: 30.0129s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4364s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[1e-05,1.7679982602420095] (15,-1; 9,-1), time: 15.4566s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5149s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5514s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[1e-05,1.5392971516919334] (15,-1; 9,-1), time: 15.6831s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[1e-05,1.7855012789984714] (15,-1; 9,-1), time: 15.4557s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-0.4725406438561783,0.17560985029814588] (9,-1; 9,-1), time: 30.0106s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[1e-05,1.0551379969760353] (15,-1; 9,-1), time: 15.5687s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[1e-05,2.6897763315134804] (15,-1; 9,-1), time: 15.4573s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[1e-05,0.7653984363148933] (15,-1; 9,-1), time: 15.4501s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[1e-05,2.0340815530623506] (15,-1; 9,-1), time: 15.6057s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-0.6454626421832673,0.04222677012026783] (9,-1; 9,-1), time: 30.0301s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-0.4583368601645988,0.03690252278977538] (9,-1; 9,-1), time: 30.0263s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4952s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2394s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[-0.3710223021655379,0.21019544448871413] (9,-1; 9,-1), time: 30.0143s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[-0.3818052937660553,0.2825095228511719] (9,-1; 9,-1), time: 30.0327s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5669s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-0.02731114248038133,0.6279523929175463] (9,-1; 9,-1), time: 30.3607s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[1e-05,0.7330725420305856] (15,-1; 9,-1), time: 21.6703s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-0.4083202465943268,0.1400592554221038] (9,-1; 9,-1), time: 30.0132s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[1e-05,0.5349725529789742] (15,-1; 9,-1), time: 27.6661s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-0.454983140392561,0.08213806021124594] (9,-1; 9,-1), time: 30.0158s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[1e-05,0.6207261549916964] (15,-1; 9,-1), time: 15.4864s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[-0.0209114367352637,0.4428386300294005] (9,-1; 9,-1), time: 30.0126s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[-0.1933354435557953,0.47163889179103297] (9,-1; 9,-1), time: 30.0166s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[1e-05,2.179973001138376] (15,-1; 9,-1), time: 15.4931s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[1e-05,1.4906388591623128] (15,-1; 9,-1), time: 15.5727s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[1e-05,0.9338080158932516] (15,-1; 9,-1), time: 15.5045s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[1e-05,2.086506186514946] (15,-1; 9,-1), time: 15.4259s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[1e-05,2.6885940417884453] (15,-1; 9,-1), time: 15.4766s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-0.549077886526143,0.002399007897806912] (9,-1; 9,-1), time: 30.0743s, #vars: 1587, #constrs: 953, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-0.08931907249865542,0.4233392597152156] (9,-1; 9,-1), time: 30.0365s, #vars: 1587, #constrs: 953, improved: True
PGD done for relu layer 5
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 3 has unstable to stable neurons: [(71, -1), (59, -1), (17, -1), (77, -1), (19, -1), (89, -1), (57, -1), (39, -1), (33, -1), (20, -1), (48, -1), (24, -1), (16, 1), (31, -1), (7, -1), (34, -1), (62, -1), (11, 1), (81, -1), (88, -1), (3, -1), (97, -1), (92, 1), (0, -1), (52, 1), (98, -1), (63, -1), (22, -1), (66, -1), (4, -1), (65, -1), (78, 1), (93, -1), (85, 1), (43, -1), (6, -1), (14, -1), (55, -1), (45, -1), (21, -1), (36, 1), (10, 1), (58, 1), (82, -1), (76, -1), (56, 1), (67, 1), (74, 1), (13, 1), (80, 1), (54, -1), (70, 1), (91, 1), (32, 1), (42, 1), (18, -1), (35, 1), (49, 1), (64, 1), (47, 1), (8, 1), (12, 1)]
best_l after optimization: -27.444190979003906
beta sum per layer: []
alpha/beta optimization time: 15.992745161056519
alpha-CROWN with intermediate bounds by MIP: tensor([[-0.89781570, -2.10691500, -2.49372292, -4.26991224, -3.34798336,
         -1.83135700, -3.06137562, -4.01839399, -5.41671515]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 185.84315490722656, ub improved 258.9609375, time 123.9495
maximum relu layer improved by MIP so far 4
Linear(in_features=100, out_features=100, bias=True) 5 12 torch.Size([100])
sorted candidates ['lay12_24', 'lay12_59', 'lay12_18', 'lay12_4', 'lay12_13', 'lay12_17', 'lay12_29', 'lay12_92', 'lay12_96', 'lay12_83', 'lay12_46', 'lay12_94', 'lay12_95', 'lay12_87', 'lay12_90', 'lay12_53', 'lay12_2', 'lay12_21', 'lay12_63', 'lay12_10', 'lay12_99', 'lay12_68', 'lay12_69', 'lay12_30', 'lay12_86', 'lay12_35', 'lay12_77', 'lay12_73', 'lay12_81', 'lay12_7', 'lay12_39', 'lay12_45', 'lay12_32', 'lay12_43', 'lay12_98', 'lay12_11', 'lay12_34', 'lay12_97', 'lay12_44', 'lay12_5', 'lay12_62', 'lay12_71', 'lay12_49', 'lay12_26', 'lay12_31', 'lay12_61', 'lay12_38', 'lay12_65', 'lay12_51', 'lay12_74', 'lay12_42', 'lay12_54', 'lay12_50', 'lay12_8', 'lay12_0', 'lay12_88', 'lay12_48', 'lay12_82', 'lay12_85', 'lay12_23', 'lay12_58', 'lay12_93', 'lay12_40', 'lay12_1', 'lay12_57', 'lay12_78', 'lay12_28', 'lay12_72', 'lay12_60', 'lay12_80', 'lay12_20', 'lay12_66', 'lay12_3', 'lay12_33', 'lay12_9', 'lay12_41', 'lay12_67', 'lay12_75', 'lay12_91', 'lay12_89', 'lay12_19', 'lay12_14', 'lay12_56', 'lay12_84', 'lay12_16', 'lay12_37', 'lay12_47', 'lay12_64', 'lay12_79', 'lay12_12', 'lay12_76', 'lay12_70', 'lay12_55', 'lay12_15', 'lay12_52', 'lay12_27', 'lay12_22', 'lay12_36', 'lay12_6', 'lay12_25'] filter: 1.0
Solving MIP for lay12_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5883s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6229s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6289s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6363s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6465s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6377s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7814s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7162s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7531s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6833s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.8110s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_94, [-inf,inf]=>[1e-05,1.359038029040477] (15,-1; 9,-1), time: 15.6636s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_18, [-inf,inf]=>[1e-05,1.9804314665613676] (15,-1; 9,-1), time: 15.6642s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_29, [-inf,inf]=>[1e-05,1.4298750897892996] (15,-1; 9,-1), time: 15.8262s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6471s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7141s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_86, [-inf,inf]=>[1e-05,3.462465461102346] (15,-1; 9,-1), time: 15.6544s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5519s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_68, [-inf,inf]=>[1e-05,0.859263790719047] (15,-1; 9,-1), time: 16.9566s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_35, [-inf,inf]=>[1e-05,1.6180168147556584] (15,-1; 9,-1), time: 16.8390s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_46, [-inf,inf]=>[-0.17870373444996865,0.4153549587776731] (9,-1; 9,-1), time: 30.0141s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_4, [-inf,inf]=>[-0.6530427279134293,0.2089031286007909] (9,-1; 9,-1), time: 30.0201s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_53, [-inf,inf]=>[-0.6716451148369129,0.08067208065883553] (9,-1; 9,-1), time: 30.0130s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_90, [-inf,inf]=>[-0.7203971147618273,0.06134790785278474] (9,-1; 9,-1), time: 30.0158s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_87, [-inf,inf]=>[-0.5276107153413802,0.19363299682406804] (9,-1; 9,-1), time: 30.0172s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_2, [-inf,inf]=>[-0.6869697529171539,0.0848290719409982] (9,-1; 9,-1), time: 30.0163s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_21, [-inf,inf]=>[-0.2331617092767395,0.2626877409428674] (9,-1; 9,-1), time: 30.0201s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6323s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6755s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_69, [-inf,inf]=>[-0.3295000790799608,0.7185373804743924] (9,-1; 9,-1), time: 30.0414s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_81, [-inf,inf]=>[1e-05,1.0925672131229243] (15,-1; 9,-1), time: 15.6241s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_30, [-inf,inf]=>[-0.28031941623123274,0.5155767310395638] (9,-1; 9,-1), time: 30.0165s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6280s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6107s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7302s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_77, [-inf,inf]=>[-0.08307989835566644,0.40709820132034924] (9,-1; 9,-1), time: 30.0134s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6994s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.3853s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_7, [-inf,inf]=>[-0.043286735509150145,0.6982586630417753] (9,-1; 9,-1), time: 30.0137s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6751s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_32, [-inf,inf]=>[-0.7992258015017536,0.06373067055516929] (9,-1; 9,-1), time: 30.0127s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_43, [-inf,inf]=>[-0.6521891679363876,0.0566154417520159] (9,-1; 9,-1), time: 30.0155s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_98, [-inf,inf]=>[-0.15624919066612897,0.8889992299156746] (9,-1; 9,-1), time: 30.0270s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7093s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_11, [-inf,inf]=>[-0.8299228429959494,0.15542430800429213] (9,-1; 9,-1), time: 30.0134s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_97, [-inf,inf]=>[-0.7584634744636952,0.055507337001070405] (9,-1; 9,-1), time: 30.0094s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_62, [-inf,inf]=>[-0.18994805484141009,0.7469437180787781] (9,-1; 9,-1), time: 30.0132s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_44, [-inf,inf]=>[-0.41996864430256275,0.005617303934564922] (9,-1; 9,-1), time: 30.0302s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_71, [-inf,inf]=>[-0.03486388078164065,0.4567766929060984] (9,-1; 9,-1), time: 30.0172s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_49, [-inf,inf]=>[-0.2846359331937096,0.6505315152560052] (9,-1; 9,-1), time: 30.0146s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_26, [-inf,inf]=>[-0.5345656033528017,0.2634453221664005] (9,-1; 9,-1), time: 30.0146s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_31, [-inf,inf]=>[-0.15128705849147783,0.5544249261468247] (9,-1; 9,-1), time: 30.0154s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_61, [-inf,inf]=>[-0.532917200632215,0.0968118633508784] (9,-1; 9,-1), time: 30.0140s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6574s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6799s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7759s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5931s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7091s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6204s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_42, [-inf,inf]=>[-0.4174311280750576,0.12019909057521584] (9,-1; 9,-1), time: 30.0105s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_85, [-inf,inf]=>[1e-05,1.6721278891057993] (15,-1; 9,-1), time: 15.7343s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7591s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1900s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_50, [-inf,inf]=>[-0.040993914398743544,1.141673776648209] (9,-1; 9,-1), time: 30.0162s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_8, [-inf,inf]=>[-0.14628439146098193,0.3349029678744564] (9,-1; 9,-1), time: 30.0105s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7369s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5578s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5854s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_40, [-inf,inf]=>[1e-05,1.2484532770013455] (15,-1; 9,-1), time: 15.5930s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6474s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_72, [-inf,inf]=>[1e-05,2.6207399295892464] (15,-1; 9,-1), time: 15.7396s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_88, [-inf,inf]=>[-0.014696281520041928,0.7144115039499281] (9,-1; 9,-1), time: 30.0126s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_60, [-inf,inf]=>[1e-05,1.4253683313962378] (15,-1; 9,-1), time: 15.6990s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6704s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7706s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_48, [-inf,inf]=>[-0.7897882303716297,0.08136531371191809] (9,-1; 9,-1), time: 30.0133s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_66, [-inf,inf]=>[1e-05,1.854838116047791] (15,-1; 9,-1), time: 15.6924s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7836s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_3, [-inf,inf]=>[1e-05,1.2151315075213913] (15,-1; 9,-1), time: 15.5667s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6299s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5820s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_23, [-inf,inf]=>[-0.48993038903617797,0.27662986827661246] (9,-1; 9,-1), time: 30.0109s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_58, [-inf,inf]=>[-0.21182864069591792,0.4245577267875534] (9,-1; 9,-1), time: 30.0191s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_9, [-inf,inf]=>[1e-05,0.785898495068448] (15,-1; 9,-1), time: 17.0487s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7076s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_91, [-inf,inf]=>[1e-05,2.1330716742685207] (15,-1; 9,-1), time: 15.7102s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_93, [-inf,inf]=>[-0.5936591742182636,0.03921066430833255] (9,-1; 9,-1), time: 30.0122s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_1, [-inf,inf]=>[-0.48808177767536964,0.3747062156334396] (9,-1; 9,-1), time: 30.0129s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_47, [-inf,inf]=>[1e-05,2.8650671371461756] (15,-1; 9,-1), time: 15.6521s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_70, [-inf,inf]=>[1e-05,2.277442153822853] (15,-1; 9,-1), time: 15.5363s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_15, [-inf,inf]=>[1e-05,4.1200831336913] (15,-1; 9,-1), time: 15.6537s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_52, [-inf,inf]=>[1e-05,0.8819750906767674] (15,-1; 9,-1), time: 15.5077s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_27, [-inf,inf]=>[1e-05,2.8372793929132114] (15,-1; 9,-1), time: 15.6004s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_41, [-inf,inf]=>[-0.4887426592003976,0.21533469363435045] (9,-1; 9,-1), time: 30.0139s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_55, [-inf,inf]=>[1e-05,0.5786299135043484] (15,-1; 9,-1), time: 16.4913s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_22, [-inf,inf]=>[1e-05,0.7881865300439577] (15,-1; 9,-1), time: 16.5321s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_25, [-inf,inf]=>[1e-05,0.70418039731374] (15,-1; 9,-1), time: 16.6567s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_84, [-inf,inf]=>[-0.48464115283592846,0.008506915655070522] (9,-1; 9,-1), time: 30.0163s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_64, [-inf,inf]=>[-0.02624952219276822,0.36768229429843285] (9,-1; 9,-1), time: 30.0152s, #vars: 1769, #constrs: 1176, improved: True
Solving MIP for lay12_36, [-inf,inf]=>[-0.3717911822039042,0.33307343235458864] (9,-1; 9,-1), time: 30.0097s, #vars: 1769, #constrs: 1176, improved: True
PGD done for relu layer 6
Run alpha-CROWN after refining layer 10 and relu idx 4
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 4 has unstable to stable neurons: [(80, -1), (14, -1), (40, -1), (8, 1), (79, -1), (2, -1), (1, 1), (30, -1), (57, -1), (5, -1), (33, -1), (72, -1), (13, -1), (37, -1), (10, 1), (93, -1), (87, 1), (50, 1), (88, -1), (89, -1), (96, 1), (95, -1), (28, -1), (4, -1), (6, -1), (69, 1), (85, -1), (77, 1), (21, -1), (44, -1), (76, 1), (99, 1), (63, 1), (65, -1), (53, -1), (36, -1), (43, 1), (49, 1), (55, 1), (26, -1), (41, -1), (9, 1), (20, -1), (81, -1), (78, -1), (73, 1), (19, 1), (31, 1), (34, 1), (56, 1), (92, 1), (11, 1), (25, 1), (83, -1), (32, -1), (38, 1), (12, 1), (62, -1), (16, 1)]
best_l after optimization: 2.2805988788604736
beta sum per layer: []
alpha/beta optimization time: 15.53469204902649
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.44558001,  1.42630053,  1.15731907, -1.47854066,  0.77321053,
          0.95482659,  1.12050915, -1.08195686, -2.03664947]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 400.3228759765625, ub improved 576.5520629882812, time 109.8847
maximum relu layer improved by MIP so far 5
Linear(in_features=100, out_features=100, bias=True) 6 14 torch.Size([100])
sorted candidates ['lay14_20', 'lay14_5', 'lay14_92', 'lay14_2', 'lay14_75', 'lay14_11', 'lay14_47', 'lay14_64', 'lay14_18', 'lay14_72', 'lay14_59', 'lay14_14', 'lay14_87', 'lay14_0', 'lay14_46', 'lay14_51', 'lay14_54', 'lay14_8', 'lay14_84', 'lay14_85', 'lay14_10', 'lay14_91', 'lay14_35', 'lay14_36', 'lay14_86', 'lay14_16', 'lay14_76', 'lay14_22', 'lay14_1', 'lay14_19', 'lay14_56', 'lay14_31', 'lay14_28', 'lay14_50', 'lay14_41', 'lay14_12', 'lay14_37', 'lay14_98', 'lay14_77', 'lay14_60', 'lay14_30', 'lay14_82', 'lay14_21', 'lay14_42', 'lay14_4', 'lay14_74', 'lay14_33', 'lay14_96', 'lay14_44', 'lay14_45', 'lay14_79', 'lay14_63', 'lay14_78', 'lay14_29', 'lay14_3', 'lay14_9', 'lay14_88', 'lay14_83', 'lay14_23', 'lay14_73', 'lay14_69', 'lay14_70', 'lay14_15', 'lay14_40', 'lay14_55', 'lay14_62', 'lay14_67', 'lay14_71', 'lay14_24', 'lay14_57', 'lay14_81', 'lay14_32', 'lay14_90', 'lay14_7', 'lay14_52', 'lay14_66', 'lay14_26', 'lay14_25', 'lay14_53', 'lay14_65', 'lay14_39', 'lay14_6', 'lay14_99', 'lay14_13', 'lay14_38', 'lay14_49', 'lay14_80', 'lay14_48', 'lay14_43', 'lay14_95', 'lay14_68', 'lay14_89', 'lay14_17', 'lay14_34', 'lay14_61', 'lay14_58', 'lay14_27', 'lay14_93', 'lay14_97', 'lay14_94'] filter: 1.0
Solving MIP for lay14_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7896s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8990s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9039s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9181s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9110s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9621s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0149s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7157s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9639s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8477s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8564s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8804s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4396s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8276s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9938s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8559s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7838s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_72, [-inf,inf]=>[1e-05,1.2578843563159021] (15,-1; 9,-1), time: 15.7701s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_1, [-inf,inf]=>[1e-05,0.5506546228200931] (15,-1; 9,-1), time: 17.1874s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_46, [-inf,inf]=>[-0.9029221211463808,0.2141469954646942] (9,-1; 9,-1), time: 30.0145s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_64, [-inf,inf]=>[-0.16178083940200602,0.49583738113184606] (9,-1; 9,-1), time: 30.0203s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_47, [-inf,inf]=>[-0.7518694137488876,0.30340040452585854] (9,-1; 9,-1), time: 30.0263s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_0, [-inf,inf]=>[-0.6035307618274492,0.10628713468027648] (9,-1; 9,-1), time: 30.0485s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_18, [-inf,inf]=>[-0.21042550394015963,0.2855991786548814] (9,-1; 9,-1), time: 30.0866s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_14, [-inf,inf]=>[-0.053245050687709856,0.7722186434235414] (9,-1; 9,-1), time: 30.0864s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_2, [-inf,inf]=>[-0.9175216229911994,0.3163876602991929] (9,-1; 9,-1), time: 30.1889s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8724s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8604s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_91, [-inf,inf]=>[-0.39231874537889055,0.2539375469869055] (9,-1; 9,-1), time: 30.0320s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_84, [-inf,inf]=>[-0.44039081135659797,0.34257002911897744] (9,-1; 9,-1), time: 30.1400s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_36, [-inf,inf]=>[-0.014717646948983091,0.5956500879216164] (9,-1; 9,-1), time: 30.0161s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_76, [-inf,inf]=>[-0.4084201963737036,0.23993427622290736] (9,-1; 9,-1), time: 30.0141s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_22, [-inf,inf]=>[-0.34955426677498513,0.40115896014491575] (9,-1; 9,-1), time: 30.0128s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7947s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8695s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_31, [-inf,inf]=>[-0.3643170265524517,0.7012805298140752] (9,-1; 9,-1), time: 30.0118s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_28, [-inf,inf]=>[-0.3304880832656325,0.5274393437415189] (9,-1; 9,-1), time: 30.0177s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7996s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_41, [-inf,inf]=>[1e-05,2.557664071573493] (15,-1; 9,-1), time: 15.8884s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.0930s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8894s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_37, [-inf,inf]=>[1e-05,1.356101773827017] (15,-1; 9,-1), time: 15.8343s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_50, [-inf,inf]=>[-0.39147851544075196,0.19204433084614328] (9,-1; 9,-1), time: 30.1560s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_82, [-inf,inf]=>[1e-05,0.9939595447439974] (15,-1; 9,-1), time: 15.9420s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_33, [-inf,inf]=>[1e-05,1.8825043449450785] (15,-1; 9,-1), time: 15.8493s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_96, [-inf,inf]=>[1e-05,1.8401905803395289] (15,-1; 9,-1), time: 15.8203s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_79, [-inf,inf]=>[1e-05,1.4535958716942161] (15,-1; 9,-1), time: 15.7308s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_12, [-inf,inf]=>[-0.36171785185255834,0.4265758858432352] (9,-1; 9,-1), time: 30.0136s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_98, [-inf,inf]=>[-0.3787647091776126,0.19754818628080933] (9,-1; 9,-1), time: 30.0135s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_60, [-inf,inf]=>[-0.7158907357632356,0.06703718539736846] (9,-1; 9,-1), time: 30.0177s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_21, [-inf,inf]=>[-0.5047514638631353,0.05018439524564945] (9,-1; 9,-1), time: 30.0167s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_42, [-inf,inf]=>[-0.05950781779574162,0.5124026626671444] (9,-1; 9,-1), time: 30.0126s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_44, [-inf,inf]=>[-0.20974709976361894,0.3932338065212301] (9,-1; 9,-1), time: 30.0202s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_73, [-inf,inf]=>[1e-05,1.0920396517799116] (15,-1; 9,-1), time: 15.8843s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9119s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_78, [-inf,inf]=>[-0.12471124145663148,0.8869764542834145] (9,-1; 9,-1), time: 30.0112s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_29, [-inf,inf]=>[-0.4733052579440711,0.20834647434079953] (9,-1; 9,-1), time: 30.0133s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9453s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_70, [-inf,inf]=>[1e-05,1.071512595099804] (15,-1; 9,-1), time: 17.0463s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7981s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_3, [-inf,inf]=>[-0.04671595133797591,0.5993641987124394] (9,-1; 9,-1), time: 30.0125s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_23, [-inf,inf]=>[1e-05,1.2633375169801893] (15,-1; 9,-1), time: 28.5066s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_88, [-inf,inf]=>[-0.36290633518367865,0.3268256353713285] (9,-1; 9,-1), time: 30.0123s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7323s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9009s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_83, [-inf,inf]=>[-0.7725098704738059,0.06471758804959699] (9,-1; 9,-1), time: 30.2182s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_69, [-inf,inf]=>[-0.0022429936760480027,1.0972258809828] (9,-1; 9,-1), time: 30.0160s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_15, [-inf,inf]=>[-1.137631364207189,0.008513922307907304] (9,-1; 9,-1), time: 30.0387s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1346s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_40, [-inf,inf]=>[-0.39966043112504573,0.3619429402602163] (9,-1; 9,-1), time: 30.0110s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_55, [-inf,inf]=>[-0.7591712647349163,0.32157011518606154] (9,-1; 9,-1), time: 30.0127s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_62, [-inf,inf]=>[-0.45202386085744184,0.2946218284680508] (9,-1; 9,-1), time: 30.0094s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7578s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_71, [-inf,inf]=>[-0.058758710925614875,0.6738045937199424] (9,-1; 9,-1), time: 30.0173s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_67, [-inf,inf]=>[-0.012129362603773218,1.3688083643809963] (9,-1; 9,-1), time: 30.2116s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_65, [-inf,inf]=>[1e-05,4.5590467483660655] (15,-1; 9,-1), time: 15.9753s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_24, [-inf,inf]=>[-0.9135500261461634,0.005746649409216828] (9,-1; 9,-1), time: 30.0142s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8134s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_81, [-inf,inf]=>[-0.23218112057739224,0.4884241593648537] (9,-1; 9,-1), time: 30.0228s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6971s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.3371s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_90, [-inf,inf]=>[-0.2772304888631556,0.38911743982348485] (9,-1; 9,-1), time: 30.0689s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_7, [-inf,inf]=>[-0.5900008245232787,0.2829951671674338] (9,-1; 9,-1), time: 30.0118s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_66, [-inf,inf]=>[-0.7359723624737535,0.2296216626064089] (9,-1; 9,-1), time: 30.0289s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_26, [-inf,inf]=>[-0.5847145179246716,0.15930974295667602] (9,-1; 9,-1), time: 30.0171s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7705s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_38, [-inf,inf]=>[1e-05,2.3589511813859003] (15,-1; 9,-1), time: 15.7904s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_80, [-inf,inf]=>[1e-05,2.613295069884211] (15,-1; 9,-1), time: 15.7032s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_39, [-inf,inf]=>[-0.559668402041697,0.19514437879021448] (9,-1; 9,-1), time: 30.0137s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_6, [-inf,inf]=>[-0.32169872152650086,0.3422230810803241] (9,-1; 9,-1), time: 30.0101s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_43, [-inf,inf]=>[1e-05,2.0256729762318133] (15,-1; 9,-1), time: 15.8107s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_89, [-inf,inf]=>[1e-05,2.338184809681947] (15,-1; 9,-1), time: 15.6686s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_99, [-inf,inf]=>[-0.1358065519028337,0.6214023044312844] (9,-1; 9,-1), time: 30.0102s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_58, [-inf,inf]=>[1e-05,2.1484149600474622] (15,-1; 9,-1), time: 15.7532s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_27, [-inf,inf]=>[1e-05,2.350648878467945] (15,-1; 9,-1), time: 15.7322s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_97, [-inf,inf]=>[1e-05,2.8957492446498425] (15,-1; 9,-1), time: 15.7448s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_95, [-inf,inf]=>[-0.20636460761455475,0.2995179448183483] (9,-1; 9,-1), time: 30.0148s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_68, [-inf,inf]=>[-0.003355049657631338,0.8261240977105655] (9,-1; 9,-1), time: 30.0114s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_61, [-inf,inf]=>[-0.43042633479958736,0.10171814152043279] (9,-1; 9,-1), time: 30.0172s, #vars: 1941, #constrs: 1384, improved: True
Solving MIP for lay14_93, [-inf,inf]=>[-0.778907569398605,0.14686917932339286] (9,-1; 9,-1), time: 30.0105s, #vars: 1941, #constrs: 1384, improved: True
PGD done for relu layer 7
Run alpha-CROWN after refining layer 12 and relu idx 5
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 5 has unstable to stable neurons: [(24, -1), (59, -1), (18, 1), (13, -1), (17, -1), (29, 1), (92, -1), (96, -1), (83, -1), (94, 1), (95, -1), (63, -1), (10, -1), (99, -1), (68, 1), (86, 1), (35, 1), (73, -1), (81, 1), (39, -1), (45, -1), (34, -1), (5, -1), (38, -1), (65, -1), (51, -1), (74, -1), (54, -1), (0, -1), (82, -1), (85, 1), (40, 1), (57, -1), (78, -1), (28, -1), (72, 1), (60, 1), (80, -1), (20, -1), (66, 1), (3, 1), (33, -1), (9, 1), (67, -1), (75, -1), (91, 1), (89, -1), (19, -1), (14, -1), (56, -1), (16, -1), (37, -1), (47, 1), (79, -1), (12, -1), (76, -1), (70, 1), (55, 1), (15, 1), (52, 1), (27, 1), (22, 1), (6, -1), (25, 1)]
best_l after optimization: 8.96252727508545
beta sum per layer: []
alpha/beta optimization time: 15.264237880706787
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.97933292,  2.18964720,  1.93430090, -0.83198690,  1.66464829,
          1.59239614,  2.10452604, -0.41552734, -1.25481009]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 922.360595703125, ub improved 1281.9488525390625, time 125.8296
maximum relu layer improved by MIP so far 6
Linear(in_features=100, out_features=100, bias=True) 7 16 torch.Size([100])
sorted candidates ['lay16_15', 'lay16_87', 'lay16_11', 'lay16_35', 'lay16_64', 'lay16_20', 'lay16_51', 'lay16_95', 'lay16_0', 'lay16_19', 'lay16_99', 'lay16_34', 'lay16_82', 'lay16_76', 'lay16_65', 'lay16_27', 'lay16_86', 'lay16_80', 'lay16_44', 'lay16_4', 'lay16_14', 'lay16_2', 'lay16_41', 'lay16_53', 'lay16_30', 'lay16_70', 'lay16_83', 'lay16_31', 'lay16_68', 'lay16_58', 'lay16_79', 'lay16_98', 'lay16_69', 'lay16_71', 'lay16_23', 'lay16_40', 'lay16_89', 'lay16_1', 'lay16_84', 'lay16_73', 'lay16_74', 'lay16_88', 'lay16_39', 'lay16_85', 'lay16_92', 'lay16_47', 'lay16_9', 'lay16_77', 'lay16_29', 'lay16_57', 'lay16_63', 'lay16_46', 'lay16_25', 'lay16_50', 'lay16_37', 'lay16_66', 'lay16_78', 'lay16_5', 'lay16_3', 'lay16_28', 'lay16_12', 'lay16_93', 'lay16_18', 'lay16_90', 'lay16_56', 'lay16_97', 'lay16_94', 'lay16_59', 'lay16_32', 'lay16_7', 'lay16_13', 'lay16_36', 'lay16_17', 'lay16_96', 'lay16_43', 'lay16_24', 'lay16_21', 'lay16_33', 'lay16_52', 'lay16_6', 'lay16_60', 'lay16_75', 'lay16_91', 'lay16_55', 'lay16_54', 'lay16_38', 'lay16_81', 'lay16_8', 'lay16_45', 'lay16_26', 'lay16_72', 'lay16_16', 'lay16_61', 'lay16_48', 'lay16_10', 'lay16_67', 'lay16_49', 'lay16_62', 'lay16_42', 'lay16_22'] filter: 1.0
Solving MIP for lay16_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9146s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0940s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1377s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1408s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1662s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1710s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1759s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.9267s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0810s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4842s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9593s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1236s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9423s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 14.2045s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9255s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_11, [-inf,inf]=>[-0.8477301354358132,0.2682449622858464] (9,-1; 9,-1), time: 30.0895s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_95, [-inf,inf]=>[-0.7389823315244062,0.3947120867747233] (9,-1; 9,-1), time: 30.1100s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_76, [-inf,inf]=>[-0.3761933629723734,0.576035817421896] (9,-1; 9,-1), time: 30.1529s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_19, [-inf,inf]=>[-1.1006278100863665,0.5937254496217556] (9,-1; 9,-1), time: 30.2531s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_65, [-inf,inf]=>[-1.2226066485664429,0.14691644708603224] (9,-1; 9,-1), time: 30.3124s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_87, [-inf,inf]=>[-1.2031269675094765,0.20943761701198543] (9,-1; 9,-1), time: 30.3496s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_34, [-inf,inf]=>[-1.2835665791820714,0.3981279713060256] (9,-1; 9,-1), time: 30.4330s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8306s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9130s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8874s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_79, [-inf,inf]=>[1e-05,1.1798380921789358] (15,-1; 9,-1), time: 15.9370s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_14, [-inf,inf]=>[-1.686124187073001,0.05451907901544145] (9,-1; 9,-1), time: 30.0193s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_44, [-inf,inf]=>[-1.1749113830386804,0.1700850451328638] (9,-1; 9,-1), time: 30.0759s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_2, [-inf,inf]=>[-0.3923087886831216,0.4896924684651088] (9,-1; 9,-1), time: 30.0604s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9165s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_4, [-inf,inf]=>[-0.7761566227170286,0.19744627656944444] (9,-1; 9,-1), time: 30.3737s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0724s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_41, [-inf,inf]=>[-0.4293532631569501,0.7393085663493896] (9,-1; 9,-1), time: 30.1430s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9442s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_53, [-inf,inf]=>[-0.0829150350949318,1.0233262021796588] (9,-1; 9,-1), time: 30.0262s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3572s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_30, [-inf,inf]=>[-0.49714772122562634,0.3733195684544996] (9,-1; 9,-1), time: 30.4120s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9389s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.6003s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_68, [-inf,inf]=>[-0.7427437255444003,0.1792733317588509] (9,-1; 9,-1), time: 30.0194s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_29, [-inf,inf]=>[1e-05,2.087805914321214] (15,-1; 9,-1), time: 18.8524s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_74, [-inf,inf]=>[1e-05,1.5440487349419443] (15,-1; 9,-1), time: 20.8741s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.2629s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9807s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0041s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_23, [-inf,inf]=>[-0.32485110762830105,0.7647847043603462] (9,-1; 9,-1), time: 30.0234s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_40, [-inf,inf]=>[-0.023908374018660306,1.3165039766286994] (9,-1; 9,-1), time: 30.0542s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_1, [-inf,inf]=>[-0.5922708813796099,0.16295802343736293] (9,-1; 9,-1), time: 30.1805s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_88, [-inf,inf]=>[-0.09307087869808678,0.9633767451987957] (9,-1; 9,-1), time: 30.0486s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9896s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_39, [-inf,inf]=>[-1.4690594003357933,0.19109355627845478] (9,-1; 9,-1), time: 30.0746s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_92, [-inf,inf]=>[-0.48557782091156265,0.5077170386932703] (9,-1; 9,-1), time: 30.0568s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_47, [-inf,inf]=>[-0.4670804278793687,0.7107568498139304] (9,-1; 9,-1), time: 30.0558s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1077s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_77, [-inf,inf]=>[-0.6512594696582693,0.3154157100865032] (9,-1; 9,-1), time: 30.0179s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2003s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0713s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9952s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_57, [-inf,inf]=>[-0.2512297497708283,1.300220956090933] (9,-1; 9,-1), time: 30.0599s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_63, [-inf,inf]=>[-0.9616442131705503,0.315803402539206] (9,-1; 9,-1), time: 30.0270s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9414s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_25, [-inf,inf]=>[-0.12285451030284392,1.2679789057630282] (9,-1; 9,-1), time: 30.4578s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_50, [-inf,inf]=>[-1.0260727032359425,0.11150591670118615] (9,-1; 9,-1), time: 30.2499s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_37, [-inf,inf]=>[-0.5687952263537616,0.38495196235532786] (9,-1; 9,-1), time: 30.0681s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1663s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1482s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_66, [-inf,inf]=>[-0.03719201875190398,0.7208884431753323] (9,-1; 9,-1), time: 30.3411s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_43, [-inf,inf]=>[1e-05,2.7199046265655102] (15,-1; 9,-1), time: 16.2038s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_17, [-inf,inf]=>[1e-05,1.3624450173839484] (15,-1; 9,-1), time: 17.6525s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_5, [-inf,inf]=>[-0.6788127997764033,0.15616409979050705] (9,-1; 9,-1), time: 30.0761s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_91, [-inf,inf]=>[1e-05,3.448007422567259] (15,-1; 9,-1), time: 15.9599s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9181s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_60, [-inf,inf]=>[1e-05,1.0931590921307492] (15,-1; 9,-1), time: 18.9112s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8977s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_12, [-inf,inf]=>[-0.3677630770547854,0.31357196155641676] (9,-1; 9,-1), time: 30.0165s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_90, [-inf,inf]=>[-0.3892062516091694,0.3609437747753929] (9,-1; 9,-1), time: 30.0468s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_32, [-inf,inf]=>[-0.2873904703672551,0.5509708845161508] (9,-1; 9,-1), time: 30.0132s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_94, [-inf,inf]=>[-0.613932753970572,0.06027234018806464] (9,-1; 9,-1), time: 30.0896s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_97, [-inf,inf]=>[-0.8611089947163646,0.09127855372663796] (9,-1; 9,-1), time: 30.1174s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0032s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_13, [-inf,inf]=>[-0.5196725821969311,0.13660665421324414] (9,-1; 9,-1), time: 30.0859s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_96, [-inf,inf]=>[-0.7318677120404393,0.04008481988958357] (9,-1; 9,-1), time: 30.0771s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_36, [-inf,inf]=>[-0.3158345256311669,0.9128604628097611] (9,-1; 9,-1), time: 30.3947s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0601s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_21, [-inf,inf]=>[-0.7534394930813187,0.22517039818466494] (9,-1; 9,-1), time: 30.0141s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_52, [-inf,inf]=>[-0.9368766149898689,0.08169681037750176] (9,-1; 9,-1), time: 30.0252s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8853s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_75, [-inf,inf]=>[-0.13710461677836566,0.4441504415856423] (9,-1; 9,-1), time: 30.2813s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_54, [-inf,inf]=>[1e-05,1.8303575851410872] (15,-1; 9,-1), time: 18.5629s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_45, [-inf,inf]=>[1e-05,4.0690721680475495] (15,-1; 9,-1), time: 16.0620s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_72, [-inf,inf]=>[1e-05,2.4774492790021383] (15,-1; 9,-1), time: 15.9564s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_61, [-inf,inf]=>[1e-05,3.1365262764837922] (15,-1; 9,-1), time: 15.8859s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_10, [-inf,inf]=>[1e-05,1.8052817017004825] (15,-1; 9,-1), time: 16.1677s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_49, [-inf,inf]=>[1e-05,4.03913942546147] (15,-1; 9,-1), time: 15.9534s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_62, [-inf,inf]=>[1e-05,1.1896536561934727] (15,-1; 9,-1), time: 16.0270s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_55, [-inf,inf]=>[-0.7254855642453455,0.021475348042210463] (9,-1; 9,-1), time: 30.0113s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_67, [-inf,inf]=>[1e-05,1.400638200356872] (15,-1; 9,-1), time: 17.9230s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_38, [-inf,inf]=>[-0.18713296667781312,0.4021116985716877] (9,-1; 9,-1), time: 30.2769s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_26, [-inf,inf]=>[-0.15098597003523806,0.6802874413443055] (9,-1; 9,-1), time: 30.0124s, #vars: 2133, #constrs: 1622, improved: True
Solving MIP for lay16_16, [-inf,inf]=>[-0.8297177952625533,0.026876991637500406] (9,-1; 9,-1), time: 30.1642s, #vars: 2133, #constrs: 1622, improved: True
Run alpha-CROWN after refining layer 14 and relu idx 6
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
relu layer: 6 has unstable to stable neurons: [(20, -1), (5, -1), (92, -1), (75, -1), (11, -1), (72, 1), (59, -1), (87, -1), (51, -1), (54, -1), (8, -1), (85, -1), (10, -1), (35, -1), (86, -1), (16, -1), (1, 1), (19, -1), (56, -1), (41, 1), (37, 1), (77, -1), (30, -1), (82, 1), (4, -1), (74, -1), (33, 1), (96, 1), (45, -1), (79, 1), (63, -1), (9, -1), (23, 1), (73, 1), (70, 1), (57, -1), (32, -1), (52, -1), (25, -1), (53, -1), (65, 1), (13, -1), (38, 1), (49, -1), (80, 1), (48, -1), (43, 1), (89, 1), (17, -1), (34, -1), (58, 1), (27, 1), (97, 1), (94, -1)]
best_l after optimization: 12.382413864135742
beta sum per layer: []
alpha/beta optimization time: 14.563596963882446
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.27207232,  2.53183317,  2.31805205, -0.47801805,  2.09978175,
          1.88484001,  2.61696649, -0.05017281, -0.81294131]], device='cuda:0') None
MIP improved 100 nodes out of 100 unstable nodes, lb improved 1974.60888671875, ub improved 2705.3984375, time 122.2922
maximum relu layer improved by MIP so far 7
Linear(in_features=100, out_features=10, bias=True) 8 18 torch.Size([9, 1])
MIP finished with 705.6838483810425s
Run final alpha-CROWN after MIP solving on layer 18 and relu idx 8
0 /input torch.Size([1, 100])
1 /input.3 torch.Size([1, 100])
2 /input.7 torch.Size([1, 100])
3 /input.11 torch.Size([1, 100])
4 /input.15 torch.Size([1, 100])
5 /input.19 torch.Size([1, 100])
6 /input.23 torch.Size([1, 100])
7 /input.27 torch.Size([1, 100])
best_l after optimization: 14.480447769165039
beta sum per layer: []
alpha/beta optimization time: 13.96776008605957
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 2.39234042,  2.71236300,  2.60624266, -0.20057583,  2.34699464,
          1.99330294,  2.94667149,  0.17329621, -0.49018788]], device='cuda:0') None
Split layers:
  BoundLinear(name=/input.15, inputs=[/34, /9, /10]): [(BoundRelu(name=/36, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.27, inputs=[/40, /15, /16]): [(BoundRelu(name=/42, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.3, inputs=[/28, /3, /4]): [(BoundRelu(name=/30, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.11, inputs=[/32, /7, /8]): [(BoundRelu(name=/34, inputs=[/input.11]), 0)]
  BoundLinear(name=/input, inputs=[/26, /1, /2]): [(BoundRelu(name=/28, inputs=[/input]), 0)]
  BoundLinear(name=/input.19, inputs=[/36, /11, /12]): [(BoundRelu(name=/38, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.23, inputs=[/38, /13, /14]): [(BoundRelu(name=/40, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.7, inputs=[/30, /5, /6]): [(BoundRelu(name=/32, inputs=[/input.7]), 0)]
refined global lb: tensor([[ 2.39234042],
        [ 2.71236300],
        [ 2.60624266],
        [-0.20057583],
        [ 2.34699464],
        [ 1.99330294],
        [ 2.94667149],
        [ 0.17329621],
        [-0.49018788]], device='cuda:0') min: tensor(-0.49018788, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 154.93336367607117
##### Instance 0 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.3923404216766357.

Properties batch 1, size 1
Remaining timeout: 154.8051154613495
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.7123630046844482.

Properties batch 2, size 1
Remaining timeout: 154.72876811027527
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.6062426567077637.

Properties batch 3, size 1
Remaining timeout: 154.65228486061096
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.20057583]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundParams(name=/13, inputs=[])
  (/14): BoundParams(name=/14, inputs=[])
  (/15): BoundParams(name=/15, inputs=[])
  (/16): BoundParams(name=/16, inputs=[])
  (/17): BoundParams(name=/17, inputs=[])
  (/18): BoundParams(name=/18, inputs=[])
  (/19): BoundShape(name=/19, inputs=[/0])
  (/20): BoundConstant(name=/20, inputs=[])
  (/21): BoundGather(name=/21, inputs=[/19, /20])
  (/22): BoundConstant(name=/22, inputs=[])
  (/23): BoundUnsqueeze(name=/23, inputs=[/21])
  (/24): BoundUnsqueeze(name=/24, inputs=[/22])
  (/25): BoundConcat(name=/25, inputs=[/23, /24])
  (/26): BoundReshape(name=/26, inputs=[/0, /25])
  (/input): BoundLinear(name=/input, inputs=[/26, /1, /2])
  (/28): BoundRelu(name=/28, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/28, /3, /4])
  (/30): BoundRelu(name=/30, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/30, /5, /6])
  (/32): BoundRelu(name=/32, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/32, /7, /8])
  (/34): BoundRelu(name=/34, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/34, /9, /10])
  (/36): BoundRelu(name=/36, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/36, /11, /12])
  (/38): BoundRelu(name=/38, inputs=[/input.19])
  (/input.23): BoundLinear(name=/input.23, inputs=[/38, /13, /14])
  (/40): BoundRelu(name=/40, inputs=[/input.23])
  (/input.27): BoundLinear(name=/input.27, inputs=[/40, /15, /16])
  (/42): BoundRelu(name=/42, inputs=[/input.27])
  (/43): BoundLinear(name=/43, inputs=[/42, /17, /18])
)
Model prediction is: tensor([-0.80867857, -2.37042356, -2.23100662,  1.94248557, -3.40118361,
         6.53264761,  0.59598196, -3.86019969,  2.94964790,  1.43447471],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.20057583]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input.15,/input.27,/input.3,/input.11,/input,/input.19,/input.23,/input.7,/43
Split layers:
  BoundLinear(name=/input.19, inputs=[/36, /11, /12]): [(BoundRelu(name=/38, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.27, inputs=[/40, /15, /16]): [(BoundRelu(name=/42, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.11, inputs=[/32, /7, /8]): [(BoundRelu(name=/34, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.23, inputs=[/38, /13, /14]): [(BoundRelu(name=/40, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.15, inputs=[/34, /9, /10]): [(BoundRelu(name=/36, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.3, inputs=[/28, /3, /4]): [(BoundRelu(name=/30, inputs=[/input.3]), 0)]
  BoundLinear(name=/input, inputs=[/26, /1, /2]): [(BoundRelu(name=/28, inputs=[/input]), 0)]
  BoundLinear(name=/input.7, inputs=[/30, /5, /6]): [(BoundRelu(name=/32, inputs=[/input.7]), 0)]
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
Node /28 input 0: size torch.Size([100]) unstable 40
Node /30 input 0: size torch.Size([100]) unstable 35
Node /32 input 0: size torch.Size([100]) unstable 38
Node /34 input 0: size torch.Size([100]) unstable 38
Node /36 input 0: size torch.Size([100]) unstable 41
Node /38 input 0: size torch.Size([100]) unstable 36
Node /40 input 0: size torch.Size([100]) unstable 46
Node /42 input 0: size torch.Size([100]) unstable 45
-----------------
# of unstable neurons: 319
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.27, 47] 
split level 1: [/input.27, 34] 
split level 2: [/input.27, 92] 
split level 3: [/input.27, 95] 
split level 4: [/input.27, 11] 
split level 5: [/input.27, 44] 
pruning_in_iteration open status: True
ratio of positive domain = 52 / 64 = 0.8125
pruning-in-iteration extra time: 0.021657943725585938
Time: prepare 0.0167    beta_bound 0.8721    bound 0.8722    transfer 0.0008    finalize 0.0146    func 0.9042    
Accumulated time: func 0.9042    prepare 0.0177    bound 0.8722    beta_bound 0.8721    transfer 0.0008    finalize 0.0146    
batch bounding time:  0.9044458866119385
Current worst splitting domains lb-rhs (depth):
-0.20058 (6), -0.20058 (6), -0.20058 (6), -0.20058 (6), -0.20058 (6), -0.20058 (6), -0.20058 (6), -0.20058 (6), -0.04764 (6), -0.03616 (6), -0.00854 (6), -0.00445 (6), 
length of domains: 12
Time: pickout 0.0028    decision 0.3426    set_bounds 0.0028    solve 0.9045    add 0.0034    
Accumulated time: pickout 0.0028    decision 0.3426    set_bounds 0.0028    solve 0.9045    add 0.0034    
Current (lb-rhs): -0.2005758285522461
12 domains visited
Cumulative time: 1.2987303733825684

BaB round 2
batch: 12
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 98] [/input, 98] [/input, 98] [/input, 98] [/input, 98] [/input, 98] [/input, 98] [/input, 98] [/input, 98] [/input, 98] 
split level 1: [/input.23, 2] [/input.19, 1] [/input.19, 1] [/input.23, 2] [/input.23, 2] [/input.23, 2] [/input.23, 2] [/input.19, 1] [/input.19, 1] [/input.23, 2] 
split level 2: [/input.19, 1] [/input.27, 65] [/input.23, 2] [/input.19, 1] [/input.19, 1] [/input.19, 1] [/input.19, 1] [/input.23, 2] [/input.23, 2] [/input.19, 1] 
pruning_in_iteration open status: True
ratio of positive domain = 88 / 96 = 0.9166666666666666
pruning-in-iteration extra time: 0.022773265838623047
Time: prepare 0.0380    beta_bound 0.7026    bound 0.7028    transfer 0.0014    finalize 0.0286    func 0.7709    
Accumulated time: func 1.6752    prepare 0.0565    bound 1.5749    beta_bound 1.5747    transfer 0.0022    finalize 0.0432    
batch bounding time:  0.7713220119476318
Current worst splitting domains lb-rhs (depth):
-0.16998 (9), -0.16154 (9), -0.14274 (9), -0.13976 (9), -0.12838 (9), -0.11473 (9), -0.09906 (9), -0.07397 (9), 
length of domains: 8
Time: pickout 0.0024    decision 0.0590    set_bounds 0.0076    solve 0.7714    add 0.0028    
Accumulated time: pickout 0.0052    decision 0.4017    set_bounds 0.0104    solve 1.6758    add 0.0062    
Current (lb-rhs): -0.16998076438903809
20 domains visited
Cumulative time: 2.144364595413208

BaB round 3
batch: 8
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input, 42] [/input, 42] [/input, 42] [/input, 42] [/input, 42] [/input, 42] [/input, 42] [/input, 42] 
split level 1: [/input.11, 75] [/input.11, 75] [/input, 15] [/input, 15] [/input, 15] [/input, 15] [/input, 15] [/input, 15] 
split level 2: [/input, 15] [/input, 15] [/input.15, 46] [/input, 39] [/input.15, 46] [/input, 39] [/input.15, 46] [/input, 39] 
pruning_in_iteration open status: True
ratio of positive domain = 63 / 64 = 0.984375
pruning-in-iteration extra time: 0.0210113525390625
Time: prepare 0.0296    beta_bound 0.6945    bound 0.6946    transfer 0.0012    finalize 0.0223    func 0.7478    
Accumulated time: func 2.4230    prepare 0.0869    bound 2.2695    beta_bound 2.2692    transfer 0.0034    finalize 0.0654    
batch bounding time:  0.748028039932251
Current worst splitting domains lb-rhs (depth):
-0.00214 (12), 
length of domains: 1
Time: pickout 0.0033    decision 0.0671    set_bounds 0.0047    solve 0.7481    add 0.0029    
Accumulated time: pickout 0.0086    decision 0.4687    set_bounds 0.0151    solve 2.4239    add 0.0091    
Current (lb-rhs): -0.0021435022354125977
21 domains visited
Cumulative time: 2.9724385738372803

BaB round 4
batch: 1
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/input, 95] 
split level 1: [/input, 39] 
split level 2: [/input.7, 62] 
split level 3: [/input.15, 46] 
split level 4: [/input, 32] 
split level 5: [/input.3, 88] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 64 / 64 = 1.0
pruning-in-iteration extra time: 0.00011491775512695312
Time: prepare 0.0390    beta_bound 0.0189    bound 0.0190    transfer 0.0004    finalize 0.0217    func 0.0803    
Accumulated time: func 2.5032    prepare 0.1276    bound 2.2885    beta_bound 2.2881    transfer 0.0038    finalize 0.0872    
batch bounding time:  0.08047866821289062
length of domains: 0
Time: pickout 0.0041    decision 0.1259    set_bounds 0.0069    solve 0.0805    add 0.0003    
Accumulated time: pickout 0.0126    decision 0.5947    set_bounds 0.0220    solve 2.5044    add 0.0093    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
21 domains visited
Cumulative time: 3.1919662952423096


Properties batch 4, size 1
Remaining timeout: 151.2980296611786
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.346994638442993.

Properties batch 5, size 1
Remaining timeout: 151.2242181301117
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.9933029413223267.

Properties batch 6, size 1
Remaining timeout: 151.15401363372803
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.946671485900879.

Properties batch 7, size 1
Remaining timeout: 151.08959484100342
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.17329621315002441.

Properties batch 8, size 1
Remaining timeout: 151.02595138549805
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.49018788]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundParams(name=/13, inputs=[])
  (/14): BoundParams(name=/14, inputs=[])
  (/15): BoundParams(name=/15, inputs=[])
  (/16): BoundParams(name=/16, inputs=[])
  (/17): BoundParams(name=/17, inputs=[])
  (/18): BoundParams(name=/18, inputs=[])
  (/19): BoundShape(name=/19, inputs=[/0])
  (/20): BoundConstant(name=/20, inputs=[])
  (/21): BoundGather(name=/21, inputs=[/19, /20])
  (/22): BoundConstant(name=/22, inputs=[])
  (/23): BoundUnsqueeze(name=/23, inputs=[/21])
  (/24): BoundUnsqueeze(name=/24, inputs=[/22])
  (/25): BoundConcat(name=/25, inputs=[/23, /24])
  (/26): BoundReshape(name=/26, inputs=[/0, /25])
  (/input): BoundLinear(name=/input, inputs=[/26, /1, /2])
  (/28): BoundRelu(name=/28, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/28, /3, /4])
  (/30): BoundRelu(name=/30, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/30, /5, /6])
  (/32): BoundRelu(name=/32, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/32, /7, /8])
  (/34): BoundRelu(name=/34, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/34, /9, /10])
  (/36): BoundRelu(name=/36, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/36, /11, /12])
  (/38): BoundRelu(name=/38, inputs=[/input.19])
  (/input.23): BoundLinear(name=/input.23, inputs=[/38, /13, /14])
  (/40): BoundRelu(name=/40, inputs=[/input.23])
  (/input.27): BoundLinear(name=/input.27, inputs=[/40, /15, /16])
  (/42): BoundRelu(name=/42, inputs=[/input.27])
  (/43): BoundLinear(name=/43, inputs=[/42, /17, /18])
)
Model prediction is: tensor([-0.80867857, -2.37042356, -2.23100662,  1.94248557, -3.40118361,
         6.53264761,  0.59598196, -3.86019969,  2.94964790,  1.43447471],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /28 start_node /43 with alignment adjustment
setting alpha for layer /30 start_node /43 with alignment adjustment
setting alpha for layer /32 start_node /43 with alignment adjustment
setting alpha for layer /34 start_node /43 with alignment adjustment
setting alpha for layer /36 start_node /43 with alignment adjustment
setting alpha for layer /38 start_node /43 with alignment adjustment
setting alpha for layer /40 start_node /43 with alignment adjustment
setting alpha for layer /42 start_node /43 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.49018788]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input.15,/input.27,/input.3,/input.11,/input,/input.19,/input.23,/input.7,/43
Split layers:
  BoundLinear(name=/input, inputs=[/26, /1, /2]): [(BoundRelu(name=/28, inputs=[/input]), 0)]
  BoundLinear(name=/input.15, inputs=[/34, /9, /10]): [(BoundRelu(name=/36, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.19, inputs=[/36, /11, /12]): [(BoundRelu(name=/38, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.27, inputs=[/40, /15, /16]): [(BoundRelu(name=/42, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.7, inputs=[/30, /5, /6]): [(BoundRelu(name=/32, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.23, inputs=[/38, /13, /14]): [(BoundRelu(name=/40, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.11, inputs=[/32, /7, /8]): [(BoundRelu(name=/34, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.3, inputs=[/28, /3, /4]): [(BoundRelu(name=/30, inputs=[/input.3]), 0)]
Keeping slopes for these layers: ['/43']
Keeping slopes for these layers: ['/43']
Node /28 input 0: size torch.Size([100]) unstable 40
Node /30 input 0: size torch.Size([100]) unstable 35
Node /32 input 0: size torch.Size([100]) unstable 38
Node /34 input 0: size torch.Size([100]) unstable 38
Node /36 input 0: size torch.Size([100]) unstable 41
Node /38 input 0: size torch.Size([100]) unstable 36
Node /40 input 0: size torch.Size([100]) unstable 46
Node /42 input 0: size torch.Size([100]) unstable 45
-----------------
# of unstable neurons: 319
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.27, 41] 
split level 1: [/input.27, 19] 
split level 2: [/input.27, 95] 
split level 3: [/input.27, 11] 
split level 4: [/input.27, 87] 
split level 5: [/input.27, 63] 
pruning_in_iteration open status: True
ratio of positive domain = 48 / 64 = 0.75
pruning-in-iteration extra time: 0.022240638732910156
Time: prepare 0.0347    beta_bound 0.6620    bound 0.6621    transfer 0.0008    finalize 0.0148    func 0.7127    
Accumulated time: func 0.7127    prepare 0.0361    bound 0.6621    beta_bound 0.6620    transfer 0.0008    finalize 0.0148    
batch bounding time:  0.7128267288208008
Current worst splitting domains lb-rhs (depth):
-0.49019 (6), -0.49019 (6), -0.49019 (6), -0.49019 (6), -0.49019 (6), -0.43520 (6), -0.41921 (6), -0.38801 (6), -0.33341 (6), -0.27724 (6), -0.22552 (6), -0.15317 (6), -0.11554 (6), -0.11369 (6), -0.10749 (6), -0.09189 (6), 
length of domains: 16
Time: pickout 0.0039    decision 0.1140    set_bounds 0.0055    solve 0.7128    add 0.0016    
Accumulated time: pickout 0.0039    decision 0.1140    set_bounds 0.0055    solve 0.7128    add 0.0016    
Current (lb-rhs): -0.4901878833770752
16 domains visited
Cumulative time: 0.8600156307220459

BaB round 2
batch: 16
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input, 98] [/input, 98] [/input, 98] [/input, 98] [/input, 98] [/input, 98] [/input, 98] [/input, 98] [/input, 98] [/input, 98] 
split level 1: [/input.23, 28] [/input.23, 2] [/input.23, 28] [/input.23, 2] [/input.23, 28] [/input.19, 30] [/input.23, 28] [/input.23, 28] [/input.23, 46] [/input.23, 28] 
pruning_in_iteration open status: True
ratio of positive domain = 47 / 64 = 0.734375
pruning-in-iteration extra time: 0.01827096939086914
Time: prepare 0.0267    beta_bound 0.6220    bound 0.6221    transfer 0.0008    finalize 0.0172    func 0.6668    
Accumulated time: func 1.3795    prepare 0.0636    bound 1.2842    beta_bound 1.2840    transfer 0.0016    finalize 0.0320    
batch bounding time:  0.6670694351196289
Current worst splitting domains lb-rhs (depth):
-0.49019 (8), -0.44162 (8), -0.43594 (8), -0.41812 (8), -0.38397 (8), -0.25694 (8), -0.22340 (8), -0.19509 (8), -0.19001 (8), -0.14734 (8), -0.14397 (8), -0.11594 (8), -0.09322 (8), -0.08972 (8), -0.06614 (8), -0.05720 (8), -0.03065 (8), 
length of domains: 17
Time: pickout 0.0023    decision 0.0594    set_bounds 0.0035    solve 0.6671    add 0.0026    
Accumulated time: pickout 0.0061    decision 0.1735    set_bounds 0.0090    solve 1.3799    add 0.0042    
Current (lb-rhs): -0.4901878833770752
33 domains visited
Cumulative time: 1.596043586730957

BaB round 3
batch: 17
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input, 15] [/input, 15] [/input.19, 30] [/input, 15] [/input, 15] [/input, 15] [/input, 42] [/input, 42] [/input.23, 91] [/input, 15] 
split level 1: [/input.23, 47] [/input.23, 46] [/input, 15] [/input.23, 46] [/input.23, 47] [/input.23, 46] [/input, 15] [/input, 15] [/input.23, 22] [/input.3, 85] 
pruning_in_iteration open status: True
ratio of positive domain = 55 / 68 = 0.8088235294117647
pruning-in-iteration extra time: 0.019693374633789062
Time: prepare 0.0263    beta_bound 0.6529    bound 0.6530    transfer 0.0010    finalize 0.0189    func 0.6993    
Accumulated time: func 2.0789    prepare 0.0909    bound 1.9372    beta_bound 1.9369    transfer 0.0026    finalize 0.0509    
batch bounding time:  0.6995081901550293
Current worst splitting domains lb-rhs (depth):
-0.49019 (10), -0.33983 (10), -0.31396 (10), -0.27695 (10), -0.22978 (10), -0.16182 (10), -0.15244 (10), -0.15159 (10), -0.13319 (10), -0.11046 (10), -0.08719 (10), -0.02023 (10), -0.01643 (10), 
length of domains: 13
Time: pickout 0.0016    decision 0.0657    set_bounds 0.0074    solve 0.6995    add 0.0024    
Accumulated time: pickout 0.0078    decision 0.2392    set_bounds 0.0164    solve 2.0795    add 0.0066    
Current (lb-rhs): -0.4901878833770752
46 domains visited
Cumulative time: 2.3742423057556152

BaB round 4
batch: 13
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/input, 42] [/input, 42] [/input.23, 46] [/input.3, 85] [/input, 42] [/input, 42] [/input.19, 30] [/input, 42] [/input, 42] [/input, 42] 
split level 1: [/input, 39] [/input.23, 47] [/input, 32] [/input, 32] [/input.23, 47] [/input, 32] [/input.23, 2] [/input, 39] [/input.19, 30] [/input.23, 2] 
pruning_in_iteration open status: True
ratio of positive domain = 46 / 52 = 0.8846153846153846
pruning-in-iteration extra time: 0.02117443084716797
Time: prepare 0.0221    beta_bound 0.6602    bound 0.6603    transfer 0.0006    finalize 0.0121    func 0.6951    
Accumulated time: func 2.7740    prepare 0.1140    bound 2.5975    beta_bound 2.5970    transfer 0.0032    finalize 0.0629    
batch bounding time:  0.6952598094940186
Current worst splitting domains lb-rhs (depth):
-0.32889 (12), -0.13447 (12), -0.13328 (12), -0.05779 (12), -0.05421 (12), -0.02193 (12), 
length of domains: 6
Time: pickout 0.0025    decision 0.0564    set_bounds 0.0050    solve 0.6953    add 0.0014    
Accumulated time: pickout 0.0102    decision 0.2955    set_bounds 0.0214    solve 2.7748    add 0.0080    
Current (lb-rhs): -0.32889223098754883
52 domains visited
Cumulative time: 3.1357619762420654

BaB round 5
batch: 6
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/input.19, 30] [/input.15, 75] [/input, 42] [/input.19, 30] [/input.15, 75] [/input.15, 75] 
split level 1: [/input.3, 85] [/input, 32] [/input.15, 75] [/input.3, 85] [/input, 32] [/input, 32] 
split level 2: [/input, 32] [/input, 39] [/input.23, 46] [/input, 32] [/input.23, 47] [/input, 39] 
split level 3: [/input.3, 88] [/input.23, 2] [/input.23, 91] [/input.3, 88] [/input, 39] [/input.3, 88] 

all verified at 10th iter
pruning_in_iteration open status: True
ratio of positive domain = 96 / 96 = 1.0
pruning-in-iteration extra time: 0.010536670684814453
Time: prepare 0.0354    beta_bound 0.3311    bound 0.3312    transfer 0.0009    finalize 0.0203    func 0.3879    
Accumulated time: func 3.1619    prepare 0.1503    bound 2.9287    beta_bound 2.9281    transfer 0.0041    finalize 0.0832    
batch bounding time:  0.38799405097961426
length of domains: 0
Time: pickout 0.0015    decision 0.0622    set_bounds 0.0038    solve 0.3880    add 0.0002    
Accumulated time: pickout 0.0118    decision 0.3577    set_bounds 0.0252    solve 3.1628    add 0.0082    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
52 domains visited
Cumulative time: 3.594280958175659

Result: safe in 752.7428 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):752.7352995856332, max time: 752.7428269386292
mean time for verified SAFE instances(total 1): 752.7428269386292, max time: 752.7428269386292
safe (total 1), index: [0]
