Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_6_200
  path: mnist_6_200_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 15
  end: 16
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.015
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 17:43:03 2023 on zeratul
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=200, bias=True)
  (2): ReLU()
  (3): Linear(in_features=200, out_features=200, bias=True)
  (4): ReLU()
  (5): Linear(in_features=200, out_features=200, bias=True)
  (6): ReLU()
  (7): Linear(in_features=200, out_features=200, bias=True)
  (8): ReLU()
  (9): Linear(in_features=200, out_features=200, bias=True)
  (10): ReLU()
  (11): Linear(in_features=200, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226457)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_6_200]_start=15_end=16_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundShape(name=/13, inputs=[/0])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundGather(name=/15, inputs=[/13, /14])
  (/16): BoundConstant(name=/16, inputs=[])
  (/17): BoundUnsqueeze(name=/17, inputs=[/15])
  (/18): BoundUnsqueeze(name=/18, inputs=[/16])
  (/19): BoundConcat(name=/19, inputs=[/17, /18])
  (/20): BoundReshape(name=/20, inputs=[/0, /19])
  (/input): BoundLinear(name=/input, inputs=[/20, /1, /2])
  (/22): BoundRelu(name=/22, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/22, /3, /4])
  (/24): BoundRelu(name=/24, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/24, /5, /6])
  (/26): BoundRelu(name=/26, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/26, /7, /8])
  (/28): BoundRelu(name=/28, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/28, /9, /10])
  (/30): BoundRelu(name=/30, inputs=[/input.15])
  (/31): BoundLinear(name=/31, inputs=[/30, /11, /12])
)
Model prediction is: tensor([[-3.25121307, -1.79723155, -1.20159960,  3.47173071, -2.67189574,
          6.15487766, -1.72229826, -1.42275929,  0.09232458,  1.46565998]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 62 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [62]; unstable size 62; total size 200 (torch.Size([1, 200]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [130]; unstable size 130; total size 200 (torch.Size([1, 200]))
layer /26 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /26 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([200]); unstable size 188; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-23.58606529, -34.39701843, -36.64447784, -32.80580902, -33.41138458,
         -26.29252625, -38.70899582, -35.63383865, -37.37446594]],
       device='cuda:0') None
best_l after optimization: -218.48043823242188
alpha/beta optimization time: 7.676279306411743
initial alpha-CROWN bounds: tensor([[-16.24146652, -24.74615669, -27.08570862, -23.85051155, -24.03910637,
         -19.38620186, -28.56126976, -26.47014999, -28.09986115]],
       device='cuda:0')
Worst class: (+ rhs) -28.561269760131836
Split layers:
  BoundLinear(name=/input.15, inputs=[/28, /9, /10]): [(BoundRelu(name=/30, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.3, inputs=[/22, /3, /4]): [(BoundRelu(name=/24, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.11, inputs=[/26, /7, /8]): [(BoundRelu(name=/28, inputs=[/input.11]), 0)]
  BoundLinear(name=/input, inputs=[/20, /1, /2]): [(BoundRelu(name=/22, inputs=[/input]), 0)]
  BoundLinear(name=/input.7, inputs=[/24, /5, /6]): [(BoundRelu(name=/26, inputs=[/input.7]), 0)]
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750000149011612, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.25121307, -1.79723155, -1.20159960,  3.47173071, -2.67189574,
          6.15487766, -1.72229826, -1.42275929,  0.09232458,  1.46565998]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.59212446, -1.47956789, -0.95566779,  3.88210440, -2.14192343,
           5.48387194, -2.22587466, -1.38508070, -0.15767324,  1.40862548],
         [-3.59212446, -1.47956789, -0.95566779,  3.88210440, -2.14192343,
           5.48387194, -2.22587466, -1.38508070, -0.15767324,  1.40862548]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[9.07599640, 6.96343994, 6.43953991, 1.60176754, 7.62579536,
          7.70974636, 6.86895275, 5.64154530, 4.07524633]]], device='cuda:0')
number of violation:  0
Attack finished in 0.8228 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 62 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [62]; unstable size 62; total size 200 (torch.Size([1, 200]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [130]; unstable size 130; total size 200 (torch.Size([1, 200]))
layer /26 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /26 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([200]); unstable size 188; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2024-02-29
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_45', 'lay4_166', 'lay4_104', 'lay4_192', 'lay4_8', 'lay4_4', 'lay4_42', 'lay4_23', 'lay4_15', 'lay4_18', 'lay4_87', 'lay4_150', 'lay4_73', 'lay4_187', 'lay4_1', 'lay4_32', 'lay4_108', 'lay4_179', 'lay4_178', 'lay4_136', 'lay4_93', 'lay4_156', 'lay4_148', 'lay4_10', 'lay4_50', 'lay4_20', 'lay4_172', 'lay4_17', 'lay4_121', 'lay4_168', 'lay4_102', 'lay4_26', 'lay4_47', 'lay4_169', 'lay4_116', 'lay4_13', 'lay4_12', 'lay4_82', 'lay4_29', 'lay4_127', 'lay4_56', 'lay4_149', 'lay4_162', 'lay4_174', 'lay4_177', 'lay4_181', 'lay4_154', 'lay4_97', 'lay4_193', 'lay4_59', 'lay4_77', 'lay4_16', 'lay4_142', 'lay4_86', 'lay4_182', 'lay4_38', 'lay4_24', 'lay4_41', 'lay4_190', 'lay4_28', 'lay4_21'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/Verifier_Development/complete_verifier/data_utils.py:257: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4960s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4667s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.16488718699675833,0.6590148315811554] (2,-1; 2,-1), time: 3.3790s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[-0.6245546488172805,0.3275478774911439] (2,-1; 2,-1), time: 4.3953s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_73, [-inf,inf]=>[-0.34403604867701193,0.4205062631824657] (2,-1; 2,-1), time: 4.5363s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-0.6402952054951929,0.302703531467003] (2,-1; 2,-1), time: 4.6018s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4534s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_179, [-inf,inf]=>[-0.36625903472076227,0.3947279314911629] (2,-1; 2,-1), time: 4.1923s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5942s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[-0.6875811030512916,0.019075691602875436] (2,-1; 2,-1), time: 5.2198s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.36119929997696876,0.370345761780235] (2,-1; 2,-1), time: 5.2666s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-0.32616052073639107,0.37983901211910065] (2,-1; 2,-1), time: 5.4507s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4890s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_166, [-inf,inf]=>[-0.2451761983839646,0.47672722185599226] (2,-1; 2,-1), time: 5.8296s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.3690050665437191,0.39290044649328887] (2,-1; 2,-1), time: 5.9923s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.5439934461971268,0.12247507383597794] (2,-1; 2,-1), time: 6.1281s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-0.35815094872862946,0.32510556134654894] (2,-1; 2,-1), time: 6.1767s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4258s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9750s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_192, [-inf,inf]=>[-0.28136594040336627,0.39802567787511606] (2,-1; 2,-1), time: 6.4653s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-0.5260425401950443,0.18351590010794477] (2,-1; 2,-1), time: 6.4977s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_121, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9133s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-0.20603474049581083,0.4486757282799409] (2,-1; 2,-1), time: 6.9512s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4316s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[-0.45068186651641984,0.23633411699762433] (2,-1; 2,-1), time: 7.3196s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2112s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9741s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_50, [-inf,inf]=>[-0.03602788044651256,0.7614514681698168] (2,-1; 2,-1), time: 3.1565s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-0.1828674000618973,0.41677764737254586] (2,-1; 2,-1), time: 5.2302s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_148, [-inf,inf]=>[-0.5847935314121513,0.02250903566395296] (2,-1; 2,-1), time: 4.5612s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[1e-05,1.2077735050292326] (15,-1; 2,-1), time: 1.7512s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-0.600200468286327,0.0016078413718108677] (2,-1; 2,-1), time: 5.6235s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_127, [-inf,inf]=>[-0.2884703661541144,0.38388252090381486] (2,-1; 2,-1), time: 3.3944s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_116, [-inf,inf]=>[-0.4233468334143938,0.2054804574748979] (2,-1; 2,-1), time: 4.0563s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.3367282352914346,0.26029445891308933] (2,-1; 2,-1), time: 4.2236s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[-0.23271288983852179,0.44682022952521233] (2,-1; 2,-1), time: 4.9840s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3963s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_10, [-inf,inf]=>[-0.7575237302293246,0.005774045794942283] (2,-1; 2,-1), time: 6.1295s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_172, [-inf,inf]=>[-0.5132102402694385,0.16047293202823018] (2,-1; 2,-1), time: 6.0704s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_47, [-inf,inf]=>[-0.5733918852783756,0.12348739202687377] (2,-1; 2,-1), time: 5.6174s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_56, [-inf,inf]=>[-0.17611795857785165,0.4115401077456666] (2,-1; 2,-1), time: 5.0280s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-0.07251729376683054,0.5448399261840604] (2,-1; 2,-1), time: 5.2561s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_169, [-inf,inf]=>[-0.5620763296217132,0.16116205941639092] (2,-1; 2,-1), time: 6.3538s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_29, [-inf,inf]=>[-0.13609976648889463,0.4696026740839969] (2,-1; 2,-1), time: 5.8585s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5073s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3289s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_97, [-inf,inf]=>[-0.6997921497811066,0.12317090249291283] (2,-1; 2,-1), time: 3.9502s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_182, [-inf,inf]=>[-0.4247277396311952,0.34356756631206525] (2,-1; 2,-1), time: 2.8123s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_149, [-inf,inf]=>[-0.2290904188800451,0.30237164864114247] (2,-1; 2,-1), time: 6.9887s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_154, [-inf,inf]=>[-0.3865801275769847,0.2588709447509077] (2,-1; 2,-1), time: 4.5131s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[1e-05,0.7142086807177612] (15,-1; 2,-1), time: 3.8571s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_77, [-inf,inf]=>[-0.16431114003583389,0.6081943553897973] (2,-1; 2,-1), time: 4.9156s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_181, [-inf,inf]=>[-0.5671826922241112,0.04987022379090082] (2,-1; 2,-1), time: 6.2295s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_142, [-inf,inf]=>[-0.22069736434658618,0.40556810696187523] (2,-1; 2,-1), time: 4.7850s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_177, [-inf,inf]=>[-0.2021777120706958,0.4496816940713122] (2,-1; 2,-1), time: 7.1123s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_190, [-inf,inf]=>[-0.5840728826653074,0.1672178236678793] (2,-1; 2,-1), time: 3.6701s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_21, [-inf,inf]=>[1e-05,0.7516596881341792] (15,-1; 2,-1), time: 3.4182s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[1e-05,0.8840209405196002] (15,-1; 2,-1), time: 4.0843s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.5448832370576431,0.058066353043605204] (2,-1; 2,-1), time: 5.1113s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-0.135215149729141,0.5228025312633592] (2,-1; 2,-1), time: 5.8886s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[-0.319434739118866,0.24199035283007153] (2,-1; 2,-1), time: 14.1811s, #vars: 1277, #constrs: 538, improved: True
PGD done for relu layer 2
MIP improved 61 nodes out of 61 unstable nodes, lb improved 10.5828857421875, ub improved 11.397916793823242, time 26.7278
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_9', 'lay6_174', 'lay6_188', 'lay6_102', 'lay6_139', 'lay6_118', 'lay6_152', 'lay6_28', 'lay6_190', 'lay6_56', 'lay6_136', 'lay6_185', 'lay6_141', 'lay6_74', 'lay6_156', 'lay6_2', 'lay6_131', 'lay6_117', 'lay6_176', 'lay6_53', 'lay6_163', 'lay6_173', 'lay6_31', 'lay6_171', 'lay6_168', 'lay6_19', 'lay6_164', 'lay6_167', 'lay6_165', 'lay6_124', 'lay6_81', 'lay6_6', 'lay6_108', 'lay6_104', 'lay6_29', 'lay6_154', 'lay6_15', 'lay6_175', 'lay6_103', 'lay6_192', 'lay6_162', 'lay6_89', 'lay6_150', 'lay6_144', 'lay6_87', 'lay6_65', 'lay6_105', 'lay6_187', 'lay6_30', 'lay6_67', 'lay6_91', 'lay6_170', 'lay6_169', 'lay6_92', 'lay6_36', 'lay6_199', 'lay6_123', 'lay6_193', 'lay6_5', 'lay6_191', 'lay6_55', 'lay6_26', 'lay6_27', 'lay6_186', 'lay6_40', 'lay6_189', 'lay6_146', 'lay6_10', 'lay6_96', 'lay6_57', 'lay6_37', 'lay6_88', 'lay6_97', 'lay6_196', 'lay6_49', 'lay6_93', 'lay6_90', 'lay6_178', 'lay6_16', 'lay6_18', 'lay6_64', 'lay6_43', 'lay6_135', 'lay6_70', 'lay6_47', 'lay6_12', 'lay6_95', 'lay6_39', 'lay6_76', 'lay6_22', 'lay6_54', 'lay6_112', 'lay6_125', 'lay6_133', 'lay6_121', 'lay6_137', 'lay6_83', 'lay6_129', 'lay6_127', 'lay6_61', 'lay6_138', 'lay6_194', 'lay6_80', 'lay6_114', 'lay6_52', 'lay6_25', 'lay6_99', 'lay6_34', 'lay6_4', 'lay6_77', 'lay6_51', 'lay6_182', 'lay6_46', 'lay6_63', 'lay6_177', 'lay6_159', 'lay6_11', 'lay6_130', 'lay6_58', 'lay6_7', 'lay6_198', 'lay6_86', 'lay6_42', 'lay6_69', 'lay6_1'] filter: 1.0
Solving MIP for lay6_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5973s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_141, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1706s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2635s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5889s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_185, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1854s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5899s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4737s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3927s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5007s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.9916s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5258s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.8135s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_152, [-inf,inf]=>[-0.4567550071628374,0.11437118666164695] (9,-1; 9,-1), time: 30.0188s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-0.3526979472125312,0.3169548804432019] (9,-1; 9,-1), time: 30.0238s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.21100329643182367,0.41004724181621965] (9,-1; 9,-1), time: 30.0218s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-0.03439398313198034,0.48483013712680495] (9,-1; 9,-1), time: 30.0251s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-0.5154227825596401,0.12756333802963185] (9,-1; 9,-1), time: 30.0357s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-0.2191285533660205,0.37326567838420555] (9,-1; 9,-1), time: 30.0610s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-0.23257696514237372,0.33063097509343975] (9,-1; 9,-1), time: 30.0765s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_188, [-inf,inf]=>[-0.557167548791531,0.042103091290371916] (9,-1; 9,-1), time: 30.0831s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_154, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5174s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-0.35148526710572914,0.2470498883099538] (9,-1; 9,-1), time: 30.7282s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_174, [-inf,inf]=>[-0.48774786282860616,0.3205682037383141] (9,-1; 9,-1), time: 30.8354s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-0.18063861410708107,0.4345816821308629] (9,-1; 9,-1), time: 30.3268s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4252s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[1e-05,0.5304662858719931] (15,-1; 9,-1), time: 29.5239s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4844s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4548s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2354s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[-0.25315055778955076,0.35983852450056797] (9,-1; 9,-1), time: 30.2759s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-0.03373517784244973,0.68105714320952] (9,-1; 9,-1), time: 30.4076s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4342s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7674s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5639s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9483s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7849s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_164, [-inf,inf]=>[-0.46261570919304507,0.032031505858015404] (9,-1; 9,-1), time: 30.0148s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.6490s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.1760s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4692s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5518s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.5596243721957302,0.08476330500042949] (9,-1; 9,-1), time: 30.3006s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6012s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5089s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4243s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5109s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6265s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_108, [-inf,inf]=>[-0.6699055659133162,0.07636012615582087] (9,-1; 2,-1), time: 25.4511s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4736s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.13629878510698148,0.6213893103479082] (2,-1; 9,-1), time: 26.4241s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-0.35472003361240945,0.19898706201846178] (9,-1; 2,-1), time: 28.0005s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5516s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_104, [-inf,inf]=>[-0.40808518885258976,0.18962428088234495] (9,-1; 9,-1), time: 30.0125s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_175, [-inf,inf]=>[-0.23179673160559583,0.4314192757312821] (2,-1; 2,-1), time: 29.3659s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.5644218185946591,0.017532974211433835] (9,-1; 9,-1), time: 30.3222s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-0.5967670555195079,0.041838521899303] (9,-1; 9,-1), time: 30.4378s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_103, [-inf,inf]=>[-0.5589627638848919,0.025884405812865198] (9,-1; 9,-1), time: 30.0873s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-0.5864833000950632,0.14403472903973605] (9,-1; 9,-1), time: 30.0209s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.26498934217270004,0.3797787494817674] (9,-1; 2,-1), time: 25.6971s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4803s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4578s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-0.21302931037146833,0.4299581030425209] (9,-1; 9,-1), time: 30.0163s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4719s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-0.3024198751197246,0.09431570334890893] (9,-1; 9,-1), time: 30.0254s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.49376653482211563,0.05350134751141231] (9,-1; 9,-1), time: 30.0212s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.031376683826985524,0.6535706605177981] (9,-1; 9,-1), time: 30.0142s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3903s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5284s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.9284s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4967s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-0.3934261291219763,0.16302746824966022] (9,-1; 9,-1), time: 30.0207s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-0.3251565432641014,0.2211344063230325] (9,-1; 2,-1), time: 29.1034s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5045s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[1e-05,0.8753679284137311] (15,-1; 9,-1), time: 15.5420s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_189, [-inf,inf]=>[-0.49092526046682083,0.20962262059499845] (9,-1; 2,-1), time: 26.0024s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_196, [-inf,inf]=>[-0.5240816156080341,0.16756985599254737] (9,-1; 2,-1), time: 22.4914s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[1e-05,0.652489479605437] (15,-1; 9,-1), time: 16.3924s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_112, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3576s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_133, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4508s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-0.12923109724882878,0.43769393834213827] (9,-1; 9,-1), time: 30.0198s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[1e-05,0.6037103235695218] (15,-1; 9,-1), time: 24.7566s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.1976600771782691,0.3045610576315659] (9,-1; 9,-1), time: 30.8024s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-0.42940526997517253,0.36510318889587007] (9,-1; 9,-1), time: 30.0199s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.4015772495209638,0.0661200220992188] (9,-1; 9,-1), time: 30.0161s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.20702580510930585,0.48454880230347264] (9,-1; 9,-1), time: 30.0230s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5699s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-0.09694602039238422,0.535976512302782] (9,-1; 9,-1), time: 30.0784s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-0.527924964080226,0.04578088406623253] (9,-1; 9,-1), time: 30.0290s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[1e-05,1.0499769842962103] (15,-1; 2,-1), time: 10.4363s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[1e-05,0.5945873951846122] (15,-1; 9,-1), time: 20.1923s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.6240s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.2652s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6331s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_114, [-inf,inf]=>[1e-05,0.9084536934416153] (15,-1; 2,-1), time: 8.7601s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4711s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-0.6120778333913879,0.006517142381752321] (9,-1; 9,-1), time: 30.0413s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[1e-05,0.7940990495413034] (15,-1; 9,-1), time: 19.3135s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-0.3673676370882924,0.3044279653819711] (9,-1; 9,-1), time: 30.8035s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[-0.24688743747166272,0.35830961341862266] (9,-1; 9,-1), time: 30.1542s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[-0.09375383694180149,0.45857226879390844] (9,-1; 9,-1), time: 30.0234s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[1e-05,0.7819550438180578] (15,-1; 9,-1), time: 15.5999s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[1e-05,1.090305148507734] (15,-1; 2,-1), time: 6.7370s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[1e-05,0.8985650476221029] (15,-1; 2,-1), time: 9.9624s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[1e-05,0.8043770458871653] (15,-1; 9,-1), time: 16.2821s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_137, [-inf,inf]=>[-0.5201728390549545,0.06787290806049646] (9,-1; 2,-1), time: 26.1645s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.35968192394969095,0.2562385381568929] (9,-1; 9,-1), time: 30.0353s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-0.4638417125860094,0.07806292837330399] (9,-1; 9,-1), time: 30.0392s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_129, [-inf,inf]=>[-0.37492792210720166,0.14907414297838373] (9,-1; 9,-1), time: 30.1515s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[1e-05,0.8601225180542165] (15,-1; 9,-1), time: 15.4681s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_177, [-inf,inf]=>[1e-05,0.9756438110174779] (15,-1; 9,-1), time: 15.4784s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_127, [-inf,inf]=>[-0.48569487075004786,0.08675940928606252] (9,-1; 9,-1), time: 30.5540s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_159, [-inf,inf]=>[1e-05,1.0588238618097396] (15,-1; 9,-1), time: 15.4785s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[1e-05,1.1259350053815633] (15,-1; 9,-1), time: 15.4543s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_130, [-inf,inf]=>[1e-05,1.1707501796638649] (15,-1; 9,-1), time: 15.5897s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[1e-05,0.8145567749130157] (15,-1; 9,-1), time: 15.4592s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[1e-05,0.8053075358433821] (15,-1; 9,-1), time: 15.6482s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_182, [-inf,inf]=>[-0.3525952174477873,0.1745480120322608] (9,-1; 2,-1), time: 24.3007s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_198, [-inf,inf]=>[1e-05,1.2187535035316348] (15,-1; 9,-1), time: 15.4162s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[1e-05,0.9252879923770694] (15,-1; 9,-1), time: 15.4359s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.47320220070515107,0.01758918108818758] (9,-1; 9,-1), time: 30.0209s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[1e-05,0.6411440267280895] (15,-1; 9,-1), time: 24.9380s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.41769560704144343,0.15333826858317123] (9,-1; 9,-1), time: 30.5779s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[1e-05,0.9875170652385157] (15,-1; 9,-1), time: 15.3873s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[1e-05,0.9381521813498526] (15,-1; 9,-1), time: 15.4111s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.020261261980499816,0.6119626121867897] (9,-1; 9,-1), time: 30.0318s, #vars: 1563, #constrs: 867, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(32, -1), (108, -1), (136, -1), (156, -1), (20, -1), (17, -1), (121, -1), (102, -1), (26, -1), (13, -1), (82, -1), (174, 1), (193, -1), (16, 1), (24, -1), (41, -1), (28, 1), (21, 1)]
best_l after optimization: -51.09186553955078
beta sum per layer: []
alpha/beta optimization time: 7.4753100872039795
alpha-CROWN with intermediate bounds by MIP: tensor([[-2.07354164, -5.76697493, -6.45252895, -7.39844131, -5.21368313,
         -3.43683052, -6.21065474, -6.54008293, -7.99912643]], device='cuda:0') None
MIP improved 125 nodes out of 125 unstable nodes, lb improved 27.88275146484375, ub improved 37.43560791015625, time 150.8893
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_146', 'lay8_181', 'lay8_32', 'lay8_36', 'lay8_7', 'lay8_176', 'lay8_0', 'lay8_140', 'lay8_77', 'lay8_59', 'lay8_38', 'lay8_69', 'lay8_112', 'lay8_171', 'lay8_3', 'lay8_1', 'lay8_157', 'lay8_161', 'lay8_34', 'lay8_58', 'lay8_111', 'lay8_50', 'lay8_73', 'lay8_55', 'lay8_114', 'lay8_166', 'lay8_19', 'lay8_131', 'lay8_65', 'lay8_109', 'lay8_115', 'lay8_180', 'lay8_48', 'lay8_4', 'lay8_120', 'lay8_108', 'lay8_145', 'lay8_129', 'lay8_104', 'lay8_25', 'lay8_196', 'lay8_11', 'lay8_121', 'lay8_35', 'lay8_82', 'lay8_76', 'lay8_2', 'lay8_128', 'lay8_141', 'lay8_149', 'lay8_86', 'lay8_167', 'lay8_40', 'lay8_27', 'lay8_95', 'lay8_133', 'lay8_117', 'lay8_184', 'lay8_135', 'lay8_172', 'lay8_143', 'lay8_91', 'lay8_179', 'lay8_137', 'lay8_88', 'lay8_195', 'lay8_174', 'lay8_188', 'lay8_159', 'lay8_158', 'lay8_28', 'lay8_107', 'lay8_9', 'lay8_151', 'lay8_160', 'lay8_98', 'lay8_63', 'lay8_162', 'lay8_85', 'lay8_122', 'lay8_49', 'lay8_51', 'lay8_130', 'lay8_105', 'lay8_155', 'lay8_194', 'lay8_189', 'lay8_119', 'lay8_127', 'lay8_165', 'lay8_175', 'lay8_29', 'lay8_197', 'lay8_80', 'lay8_54', 'lay8_17', 'lay8_18', 'lay8_106', 'lay8_134', 'lay8_20', 'lay8_152', 'lay8_47', 'lay8_169', 'lay8_118', 'lay8_163', 'lay8_13', 'lay8_168', 'lay8_132', 'lay8_26', 'lay8_21', 'lay8_74', 'lay8_138', 'lay8_96', 'lay8_97', 'lay8_92', 'lay8_78', 'lay8_90', 'lay8_24', 'lay8_94', 'lay8_52', 'lay8_41', 'lay8_193', 'lay8_42', 'lay8_6', 'lay8_70', 'lay8_192', 'lay8_124', 'lay8_186', 'lay8_62', 'lay8_16', 'lay8_190', 'lay8_75', 'lay8_100', 'lay8_148', 'lay8_53', 'lay8_44', 'lay8_156', 'lay8_154', 'lay8_31', 'lay8_110', 'lay8_33', 'lay8_126', 'lay8_56', 'lay8_177', 'lay8_142', 'lay8_99', 'lay8_123', 'lay8_61', 'lay8_144', 'lay8_23', 'lay8_147', 'lay8_43', 'lay8_81', 'lay8_164', 'lay8_57', 'lay8_102', 'lay8_46', 'lay8_139', 'lay8_185', 'lay8_178', 'lay8_198', 'lay8_173', 'lay8_22', 'lay8_15', 'lay8_10', 'lay8_170', 'lay8_66', 'lay8_12', 'lay8_182', 'lay8_5', 'lay8_150', 'lay8_83', 'lay8_93', 'lay8_125', 'lay8_64', 'lay8_153', 'lay8_39', 'lay8_30', 'lay8_87', 'lay8_191', 'lay8_68'] filter: 1.0
Solving MIP for lay8_181, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8229s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8489s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8562s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9747s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7323s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6846s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_111, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4790s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_146, [-inf,inf]=>[-0.49840950625609365,0.20026861423476322] (9,-1; 9,-1), time: 30.0172s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.6707281945453459,0.005433215983259956] (9,-1; 9,-1), time: 30.0156s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.8833293080150112,0.11085893010634008] (9,-1; 9,-1), time: 30.0185s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.4681365544051815,0.2962554018099855] (9,-1; 9,-1), time: 30.0177s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_171, [-inf,inf]=>[-0.29000544234563996,0.44650395140273547] (9,-1; 9,-1), time: 30.0181s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-0.5343958561981405,0.23681379031734356] (9,-1; 9,-1), time: 30.0232s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-0.4735329932170676,0.47948706587831424] (9,-1; 9,-1), time: 30.0199s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_176, [-inf,inf]=>[-0.554770898877077,0.1793762188708006] (9,-1; 9,-1), time: 30.0266s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_112, [-inf,inf]=>[-0.6342659001957309,0.22464933271293847] (9,-1; 9,-1), time: 30.0276s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-0.17113253186439614,0.7673414047733393] (9,-1; 9,-1), time: 30.0264s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-0.3431512386502655,0.5135587798609088] (9,-1; 9,-1), time: 30.0340s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_140, [-inf,inf]=>[-0.18276773588526837,0.5858274689598995] (9,-1; 9,-1), time: 30.0353s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_109, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6934s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_115, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7059s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_120, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7386s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8033s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_157, [-inf,inf]=>[-0.3152432246085897,0.4251611536824499] (9,-1; 9,-1), time: 30.0113s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8520s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_161, [-inf,inf]=>[-0.3158542334061223,0.26832536913920646] (9,-1; 9,-1), time: 30.0683s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_196, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7751s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.5380632348995854,0.12264593868885794] (9,-1; 9,-1), time: 30.0127s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7867s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8349s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-0.7395834639936992,0.5987343397609399] (9,-1; 9,-1), time: 30.0466s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7985s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_128, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7033s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_141, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8939s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_131, [-inf,inf]=>[-0.6914779823963182,0.0672523537569111] (9,-1; 9,-1), time: 30.0130s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_166, [-inf,inf]=>[-0.5527635828655838,0.29129673776378834] (9,-1; 9,-1), time: 30.0197s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_180, [-inf,inf]=>[-0.5217917395791011,0.250687749413177] (9,-1; 9,-1), time: 30.0141s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.6866945634812925,0.12934071358754226] (9,-1; 9,-1), time: 30.0140s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.41226941195948147,0.2243914583695629] (9,-1; 9,-1), time: 30.0475s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-0.05904338605038493,0.8195243592274504] (9,-1; 9,-1), time: 30.1217s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6764s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_108, [-inf,inf]=>[-0.7479588525765883,0.020215561784228658] (9,-1; 9,-1), time: 30.0175s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_145, [-inf,inf]=>[-0.40142990409166107,0.3511772268125322] (9,-1; 9,-1), time: 30.0137s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_129, [-inf,inf]=>[-0.7846879644603406,0.034614908198965566] (9,-1; 9,-1), time: 30.0157s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.39426952649494434,0.37831356474684097] (9,-1; 9,-1), time: 30.0193s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7966s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_104, [-inf,inf]=>[-0.7969732100150104,0.0011597216292733895] (9,-1; 9,-1), time: 30.0523s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-0.537079370052304,0.14628728594960835] (9,-1; 9,-1), time: 30.0178s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6977s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6248s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_121, [-inf,inf]=>[-0.3668119429393175,0.6205989893197116] (9,-1; 9,-1), time: 30.0344s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7104s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-0.6873834081554434,0.12845546781042366] (9,-1; 9,-1), time: 30.0190s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_167, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7924s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7483s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6317s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6499s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7664s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.1975412353848952,0.5842051985041914] (9,-1; 9,-1), time: 30.0131s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6506s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7270s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_107, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7935s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2753s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.6321s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-0.5366926530819122,0.17751832099100318] (9,-1; 9,-1), time: 30.0161s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.8029s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6767s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_151, [-inf,inf]=>[1e-05,1.471055275642422] (15,-1; 9,-1), time: 15.6936s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6887s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-0.03226019623667525,0.9954714946552871] (9,-1; 9,-1), time: 30.0129s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_133, [-inf,inf]=>[-0.4263904726441465,0.5988176205126498] (9,-1; 9,-1), time: 30.0284s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_135, [-inf,inf]=>[-0.8497456393905362,0.04686056392127313] (9,-1; 9,-1), time: 30.0182s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7535s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_172, [-inf,inf]=>[-0.6000914789045411,0.08026923882992743] (9,-1; 9,-1), time: 30.0175s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7042s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-0.6154808753929163,0.33782070608404785] (9,-1; 9,-1), time: 30.0164s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_179, [-inf,inf]=>[-0.3472372169646997,0.35067279833077647] (9,-1; 9,-1), time: 30.0175s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_137, [-inf,inf]=>[-0.5283180527331851,0.17552243194775605] (9,-1; 9,-1), time: 30.0526s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6798s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_197, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9108s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_158, [-inf,inf]=>[-0.4350391928952577,0.22225510680950933] (9,-1; 9,-1), time: 30.0470s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_159, [-inf,inf]=>[-0.1954744280328818,0.5628464460159007] (9,-1; 9,-1), time: 30.1367s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6563s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_106, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6993s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-0.8134155727031639,0.13317375380350757] (9,-1; 9,-1), time: 30.0172s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-0.3018692133932983,0.3681213194733816] (9,-1; 9,-1), time: 30.0140s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_134, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6917s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6771s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[-0.4272733315101081,0.5766530304257682] (9,-1; 9,-1), time: 30.2769s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7439s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8764s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7288s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6711s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7734s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6427s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_122, [-inf,inf]=>[-0.7114771468948623,0.2709953310998144] (9,-1; 9,-1), time: 30.0229s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4603s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[-0.4050874557748861,0.3097156918194274] (9,-1; 9,-1), time: 30.0154s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.1526s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_130, [-inf,inf]=>[-0.19444146724262262,0.6168090943368033] (9,-1; 9,-1), time: 30.1124s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.6789s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9854s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_155, [-inf,inf]=>[-0.6621620840121922,0.19351049229349523] (9,-1; 9,-1), time: 30.0119s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7015s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[1e-05,1.0213801361588954] (15,-1; 9,-1), time: 26.7132s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_165, [-inf,inf]=>[-0.46494368170475536,0.292655151329082] (9,-1; 9,-1), time: 30.0202s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_127, [-inf,inf]=>[-0.28045463225971756,0.4691142226048325] (9,-1; 9,-1), time: 30.0588s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-0.6153438364955586,0.09581542213190034] (9,-1; 9,-1), time: 30.0214s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.6010127834371154,0.3505656493834766] (9,-1; 9,-1), time: 30.0187s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-0.4076306511282066,0.5456655970774013] (9,-1; 9,-1), time: 30.0137s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7370s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8110s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_169, [-inf,inf]=>[-0.3903614113765489,0.5114899899168078] (9,-1; 9,-1), time: 30.0344s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_118, [-inf,inf]=>[-0.249563772654974,0.3655930727982084] (9,-1; 9,-1), time: 30.0116s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6816s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.352692879011727,0.2872050584874683] (9,-1; 9,-1), time: 30.0231s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.32816165209423775,0.35302060506045074] (9,-1; 9,-1), time: 30.0191s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_138, [-inf,inf]=>[-0.4474154557675808,0.1699264106000971] (9,-1; 9,-1), time: 30.0869s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.43513420316441626,0.3814157182443442] (9,-1; 9,-1), time: 30.0211s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_148, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6972s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.4628s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8438s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.43598273715178687,0.23562409713146956] (9,-1; 9,-1), time: 30.0228s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.0018s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_193, [-inf,inf]=>[1e-05,1.1804218954592733] (15,-1; 9,-1), time: 15.7760s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-0.5838921822883749,0.08931040223146476] (9,-1; 9,-1), time: 30.0152s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-0.33343272011844993,0.40114772513899827] (9,-1; 9,-1), time: 30.0462s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-0.42018965241625666,0.497067002977835] (9,-1; 9,-1), time: 30.0139s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_190, [-inf,inf]=>[1e-05,0.9791348416333766] (15,-1; 9,-1), time: 15.7771s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_177, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7116s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6648s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6846s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8250s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[1e-05,0.9168999033607343] (15,-1; 9,-1), time: 16.6054s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6142s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6665s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7811s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-0.03808399751232475,0.6211198184543312] (9,-1; 9,-1), time: 30.0130s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_164, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7857s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-0.5235263698264283,0.04916402763198964] (9,-1; 9,-1), time: 30.0175s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-0.5131758080991049,0.3528665918836401] (9,-1; 9,-1), time: 30.0851s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7131s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8181s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_124, [-inf,inf]=>[-0.42147396443669394,0.283930387064879] (9,-1; 9,-1), time: 30.0122s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[1e-05,1.5403005719299099] (15,-1; 9,-1), time: 15.7107s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_186, [-inf,inf]=>[-0.2805412489357114,0.4272950234459791] (9,-1; 9,-1), time: 30.0189s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6579s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.213325059053527,0.6495684448637447] (9,-1; 9,-1), time: 30.0158s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6964s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2188s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9480s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-0.3664605164170669,0.38329813406693114] (9,-1; 9,-1), time: 30.1194s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[1e-05,1.0303063572926614] (15,-1; 9,-1), time: 15.6609s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_182, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6223s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[1e-05,0.7995225468939416] (15,-1; 9,-1), time: 17.6716s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[-0.636765717691388,0.2107585749056889] (9,-1; 9,-1), time: 30.0240s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-0.5094545817014102,0.11914255583229108] (9,-1; 9,-1), time: 30.0136s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[1e-05,1.7840835933534316] (15,-1; 9,-1), time: 15.7919s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8297s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_110, [-inf,inf]=>[-0.03698758989175677,0.7314318461949437] (9,-1; 9,-1), time: 30.0147s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.0840s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_153, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6980s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_126, [-inf,inf]=>[-0.6189156479703406,0.07720798308083832] (9,-1; 9,-1), time: 30.0249s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-0.669479122468622,0.09395738709924983] (9,-1; 9,-1), time: 30.0354s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8008s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6650s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6769s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_147, [-inf,inf]=>[-0.689558072250665,0.06256307637883654] (9,-1; 9,-1), time: 30.0165s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[1e-05,0.9998831477540902] (15,-1; 9,-1), time: 15.8193s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[1e-05,1.048073237932171] (15,-1; 9,-1), time: 15.6796s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[1e-05,2.0528955691059534] (15,-1; 9,-1), time: 15.7484s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[1e-05,1.4474973571477576] (15,-1; 9,-1), time: 15.7934s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[1e-05,1.5015409154171455] (15,-1; 9,-1), time: 15.6544s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_139, [-inf,inf]=>[-0.03994128708837326,0.6102796124568706] (9,-1; 9,-1), time: 30.0506s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_185, [-inf,inf]=>[-0.5793596623461877,0.062312665020282404] (9,-1; 9,-1), time: 30.0096s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_173, [-inf,inf]=>[-0.1939366911364029,0.47907287061741394] (9,-1; 9,-1), time: 30.0161s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-0.6187788552172541,0.13737174221438112] (9,-1; 9,-1), time: 30.0483s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.6727777478090139,0.19334881078094304] (9,-1; 9,-1), time: 30.0361s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_150, [-inf,inf]=>[-0.4964042487690053,0.3010403587112075] (9,-1; 9,-1), time: 30.0575s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-0.42633185502861715,0.4784343676595668] (9,-1; 9,-1), time: 30.0256s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_191, [-inf,inf]=>[-0.603337185557982,0.074080955710746] (9,-1; 9,-1), time: 30.0327s, #vars: 1869, #constrs: 1226, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(9, -1), (56, -1), (185, -1), (141, -1), (156, -1), (2, -1), (117, -1), (176, -1), (53, 1), (163, -1), (173, -1), (31, -1), (19, -1), (6, -1), (154, -1), (15, -1), (162, -1), (89, -1), (150, -1), (65, -1), (105, -1), (187, -1), (30, -1), (91, -1), (169, -1), (36, -1), (199, -1), (123, -1), (193, -1), (5, -1), (191, -1), (26, -1), (186, -1), (146, -1), (96, -1), (97, -1), (49, -1), (93, -1), (178, 1), (18, 1), (64, 1), (43, -1), (135, -1), (70, -1), (95, -1), (22, 1), (112, -1), (125, 1), (133, -1), (121, 1), (61, 1), (138, -1), (194, -1), (80, -1), (114, 1), (52, 1), (99, 1), (34, -1), (4, 1), (77, -1), (46, 1), (63, 1), (177, 1), (159, 1), (11, 1), (130, 1), (58, 1), (7, 1), (198, 1), (86, 1), (42, 1), (1, 1)]
best_l after optimization: 3.7075371742248535
beta sum per layer: []
alpha/beta optimization time: 7.080954551696777
alpha-CROWN with intermediate bounds by MIP: tensor([[ 2.88727427,  0.58840656,  0.09326982, -2.22304344,  1.18541384,
          1.69416618,  0.84207821,  0.05205679, -1.41208506]], device='cuda:0') None
MIP improved 181 nodes out of 181 unstable nodes, lb improved 86.65133666992188, ub improved 121.80474090576172, time 199.1038
maximum relu layer improved by MIP so far 3
Linear(in_features=200, out_features=200, bias=True) 4 10 torch.Size([200])
sorted candidates ['lay10_78', 'lay10_186', 'lay10_195', 'lay10_141', 'lay10_170', 'lay10_176', 'lay10_191', 'lay10_9', 'lay10_28', 'lay10_159', 'lay10_174', 'lay10_17', 'lay10_53', 'lay10_136', 'lay10_19', 'lay10_97', 'lay10_165', 'lay10_119', 'lay10_155', 'lay10_199', 'lay10_36', 'lay10_137', 'lay10_181', 'lay10_139', 'lay10_187', 'lay10_168', 'lay10_71', 'lay10_66', 'lay10_123', 'lay10_95', 'lay10_138', 'lay10_135', 'lay10_185', 'lay10_196', 'lay10_93', 'lay10_108', 'lay10_116', 'lay10_146', 'lay10_112', 'lay10_99', 'lay10_86', 'lay10_92', 'lay10_30', 'lay10_3', 'lay10_167', 'lay10_64', 'lay10_73', 'lay10_23', 'lay10_26', 'lay10_59', 'lay10_74', 'lay10_65', 'lay10_14', 'lay10_11', 'lay10_84', 'lay10_90', 'lay10_145', 'lay10_2', 'lay10_102', 'lay10_50', 'lay10_88', 'lay10_183', 'lay10_164', 'lay10_143', 'lay10_1', 'lay10_98', 'lay10_124', 'lay10_31', 'lay10_152', 'lay10_10', 'lay10_69', 'lay10_111', 'lay10_115', 'lay10_154', 'lay10_166', 'lay10_22', 'lay10_34', 'lay10_83', 'lay10_121', 'lay10_122', 'lay10_173', 'lay10_4', 'lay10_113', 'lay10_12', 'lay10_114', 'lay10_25', 'lay10_18', 'lay10_57', 'lay10_49', 'lay10_190', 'lay10_151', 'lay10_125', 'lay10_42', 'lay10_133', 'lay10_7', 'lay10_75', 'lay10_160', 'lay10_33', 'lay10_54', 'lay10_162', 'lay10_72', 'lay10_142', 'lay10_48', 'lay10_96', 'lay10_130', 'lay10_51', 'lay10_81', 'lay10_44', 'lay10_163', 'lay10_61', 'lay10_105', 'lay10_15', 'lay10_153', 'lay10_180', 'lay10_60', 'lay10_189', 'lay10_103', 'lay10_70', 'lay10_56', 'lay10_117', 'lay10_77', 'lay10_40', 'lay10_120', 'lay10_29', 'lay10_107', 'lay10_188', 'lay10_21', 'lay10_104', 'lay10_172', 'lay10_128', 'lay10_91', 'lay10_171', 'lay10_67', 'lay10_13', 'lay10_144', 'lay10_198', 'lay10_182', 'lay10_161', 'lay10_106', 'lay10_148', 'lay10_87', 'lay10_47', 'lay10_89', 'lay10_175', 'lay10_178', 'lay10_20', 'lay10_35', 'lay10_52', 'lay10_94', 'lay10_46', 'lay10_184', 'lay10_110', 'lay10_6', 'lay10_82', 'lay10_41', 'lay10_109', 'lay10_197', 'lay10_68', 'lay10_5', 'lay10_127', 'lay10_24', 'lay10_177', 'lay10_179', 'lay10_140', 'lay10_149', 'lay10_158', 'lay10_58', 'lay10_37', 'lay10_132', 'lay10_157', 'lay10_192', 'lay10_193', 'lay10_27', 'lay10_134', 'lay10_100', 'lay10_0', 'lay10_101', 'lay10_32', 'lay10_39', 'lay10_150', 'lay10_131', 'lay10_85', 'lay10_76', 'lay10_126', 'lay10_63', 'lay10_147', 'lay10_80', 'lay10_169', 'lay10_118', 'lay10_55', 'lay10_45', 'lay10_16', 'lay10_43', 'lay10_156', 'lay10_62', 'lay10_38', 'lay10_129', 'lay10_79', 'lay10_194', 'lay10_8'] filter: 1.0
Solving MIP for lay10_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0195s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_141, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0491s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1161s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1467s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_170, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1504s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_159, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3489s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0592s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1437s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_137, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1685s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7156s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0339s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.1963s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-1.1753365037992032,0.004059858341891293] (9,-1; 9,-1), time: 30.0308s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_176, [-inf,inf]=>[-1.4080945583559004,0.06358214563279929] (9,-1; 9,-1), time: 30.0683s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[-0.33858383249474777,1.0872596966499994] (9,-1; 9,-1), time: 30.0964s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_195, [-inf,inf]=>[-1.12944641386842,0.21316630124707914] (9,-1; 9,-1), time: 30.1186s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-0.4555997435570336,1.0078133660916544] (9,-1; 9,-1), time: 30.1383s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-0.887845927766221,0.3523013739096217] (9,-1; 9,-1), time: 30.1455s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_186, [-inf,inf]=>[-1.0988618514016266,0.3845524512433512] (9,-1; 9,-1), time: 30.1663s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[-1.1281414241585153,0.04460260683296542] (9,-1; 9,-1), time: 30.3693s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9573s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_119, [-inf,inf]=>[-1.0191880854600697,0.10427730003415733] (9,-1; 9,-1), time: 30.0606s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_165, [-inf,inf]=>[-0.9366496925945194,0.33670175839931965] (9,-1; 9,-1), time: 30.1030s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1124s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_185, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0199s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0464s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_155, [-inf,inf]=>[-1.0832975142413601,0.10909128498427612] (9,-1; 9,-1), time: 30.0564s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0185s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_116, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1715s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_181, [-inf,inf]=>[-1.1196594414324885,0.215803740948102] (9,-1; 9,-1), time: 30.1125s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_187, [-inf,inf]=>[-0.7798328235949147,0.7017516221305454] (9,-1; 9,-1), time: 30.3316s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_168, [-inf,inf]=>[-0.7004446556312268,0.3187400389978837] (9,-1; 9,-1), time: 30.2418s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[-0.9266532707894228,0.5376378267458215] (9,-1; 9,-1), time: 30.2319s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1916s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[-0.7266790150930833,0.6357870795076016] (9,-1; 9,-1), time: 30.1657s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5512s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9552s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.6984s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_196, [-inf,inf]=>[-0.9233301128526361,0.09068684417673387] (9,-1; 9,-1), time: 30.0401s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-0.6396278147162315,0.7335364183390678] (9,-1; 9,-1), time: 30.1773s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_135, [-inf,inf]=>[-0.19438690898495947,1.376691572852503] (9,-1; 9,-1), time: 30.1642s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_112, [-inf,inf]=>[-1.2025316666848112,0.06578276278220825] (9,-1; 9,-1), time: 30.0937s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-0.9387559739984133,0.1922148101460288] (9,-1; 9,-1), time: 30.1088s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-0.8290942626122254,0.5118702657127735] (9,-1; 9,-1), time: 30.1798s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-1.2429824503481288,0.0090182181326363] (9,-1; 9,-1), time: 30.1123s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1460s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-0.9332778394663737,0.10899891416639386] (9,-1; 9,-1), time: 30.2014s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_146, [-inf,inf]=>[-1.437723012531261,0.02212478910311328] (9,-1; 9,-1), time: 30.3031s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-0.9243540211541512,0.14628662154256927] (9,-1; 9,-1), time: 30.0893s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_167, [-inf,inf]=>[-1.2539597373050797,0.14671896863629857] (9,-1; 9,-1), time: 30.0706s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0207s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-0.4661043167832948,0.7551999517925285] (9,-1; 9,-1), time: 30.1444s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_183, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1758s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_124, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0723s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-0.7502487203162785,0.4125450801220393] (9,-1; 9,-1), time: 30.1244s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9083s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0508s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_111, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1204s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-0.24437354637003295,1.1155874656463773] (9,-1; 9,-1), time: 30.1735s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.27011591316460126,0.7854812520719119] (9,-1; 9,-1), time: 30.1585s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0227s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9595s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-0.7888938789645217,0.6570633170599369] (9,-1; 9,-1), time: 30.1372s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_166, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.3763s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_164, [-inf,inf]=>[1e-05,1.1572867273970164] (15,-1; 9,-1), time: 16.2227s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0602s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_154, [-inf,inf]=>[1e-05,1.99108541771816] (15,-1; 9,-1), time: 15.9537s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_145, [-inf,inf]=>[-0.542954087605437,0.5373385067562275] (9,-1; 9,-1), time: 30.0411s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-0.6078977187883097,0.6145427086648076] (9,-1; 9,-1), time: 30.3794s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-1.3433823696654665,0.04608589606256146] (9,-1; 9,-1), time: 30.2446s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_102, [-inf,inf]=>[-0.8484679435665184,0.3960180794464438] (9,-1; 9,-1), time: 30.2350s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9429s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_143, [-inf,inf]=>[-0.8043286292437504,0.5466644508955059] (9,-1; 9,-1), time: 30.2468s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-0.7354428153646686,0.29698445913034055] (9,-1; 9,-1), time: 30.3576s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[-1.3131821419972691,0.02165652087988537] (9,-1; 9,-1), time: 30.2429s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-1.2777110912744967,0.04916991095971972] (9,-1; 9,-1), time: 30.0311s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_152, [-inf,inf]=>[-0.35189430654133524,0.8567728719855372] (9,-1; 9,-1), time: 30.1007s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-0.6135807105292199,0.49427123351890395] (9,-1; 9,-1), time: 30.2705s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_115, [-inf,inf]=>[-0.9115314374778084,0.26125182538332714] (9,-1; 9,-1), time: 30.0625s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0350s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.4385s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9000s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-0.6327013956139454,0.5270526456962757] (9,-1; 9,-1), time: 30.0344s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_121, [-inf,inf]=>[-0.6450201039601715,0.42052358673852575] (9,-1; 9,-1), time: 30.0350s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1643s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_122, [-inf,inf]=>[-0.647009058170907,0.4110476838271868] (9,-1; 9,-1), time: 30.0784s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.6457s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-0.7771710848073807,0.3645743483928228] (9,-1; 9,-1), time: 30.0618s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_113, [-inf,inf]=>[-0.6667122439558758,0.26676184595725105] (9,-1; 9,-1), time: 30.1524s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[-0.9161384466893828,0.5799881239489516] (9,-1; 9,-1), time: 30.0974s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-1.0345553235179192,0.2060828899601874] (9,-1; 9,-1), time: 30.0139s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-0.9425142678016734,0.2549282727475233] (9,-1; 9,-1), time: 30.0143s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_190, [-inf,inf]=>[-0.7617374413355454,0.5817002704119776] (9,-1; 9,-1), time: 30.0670s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_151, [-inf,inf]=>[-0.7686304707495923,0.36445465389972403] (9,-1; 9,-1), time: 30.0735s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_125, [-inf,inf]=>[-0.34369968780661564,0.8920460229487778] (9,-1; 9,-1), time: 30.0272s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.7316312877651115,0.4546497609664864] (9,-1; 9,-1), time: 30.0809s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0269s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1186s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_133, [-inf,inf]=>[-0.24977168414658735,0.9733923254751363] (9,-1; 9,-1), time: 30.2539s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0723s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0961s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-0.5613101716438975,0.6347694953418399] (9,-1; 9,-1), time: 30.2886s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7667s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[-0.6285786246536849,1.0899627100225793] (9,-1; 9,-1), time: 30.2452s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1063s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0725s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9624s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0057s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_120, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0305s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_162, [-inf,inf]=>[-0.6713960334010468,0.3570856942933547] (9,-1; 9,-1), time: 30.1060s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[-1.1793561613924077,0.05670186713538625] (9,-1; 9,-1), time: 30.0205s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_142, [-inf,inf]=>[-0.9310046399057859,0.26632942252985914] (9,-1; 9,-1), time: 30.0159s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1475s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_104, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1640s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-0.9850273997327671,0.027748826942043836] (9,-1; 9,-1), time: 30.1267s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_172, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9970s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_128, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0710s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[-0.5342459924093558,0.4818697494544082] (9,-1; 9,-1), time: 30.2695s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_189, [-inf,inf]=>[1e-05,1.3333638592120711] (15,-1; 9,-1), time: 16.0281s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9659s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_130, [-inf,inf]=>[-1.0240432012305112,0.05822602982656097] (9,-1; 9,-1), time: 30.1239s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_188, [-inf,inf]=>[1e-05,2.714894947020829] (15,-1; 9,-1), time: 15.9373s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[1e-05,2.4357891574945767] (15,-1; 9,-1), time: 16.0590s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-0.44865038236989063,0.6954690632789697] (9,-1; 9,-1), time: 30.0118s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-0.8427800497470255,0.19060684858326732] (9,-1; 9,-1), time: 30.0230s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-0.9381747218319526,0.32777326299857756] (9,-1; 9,-1), time: 30.2362s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_180, [-inf,inf]=>[-1.1681778365953157,0.03565129862347646] (9,-1; 9,-1), time: 30.0747s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_153, [-inf,inf]=>[-0.4723755868066456,0.9023270232239211] (9,-1; 9,-1), time: 30.1742s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9924s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_103, [-inf,inf]=>[-0.7834360447029459,0.33863760404445614] (9,-1; 9,-1), time: 30.0662s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-0.9985635778073114,0.08676134636895091] (9,-1; 9,-1), time: 30.1013s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0631s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0323s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-0.09741822364355136,1.0781432359153376] (9,-1; 9,-1), time: 30.0484s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,1.304907839798766] (15,-1; 9,-1), time: 24.0949s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_107, [-inf,inf]=>[-0.31062495874980717,0.7762356607134475] (9,-1; 9,-1), time: 30.0478s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0139s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_110, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0637s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_171, [-inf,inf]=>[-1.0837000981040825,0.06595889091801162] (9,-1; 9,-1), time: 30.0219s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0407s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_175, [-inf,inf]=>[1e-05,2.4943443789299917] (15,-1; 9,-1), time: 16.1123s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-0.7203673603604989,0.4020411753936577] (9,-1; 9,-1), time: 30.1953s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[1e-05,1.9595281217877496] (15,-1; 9,-1), time: 16.1219s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1498s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[1e-05,1.248880880625157] (15,-1; 9,-1), time: 18.7160s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_198, [-inf,inf]=>[-0.5434126095610089,0.634821282241505] (9,-1; 9,-1), time: 30.0816s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_182, [-inf,inf]=>[-0.8929703936879198,0.08520032904077683] (9,-1; 9,-1), time: 30.0553s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[1e-05,2.3368497299695616] (15,-1; 9,-1), time: 15.9480s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_161, [-inf,inf]=>[-0.9926514151267108,0.042315256529637454] (9,-1; 9,-1), time: 30.0212s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[1e-05,2.9133840052855864] (15,-1; 9,-1), time: 16.0827s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_106, [-inf,inf]=>[-1.0445879364550432,0.050432194261058355] (9,-1; 9,-1), time: 30.2898s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_109, [-inf,inf]=>[1e-05,2.219664805756091] (15,-1; 9,-1), time: 15.9999s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_148, [-inf,inf]=>[-1.12802693144361,0.11144897591673025] (9,-1; 9,-1), time: 30.1479s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[-0.28023525792276205,0.9257321674036056] (9,-1; 9,-1), time: 30.2376s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_178, [-inf,inf]=>[-0.7290624392466517,0.2570038190627059] (9,-1; 9,-1), time: 30.0757s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_177, [-inf,inf]=>[1e-05,1.5256709109546183] (15,-1; 9,-1), time: 15.9968s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-0.8437987206735879,0.3555012654342242] (9,-1; 9,-1), time: 30.0803s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-1.1367725812556104,0.002239732176116574] (9,-1; 9,-1), time: 30.0177s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_149, [-inf,inf]=>[1e-05,1.31760342930303] (15,-1; 9,-1), time: 18.1912s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9550s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_197, [-inf,inf]=>[-0.6618241773725723,0.8637176268571501] (9,-1; 9,-1), time: 30.2735s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_192, [-inf,inf]=>[1e-05,1.9563614310306519] (15,-1; 9,-1), time: 16.2009s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_127, [-inf,inf]=>[-0.8555649499276786,0.30572485419880663] (9,-1; 9,-1), time: 30.0436s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.8217413073053785,0.23616296651583504] (9,-1; 9,-1), time: 30.2469s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-0.1170145114114125,0.9460814233515625] (9,-1; 9,-1), time: 30.1998s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1022s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_179, [-inf,inf]=>[-0.32412152749470546,0.765694503653578] (9,-1; 9,-1), time: 30.1660s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1672s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_126, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1697s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_140, [-inf,inf]=>[-1.0703776910545477,0.09361678951479702] (9,-1; 9,-1), time: 30.0718s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_147, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9987s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_134, [-inf,inf]=>[1e-05,1.1273300934064658] (15,-1; 9,-1), time: 15.9643s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_158, [-inf,inf]=>[-0.9757337599388783,0.310357183579752] (9,-1; 9,-1), time: 30.1486s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0446s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-0.4172306298663728,0.7027969360872615] (9,-1; 9,-1), time: 30.2092s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-0.21333821722631788,0.9723001814203058] (9,-1; 9,-1), time: 30.0379s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_132, [-inf,inf]=>[-0.4032271143894298,0.8495018349721615] (9,-1; 9,-1), time: 30.1661s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0291s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_157, [-inf,inf]=>[-1.1088077622528352,0.17228731173310052] (9,-1; 9,-1), time: 30.1497s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9804s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1155s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7058s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0638s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0457s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[1e-05,1.3047914019209899] (15,-1; 9,-1), time: 16.0633s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_150, [-inf,inf]=>[1e-05,1.8740648978430094] (15,-1; 9,-1), time: 16.0266s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_193, [-inf,inf]=>[-0.12463656732082427,1.0733238531472498] (9,-1; 9,-1), time: 30.0499s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0290s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-0.04655659897046113,0.9351431247580693] (9,-1; 9,-1), time: 30.0235s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_118, [-inf,inf]=>[1e-05,2.182278584042453] (15,-1; 9,-1), time: 16.0594s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-0.3211675576089891,0.9751325688918314] (9,-1; 9,-1), time: 30.0476s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_101, [-inf,inf]=>[-0.041405871310907894,1.145296349183109] (9,-1; 9,-1), time: 30.0872s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_131, [-inf,inf]=>[-0.6041555240170984,0.48770951265953566] (9,-1; 9,-1), time: 30.0694s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-1.01245253866388,0.05223775356506027] (9,-1; 9,-1), time: 30.1002s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[-1.012079636537523,0.21846871429241327] (9,-1; 9,-1), time: 30.0161s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-0.5007635088807337,0.5398054741791938] (9,-1; 9,-1), time: 30.0476s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-0.5159144703701081,0.6388982422816338] (9,-1; 9,-1), time: 30.0109s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-0.9408875113256178,0.2260195360397559] (9,-1; 9,-1), time: 30.0238s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-0.7608895196606701,0.28052956861746803] (9,-1; 9,-1), time: 30.0619s, #vars: 2237, #constrs: 1678, improved: True
Solving MIP for lay10_129, [-inf,inf]=>[-0.18162493770381294,0.9447127779439957] (9,-1; 9,-1), time: 30.0493s, #vars: 2237, #constrs: 1678, improved: True
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 3 has unstable to stable neurons: [(181, -1), (36, -1), (38, -1), (69, -1), (34, -1), (58, -1), (111, -1), (55, -1), (114, -1), (109, -1), (115, -1), (4, -1), (120, -1), (196, -1), (35, -1), (2, -1), (128, -1), (141, -1), (167, -1), (40, -1), (27, -1), (95, -1), (117, -1), (184, -1), (143, -1), (88, -1), (195, -1), (174, -1), (188, -1), (28, -1), (107, -1), (9, -1), (151, 1), (160, -1), (85, -1), (51, -1), (105, -1), (194, -1), (189, -1), (119, -1), (175, -1), (197, -1), (80, 1), (18, -1), (106, -1), (134, -1), (20, -1), (152, -1), (47, -1), (163, -1), (13, -1), (168, -1), (132, -1), (26, -1), (97, -1), (78, -1), (94, -1), (193, 1), (70, -1), (192, -1), (16, -1), (190, 1), (75, -1), (100, 1), (148, -1), (44, -1), (156, -1), (33, 1), (177, -1), (142, -1), (99, -1), (123, -1), (61, -1), (144, 1), (23, -1), (43, -1), (81, 1), (164, -1), (57, 1), (102, -1), (46, -1), (178, -1), (198, -1), (22, -1), (15, -1), (170, -1), (12, 1), (182, -1), (5, 1), (83, 1), (93, 1), (125, -1), (64, 1), (153, -1), (30, -1), (87, -1), (68, -1)]
best_l after optimization: 18.342308044433594
beta sum per layer: []
alpha/beta optimization time: 7.034048318862915
alpha-CROWN with intermediate bounds by MIP: tensor([[ 4.40930462,  2.29040194,  1.82840061, -0.84403479,  2.95965624,
          3.01333046,  2.63733578,  1.70552158,  0.34239101]], device='cuda:0') None
MIP improved 200 nodes out of 200 unstable nodes, lb improved 379.62298583984375, ub improved 480.6932373046875, time 244.7764
maximum relu layer improved by MIP so far 4
Linear(in_features=200, out_features=10, bias=True) 5 12 torch.Size([9, 1])
MIP finished with 626.1061310768127s
Run final alpha-CROWN after MIP solving on layer 12 and relu idx 5
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
best_l after optimization: 20.83863639831543
beta sum per layer: []
alpha/beta optimization time: 6.382924795150757
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 4.60551929,  2.56216574,  2.15161967, -0.58141029,  3.24193168,
          3.22024822,  2.98066664,  1.99039936,  0.66749597]], device='cuda:0') None
Split layers:
  BoundLinear(name=/input.15, inputs=[/28, /9, /10]): [(BoundRelu(name=/30, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.3, inputs=[/22, /3, /4]): [(BoundRelu(name=/24, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.11, inputs=[/26, /7, /8]): [(BoundRelu(name=/28, inputs=[/input.11]), 0)]
  BoundLinear(name=/input, inputs=[/20, /1, /2]): [(BoundRelu(name=/22, inputs=[/input]), 0)]
  BoundLinear(name=/input.7, inputs=[/24, /5, /6]): [(BoundRelu(name=/26, inputs=[/input.7]), 0)]
refined global lb: tensor([[ 4.60551929],
        [ 2.56216574],
        [ 2.15161967],
        [-0.58141029],
        [ 3.24193168],
        [ 3.22024822],
        [ 2.98066664],
        [ 1.99039936],
        [ 0.66749597]], device='cuda:0') min: tensor(-0.58141029, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200])]

Properties batch 0, size 1
Remaining timeout: 252.70385098457336
##### Instance 0 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.6055192947387695.

Properties batch 1, size 1
Remaining timeout: 252.60159635543823
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.5621657371520996.

Properties batch 2, size 1
Remaining timeout: 252.53526425361633
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.1516196727752686.

Properties batch 3, size 1
Remaining timeout: 252.47185826301575
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.58141029]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundShape(name=/13, inputs=[/0])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundGather(name=/15, inputs=[/13, /14])
  (/16): BoundConstant(name=/16, inputs=[])
  (/17): BoundUnsqueeze(name=/17, inputs=[/15])
  (/18): BoundUnsqueeze(name=/18, inputs=[/16])
  (/19): BoundConcat(name=/19, inputs=[/17, /18])
  (/20): BoundReshape(name=/20, inputs=[/0, /19])
  (/input): BoundLinear(name=/input, inputs=[/20, /1, /2])
  (/22): BoundRelu(name=/22, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/22, /3, /4])
  (/24): BoundRelu(name=/24, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/24, /5, /6])
  (/26): BoundRelu(name=/26, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/26, /7, /8])
  (/28): BoundRelu(name=/28, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/28, /9, /10])
  (/30): BoundRelu(name=/30, inputs=[/input.15])
  (/31): BoundLinear(name=/31, inputs=[/30, /11, /12])
)
Model prediction is: tensor([-3.25121307, -1.79723155, -1.20159960,  3.47173071, -2.67189574,
         6.15487766, -1.72229826, -1.42275929,  0.09232458,  1.46565998],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /22 start_node /31 with alignment adjustment
setting alpha for layer /24 start_node /31 with alignment adjustment
setting alpha for layer /26 start_node /31 with alignment adjustment
setting alpha for layer /28 start_node /31 with alignment adjustment
setting alpha for layer /30 start_node /31 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.58141029]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input.15,/input.3,/input.11,/input,/input.7,/31
Split layers:
  BoundLinear(name=/input.7, inputs=[/24, /5, /6]): [(BoundRelu(name=/26, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.15, inputs=[/28, /9, /10]): [(BoundRelu(name=/30, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.3, inputs=[/22, /3, /4]): [(BoundRelu(name=/24, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.11, inputs=[/26, /7, /8]): [(BoundRelu(name=/28, inputs=[/input.11]), 0)]
  BoundLinear(name=/input, inputs=[/20, /1, /2]): [(BoundRelu(name=/22, inputs=[/input]), 0)]
Keeping slopes for these layers: ['/31']
Keeping slopes for these layers: ['/31']
Node /22 input 0: size torch.Size([200]) unstable 46
Node /24 input 0: size torch.Size([200]) unstable 43
Node /26 input 0: size torch.Size([200]) unstable 53
Node /28 input 0: size torch.Size([200]) unstable 84
Node /30 input 0: size torch.Size([200]) unstable 107
-----------------
# of unstable neurons: 333
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.15, 74] 
split level 1: [/input.11, 73] 
split level 2: [/input.11, 121] 
split level 3: [/input.15, 186] 
split level 4: [/input.15, 31] 
split level 5: [/input.3, 104] 
pruning_in_iteration open status: True
ratio of positive domain = 40 / 64 = 0.625
pruning-in-iteration extra time: 0.015055179595947266
Time: prepare 0.0166    beta_bound 0.7174    bound 0.7175    transfer 0.0010    finalize 0.0086    func 0.7437    
Accumulated time: func 0.7437    prepare 0.0176    bound 0.7175    beta_bound 0.7174    transfer 0.0010    finalize 0.0086    
batch bounding time:  0.7439584732055664
Current worst splitting domains lb-rhs (depth):
-0.58061 (6), -0.56878 (6), -0.54063 (6), -0.52995 (6), -0.50247 (6), -0.49800 (6), -0.45270 (6), -0.44895 (6), -0.18326 (6), -0.18314 (6), -0.16991 (6), -0.16958 (6), -0.12982 (6), -0.12609 (6), -0.11146 (6), -0.11135 (6), -0.09930 (6), -0.09701 (6), -0.09319 (6), -0.09140 (6), 
length of domains: 24
Time: pickout 0.0014    decision 0.2754    set_bounds 0.0031    solve 0.7440    add 0.0017    
Accumulated time: pickout 0.0014    decision 0.2754    set_bounds 0.0031    solve 0.7440    add 0.0017    
Current (lb-rhs): -0.5806139707565308
24 domains visited
Cumulative time: 1.0541880130767822

BaB round 2
batch: 24
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.15, 133] [/input.15, 133] [/input.15, 133] [/input.15, 133] [/input.11, 32] [/input.15, 133] [/input.15, 133] [/input.15, 133] [/input.15, 133] [/input.11, 32] 
split level 1: [/input.15, 167] [/input.15, 167] [/input.15, 167] [/input.15, 167] [/input.15, 167] [/input.15, 153] [/input.15, 167] [/input.15, 167] [/input.15, 167] [/input.15, 167] 
pruning_in_iteration open status: True
ratio of positive domain = 69 / 96 = 0.71875
pruning-in-iteration extra time: 0.015947580337524414
Time: prepare 0.0198    beta_bound 0.4798    bound 0.4798    transfer 0.0005    finalize 0.0133    func 0.5135    
Accumulated time: func 1.2572    prepare 0.0381    bound 1.1973    beta_bound 1.1971    transfer 0.0016    finalize 0.0219    
batch bounding time:  0.5136866569519043
Current worst splitting domains lb-rhs (depth):
-0.50791 (8), -0.46367 (8), -0.44277 (8), -0.42533 (8), -0.42176 (8), -0.42013 (8), -0.39467 (8), -0.39022 (8), -0.38019 (8), -0.36096 (8), -0.35612 (8), -0.35187 (8), -0.35058 (8), -0.33849 (8), -0.11905 (8), -0.10930 (8), -0.07794 (8), -0.07790 (8), -0.07565 (8), -0.06063 (8), 
length of domains: 27
Time: pickout 0.0016    decision 0.0443    set_bounds 0.0040    solve 0.5137    add 0.0029    
Accumulated time: pickout 0.0030    decision 0.3197    set_bounds 0.0071    solve 1.2577    add 0.0046    
Current (lb-rhs): -0.5079127550125122
51 domains visited
Cumulative time: 1.6222741603851318

BaB round 3
batch: 27
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.11, 171] [/input.15, 153] [/input.11, 171] [/input.15, 167] [/input.15, 153] [/input.15, 153] [/input.15, 9] [/input.15, 153] [/input.15, 153] [/input, 84] 
pruning_in_iteration open status: True
ratio of positive domain = 24 / 54 = 0.4444444444444444
pruning-in-iteration extra time: 0.016439437866210938
Time: prepare 0.0172    beta_bound 0.4085    bound 0.4086    transfer 0.0010    finalize 0.0068    func 0.4339    
Accumulated time: func 1.6911    prepare 0.0561    bound 1.6059    beta_bound 1.6056    transfer 0.0026    finalize 0.0287    
batch bounding time:  0.4340543746948242
Current worst splitting domains lb-rhs (depth):
-0.44755 (9), -0.40259 (9), -0.37414 (9), -0.37308 (9), -0.35776 (9), -0.33986 (9), -0.33506 (9), -0.32937 (9), -0.30620 (9), -0.28102 (9), -0.28019 (9), -0.27524 (9), -0.27192 (9), -0.26826 (9), -0.26142 (9), -0.19975 (9), -0.18037 (9), -0.17312 (9), -0.15933 (9), -0.15282 (9), 
length of domains: 30
Time: pickout 0.0023    decision 0.0424    set_bounds 0.0027    solve 0.4341    add 0.0016    
Accumulated time: pickout 0.0053    decision 0.3621    set_bounds 0.0099    solve 1.6918    add 0.0061    
Current (lb-rhs): -0.44755029678344727
81 domains visited
Cumulative time: 2.1060500144958496

BaB round 4
batch: 30
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/input.15, 9] [/input.15, 9] [/input.7, 74] [/input.15, 133] [/input.15, 9] [/input.15, 9] [/input.15, 167] [/input.15, 167] [/input.11, 91] [/input.11, 169] 
pruning_in_iteration open status: True
ratio of positive domain = 21 / 60 = 0.35
pruning-in-iteration extra time: 0.011236190795898438
Time: prepare 0.0099    beta_bound 0.4234    bound 0.4235    transfer 0.0008    finalize 0.0083    func 0.4425    
Accumulated time: func 2.1336    prepare 0.0666    bound 2.0294    beta_bound 2.0290    transfer 0.0034    finalize 0.0369    
batch bounding time:  0.4425649642944336
Current worst splitting domains lb-rhs (depth):
-0.36435 (10), -0.35380 (10), -0.33638 (10), -0.33574 (10), -0.29911 (10), -0.29281 (10), -0.28437 (10), -0.27401 (10), -0.27327 (10), -0.26260 (10), -0.23421 (10), -0.22976 (10), -0.21734 (10), -0.21246 (10), -0.20850 (10), -0.20280 (10), -0.19683 (10), -0.19253 (10), -0.17875 (10), -0.12096 (10), 
length of domains: 39
Time: pickout 0.0012    decision 0.0352    set_bounds 0.0023    solve 0.4426    add 0.0015    
Accumulated time: pickout 0.0065    decision 0.3973    set_bounds 0.0122    solve 2.1344    add 0.0076    
Current (lb-rhs): -0.3643500804901123
120 domains visited
Cumulative time: 2.5895371437072754

BaB round 5
batch: 39
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/input.15, 9] [/input, 194] [/input.11, 91] [/input, 194] [/input.7, 74] [/input, 194] [/input.7, 74] [/input, 84] [/input.7, 74] [/input, 194] 
pruning_in_iteration open status: True
ratio of positive domain = 36 / 78 = 0.46153846153846156
pruning-in-iteration extra time: 0.01628422737121582
Time: prepare 0.0124    beta_bound 0.4403    bound 0.4404    transfer 0.0008    finalize 0.0109    func 0.4646    
Accumulated time: func 2.5981    prepare 0.0795    bound 2.4698    beta_bound 2.4693    transfer 0.0041    finalize 0.0479    
batch bounding time:  0.4647049903869629
Current worst splitting domains lb-rhs (depth):
-0.32663 (11), -0.31930 (11), -0.29652 (11), -0.29004 (11), -0.23287 (11), -0.22601 (11), -0.21578 (11), -0.21261 (11), -0.20196 (11), -0.19047 (11), -0.17350 (11), -0.17308 (11), -0.16151 (11), -0.15856 (11), -0.15428 (11), -0.15328 (11), -0.15273 (11), -0.13884 (11), -0.12925 (11), -0.12824 (11), 
length of domains: 42
Time: pickout 0.0011    decision 0.0331    set_bounds 0.0035    solve 0.4647    add 0.0022    
Accumulated time: pickout 0.0076    decision 0.4304    set_bounds 0.0156    solve 2.5991    add 0.0098    
Current (lb-rhs): -0.32663285732269287
162 domains visited
Cumulative time: 3.095348596572876

BaB round 6
batch: 42
Average branched neurons at iteration 6:  1.0000
splitting decisions: 
split level 0: [/input.15, 153] [/input, 84] [/input.11, 169] [/input, 194] [/input.11, 169] [/input.11, 91] [/input.15, 153] [/input.11, 169] [/input.11, 32] [/input.11, 169] 
pruning_in_iteration open status: True
ratio of positive domain = 47 / 84 = 0.5595238095238095
pruning-in-iteration extra time: 0.014681100845336914
Time: prepare 0.0218    beta_bound 0.4811    bound 0.4812    transfer 0.0006    finalize 0.0095    func 0.5131    
Accumulated time: func 3.1113    prepare 0.1020    bound 2.9509    beta_bound 2.9504    transfer 0.0048    finalize 0.0574    
batch bounding time:  0.5132558345794678
Current worst splitting domains lb-rhs (depth):
-0.28211 (12), -0.28157 (12), -0.25234 (12), -0.21942 (12), -0.18580 (12), -0.18100 (12), -0.14922 (12), -0.14393 (12), -0.13817 (12), -0.13065 (12), -0.11987 (12), -0.11139 (12), -0.10358 (12), -0.10153 (12), -0.10078 (12), -0.10025 (12), -0.09986 (12), -0.09794 (12), -0.07962 (12), -0.07891 (12), 
length of domains: 37
Time: pickout 0.0021    decision 0.0447    set_bounds 0.0045    solve 0.5133    add 0.0027    
Accumulated time: pickout 0.0098    decision 0.4750    set_bounds 0.0202    solve 3.1124    add 0.0126    
Current (lb-rhs): -0.2821063995361328
199 domains visited
Cumulative time: 3.664278745651245

BaB round 7
batch: 37
Average branched neurons at iteration 7:  1.0000
splitting decisions: 
split level 0: [/input.7, 74] [/input.11, 166] [/input.11, 169] [/input, 194] [/input.3, 23] [/input.3, 45] [/input.11, 91] [/input, 84] [/input.7, 74] [/input, 84] 
pruning_in_iteration open status: True
ratio of positive domain = 35 / 74 = 0.472972972972973
pruning-in-iteration extra time: 0.015243768692016602
Time: prepare 0.0135    beta_bound 0.4867    bound 0.4868    transfer 0.0006    finalize 0.0108    func 0.5118    
Accumulated time: func 3.6231    prepare 0.1161    bound 3.4377    beta_bound 3.4371    transfer 0.0053    finalize 0.0682    
batch bounding time:  0.5119736194610596
Current worst splitting domains lb-rhs (depth):
-0.26387 (13), -0.25593 (13), -0.19835 (13), -0.18542 (13), -0.15334 (13), -0.15001 (13), -0.11499 (13), -0.09955 (13), -0.09330 (13), -0.08421 (13), -0.07935 (13), -0.07733 (13), -0.07496 (13), -0.07276 (13), -0.06921 (13), -0.06484 (13), -0.05876 (13), -0.05133 (13), -0.04637 (13), -0.04435 (13), 
length of domains: 39
Time: pickout 0.0022    decision 0.0306    set_bounds 0.0027    solve 0.5120    add 0.0027    
Accumulated time: pickout 0.0119    decision 0.5056    set_bounds 0.0229    solve 3.6244    add 0.0153    
Current (lb-rhs): -0.263871431350708
238 domains visited
Cumulative time: 4.215744733810425

BaB round 8
batch: 39
Average branched neurons at iteration 8:  1.0000
splitting decisions: 
split level 0: [/input.3, 168] [/input, 84] [/input.11, 169] [/input, 66] [/input, 84] [/input.15, 145] [/input.15, 145] [/input.11, 91] [/input.15, 145] [/input.3, 168] 
pruning_in_iteration open status: True
ratio of positive domain = 48 / 78 = 0.6153846153846154
pruning-in-iteration extra time: 0.017368078231811523
Time: prepare 0.0125    beta_bound 0.4570    bound 0.4571    transfer 0.0005    finalize 0.0112    func 0.4814    
Accumulated time: func 4.1044    prepare 0.1293    bound 3.8948    beta_bound 3.8941    transfer 0.0058    finalize 0.0794    
batch bounding time:  0.4815680980682373
Current worst splitting domains lb-rhs (depth):
-0.23344 (14), -0.22521 (14), -0.17606 (14), -0.17104 (14), -0.16249 (14), -0.14263 (14), -0.11512 (14), -0.11008 (14), -0.10667 (14), -0.09297 (14), -0.08810 (14), -0.07448 (14), -0.07383 (14), -0.07280 (14), -0.06501 (14), -0.05833 (14), -0.05647 (14), -0.04758 (14), -0.04182 (14), -0.04115 (14), 
length of domains: 30
Time: pickout 0.0018    decision 0.0409    set_bounds 0.0021    solve 0.4816    add 0.0022    
Accumulated time: pickout 0.0137    decision 0.5465    set_bounds 0.0250    solve 4.1060    add 0.0175    
Current (lb-rhs): -0.23344314098358154
268 domains visited
Cumulative time: 4.745768785476685

BaB round 9
batch: 30
Average branched neurons at iteration 9:  1.0000
splitting decisions: 
split level 0: [/input, 66] [/input, 84] [/input.11, 171] [/input.15, 145] [/input.11, 166] [/input.15, 145] [/input.11, 166] [/input.11, 91] [/input.11, 166] [/input.3, 45] 
pruning_in_iteration open status: True
ratio of positive domain = 32 / 60 = 0.5333333333333333
pruning-in-iteration extra time: 0.016852140426635742
Time: prepare 0.0166    beta_bound 0.4827    bound 0.4828    transfer 0.0007    finalize 0.0103    func 0.5104    
Accumulated time: func 4.6149    prepare 0.1466    bound 4.3775    beta_bound 4.3767    transfer 0.0066    finalize 0.0898    
batch bounding time:  0.5105507373809814
Current worst splitting domains lb-rhs (depth):
-0.19768 (15), -0.18868 (15), -0.16095 (15), -0.15564 (15), -0.15115 (15), -0.13855 (15), -0.13245 (15), -0.11353 (15), -0.10566 (15), -0.10163 (15), -0.07492 (15), -0.07466 (15), -0.07445 (15), -0.07158 (15), -0.07081 (15), -0.06442 (15), -0.06422 (15), -0.04139 (15), -0.02627 (15), -0.01942 (15), 
length of domains: 28
Time: pickout 0.0024    decision 0.0429    set_bounds 0.0028    solve 0.5106    add 0.0015    
Accumulated time: pickout 0.0161    decision 0.5894    set_bounds 0.0278    solve 4.6165    add 0.0190    
Current (lb-rhs): -0.19768238067626953
296 domains visited
Cumulative time: 5.306729793548584

BaB round 10
batch: 28
Average branched neurons at iteration 10:  1.0000
splitting decisions: 
split level 0: [/input, 66] [/input, 66] [/input.3, 45] [/input, 194] [/input.3, 45] [/input, 84] [/input.15, 9] [/input, 66] [/input.15, 145] [/input, 66] 
pruning_in_iteration open status: True
ratio of positive domain = 27 / 56 = 0.4821428571428571
pruning-in-iteration extra time: 0.016324281692504883
Time: prepare 0.0151    beta_bound 0.4363    bound 0.4364    transfer 0.0005    finalize 0.0063    func 0.4586    
Accumulated time: func 5.0735    prepare 0.1626    bound 4.8139    beta_bound 4.8130    transfer 0.0070    finalize 0.0961    
batch bounding time:  0.45874977111816406
Current worst splitting domains lb-rhs (depth):
-0.16608 (16), -0.15652 (16), -0.12865 (16), -0.12294 (16), -0.10523 (16), -0.09916 (16), -0.08324 (16), -0.08116 (16), -0.08027 (16), -0.07155 (16), -0.06854 (16), -0.06245 (16), -0.05408 (16), -0.05314 (16), -0.04027 (16), -0.03931 (16), -0.03853 (16), -0.03653 (16), -0.03344 (16), -0.02432 (16), 
length of domains: 29
Time: pickout 0.0012    decision 0.0512    set_bounds 0.0036    solve 0.4588    add 0.0015    
Accumulated time: pickout 0.0173    decision 0.6406    set_bounds 0.0315    solve 5.0753    add 0.0205    
Current (lb-rhs): -0.16608214378356934
325 domains visited
Cumulative time: 5.823794364929199

BaB round 11
batch: 29
Average branched neurons at iteration 11:  1.0000
splitting decisions: 
split level 0: [/input.3, 45] [/input, 66] [/input.11, 91] [/input, 36] [/input.3, 45] [/input.3, 45] [/input.11, 59] [/input.11, 59] [/input, 66] [/input.11, 91] 
pruning_in_iteration open status: True
ratio of positive domain = 29 / 58 = 0.5
pruning-in-iteration extra time: 0.015351057052612305
Time: prepare 0.0095    beta_bound 0.4380    bound 0.4381    transfer 0.0007    finalize 0.0072    func 0.4556    
Accumulated time: func 5.5291    prepare 0.1725    bound 5.2521    beta_bound 5.2511    transfer 0.0078    finalize 0.1033    
batch bounding time:  0.4557204246520996
Current worst splitting domains lb-rhs (depth):
-0.12429 (17), -0.10986 (17), -0.10962 (17), -0.10473 (17), -0.08877 (17), -0.07878 (17), -0.07295 (17), -0.07066 (17), -0.06665 (17), -0.05584 (17), -0.04226 (17), -0.04050 (17), -0.03945 (17), -0.03302 (17), -0.03149 (17), -0.02840 (17), -0.02739 (17), -0.02613 (17), -0.02370 (17), -0.01707 (17), 
length of domains: 29
Time: pickout 0.0012    decision 0.0289    set_bounds 0.0019    solve 0.4558    add 0.0016    
Accumulated time: pickout 0.0185    decision 0.6695    set_bounds 0.0334    solve 5.5311    add 0.0221    
Current (lb-rhs): -0.12428951263427734
354 domains visited
Cumulative time: 6.313976764678955

BaB round 12
batch: 29
Average branched neurons at iteration 12:  1.0000
splitting decisions: 
split level 0: [/input.11, 32] [/input, 84] [/input, 66] [/input.11, 32] [/input, 66] [/input.11, 32] [/input.15, 83] [/input.11, 32] [/input.11, 32] [/input.11, 32] 
pruning_in_iteration open status: True
ratio of positive domain = 41 / 58 = 0.7068965517241379
pruning-in-iteration extra time: 0.015191793441772461
Time: prepare 0.0094    beta_bound 0.4581    bound 0.4582    transfer 0.0009    finalize 0.0072    func 0.4759    
Accumulated time: func 6.0050    prepare 0.1825    bound 5.7103    beta_bound 5.7091    transfer 0.0087    finalize 0.1106    
batch bounding time:  0.476015567779541
Current worst splitting domains lb-rhs (depth):
-0.10995 (18), -0.09602 (18), -0.09517 (18), -0.09090 (18), -0.05117 (18), -0.04062 (18), -0.03939 (18), -0.03710 (18), -0.03415 (18), -0.03278 (18), -0.02572 (18), -0.02566 (18), -0.02444 (18), -0.02335 (18), -0.02119 (18), -0.01955 (18), -0.01162 (18), 
length of domains: 17
Time: pickout 0.0014    decision 0.0338    set_bounds 0.0020    solve 0.4760    add 0.0015    
Accumulated time: pickout 0.0199    decision 0.7033    set_bounds 0.0354    solve 6.0071    add 0.0236    
Current (lb-rhs): -0.10994517803192139
371 domains visited
Cumulative time: 6.830172061920166

BaB round 13
batch: 17
Average branched neurons at iteration 13:  1.0000
splitting decisions: 
split level 0: [/input, 66] [/input, 66] [/input.11, 166] [/input, 66] [/input.15, 95] [/input.15, 95] [/input.11, 166] [/input, 66] [/input.11, 166] [/input.11, 166] 
split level 1: [/input.11, 166] [/input.11, 166] [/input, 66] [/input.11, 166] [/input.15, 83] [/input.15, 83] [/input, 66] [/input.11, 166] [/input, 66] [/input, 66] 
pruning_in_iteration open status: True
ratio of positive domain = 61 / 68 = 0.8970588235294118
pruning-in-iteration extra time: 0.013756752014160156
Time: prepare 0.0106    beta_bound 0.4743    bound 0.4744    transfer 0.0005    finalize 0.0078    func 0.4934    
Accumulated time: func 6.4984    prepare 0.1936    bound 6.1847    beta_bound 6.1835    transfer 0.0092    finalize 0.1184    
batch bounding time:  0.49352288246154785
Current worst splitting domains lb-rhs (depth):
-0.01723 (20), -0.01556 (20), -0.00974 (20), -0.00786 (20), -0.00643 (20), -0.00553 (20), -0.00159 (20), 
length of domains: 7
Time: pickout 0.0024    decision 0.0365    set_bounds 0.0024    solve 0.4935    add 0.0011    
Accumulated time: pickout 0.0222    decision 0.7399    set_bounds 0.0378    solve 6.5006    add 0.0247    
Current (lb-rhs): -0.017229318618774414
378 domains visited
Cumulative time: 7.367136001586914

BaB round 14
batch: 7
Average branched neurons at iteration 14:  1.0000
splitting decisions: 
split level 0: [/input.15, 95] [/input.15, 95] [/input.15, 95] [/input.15, 95] [/input.15, 95] [/input.15, 95] [/input.15, 95] 
split level 1: [/input.3, 172] [/input.3, 172] [/input.15, 83] [/input.15, 83] [/input.15, 83] [/input.3, 172] [/input.15, 83] 
split level 2: [/input.15, 83] [/input.15, 83] [/input.3, 172] [/input.3, 172] [/input.3, 172] [/input.15, 83] [/input.3, 172] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 56 / 56 = 1.0
pruning-in-iteration extra time: 9.608268737792969e-05
Time: prepare 0.0090    beta_bound 0.0096    bound 0.0096    transfer 0.0003    finalize 0.0059    func 0.0248    
Accumulated time: func 6.5232    prepare 0.2031    bound 6.1943    beta_bound 6.1930    transfer 0.0095    finalize 0.1243    
batch bounding time:  0.024951934814453125
length of domains: 0
Time: pickout 0.0011    decision 0.0268    set_bounds 0.0023    solve 0.0250    add 0.0001    
Accumulated time: pickout 0.0234    decision 0.7667    set_bounds 0.0401    solve 6.5256    add 0.0249    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
378 domains visited
Cumulative time: 7.423313617706299


Properties batch 4, size 1
Remaining timeout: 244.92019271850586
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.241931676864624.

Properties batch 5, size 1
Remaining timeout: 244.7986068725586
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.220248222351074.

Properties batch 6, size 1
Remaining timeout: 244.73565912246704
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.9806666374206543.

Properties batch 7, size 1
Remaining timeout: 244.66064953804016
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.9903993606567383.

Properties batch 8, size 1
Remaining timeout: 244.598881483078
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.6674959659576416.
Result: safe in 655.4630 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):655.4564063944168, max time: 655.4629609584808
mean time for verified SAFE instances(total 1): 655.4629609584808, max time: 655.4629609584808
safe (total 1), index: [0]
