Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_6_200
  path: mnist_6_200_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 5
  end: 6
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.015
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 18:06:03 2023 on zeratul
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=200, bias=True)
  (2): ReLU()
  (3): Linear(in_features=200, out_features=200, bias=True)
  (4): ReLU()
  (5): Linear(in_features=200, out_features=200, bias=True)
  (6): ReLU()
  (7): Linear(in_features=200, out_features=200, bias=True)
  (8): ReLU()
  (9): Linear(in_features=200, out_features=200, bias=True)
  (10): ReLU()
  (11): Linear(in_features=200, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226457)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_6_200]_start=5_end=6_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundShape(name=/13, inputs=[/0])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundGather(name=/15, inputs=[/13, /14])
  (/16): BoundConstant(name=/16, inputs=[])
  (/17): BoundUnsqueeze(name=/17, inputs=[/15])
  (/18): BoundUnsqueeze(name=/18, inputs=[/16])
  (/19): BoundConcat(name=/19, inputs=[/17, /18])
  (/20): BoundReshape(name=/20, inputs=[/0, /19])
  (/input): BoundLinear(name=/input, inputs=[/20, /1, /2])
  (/22): BoundRelu(name=/22, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/22, /3, /4])
  (/24): BoundRelu(name=/24, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/24, /5, /6])
  (/26): BoundRelu(name=/26, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/26, /7, /8])
  (/28): BoundRelu(name=/28, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/28, /9, /10])
  (/30): BoundRelu(name=/30, inputs=[/input.15])
  (/31): BoundLinear(name=/31, inputs=[/30, /11, /12])
)
Model prediction is: tensor([[-3.56427479,  9.03890324,  0.85330975, -0.52876991, -2.93471551,
         -1.80122316, -1.17991352,  2.43788671,  1.66733861, -0.62709117]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [45]; unstable size 45; total size 200 (torch.Size([1, 200]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 86 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.11 using full alpha with unstable size 186 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [86]; unstable size 86; total size 200 (torch.Size([1, 200]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.11 using full alpha with unstable size 186 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [111]; unstable size 111; total size 200 (torch.Size([1, 200]))
layer /26 start_node /input.11 using full alpha with unstable size 186 total_size 200 output_shape torch.Size([200])
layer /26 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([200]); unstable size 186; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-24.45612335, -31.25578690, -29.34679985, -30.51810265, -25.84836388,
         -26.67016220, -31.81441498, -27.65185738, -31.37026405]],
       device='cuda:0') None
best_l after optimization: -198.21939086914062
alpha/beta optimization time: 7.948664426803589
initial alpha-CROWN bounds: tensor([[-17.25797653, -24.49904442, -22.62041473, -21.49936485, -19.98800659,
         -20.70762634, -24.72646713, -22.51439857, -24.40609360]],
       device='cuda:0')
Worst class: (+ rhs) -24.72646713256836
Split layers:
  BoundLinear(name=/input.11, inputs=[/26, /7, /8]): [(BoundRelu(name=/28, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.3, inputs=[/22, /3, /4]): [(BoundRelu(name=/24, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.15, inputs=[/28, /9, /10]): [(BoundRelu(name=/30, inputs=[/input.15]), 0)]
  BoundLinear(name=/input, inputs=[/20, /1, /2]): [(BoundRelu(name=/22, inputs=[/input]), 0)]
  BoundLinear(name=/input.7, inputs=[/24, /5, /6]): [(BoundRelu(name=/26, inputs=[/input.7]), 0)]
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750000149011612, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.56427479,  9.03890324,  0.85330975, -0.52876991, -2.93471551,
         -1.80122316, -1.17991352,  2.43788671,  1.66733861, -0.62709117]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.42669535,  7.81061125,  1.27427280, -0.32399046, -2.52760816,
          -1.83479512, -1.20971704,  2.96891189,  1.17530632, -0.43559697],
         [-3.42669535,  7.81061125,  1.27427280, -0.32399046, -2.52760816,
          -1.83479512, -1.20971704,  2.96891189,  1.17530632, -0.43559697]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[11.23730659,  6.53633833,  8.13460159, 10.33821964,  9.64540672,
           9.02032852,  4.84169960,  6.63530493,  8.24620819]]],
       device='cuda:0')
number of violation:  0
Attack finished in 0.8670 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [45]; unstable size 45; total size 200 (torch.Size([1, 200]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 86 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.11 using full alpha with unstable size 186 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [86]; unstable size 86; total size 200 (torch.Size([1, 200]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 111 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.11 using full alpha with unstable size 186 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [111]; unstable size 111; total size 200 (torch.Size([1, 200]))
layer /26 start_node /input.11 using full alpha with unstable size 186 total_size 200 output_shape torch.Size([200])
layer /26 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([200]); unstable size 186; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2024-02-29
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_43', 'lay4_142', 'lay4_5', 'lay4_153', 'lay4_179', 'lay4_58', 'lay4_77', 'lay4_103', 'lay4_146', 'lay4_163', 'lay4_75', 'lay4_76', 'lay4_134', 'lay4_154', 'lay4_169', 'lay4_193', 'lay4_116', 'lay4_124', 'lay4_104', 'lay4_69', 'lay4_29', 'lay4_162', 'lay4_47', 'lay4_53', 'lay4_196', 'lay4_72', 'lay4_192', 'lay4_81', 'lay4_1', 'lay4_0', 'lay4_20', 'lay4_94', 'lay4_8', 'lay4_6', 'lay4_95', 'lay4_185', 'lay4_19', 'lay4_45', 'lay4_39', 'lay4_70', 'lay4_14', 'lay4_133', 'lay4_150', 'lay4_17', 'lay4_12', 'lay4_168', 'lay4_44', 'lay4_27', 'lay4_160', 'lay4_191', 'lay4_4', 'lay4_147', 'lay4_105', 'lay4_126', 'lay4_74', 'lay4_100', 'lay4_37', 'lay4_137', 'lay4_123', 'lay4_197', 'lay4_78', 'lay4_174', 'lay4_79', 'lay4_190', 'lay4_63', 'lay4_62', 'lay4_177', 'lay4_61', 'lay4_172', 'lay4_182', 'lay4_131', 'lay4_188', 'lay4_194', 'lay4_88', 'lay4_157', 'lay4_67', 'lay4_178', 'lay4_112', 'lay4_181', 'lay4_24', 'lay4_184', 'lay4_166', 'lay4_99', 'lay4_135'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/Verifier_Development/complete_verifier/data_utils.py:257: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_154, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6935s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_193, [-inf,inf]=>[-0.4744192696771373,0.1519449391382782] (2,-1; 2,-1), time: 1.8123s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-0.6462890054116316,0.12163284459395632] (2,-1; 2,-1), time: 1.8644s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.33473578219621897,0.41163530978284374] (2,-1; 2,-1), time: 1.9106s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_116, [-inf,inf]=>[1e-05,0.7993583486631399] (15,-1; 2,-1), time: 1.5423s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_146, [-inf,inf]=>[-0.5407299006348738,0.02158623821064745] (2,-1; 2,-1), time: 2.3150s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_124, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5217s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.6445934422256753,0.09720652799179377] (2,-1; 2,-1), time: 2.3931s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-0.5227271612599281,0.15262334518127857] (2,-1; 2,-1), time: 2.5552s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_179, [-inf,inf]=>[-0.5896338423495046,0.11671991089100209] (2,-1; 2,-1), time: 2.7902s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_169, [-inf,inf]=>[-0.49162225146829525,0.2920716078977364] (2,-1; 2,-1), time: 2.8027s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4277s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_163, [-inf,inf]=>[-0.34314477115619774,0.31336220860608244] (2,-1; 2,-1), time: 3.2742s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_134, [-inf,inf]=>[-0.8517721257965247,0.009633002209841326] (2,-1; 2,-1), time: 3.3110s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_77, [-inf,inf]=>[-0.521667085051679,0.14466518606197218] (2,-1; 2,-1), time: 3.4234s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_5, [-inf,inf]=>[-0.5391488141760865,0.09927156796990785] (2,-1; 2,-1), time: 3.5297s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1938s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4141s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4704s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[1e-05,0.5994835033976033] (15,-1; 2,-1), time: 1.9643s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_196, [-inf,inf]=>[-0.401662628255762,0.2760893044100857] (2,-1; 2,-1), time: 1.4279s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[1e-05,0.9608187146170483] (15,-1; 2,-1), time: 2.1222s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_103, [-inf,inf]=>[-0.2900862189733495,0.3365902315875524] (2,-1; 2,-1), time: 4.0610s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7661s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4416s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_142, [-inf,inf]=>[-0.45987329781146097,0.187312232050209] (2,-1; 2,-1), time: 4.3454s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_153, [-inf,inf]=>[-0.8057579974068303,0.1236008940270279] (2,-1; 2,-1), time: 4.4894s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4465s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_133, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4688s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-0.400956196338848,0.2924750687233296] (2,-1; 2,-1), time: 2.8536s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[1e-05,1.284212532813551] (15,-1; 2,-1), time: 1.3217s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_29, [-inf,inf]=>[-0.5603881070400147,0.1482164843550165] (2,-1; 2,-1), time: 3.3069s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4832s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_14, [-inf,inf]=>[-0.6931005660091462,0.03822582874570797] (2,-1; 2,-1), time: 1.5530s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.5240645520507143,0.11699989095620526] (2,-1; 2,-1), time: 3.4028s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_95, [-inf,inf]=>[-0.44157826038114856,0.18963651221117211] (2,-1; 2,-1), time: 3.2927s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-0.674927177959744,0.02363010227839217] (2,-1; 2,-1), time: 3.6581s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[-0.34024660415131947,0.31990550020051695] (2,-1; 2,-1), time: 3.8828s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_39, [-inf,inf]=>[-0.5955095723965973,0.03356068334386761] (2,-1; 2,-1), time: 3.1181s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.5432458297230212,0.03928077769613694] (2,-1; 2,-1), time: 3.6555s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4144s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[-0.23610020807081908,0.4659395616805671] (2,-1; 2,-1), time: 3.5237s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_147, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4728s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_126, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4162s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4763s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_185, [-inf,inf]=>[-0.5266841716918074,0.1926598441337666] (2,-1; 2,-1), time: 3.7129s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_44, [-inf,inf]=>[-0.5773866566681473,0.20443231280641797] (2,-1; 2,-1), time: 2.3531s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_72, [-inf,inf]=>[-0.5750004480829356,0.10771252469756948] (2,-1; 2,-1), time: 4.9159s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4377s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_17, [-inf,inf]=>[-0.7032828470114412,0.07638135441708901] (2,-1; 2,-1), time: 3.4578s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_190, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3443s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.5582350339644038,0.08171874237145056] (2,-1; 2,-1), time: 3.4455s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3912s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4918s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_160, [-inf,inf]=>[-0.5085124793004795,0.13705425854571518] (2,-1; 2,-1), time: 2.8464s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[-0.5120515386338299,0.1495352627958467] (2,-1; 2,-1), time: 4.0587s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_191, [-inf,inf]=>[-0.2929715988628505,0.2308138436821391] (2,-1; 2,-1), time: 3.1831s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_100, [-inf,inf]=>[-0.47975379887466285,0.20261594222424112] (2,-1; 2,-1), time: 1.9419s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-0.389203127440911,0.17370562444569843] (2,-1; 2,-1), time: 2.2494s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_61, [-inf,inf]=>[1e-05,0.9447476315331642] (15,-1; 2,-1), time: 1.3585s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7269s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_197, [-inf,inf]=>[-0.5357000176869849,0.002921077253552426] (2,-1; 2,-1), time: 2.2594s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3535s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4076s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-0.423690918134655,0.21615346164468802] (2,-1; 2,-1), time: 4.7921s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_181, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3854s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-0.6910376258988662,0.09287823970361268] (2,-1; 2,-1), time: 3.0486s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_123, [-inf,inf]=>[-0.47903557424184917,0.23174400443812926] (2,-1; 2,-1), time: 3.2268s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[-0.7675835428888483,0.00014943355599110475] (2,-1; 2,-1), time: 3.9353s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_88, [-inf,inf]=>[1e-05,0.8294083989308147] (15,-1; 2,-1), time: 2.1822s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_131, [-inf,inf]=>[-0.08658778800628003,0.5733996822790636] (2,-1; 2,-1), time: 3.0112s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[1e-05,0.8058680714139501] (15,-1; 2,-1), time: 1.2178s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_188, [-inf,inf]=>[-0.48387637898371477,0.13274402533084917] (2,-1; 2,-1), time: 3.4676s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_135, [-inf,inf]=>[1e-05,0.6093546414469416] (15,-1; 2,-1), time: 1.3167s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_137, [-inf,inf]=>[-0.048782534985631856,0.6648700268677289] (2,-1; 2,-1), time: 4.5706s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[-0.6856806823623182,0.10092159343907976] (2,-1; 2,-1), time: 4.6934s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_184, [-inf,inf]=>[-0.5060793949619407,0.102068046531854] (2,-1; 2,-1), time: 1.9970s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_166, [-inf,inf]=>[-0.07429092019011035,0.7142829378456678] (2,-1; 2,-1), time: 2.0212s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_177, [-inf,inf]=>[-0.6315937592202141,0.11941123158181662] (2,-1; 2,-1), time: 4.6575s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_182, [-inf,inf]=>[-0.27137028480274905,0.35409738020519416] (2,-1; 2,-1), time: 4.2476s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_172, [-inf,inf]=>[-0.4515393929071068,0.2642422734317397] (2,-1; 2,-1), time: 4.3716s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-0.5165834875905968,0.16307978895098085] (2,-1; 2,-1), time: 3.0089s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-0.4826595441378365,0.10314131024215317] (2,-1; 2,-1), time: 3.6935s, #vars: 1275, #constrs: 535, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[-0.38704040536506495,0.22416300197377623] (2,-1; 2,-1), time: 4.0147s, #vars: 1275, #constrs: 535, improved: True
PGD done for relu layer 2
MIP improved 84 nodes out of 84 unstable nodes, lb improved 10.502710342407227, ub improved 11.260499954223633, time 15.7701
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_153', 'lay6_126', 'lay6_157', 'lay6_162', 'lay6_91', 'lay6_139', 'lay6_23', 'lay6_113', 'lay6_6', 'lay6_117', 'lay6_30', 'lay6_89', 'lay6_152', 'lay6_32', 'lay6_128', 'lay6_15', 'lay6_156', 'lay6_97', 'lay6_93', 'lay6_88', 'lay6_199', 'lay6_83', 'lay6_26', 'lay6_119', 'lay6_106', 'lay6_65', 'lay6_118', 'lay6_195', 'lay6_96', 'lay6_193', 'lay6_142', 'lay6_78', 'lay6_151', 'lay6_112', 'lay6_121', 'lay6_36', 'lay6_127', 'lay6_198', 'lay6_125', 'lay6_123', 'lay6_64', 'lay6_86', 'lay6_148', 'lay6_132', 'lay6_158', 'lay6_3', 'lay6_46', 'lay6_33', 'lay6_2', 'lay6_173', 'lay6_50', 'lay6_54', 'lay6_53', 'lay6_110', 'lay6_98', 'lay6_108', 'lay6_12', 'lay6_10', 'lay6_186', 'lay6_22', 'lay6_178', 'lay6_135', 'lay6_38', 'lay6_59', 'lay6_197', 'lay6_129', 'lay6_176', 'lay6_169', 'lay6_75', 'lay6_170', 'lay6_1', 'lay6_21', 'lay6_42', 'lay6_58', 'lay6_90', 'lay6_29', 'lay6_131', 'lay6_136', 'lay6_188', 'lay6_9', 'lay6_4', 'lay6_35', 'lay6_160', 'lay6_13', 'lay6_165', 'lay6_149', 'lay6_61', 'lay6_52', 'lay6_167', 'lay6_105', 'lay6_8', 'lay6_37', 'lay6_174', 'lay6_34', 'lay6_77', 'lay6_124', 'lay6_73', 'lay6_150', 'lay6_18', 'lay6_161', 'lay6_133', 'lay6_111', 'lay6_99', 'lay6_134', 'lay6_196', 'lay6_28', 'lay6_57', 'lay6_183', 'lay6_163', 'lay6_41'] filter: 1.0
Solving MIP for lay6_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9341s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5259s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5995s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5317s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.1885s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2600s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-0.25660904751687086,0.5521356814116134] (9,-1; 2,-1), time: 22.8505s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[-0.33153213700530987,0.31663305202201175] (9,-1; 2,-1), time: 26.4034s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-0.20445486226975262,0.307889652631128] (9,-1; 2,-1), time: 27.2691s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-0.22293172998657215,0.44144348610084144] (2,-1; 9,-1), time: 29.7228s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-0.1307932475663014,0.7022386284366009] (9,-1; 2,-1), time: 28.7991s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_113, [-inf,inf]=>[-0.5453483330690738,0.09838168041493893] (9,-1; 9,-1), time: 30.0201s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_128, [-inf,inf]=>[-0.31319752713972915,0.2876088631975838] (9,-1; 9,-1), time: 30.0314s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-0.3412543537677757,0.21535245213892887] (9,-1; 9,-1), time: 30.0401s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.2960079669855153,0.27411375740163874] (9,-1; 9,-1), time: 30.1546s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_126, [-inf,inf]=>[-0.614870810970839,0.14965651320555004] (9,-1; 9,-1), time: 30.1746s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-0.5045384772483148,0.06134929863111536] (9,-1; 9,-1), time: 30.5474s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8744s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_157, [-inf,inf]=>[-0.6847535120155979,0.04617971201160719] (9,-1; 9,-1), time: 31.0685s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-0.08518253660707067,0.4965639608898558] (9,-1; 9,-1), time: 31.1314s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_153, [-inf,inf]=>[-0.3997137236482714,0.2722792958596618] (9,-1; 9,-1), time: 31.1834s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1302s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_127, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5026s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1339s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.6292664396565485,0.08654323218129986] (9,-1; 9,-1), time: 30.5364s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.3978s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2450s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1295s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5037s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-0.2731627479801549,0.20754888719907555] (9,-1; 2,-1), time: 25.0819s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5895s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4822s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_158, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4094s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6190s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1842s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5428s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2465s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.1495s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5461s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.3938s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-0.532902564613463,0.049949946440280904] (9,-1; 9,-1), time: 30.3891s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[1e-05,0.5733293966778317] (15,-1; 9,-1), time: 22.8895s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_148, [-inf,inf]=>[-0.7213902704470408,0.005530015150970071] (9,-1; 2,-1), time: 23.3151s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-0.3739181883434936,0.17092174420765566] (9,-1; 2,-1), time: 24.2665s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.4453476735846304,0.05376233294436925] (9,-1; 2,-1), time: 27.3648s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4755s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[1e-05,0.5680908220722249] (15,-1; 2,-1), time: 19.1067s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5849s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-0.19980656083415466,0.48928715657804955] (2,-1; 9,-1), time: 26.7736s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_197, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5343s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_129, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5236s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-0.37638207913627364,0.1763110921933501] (9,-1; 9,-1), time: 30.0822s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-0.5599642922611071,0.0001881079403888733] (9,-1; 9,-1), time: 30.3933s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-0.39854212684964646,0.15699881115645456] (9,-1; 9,-1), time: 30.0193s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_142, [-inf,inf]=>[-0.3728003901772002,0.12025154753608705] (9,-1; 9,-1), time: 30.1202s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.1882s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5674s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5468s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_112, [-inf,inf]=>[-0.4399212037783132,0.09693601528821157] (9,-1; 9,-1), time: 30.3542s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_151, [-inf,inf]=>[-0.08330782887510305,0.40787216892133915] (9,-1; 9,-1), time: 30.6002s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6393s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4424s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_108, [-inf,inf]=>[1e-05,0.7982536175593329] (15,-1; 9,-1), time: 15.6243s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5156s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-0.1491218185046823,0.5426202705608716] (9,-1; 9,-1), time: 30.1035s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.41826557314034846,0.10253045853413326] (9,-1; 9,-1), time: 30.0399s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4066s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2662s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5296s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3693s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_149, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5222s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[1e-05,0.7318724291186254] (15,-1; 2,-1), time: 11.2556s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[1e-05,0.8497089382198691] (15,-1; 9,-1), time: 16.3186s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[1e-05,0.8509665711275767] (15,-1; 9,-1), time: 18.3640s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-0.20166405128186776,0.3544378183169494] (9,-1; 9,-1), time: 30.1653s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.3672466709542791,0.17191782571221248] (9,-1; 9,-1), time: 30.3762s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-0.1386429634710869,0.3824388005148227] (2,-1; 9,-1), time: 24.5492s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_59, [-inf,inf]=>[-0.3884288932472589,0.14688948033051077] (9,-1; 2,-1), time: 28.2215s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[-0.36095665492292484,0.16839555366649145] (9,-1; 9,-1), time: 30.4794s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-0.5023224536847627,0.021003567440588095] (9,-1; 9,-1), time: 30.8705s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[1e-05,0.6875109246027096] (15,-1; 9,-1), time: 26.9287s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-0.22248068869853085,0.404869353135629] (2,-1; 9,-1), time: 27.8770s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[1e-05,0.49184439683997977] (15,-1; 9,-1), time: 26.4329s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3317s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 14.3886s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5721s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[-0.133415646937288,0.33864345941849805] (9,-1; 9,-1), time: 30.0234s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.4302966692346373,0.09870835399094859] (9,-1; 9,-1), time: 30.8013s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.16361064338213901,0.42490670969626293] (9,-1; 2,-1), time: 24.3576s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_196, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6136s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-0.10447826963331579,0.4063136775834753] (9,-1; 9,-1), time: 30.0226s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6769s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_174, [-inf,inf]=>[1e-05,0.814094478648394] (15,-1; 2,-1), time: 11.7151s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-0.0074596489773014595,0.5277044021139642] (9,-1; 2,-1), time: 28.4139s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6173s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_105, [-inf,inf]=>[-0.6151411059595974,0.0016138245866779894] (2,-1; 9,-1), time: 23.6506s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_111, [-inf,inf]=>[1e-05,0.8610169152856167] (15,-1; 9,-1), time: 16.0917s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[1e-05,1.033351008432334] (15,-1; 2,-1), time: 13.3682s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_161, [-inf,inf]=>[1e-05,0.5207322775349067] (15,-1; 2,-1), time: 19.5124s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.6988829274875398,0.03636025360090848] (9,-1; 2,-1), time: 22.8448s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.4704361394318485,0.04468216987656516] (9,-1; 2,-1), time: 28.2932s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_183, [-inf,inf]=>[1e-05,0.9665676759147871] (15,-1; 9,-1), time: 16.1926s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[1e-05,0.7642125317754935] (15,-1; 9,-1), time: 15.6882s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-0.4823057683150584,0.019784760896977085] (9,-1; 9,-1), time: 30.2793s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_133, [-inf,inf]=>[1e-05,0.4673286610598154] (15,-1; 9,-1), time: 23.9917s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_134, [-inf,inf]=>[1e-05,0.5468987467513644] (15,-1; 9,-1), time: 24.0165s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-0.4093881078443846,0.056872275812099] (9,-1; 9,-1), time: 30.0209s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-0.43087289068603046,0.07696385272564507] (9,-1; 9,-1), time: 30.0166s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[-0.1041684861701735,0.35554997461127297] (9,-1; 9,-1), time: 30.0167s, #vars: 1581, #constrs: 894, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-0.19630453226178712,0.2826341820177171] (9,-1; 9,-1), time: 30.0111s, #vars: 1581, #constrs: 894, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(154, -1), (116, 1), (124, -1), (104, 1), (69, 1), (47, -1), (53, -1), (192, -1), (1, -1), (0, -1), (6, -1), (45, 1), (70, -1), (133, -1), (168, -1), (4, -1), (147, -1), (105, -1), (126, -1), (78, -1), (190, -1), (63, -1), (62, -1), (61, 1), (194, -1), (88, 1), (157, -1), (178, -1), (181, -1), (99, 1), (135, 1)]
best_l after optimization: -16.330713272094727
beta sum per layer: []
alpha/beta optimization time: 7.197110414505005
alpha-CROWN with intermediate bounds by MIP: tensor([[ 0.59941006, -4.31572294, -1.86591339, -1.47113991,  0.39178181,
         -0.53641319, -4.83226347, -1.95249319, -2.34795952]], device='cuda:0') None
MIP improved 110 nodes out of 110 unstable nodes, lb improved 24.623817443847656, ub improved 32.58951187133789, time 122.3467
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_33', 'lay8_0', 'lay8_28', 'lay8_82', 'lay8_129', 'lay8_73', 'lay8_57', 'lay8_86', 'lay8_65', 'lay8_97', 'lay8_160', 'lay8_173', 'lay8_45', 'lay8_111', 'lay8_66', 'lay8_4', 'lay8_127', 'lay8_8', 'lay8_22', 'lay8_7', 'lay8_98', 'lay8_69', 'lay8_38', 'lay8_77', 'lay8_162', 'lay8_53', 'lay8_50', 'lay8_70', 'lay8_1', 'lay8_133', 'lay8_140', 'lay8_180', 'lay8_184', 'lay8_136', 'lay8_114', 'lay8_158', 'lay8_168', 'lay8_26', 'lay8_16', 'lay8_80', 'lay8_76', 'lay8_153', 'lay8_51', 'lay8_64', 'lay8_174', 'lay8_154', 'lay8_197', 'lay8_83', 'lay8_182', 'lay8_3', 'lay8_81', 'lay8_25', 'lay8_199', 'lay8_130', 'lay8_10', 'lay8_171', 'lay8_139', 'lay8_192', 'lay8_188', 'lay8_24', 'lay8_34', 'lay8_104', 'lay8_135', 'lay8_128', 'lay8_41', 'lay8_52', 'lay8_145', 'lay8_181', 'lay8_20', 'lay8_31', 'lay8_56', 'lay8_15', 'lay8_141', 'lay8_72', 'lay8_37', 'lay8_195', 'lay8_61', 'lay8_175', 'lay8_21', 'lay8_165', 'lay8_178', 'lay8_99', 'lay8_161', 'lay8_71', 'lay8_176', 'lay8_78', 'lay8_189', 'lay8_6', 'lay8_112', 'lay8_169', 'lay8_132', 'lay8_183', 'lay8_5', 'lay8_155', 'lay8_115', 'lay8_85', 'lay8_27', 'lay8_92', 'lay8_2', 'lay8_13', 'lay8_59', 'lay8_163', 'lay8_172', 'lay8_147', 'lay8_35', 'lay8_157', 'lay8_117', 'lay8_107', 'lay8_12', 'lay8_121', 'lay8_152', 'lay8_49', 'lay8_110', 'lay8_167', 'lay8_14', 'lay8_96', 'lay8_196', 'lay8_17', 'lay8_39', 'lay8_156', 'lay8_123', 'lay8_79', 'lay8_84', 'lay8_177', 'lay8_54', 'lay8_151', 'lay8_185', 'lay8_48', 'lay8_102', 'lay8_90', 'lay8_190', 'lay8_142', 'lay8_179', 'lay8_68', 'lay8_150', 'lay8_95', 'lay8_9', 'lay8_32', 'lay8_44', 'lay8_47', 'lay8_93', 'lay8_164', 'lay8_106', 'lay8_18', 'lay8_170', 'lay8_109', 'lay8_120', 'lay8_122', 'lay8_144', 'lay8_94', 'lay8_11', 'lay8_46', 'lay8_105', 'lay8_186', 'lay8_60', 'lay8_137', 'lay8_125', 'lay8_103', 'lay8_131', 'lay8_87', 'lay8_74', 'lay8_116', 'lay8_23', 'lay8_91', 'lay8_42', 'lay8_63', 'lay8_100', 'lay8_166', 'lay8_30', 'lay8_143', 'lay8_43', 'lay8_75', 'lay8_67', 'lay8_119', 'lay8_118', 'lay8_124', 'lay8_108', 'lay8_134', 'lay8_191', 'lay8_19', 'lay8_29'] filter: 1.0
Solving MIP for lay8_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6581s, #vars: 1879, #constrs: 1241, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6673s, #vars: 1879, #constrs: 1241, improved: True
Solving MIP for lay8_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6640s, #vars: 1879, #constrs: 1241, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6844s, #vars: 1879, #constrs: 1241, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7449s, #vars: 1879, #constrs: 1241, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7733s, #vars: 1879, #constrs: 1241, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7991s, #vars: 1879, #constrs: 1241, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8208s, #vars: 1879, #constrs: 1241, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9236s, #vars: 1879, #constrs: 1241, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9404s, #vars: 1879, #constrs: 1241, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(162, -1), (23, -1), (152, -1), (32, -1), (97, -1), (199, -1), (119, -1), (106, -1), (195, -1), (193, -1), (121, -1), (36, 1), (127, -1), (198, -1), (125, -1), (86, -1), (132, -1), (158, -1), (3, -1), (46, -1), (33, -1), (2, -1), (173, -1), (53, -1), (110, -1), (98, 1), (108, 1), (186, -1), (22, -1), (135, -1), (197, -1), (129, -1), (176, -1), (169, 1), (75, 1), (170, 1), (1, -1), (42, -1), (90, -1), (136, 1), (188, -1), (9, 1), (4, -1), (160, -1), (13, -1), (165, -1), (149, -1), (167, -1), (174, 1), (73, -1), (18, -1), (161, 1), (133, 1), (111, 1), (134, 1), (196, -1), (28, 1), (57, -1), (183, 1), (163, 1), (41, -1)]

all verified at 0th iter
best_l after optimization: 28.189523696899414
beta sum per layer: []
alpha/beta optimization time: 0.04584503173828125
alpha-CROWN with intermediate bounds by MIP: tensor([[5.43746948, 0.93949032, 3.11769962, 4.05716705, 5.01876402, 3.93553066,
         0.10863209, 2.57888746, 2.99588299]], device='cuda:0') None
min of alpha-CROWN bounds 0.10863208770751953>=0, verified!
MIP finished with 144.64129447937012s
Run final alpha-CROWN after MIP solving on layer 7 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: 28.189523696899414
beta sum per layer: []
alpha/beta optimization time: 0.03262448310852051
alpha-CROWN with intermediate bounds improved by MIP: tensor([[5.43746948, 0.93949032, 3.11769962, 4.05716705, 5.01876402, 3.93553066,
         0.10863209, 2.57888746, 2.99588299]], device='cuda:0') None
Split layers:
  BoundLinear(name=/input.11, inputs=[/26, /7, /8]): [(BoundRelu(name=/28, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.3, inputs=[/22, /3, /4]): [(BoundRelu(name=/24, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.15, inputs=[/28, /9, /10]): [(BoundRelu(name=/30, inputs=[/input.15]), 0)]
  BoundLinear(name=/input, inputs=[/20, /1, /2]): [(BoundRelu(name=/22, inputs=[/input]), 0)]
  BoundLinear(name=/input.7, inputs=[/24, /5, /6]): [(BoundRelu(name=/26, inputs=[/input.7]), 0)]
refined global lb: tensor([[5.43746948],
        [0.93949032],
        [3.11769962],
        [4.05716705],
        [5.01876402],
        [3.93553066],
        [0.10863209],
        [2.57888746],
        [2.99588299]], device='cuda:0') min: tensor(0.10863209, device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
Result: safe-incomplete-refine in 160.5369 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):160.53532282365163, max time: 160.53692817687988
mean time for verified SAFE instances(total 1): 160.53692817687988, max time: 160.53692817687988
safe-incomplete-refine (total 1), index: [0]
