Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_6_200
  path: mnist_6_200_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 43
  end: 44
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.015
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 17:54:02 2023 on zeratul
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=200, bias=True)
  (2): ReLU()
  (3): Linear(in_features=200, out_features=200, bias=True)
  (4): ReLU()
  (5): Linear(in_features=200, out_features=200, bias=True)
  (6): ReLU()
  (7): Linear(in_features=200, out_features=200, bias=True)
  (8): ReLU()
  (9): Linear(in_features=200, out_features=200, bias=True)
  (10): ReLU()
  (11): Linear(in_features=200, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226457)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_6_200]_start=43_end=44_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 43 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundShape(name=/13, inputs=[/0])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundGather(name=/15, inputs=[/13, /14])
  (/16): BoundConstant(name=/16, inputs=[])
  (/17): BoundUnsqueeze(name=/17, inputs=[/15])
  (/18): BoundUnsqueeze(name=/18, inputs=[/16])
  (/19): BoundConcat(name=/19, inputs=[/17, /18])
  (/20): BoundReshape(name=/20, inputs=[/0, /19])
  (/input): BoundLinear(name=/input, inputs=[/20, /1, /2])
  (/22): BoundRelu(name=/22, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/22, /3, /4])
  (/24): BoundRelu(name=/24, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/24, /5, /6])
  (/26): BoundRelu(name=/26, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/26, /7, /8])
  (/28): BoundRelu(name=/28, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/28, /9, /10])
  (/30): BoundRelu(name=/30, inputs=[/input.15])
  (/31): BoundLinear(name=/31, inputs=[/30, /11, /12])
)
Model prediction is: tensor([[-2.63355017,  1.25981843,  7.96646833,  0.80176729, -0.23677054,
         -2.51228857,  0.08354779,  1.64332795, -0.40803528, -2.71555495]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [55]; unstable size 55; total size 200 (torch.Size([1, 200]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 94 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 141 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [94]; unstable size 94; total size 200 (torch.Size([1, 200]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 141 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [141]; unstable size 141; total size 200 (torch.Size([1, 200]))
layer /26 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /26 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-42.90721130, -53.32341766, -49.96341324, -53.90112305, -52.48913193,
         -44.01448822, -57.07033539, -57.98386765, -60.98963928]],
       device='cuda:0') None
best_l after optimization: -358.8828125
alpha/beta optimization time: 7.843412637710571
initial alpha-CROWN bounds: tensor([[-30.06585884, -39.78731537, -39.30330276, -39.72998047, -40.51800537,
         -34.00348663, -44.91167450, -44.81152725, -45.75167084]],
       device='cuda:0')
Worst class: (+ rhs) -45.751670837402344
Split layers:
  BoundLinear(name=/input.11, inputs=[/26, /7, /8]): [(BoundRelu(name=/28, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.15, inputs=[/28, /9, /10]): [(BoundRelu(name=/30, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.3, inputs=[/22, /3, /4]): [(BoundRelu(name=/24, inputs=[/input.3]), 0)]
  BoundLinear(name=/input, inputs=[/20, /1, /2]): [(BoundRelu(name=/22, inputs=[/input]), 0)]
  BoundLinear(name=/input.7, inputs=[/24, /5, /6]): [(BoundRelu(name=/26, inputs=[/input.7]), 0)]
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750000149011612, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.63355017,  1.25981843,  7.96646833,  0.80176729, -0.23677054,
         -2.51228857,  0.08354779,  1.64332795, -0.40803528, -2.71555495]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.64086485,  1.80440617,  7.01834583,  0.65875340, -0.22989407,
          -2.23606110, -0.08405952,  1.53763008, -0.39490485, -2.36882138],
         [-2.64086485,  1.80440617,  7.01834583,  0.65875340, -0.22989407,
          -2.23606110, -0.08405952,  1.53763008, -0.39490485, -2.36882138]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[9.65921021, 5.21393967, 6.35959244, 7.24823999, 9.25440693,
          7.10240555, 5.48071575, 7.41325092, 9.38716698]]], device='cuda:0')
number of violation:  0
Attack finished in 0.8086 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [55]; unstable size 55; total size 200 (torch.Size([1, 200]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 94 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 141 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [94]; unstable size 94; total size 200 (torch.Size([1, 200]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 141 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [141]; unstable size 141; total size 200 (torch.Size([1, 200]))
layer /26 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /26 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2024-02-29
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_53', 'lay4_43', 'lay4_40', 'lay4_165', 'lay4_58', 'lay4_77', 'lay4_144', 'lay4_91', 'lay4_141', 'lay4_121', 'lay4_166', 'lay4_185', 'lay4_174', 'lay4_189', 'lay4_85', 'lay4_14', 'lay4_142', 'lay4_112', 'lay4_116', 'lay4_65', 'lay4_52', 'lay4_137', 'lay4_86', 'lay4_47', 'lay4_38', 'lay4_123', 'lay4_7', 'lay4_0', 'lay4_115', 'lay4_180', 'lay4_67', 'lay4_131', 'lay4_107', 'lay4_101', 'lay4_130', 'lay4_78', 'lay4_134', 'lay4_83', 'lay4_95', 'lay4_22', 'lay4_182', 'lay4_9', 'lay4_125', 'lay4_187', 'lay4_178', 'lay4_13', 'lay4_127', 'lay4_147', 'lay4_191', 'lay4_49', 'lay4_11', 'lay4_109', 'lay4_76', 'lay4_126', 'lay4_16', 'lay4_73', 'lay4_160', 'lay4_74', 'lay4_150', 'lay4_79', 'lay4_70', 'lay4_183', 'lay4_103', 'lay4_3', 'lay4_161', 'lay4_75', 'lay4_62', 'lay4_162', 'lay4_186', 'lay4_192', 'lay4_98', 'lay4_113', 'lay4_170', 'lay4_61', 'lay4_156', 'lay4_39', 'lay4_154', 'lay4_89', 'lay4_80', 'lay4_69', 'lay4_129', 'lay4_146', 'lay4_81', 'lay4_145', 'lay4_31', 'lay4_190', 'lay4_87', 'lay4_188', 'lay4_138', 'lay4_63', 'lay4_2', 'lay4_4', 'lay4_128'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/Verifier_Development/complete_verifier/data_utils.py:257: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_121, [-inf,inf]=>[-0.6633001800879171,0.10043466098893811] (2,-1; 2,-1), time: 2.9863s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_185, [-inf,inf]=>[-0.3880799129514746,0.26749691256245384] (2,-1; 2,-1), time: 6.3067s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_189, [-inf,inf]=>[-0.31964633621669686,0.4034495451929735] (2,-1; 2,-1), time: 6.5566s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_165, [-inf,inf]=>[-0.4642115382584966,0.3909915833461284] (2,-1; 2,-1), time: 7.2300s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_144, [-inf,inf]=>[-0.36243339581606754,0.3538705625775985] (2,-1; 2,-1), time: 7.2716s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_77, [-inf,inf]=>[-0.4321449844696567,0.2750184799813301] (2,-1; 2,-1), time: 7.7429s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-0.3517294622072761,0.297337315691378] (2,-1; 2,-1), time: 7.8252s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_14, [-inf,inf]=>[-0.6718675858344368,0.046486138693870124] (2,-1; 2,-1), time: 8.0636s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-0.37726050856533766,0.3258022284175929] (2,-1; 2,-1), time: 8.2097s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-0.28201483684365525,0.4342993978085534] (2,-1; 2,-1), time: 8.3070s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[-0.6748038869884326,0.13534363467166166] (2,-1; 2,-1), time: 8.4042s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6194s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_141, [-inf,inf]=>[-0.32521983156499423,0.3847261059414025] (2,-1; 2,-1), time: 9.4346s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[-0.4633570263813763,0.29916607131653483] (2,-1; 2,-1), time: 9.5369s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.1999304716799394,0.5017811785432804] (2,-1; 2,-1), time: 9.5404s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_166, [-inf,inf]=>[1e-05,0.6712556220616148] (15,-1; 2,-1), time: 9.5742s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_142, [-inf,inf]=>[-0.2875789523455478,0.3279042831689999] (2,-1; 2,-1), time: 6.8577s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_107, [-inf,inf]=>[-inf,-0.004086046385494643] (-1,-1; 2,-1), time: 0.5617s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_116, [-inf,inf]=>[-0.5537423403350031,0.09956170695247168] (2,-1; 2,-1), time: 5.7756s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_65, [-inf,inf]=>[-0.5116288127877785,0.21500655212314407] (2,-1; 2,-1), time: 8.3292s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_131, [-inf,inf]=>[-0.28734439250290195,0.4249893984355346] (2,-1; 2,-1), time: 5.9917s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_0, [-inf,inf]=>[-0.33375781528749493,0.3635203909702509] (2,-1; 2,-1), time: 7.2047s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_101, [-inf,inf]=>[1e-05,0.6180147851350521] (15,-1; 2,-1), time: 5.3351s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_137, [-inf,inf]=>[-0.14677928262185588,0.6326230533176075] (2,-1; 2,-1), time: 8.0291s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_134, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5984s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_123, [-inf,inf]=>[-0.1456488213678388,0.5053385179255255] (2,-1; 2,-1), time: 8.0374s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[-0.3120941406092119,0.23955038676846335] (2,-1; 2,-1), time: 10.0425s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_7, [-inf,inf]=>[-0.23221306399764724,0.5180254206206979] (2,-1; 2,-1), time: 8.1432s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.48140251609903895,0.16288965173861675] (2,-1; 2,-1), time: 8.5277s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4894s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_47, [-inf,inf]=>[-0.4367173413536628,0.13740441385146865] (2,-1; 2,-1), time: 8.7835s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_130, [-inf,inf]=>[-0.6813630503717474,0.061675418557621924] (2,-1; 2,-1), time: 4.5256s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4541s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_85, [-inf,inf]=>[-0.41726520421466856,0.2068265231218741] (2,-1; 2,-1), time: 17.3972s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_147, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5478s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-0.44586518458229546,0.22152493056568445] (2,-1; 2,-1), time: 7.9735s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_180, [-inf,inf]=>[-0.26672930788667715,0.3338163331531845] (2,-1; 2,-1), time: 8.4058s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_127, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7876s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4790s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_83, [-inf,inf]=>[1e-05,0.7884285820788258] (15,-1; 2,-1), time: 5.6131s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_11, [-inf,inf]=>[-0.38585085207116837,0.23519189138502872] (2,-1; 2,-1), time: 5.3777s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_22, [-inf,inf]=>[-0.10865655741838108,0.738389771343629] (2,-1; 2,-1), time: 7.1349s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_78, [-inf,inf]=>[-0.2648843255528095,0.4494582219086894] (2,-1; 2,-1), time: 7.4281s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.17210145565677215,0.43925009829505784] (9,-1; 2,-1), time: 15.7908s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_182, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.9803s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4429s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[-0.5787060837114082,0.2561233333061555] (2,-1; 2,-1), time: 7.2471s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_95, [-inf,inf]=>[-0.0381027513868629,0.5448779929812749] (2,-1; 2,-1), time: 8.2857s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_103, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4924s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_109, [-inf,inf]=>[1e-05,0.8330400924401069] (15,-1; 2,-1), time: 6.9414s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[-0.30764537053739494,0.5157046169491182] (2,-1; 2,-1), time: 8.4119s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_191, [-inf,inf]=>[-0.08871691116169265,0.4153363446511713] (2,-1; 2,-1), time: 7.7247s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-0.373459875408225,0.3384758113319015] (2,-1; 2,-1), time: 8.4986s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5424s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[-0.2586082243894777,0.44669675726664376] (2,-1; 2,-1), time: 7.0947s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5162s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.10075764670840484,0.5991426380369076] (2,-1; 2,-1), time: 8.9437s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_115, [-inf,inf]=>[-0.4704675683548727,0.19144635530973914] (9,-1; 2,-1), time: 18.1992s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_126, [-inf,inf]=>[-0.4804310326341457,0.22283697421395893] (2,-1; 2,-1), time: 9.1140s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6184s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_73, [-inf,inf]=>[-0.509068677359385,0.18115775959286862] (2,-1; 2,-1), time: 7.1395s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-0.5834702264160525,0.18414486786274042] (2,-1; 2,-1), time: 5.3860s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[-0.6073553680005931,0.13600961630445516] (2,-1; 2,-1), time: 7.0226s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4836s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-0.09177892904542487,0.5949883372523547] (2,-1; 2,-1), time: 5.8775s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[-0.11351448393777736,0.6381184918260483] (2,-1; 2,-1), time: 8.1143s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_62, [-inf,inf]=>[-0.7093165537613814,0.026948511441259294] (2,-1; 2,-1), time: 6.2836s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4687s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_161, [-inf,inf]=>[-0.551765598455501,0.0759596510735064] (2,-1; 2,-1), time: 7.9334s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_145, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4843s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_183, [-inf,inf]=>[-0.4170374653264276,0.19935492810172573] (2,-1; 2,-1), time: 8.8406s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_160, [-inf,inf]=>[-0.5604568966492244,0.14947994527154568] (2,-1; 2,-1), time: 9.6826s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_190, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3758s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_113, [-inf,inf]=>[-0.5879189675769394,0.07606358455822876] (2,-1; 2,-1), time: 6.7051s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-0.28599955888903883,0.3370190151292544] (2,-1; 2,-1), time: 10.1595s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_170, [-inf,inf]=>[-0.518170848617463,0.10303610083996305] (2,-1; 2,-1), time: 6.4655s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-0.17018907345681164,0.5706387045949177] (2,-1; 2,-1), time: 3.8369s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5868s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_98, [-inf,inf]=>[-0.2682843287573809,0.4213227268471356] (2,-1; 2,-1), time: 8.1627s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_61, [-inf,inf]=>[-0.43834252721471256,0.4648710422844662] (2,-1; 2,-1), time: 8.7279s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_146, [-inf,inf]=>[1e-05,0.8687122385231998] (15,-1; 2,-1), time: 5.3516s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_128, [-inf,inf]=>[1e-05,0.8784763310263912] (15,-1; 2,-1), time: 3.7380s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_39, [-inf,inf]=>[-0.3903497095934058,0.29339906683705425] (2,-1; 2,-1), time: 9.2091s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[-0.4491096430627401,0.21347170202701643] (2,-1; 2,-1), time: 7.4372s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_138, [-inf,inf]=>[1e-05,0.7060203355470241] (15,-1; 2,-1), time: 5.3288s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_154, [-inf,inf]=>[-0.17043610897653788,0.45932286425392516] (2,-1; 2,-1), time: 9.5558s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[-0.0905617923170578,0.6855734500043595] (2,-1; 2,-1), time: 5.5106s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_129, [-inf,inf]=>[-0.16253525608948582,0.47499913323224435] (2,-1; 2,-1), time: 8.4065s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.010109797775225972,0.778049692215469] (2,-1; 2,-1), time: 6.7113s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_31, [-inf,inf]=>[-0.57686074574281,0.05127515344879667] (2,-1; 2,-1), time: 8.1140s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_3, [-inf,inf]=>[-0.6710404982433623,0.03998610395883738] (9,-1; 2,-1), time: 16.2009s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_188, [-inf,inf]=>[1e-05,0.6674450541177964] (15,-1; 2,-1), time: 7.8696s, #vars: 1295, #constrs: 565, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-0.07512058308379725,0.6338966604229839] (2,-1; 2,-1), time: 8.9427s, #vars: 1295, #constrs: 565, improved: True
PGD done for relu layer 2
MIP improved 93 nodes out of 93 unstable nodes, lb improved 21.284271240234375, ub improved 17.881731033325195, time 43.3900
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_28', 'lay6_139', 'lay6_93', 'lay6_170', 'lay6_152', 'lay6_191', 'lay6_168', 'lay6_67', 'lay6_33', 'lay6_181', 'lay6_24', 'lay6_123', 'lay6_188', 'lay6_32', 'lay6_177', 'lay6_195', 'lay6_133', 'lay6_18', 'lay6_106', 'lay6_159', 'lay6_110', 'lay6_3', 'lay6_15', 'lay6_107', 'lay6_26', 'lay6_122', 'lay6_30', 'lay6_50', 'lay6_49', 'lay6_141', 'lay6_112', 'lay6_192', 'lay6_87', 'lay6_29', 'lay6_70', 'lay6_69', 'lay6_101', 'lay6_136', 'lay6_183', 'lay6_151', 'lay6_175', 'lay6_196', 'lay6_113', 'lay6_169', 'lay6_153', 'lay6_162', 'lay6_197', 'lay6_72', 'lay6_7', 'lay6_108', 'lay6_174', 'lay6_9', 'lay6_117', 'lay6_148', 'lay6_98', 'lay6_77', 'lay6_128', 'lay6_21', 'lay6_2', 'lay6_166', 'lay6_80', 'lay6_48', 'lay6_64', 'lay6_103', 'lay6_124', 'lay6_39', 'lay6_73', 'lay6_186', 'lay6_86', 'lay6_37', 'lay6_92', 'lay6_88', 'lay6_163', 'lay6_173', 'lay6_53', 'lay6_189', 'lay6_150', 'lay6_142', 'lay6_99', 'lay6_10', 'lay6_105', 'lay6_11', 'lay6_55', 'lay6_59', 'lay6_75', 'lay6_193', 'lay6_171', 'lay6_96', 'lay6_129', 'lay6_91', 'lay6_165', 'lay6_194', 'lay6_180', 'lay6_138', 'lay6_42', 'lay6_178', 'lay6_60', 'lay6_65', 'lay6_6', 'lay6_118', 'lay6_76', 'lay6_102', 'lay6_54', 'lay6_16', 'lay6_12', 'lay6_61', 'lay6_111', 'lay6_43', 'lay6_146', 'lay6_132', 'lay6_120', 'lay6_78', 'lay6_121', 'lay6_36', 'lay6_187', 'lay6_135', 'lay6_131', 'lay6_167', 'lay6_68', 'lay6_160', 'lay6_51', 'lay6_35', 'lay6_27', 'lay6_176', 'lay6_74', 'lay6_8', 'lay6_172', 'lay6_94', 'lay6_58', 'lay6_140', 'lay6_134', 'lay6_119', 'lay6_157', 'lay6_144', 'lay6_46'] filter: 1.0
Solving MIP for lay6_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6618s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6901s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7308s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7404s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8273s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8871s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_133, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7694s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5753s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8381s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8319s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0495s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6088s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7301s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4780s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_159, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.9204s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_141, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7314s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_112, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5580s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.1445s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.8675s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[1e-05,1.5387364510934662] (15,-1; 9,-1), time: 15.8057s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8592s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6976s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_188, [-inf,inf]=>[-0.9367283540390551,0.13970965783429307] (9,-1; 9,-1), time: 30.0149s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_177, [-inf,inf]=>[-0.9245581222411499,0.18432652536903293] (9,-1; 9,-1), time: 30.0149s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.9724145546555214,0.014678192279629746] (9,-1; 9,-1), time: 30.0185s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[-0.7098462716468825,0.19821266667367832] (9,-1; 9,-1), time: 30.0162s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.5953966315292584,0.35936778469927094] (9,-1; 9,-1), time: 30.0315s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_181, [-inf,inf]=>[-0.860096252883228,0.07839861672485876] (9,-1; 9,-1), time: 30.0507s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_113, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7134s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-0.0780893351872669,0.8875962320852547] (9,-1; 9,-1), time: 30.0407s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-0.3004854460252297,0.7131693989835858] (9,-1; 9,-1), time: 30.0247s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_107, [-inf,inf]=>[-0.8639623936995876,0.020018481163041373] (9,-1; 9,-1), time: 30.0199s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_196, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5754s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7016s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_197, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6866s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-0.7132315636395272,0.216788783592188] (9,-1; 9,-1), time: 30.0163s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-0.8621878096816668,0.029782419719841073] (9,-1; 9,-1), time: 30.0134s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6222s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7536s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.9062535803221544,0.11396446508874346] (9,-1; 9,-1), time: 31.4219s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-0.514930603137962,0.33623739808866654] (9,-1; 9,-1), time: 30.0513s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5627s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-0.8822891741610671,0.10063647123320704] (9,-1; 9,-1), time: 30.0139s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8172s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5853s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_166, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5849s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2393s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6054s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6691s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-0.8853741550276555,0.05643027001954012] (9,-1; 9,-1), time: 30.0623s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_183, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.6828s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_103, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.0559s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_175, [-inf,inf]=>[1e-05,1.0786417759168387] (15,-1; 9,-1), time: 16.9442s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[1e-05,1.1905626101004156] (15,-1; 9,-1), time: 18.3229s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6015s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-0.8279217914560757,0.2758407360639272] (9,-1; 9,-1), time: 30.0123s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.1752s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_151, [-inf,inf]=>[-0.8213167229444086,0.04986719488623038] (9,-1; 9,-1), time: 30.0451s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-0.3601612062931446,0.5106112362207613] (9,-1; 9,-1), time: 30.0130s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.5609s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6175s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_153, [-inf,inf]=>[-0.6594259671783156,0.3030497999085382] (9,-1; 9,-1), time: 30.0766s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6468s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-0.8771765927519249,0.2045213657361913] (9,-1; 9,-1), time: 30.0136s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_174, [-inf,inf]=>[-0.35974374705115114,0.4340725612930336] (9,-1; 9,-1), time: 30.0174s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-0.7563516875030284,0.16917246627189486] (9,-1; 9,-1), time: 30.0096s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7243s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7208s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_148, [-inf,inf]=>[-0.8162388800964122,0.22328017382509568] (9,-1; 9,-1), time: 30.0138s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-0.42727659040816063,0.4147345164028626] (9,-1; 9,-1), time: 30.1284s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_128, [-inf,inf]=>[-0.35864531525270066,0.4341218069417807] (9,-1; 9,-1), time: 30.0505s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7074s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_48, [-inf,inf]=>[-0.60562748333772,0.2079041640766572] (9,-1; 9,-1), time: 30.0123s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.5064s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_129, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5595s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[-0.8571631592108513,0.24586697778583178] (9,-1; 9,-1), time: 30.0899s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3410s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_180, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7401s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.5804951669805378,0.3398503942307774] (9,-1; 9,-1), time: 30.0181s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-0.25278905751272707,0.4862405959681953] (9,-1; 9,-1), time: 30.1804s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5916s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[1e-05,1.5070068962160532] (15,-1; 9,-1), time: 15.6594s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[1e-05,0.8622645453998381] (15,-1; 9,-1), time: 16.6442s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_59, [-inf,inf]=>[1e-05,1.0622855399258688] (15,-1; 9,-1), time: 18.2387s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.6888562927957098,0.34856663132080923] (9,-1; 9,-1), time: 30.0214s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-0.7435382685155376,0.07509544661518729] (9,-1; 9,-1), time: 30.0226s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.4009s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[1e-05,1.027218742710646] (15,-1; 9,-1), time: 24.5556s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[-0.4218605404442614,0.4117461669987021] (9,-1; 9,-1), time: 30.0139s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_142, [-inf,inf]=>[-0.65220222501316,0.3567172921442877] (9,-1; 9,-1), time: 30.0135s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.3571268178813748,0.5647058213069232] (9,-1; 9,-1), time: 30.0128s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5406s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6151s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[1e-05,1.1126117702099432] (15,-1; 9,-1), time: 28.8561s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-0.08381302464479402,0.753949919224405] (9,-1; 9,-1), time: 30.0125s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_120, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7489s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[1e-05,0.8665593570566543] (15,-1; 9,-1), time: 29.8374s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-0.8172182878516675,0.24522264726226992] (9,-1; 9,-1), time: 30.0657s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[-0.5214413009275597,0.37082634082618793] (9,-1; 9,-1), time: 30.0240s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5792s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-0.47136440680667735,0.3795150507321737] (9,-1; 9,-1), time: 30.0151s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[1e-05,1.214389444747562] (15,-1; 9,-1), time: 16.5782s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[1e-05,0.86350564348059] (15,-1; 9,-1), time: 27.7877s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-0.4735350050808223,0.3955400606486694] (9,-1; 9,-1), time: 30.1528s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[1e-05,1.5287808343143001] (15,-1; 9,-1), time: 15.6390s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_111, [-inf,inf]=>[1e-05,1.231791053691091] (15,-1; 9,-1), time: 16.5558s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5691s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[1e-05,1.1821521777130375] (15,-1; 9,-1), time: 15.6000s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5944s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-0.21299887790781394,0.5695319569152538] (9,-1; 9,-1), time: 30.0158s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[1e-05,1.5836262311591451] (15,-1; 9,-1), time: 15.7235s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5631s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.9280s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[1e-05,1.2630063980536697] (15,-1; 9,-1), time: 20.0402s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-0.9261501238266393,0.07531905602118616] (9,-1; 9,-1), time: 30.0112s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[1e-05,1.2035778204246086] (15,-1; 9,-1), time: 15.6292s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.15888886748512773,0.7540583711023147] (9,-1; 9,-1), time: 30.0189s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6313s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-0.32688507422415775,0.6073791830336619] (9,-1; 9,-1), time: 30.0236s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.5459126854069336,0.25878106946193674] (9,-1; 9,-1), time: 30.0214s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6512s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_172, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.0564s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_132, [-inf,inf]=>[-0.49635112486952226,0.4186421003791113] (9,-1; 9,-1), time: 30.0440s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_176, [-inf,inf]=>[1e-05,1.0942572175707794] (15,-1; 9,-1), time: 15.7357s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[1e-05,0.9377783021098862] (15,-1; 9,-1), time: 18.5554s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[1e-05,0.8518066074188858] (15,-1; 9,-1), time: 16.4464s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-0.06255440216291505,0.741057038456823] (9,-1; 9,-1), time: 30.0355s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.32741483249996983,0.5362836467691479] (9,-1; 9,-1), time: 30.0180s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_134, [-inf,inf]=>[1e-05,0.9125318579469108] (15,-1; 9,-1), time: 16.5355s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[1e-05,1.7235098092549026] (15,-1; 9,-1), time: 15.5324s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[-0.6636766901925398,0.26228467758130575] (9,-1; 9,-1), time: 30.0612s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-0.11253450595997576,0.7283534054915426] (9,-1; 9,-1), time: 30.0111s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-0.6747181633407972,0.2963773149592819] (9,-1; 9,-1), time: 30.0176s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_140, [-inf,inf]=>[-0.8736667817164215,0.0895240109272372] (9,-1; 9,-1), time: 30.0125s, #vars: 1627, #constrs: 963, improved: True
Solving MIP for lay6_119, [-inf,inf]=>[-0.1365058699305714,0.9105047105450618] (9,-1; 9,-1), time: 30.0126s, #vars: 1627, #constrs: 963, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(166, 1), (86, -1), (107, -1), (101, 1), (134, -1), (83, 1), (182, -1), (125, -1), (13, -1), (127, -1), (147, -1), (49, -1), (109, 1), (79, -1), (103, -1), (186, -1), (192, -1), (156, -1), (89, -1), (146, 1), (81, -1), (145, -1), (190, -1), (188, 1), (138, 1), (4, -1), (128, 1)]
best_l after optimization: -57.19995880126953
beta sum per layer: []
alpha/beta optimization time: 7.118537187576294
alpha-CROWN with intermediate bounds by MIP: tensor([[-3.92656088, -8.65024757, -6.25379896, -6.84909534, -4.40183258,
         -5.77623320, -8.67265987, -6.66191292, -6.00761986]], device='cuda:0') None
MIP improved 135 nodes out of 135 unstable nodes, lb improved 39.561485290527344, ub improved 55.834922790527344, time 149.6461
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_45', 'lay8_0', 'lay8_65', 'lay8_85', 'lay8_98', 'lay8_130', 'lay8_183', 'lay8_180', 'lay8_49', 'lay8_119', 'lay8_86', 'lay8_175', 'lay8_112', 'lay8_128', 'lay8_188', 'lay8_16', 'lay8_185', 'lay8_167', 'lay8_156', 'lay8_184', 'lay8_187', 'lay8_140', 'lay8_57', 'lay8_7', 'lay8_127', 'lay8_174', 'lay8_55', 'lay8_181', 'lay8_83', 'lay8_158', 'lay8_19', 'lay8_159', 'lay8_171', 'lay8_97', 'lay8_58', 'lay8_77', 'lay8_43', 'lay8_24', 'lay8_20', 'lay8_62', 'lay8_149', 'lay8_195', 'lay8_133', 'lay8_22', 'lay8_59', 'lay8_48', 'lay8_121', 'lay8_92', 'lay8_178', 'lay8_25', 'lay8_73', 'lay8_111', 'lay8_104', 'lay8_179', 'lay8_69', 'lay8_27', 'lay8_196', 'lay8_165', 'lay8_144', 'lay8_94', 'lay8_146', 'lay8_8', 'lay8_54', 'lay8_154', 'lay8_84', 'lay8_33', 'lay8_37', 'lay8_56', 'lay8_150', 'lay8_145', 'lay8_17', 'lay8_23', 'lay8_36', 'lay8_78', 'lay8_60', 'lay8_101', 'lay8_6', 'lay8_134', 'lay8_90', 'lay8_157', 'lay8_1', 'lay8_147', 'lay8_67', 'lay8_88', 'lay8_26', 'lay8_192', 'lay8_162', 'lay8_42', 'lay8_61', 'lay8_31', 'lay8_155', 'lay8_63', 'lay8_129', 'lay8_115', 'lay8_81', 'lay8_70', 'lay8_64', 'lay8_74', 'lay8_169', 'lay8_172', 'lay8_95', 'lay8_47', 'lay8_39', 'lay8_138', 'lay8_139', 'lay8_82', 'lay8_2', 'lay8_118', 'lay8_160', 'lay8_199', 'lay8_173', 'lay8_89', 'lay8_21', 'lay8_194', 'lay8_186', 'lay8_35', 'lay8_163', 'lay8_72', 'lay8_52', 'lay8_120', 'lay8_117', 'lay8_110', 'lay8_107', 'lay8_53', 'lay8_13', 'lay8_143', 'lay8_109', 'lay8_168', 'lay8_11', 'lay8_161', 'lay8_75', 'lay8_93', 'lay8_68', 'lay8_80', 'lay8_113', 'lay8_151', 'lay8_9', 'lay8_152', 'lay8_50', 'lay8_38', 'lay8_190', 'lay8_15', 'lay8_148', 'lay8_79', 'lay8_137', 'lay8_182', 'lay8_100', 'lay8_142', 'lay8_132', 'lay8_96', 'lay8_76', 'lay8_108', 'lay8_164', 'lay8_176', 'lay8_177', 'lay8_5', 'lay8_126', 'lay8_123', 'lay8_153', 'lay8_189', 'lay8_105', 'lay8_198', 'lay8_191', 'lay8_4', 'lay8_18', 'lay8_41', 'lay8_91', 'lay8_87', 'lay8_12', 'lay8_166', 'lay8_3', 'lay8_46', 'lay8_66', 'lay8_122', 'lay8_102', 'lay8_125', 'lay8_114', 'lay8_44', 'lay8_170', 'lay8_34', 'lay8_14', 'lay8_32', 'lay8_51', 'lay8_193', 'lay8_103', 'lay8_99', 'lay8_71', 'lay8_28', 'lay8_116', 'lay8_141', 'lay8_30', 'lay8_40', 'lay8_124', 'lay8_197', 'lay8_106', 'lay8_136', 'lay8_10', 'lay8_29', 'lay8_131', 'lay8_135'] filter: 1.0
Solving MIP for lay8_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8476s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9075s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9134s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_128, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9347s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9510s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_130, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9600s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9816s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0664s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0738s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8224s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_185, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0309s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0337s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1051s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5321s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9554s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0775s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_140, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4103s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_158, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1591s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.9518s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7776s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_127, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.3650s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-1.082576323376147,0.1820795407843528] (9,-1; 9,-1), time: 30.0316s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_112, [-inf,inf]=>[-0.8423362175398569,0.20965571713630468] (9,-1; 9,-1), time: 30.0439s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_183, [-inf,inf]=>[-0.9985707374347031,0.3170936260886693] (9,-1; 9,-1), time: 30.0501s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_180, [-inf,inf]=>[-0.8638670317839796,0.289326886186106] (9,-1; 9,-1), time: 30.0758s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_188, [-inf,inf]=>[-0.813893906765108,0.44730970153663263] (9,-1; 9,-1), time: 30.0959s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7757s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7777s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8173s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_167, [-inf,inf]=>[-0.8947901665868713,0.13293764436770453] (9,-1; 9,-1), time: 30.0390s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_184, [-inf,inf]=>[-0.8776958251920896,0.29080570032197944] (9,-1; 9,-1), time: 30.0515s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_187, [-inf,inf]=>[-0.7762772855812421,0.28825781920793647] (9,-1; 9,-1), time: 30.1295s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-0.6649504108123876,0.7998923739742538] (9,-1; 9,-1), time: 30.0389s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_181, [-inf,inf]=>[-0.0479031563831713,1.0737560685467846] (9,-1; 9,-1), time: 30.0687s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3906s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-1.359613093074388,0.15814349681370676] (9,-1; 9,-1), time: 30.0467s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1474s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_159, [-inf,inf]=>[-0.3940177558820622,0.9585756160218947] (9,-1; 9,-1), time: 30.0504s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8856s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_111, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8533s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-0.7109954632131052,0.24336200119613138] (9,-1; 9,-1), time: 30.0603s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[-1.1258204435499595,0.005941334422757942] (9,-1; 9,-1), time: 30.0193s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_104, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7683s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-0.5813717964973405,0.29286591193682804] (9,-1; 9,-1), time: 30.0426s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7282s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_179, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8905s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-0.2827635990548118,0.8201237768939318] (9,-1; 9,-1), time: 30.5497s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7860s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8679s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7231s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8855s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7334s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_196, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5964s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8391s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.8136s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[1e-05,1.386165701496724] (15,-1; 9,-1), time: 15.7934s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_146, [-inf,inf]=>[1e-05,1.50263340299966] (15,-1; 9,-1), time: 17.4281s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_133, [-inf,inf]=>[-0.7834552950945871,0.5467410354067092] (9,-1; 9,-1), time: 30.0485s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.8084429146053804,0.18072754596364915] (9,-1; 9,-1), time: 30.0625s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.42269552608382965,0.7360977649973929] (9,-1; 9,-1), time: 30.0293s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_121, [-inf,inf]=>[-0.7781432242733664,0.5160380852625707] (9,-1; 9,-1), time: 30.0353s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.8095270134795866,0.1266399881348359] (9,-1; 9,-1), time: 30.1014s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8318s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_134, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7458s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.5919714287238345,0.49267069202022884] (9,-1; 9,-1), time: 30.0333s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-0.31093864582703307,1.2457162527095627] (9,-1; 9,-1), time: 30.0479s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[-0.5864220377502443,0.623806032883803] (9,-1; 9,-1), time: 30.2039s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-1.2150400132555652,0.0015076946960296822] (9,-1; 9,-1), time: 30.0910s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9155s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-0.2292597722819268,1.1214490666985255] (9,-1; 9,-1), time: 30.0141s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5928s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7751s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-0.9371317214887542,0.012420328179037182] (9,-1; 9,-1), time: 30.0604s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_150, [-inf,inf]=>[-0.3245794653508437,0.9505335689047844] (9,-1; 9,-1), time: 30.0435s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_145, [-inf,inf]=>[-0.890932538732382,0.08867736642652559] (9,-1; 9,-1), time: 30.0613s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7332s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[1e-05,2.044111328136102] (15,-1; 9,-1), time: 15.7011s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-0.5232500082955085,0.500554228758793] (9,-1; 9,-1), time: 30.0221s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5645s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-0.5462325042840371,0.39956421764535854] (9,-1; 9,-1), time: 30.0307s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_129, [-inf,inf]=>[1e-05,1.2841011916848615] (15,-1; 9,-1), time: 20.4959s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-0.6341189372828788,0.24640437462403433] (9,-1; 9,-1), time: 30.0403s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-0.8929742411590116,0.08883964497428298] (9,-1; 9,-1), time: 30.0236s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-0.7010250319482028,0.3702088496025655] (9,-1; 9,-1), time: 30.0406s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_157, [-inf,inf]=>[-0.9416888928744638,0.28298921617699163] (9,-1; 9,-1), time: 30.0302s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.8578755147047356,0.32377902934798974] (9,-1; 9,-1), time: 30.0632s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_147, [-inf,inf]=>[-0.8698777933749271,0.1997828335286271] (9,-1; 9,-1), time: 30.0208s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7466s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7492s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8103s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7382s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3558s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-0.06942855684228066,1.092403488940033] (9,-1; 9,-1), time: 30.0215s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-0.6946111377217813,0.31311672186504336] (9,-1; 9,-1), time: 30.0862s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[-0.3311606108449936,0.9554307183246395] (9,-1; 9,-1), time: 30.0206s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-0.9827693635989109,0.2572396327068036] (9,-1; 9,-1), time: 30.0562s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_155, [-inf,inf]=>[-0.24943927440909408,0.8223480193695201] (9,-1; 9,-1), time: 30.0505s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-0.7451416482540023,0.4429187593867506] (9,-1; 9,-1), time: 30.0333s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8369s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_115, [-inf,inf]=>[-0.4242672686630063,0.5578981959425681] (9,-1; 9,-1), time: 30.0637s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[-1.067270775846865,0.014465746470608633] (9,-1; 9,-1), time: 30.0415s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[1e-05,1.2443301330204792] (15,-1; 9,-1), time: 15.8523s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8237s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8294s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-0.7305760253937463,0.3104830498481191] (9,-1; 9,-1), time: 30.0458s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_120, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8909s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[-0.7285494690752166,0.24221939110808516] (9,-1; 9,-1), time: 30.2293s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_107, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7968s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_169, [-inf,inf]=>[-1.1316258788470912,0.015025258684649809] (9,-1; 9,-1), time: 30.0330s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_172, [-inf,inf]=>[-0.9417012669661848,0.16264839754970478] (9,-1; 9,-1), time: 30.0588s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-0.5731643976400641,0.5518733339932607] (9,-1; 9,-1), time: 30.0833s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-0.3621340238008874,0.49101868364486] (9,-1; 9,-1), time: 30.0505s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_118, [-inf,inf]=>[-0.4513176375407227,0.5427566781545428] (9,-1; 9,-1), time: 30.0168s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_160, [-inf,inf]=>[-0.3448548476759314,0.676415474853872] (9,-1; 9,-1), time: 30.1067s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7756s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_199, [-inf,inf]=>[-0.19422395648160654,0.6729052719995844] (9,-1; 9,-1), time: 30.0562s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_173, [-inf,inf]=>[-0.7682792225375754,0.39220638610037145] (9,-1; 9,-1), time: 30.0271s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-0.9245497372240712,0.09453905908432261] (9,-1; 9,-1), time: 30.0469s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8342s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.7786890257174723,0.356872444787333] (9,-1; 9,-1), time: 30.0327s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_113, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7039s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3504s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_186, [-inf,inf]=>[-0.5330371673808236,0.27150171745728546] (9,-1; 9,-1), time: 30.0406s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-0.0881906349172521,1.038605496749371] (9,-1; 9,-1), time: 30.0426s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7175s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_163, [-inf,inf]=>[-0.40200847034596854,0.525993568146887] (9,-1; 9,-1), time: 30.0575s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.3744s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_148, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7408s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7248s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_137, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.9627s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_182, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7802s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_117, [-inf,inf]=>[-0.355854957773211,0.6971997078409771] (9,-1; 9,-1), time: 30.0465s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_109, [-inf,inf]=>[1e-05,2.40560397696602] (15,-1; 9,-1), time: 15.8803s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8283s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8655s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_161, [-inf,inf]=>[1e-05,1.3724402426113902] (15,-1; 9,-1), time: 15.7451s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_110, [-inf,inf]=>[-0.2605916960235976,0.9198047277471387] (9,-1; 9,-1), time: 30.0369s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8507s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_151, [-inf,inf]=>[1e-05,1.5634286054114728] (15,-1; 9,-1), time: 15.9166s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[1e-05,1.5666854809162265] (15,-1; 9,-1), time: 15.7159s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-0.03340875577910409,1.0570435937952236] (9,-1; 9,-1), time: 30.0452s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_168, [-inf,inf]=>[1e-05,1.1149922510474348] (15,-1; 9,-1), time: 25.1444s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_126, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7144s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7287s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_153, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7247s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-0.4343200534717404,0.6216043037654803] (9,-1; 9,-1), time: 30.0503s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_143, [-inf,inf]=>[-0.8127827010256606,0.27794159361954884] (9,-1; 9,-1), time: 30.0563s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6944s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7455s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[1e-05,1.439913493377341] (15,-1; 9,-1), time: 15.8072s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-0.8229934478909973,0.23738253728842396] (9,-1; 9,-1), time: 30.0104s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[-0.18667593661712945,1.2299514807534624] (9,-1; 9,-1), time: 30.0308s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[1e-05,1.0525414245012927] (15,-1; 9,-1), time: 15.9165s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-0.6383085430167781,0.26323230536382464] (9,-1; 9,-1), time: 30.0327s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_176, [-inf,inf]=>[1e-05,2.802578397116373] (15,-1; 9,-1), time: 15.8528s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7472s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7709s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6608s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_190, [-inf,inf]=>[-0.09218434988042469,0.8840258255255725] (9,-1; 9,-1), time: 30.0135s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-0.156861958428877,0.890659576899286] (9,-1; 9,-1), time: 30.0366s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7554s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.2062s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[1e-05,2.0903132245677365] (15,-1; 9,-1), time: 15.8669s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_105, [-inf,inf]=>[1e-05,1.0555667255548669] (15,-1; 9,-1), time: 15.7857s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.653726547916795,0.6112612256610506] (9,-1; 9,-1), time: 30.0722s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[1e-05,1.0627400403867844] (15,-1; 9,-1), time: 19.2934s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_164, [-inf,inf]=>[-0.5492223827995242,0.33420954577853584] (9,-1; 9,-1), time: 30.0462s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7633s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_177, [-inf,inf]=>[-0.6563574211426719,0.3894225540531286] (9,-1; 9,-1), time: 30.0157s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-0.846137749022949,0.053659114860772184] (9,-1; 9,-1), time: 30.0631s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_103, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.3411s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_114, [-inf,inf]=>[1e-05,2.5973553701245295] (15,-1; 9,-1), time: 15.9351s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7211s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_116, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7812s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-1.2253396263078147,0.00563981877509696] (9,-1; 9,-1), time: 30.0362s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[1e-05,2.729811016957531] (15,-1; 9,-1), time: 15.8613s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7366s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-1.0205091629005625,0.005495931073782115] (9,-1; 9,-1), time: 30.0661s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_197, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7760s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-0.5029429373140576,0.6685646188516503] (9,-1; 9,-1), time: 30.1608s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-0.5152945624241784,0.46256335772465806] (9,-1; 9,-1), time: 30.0119s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-0.8553533644539502,0.22904752799946093] (9,-1; 9,-1), time: 30.0212s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[1e-05,2.887267055738058] (15,-1; 9,-1), time: 15.7712s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_166, [-inf,inf]=>[-0.6470262914076534,0.5391623145958339] (9,-1; 9,-1), time: 30.0479s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_193, [-inf,inf]=>[1e-05,2.9738781979535323] (15,-1; 9,-1), time: 15.8057s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[1e-05,1.9051134634993574] (15,-1; 9,-1), time: 15.7458s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_122, [-inf,inf]=>[-0.3211591751996503,1.0290020328974518] (9,-1; 9,-1), time: 30.0472s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[1e-05,1.695279652346342] (15,-1; 9,-1), time: 15.9518s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-0.12779831817340379,0.6955685835421845] (9,-1; 9,-1), time: 30.0610s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[-1.0086170652150572,0.1534383815378724] (9,-1; 9,-1), time: 30.0451s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[1e-05,0.9790651696632277] (15,-1; 9,-1), time: 17.3006s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-0.3383989219312274,0.4714856784498397] (9,-1; 9,-1), time: 30.0130s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_131, [-inf,inf]=>[1e-05,1.7986967364578959] (15,-1; 9,-1), time: 15.6197s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_135, [-inf,inf]=>[1e-05,1.5704584035757634] (15,-1; 9,-1), time: 15.6611s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_141, [-inf,inf]=>[-0.4218458893227342,0.6935950618214827] (9,-1; 9,-1), time: 30.0115s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_124, [-inf,inf]=>[-0.07730273689905846,1.088306842634909] (9,-1; 9,-1), time: 30.0156s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_106, [-inf,inf]=>[-0.8799026450985897,0.2522486607898673] (9,-1; 9,-1), time: 30.0507s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_136, [-inf,inf]=>[-0.523828481880048,0.5876853763955865] (9,-1; 9,-1), time: 30.0181s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-0.1412955919183705,0.7851477340395631] (9,-1; 9,-1), time: 30.0245s, #vars: 1931, #constrs: 1319, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-0.3815251535685561,0.6716986047012942] (9,-1; 9,-1), time: 30.0161s, #vars: 1931, #constrs: 1319, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(139, -1), (93, -1), (152, -1), (191, -1), (168, -1), (67, -1), (33, -1), (123, -1), (32, -1), (195, -1), (133, -1), (18, -1), (106, -1), (159, -1), (110, -1), (26, -1), (122, -1), (141, -1), (112, -1), (70, 1), (69, -1), (101, -1), (183, -1), (175, 1), (196, -1), (113, -1), (162, -1), (197, -1), (7, -1), (108, -1), (117, -1), (98, -1), (21, -1), (2, -1), (166, -1), (80, -1), (64, -1), (103, -1), (124, 1), (86, -1), (37, -1), (92, -1), (173, -1), (53, -1), (189, -1), (99, -1), (105, -1), (55, 1), (59, 1), (75, -1), (193, 1), (171, 1), (96, 1), (129, -1), (91, 1), (194, -1), (180, -1), (178, -1), (65, 1), (6, -1), (76, 1), (16, -1), (111, 1), (43, -1), (146, 1), (120, -1), (78, 1), (121, 1), (36, 1), (187, -1), (135, 1), (68, -1), (51, -1), (35, 1), (27, -1), (176, 1), (8, -1), (172, -1), (58, 1), (134, 1), (157, -1), (144, 1), (46, -1)]
best_l after optimization: 0.8346319198608398
beta sum per layer: []
alpha/beta optimization time: 6.771920680999756
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.74900055, -2.05286598, -0.18581772, -0.25943804,  2.15764332,
         -0.12891150, -2.10107088,  0.38581848,  1.27027369]], device='cuda:0') None
MIP improved 200 nodes out of 200 unstable nodes, lb improved 149.9127197265625, ub improved 221.15550231933594, time 218.1138
maximum relu layer improved by MIP so far 3
Linear(in_features=200, out_features=200, bias=True) 4 10 torch.Size([200])
sorted candidates ['lay10_135', 'lay10_11', 'lay10_154', 'lay10_137', 'lay10_164', 'lay10_90', 'lay10_189', 'lay10_57', 'lay10_157', 'lay10_33', 'lay10_82', 'lay10_198', 'lay10_49', 'lay10_138', 'lay10_146', 'lay10_151', 'lay10_25', 'lay10_192', 'lay10_91', 'lay10_143', 'lay10_186', 'lay10_18', 'lay10_141', 'lay10_31', 'lay10_14', 'lay10_51', 'lay10_199', 'lay10_62', 'lay10_24', 'lay10_167', 'lay10_195', 'lay10_153', 'lay10_73', 'lay10_114', 'lay10_19', 'lay10_180', 'lay10_94', 'lay10_70', 'lay10_109', 'lay10_29', 'lay10_179', 'lay10_37', 'lay10_140', 'lay10_87', 'lay10_30', 'lay10_7', 'lay10_80', 'lay10_42', 'lay10_185', 'lay10_188', 'lay10_81', 'lay10_78', 'lay10_161', 'lay10_163', 'lay10_17', 'lay10_93', 'lay10_43', 'lay10_172', 'lay10_107', 'lay10_47', 'lay10_131', 'lay10_184', 'lay10_130', 'lay10_194', 'lay10_142', 'lay10_175', 'lay10_124', 'lay10_168', 'lay10_191', 'lay10_4', 'lay10_144', 'lay10_52', 'lay10_152', 'lay10_99', 'lay10_86', 'lay10_20', 'lay10_39', 'lay10_26', 'lay10_98', 'lay10_58', 'lay10_35', 'lay10_41', 'lay10_16', 'lay10_55', 'lay10_139', 'lay10_6', 'lay10_149', 'lay10_110', 'lay10_118', 'lay10_115', 'lay10_67', 'lay10_126', 'lay10_0', 'lay10_54', 'lay10_156', 'lay10_116', 'lay10_8', 'lay10_197', 'lay10_72', 'lay10_64', 'lay10_9', 'lay10_165', 'lay10_187', 'lay10_13', 'lay10_166', 'lay10_104', 'lay10_61', 'lay10_120', 'lay10_125', 'lay10_10', 'lay10_176', 'lay10_50', 'lay10_69', 'lay10_48', 'lay10_174', 'lay10_133', 'lay10_36', 'lay10_65', 'lay10_12', 'lay10_46', 'lay10_150', 'lay10_129', 'lay10_1', 'lay10_127', 'lay10_3', 'lay10_162', 'lay10_177', 'lay10_53', 'lay10_159', 'lay10_27', 'lay10_71', 'lay10_97', 'lay10_190', 'lay10_196', 'lay10_134', 'lay10_158', 'lay10_2', 'lay10_23', 'lay10_160', 'lay10_169', 'lay10_40', 'lay10_117', 'lay10_155', 'lay10_108', 'lay10_173', 'lay10_45', 'lay10_105', 'lay10_79', 'lay10_183', 'lay10_32', 'lay10_102', 'lay10_60', 'lay10_34', 'lay10_136', 'lay10_103', 'lay10_128', 'lay10_74', 'lay10_83', 'lay10_59', 'lay10_44', 'lay10_181', 'lay10_148', 'lay10_66', 'lay10_96', 'lay10_76', 'lay10_123', 'lay10_22', 'lay10_121', 'lay10_84', 'lay10_145', 'lay10_88', 'lay10_92', 'lay10_85', 'lay10_28', 'lay10_95', 'lay10_119', 'lay10_56', 'lay10_68', 'lay10_101', 'lay10_89', 'lay10_170', 'lay10_38', 'lay10_193', 'lay10_132', 'lay10_182', 'lay10_106', 'lay10_5', 'lay10_75', 'lay10_15', 'lay10_113', 'lay10_100', 'lay10_147', 'lay10_111', 'lay10_171', 'lay10_77', 'lay10_63', 'lay10_178', 'lay10_122', 'lay10_112', 'lay10_21'] filter: 1.0
Solving MIP for lay10_154, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2323s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4377s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4661s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4695s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5990s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3977s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-1.7512547257108588,0.3118926047427565] (9,-1; 9,-1), time: 30.1011s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_164, [-inf,inf]=>[-1.5332126417036536,0.30173302808108277] (9,-1; 9,-1), time: 30.1186s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_198, [-inf,inf]=>[-1.6146698719050212,0.2529058653218834] (9,-1; 9,-1), time: 30.1178s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_138, [-inf,inf]=>[-2.1310627205699233,0.02575257531082295] (9,-1; 9,-1), time: 30.1446s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-0.9324955751207396,1.2145246986786944] (9,-1; 9,-1), time: 30.2030s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[-1.8185779544883758,0.14696278167544205] (9,-1; 9,-1), time: 30.2535s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-1.2392939796051932,0.5835652189606269] (9,-1; 9,-1), time: 30.2592s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-1.9376667382084123,0.3502900815396617] (9,-1; 9,-1), time: 30.2945s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_151, [-inf,inf]=>[-1.5494541582900785,0.08902750882751786] (9,-1; 9,-1), time: 30.5492s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_146, [-inf,inf]=>[-0.8676287231479203,1.4997228712851074] (9,-1; 9,-1), time: 30.5628s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_137, [-inf,inf]=>[-1.9132047569003894,0.1648035188369236] (9,-1; 9,-1), time: 31.1126s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-1.2161638777563764,0.6803408428339053] (9,-1; 9,-1), time: 30.1335s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-0.9407775103853817,0.7012399244721422] (9,-1; 9,-1), time: 30.1540s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_186, [-inf,inf]=>[-0.6292733397959703,1.6198464194846594] (9,-1; 9,-1), time: 30.1298s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4978s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_153, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2801s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_143, [-inf,inf]=>[-1.377589446207253,0.45460481676414305] (9,-1; 9,-1), time: 30.9412s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4849s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-1.060837413364804,0.8098854824938356] (9,-1; 9,-1), time: 30.5277s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1789s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_179, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2545s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.1732s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2853s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_140, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3351s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_109, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7329s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1785s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.6703s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_180, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.9947s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-1.225646429857407,0.5116683575202002] (9,-1; 9,-1), time: 30.0597s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-1.370012745920359,0.5356428294215194] (9,-1; 9,-1), time: 30.0595s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_199, [-inf,inf]=>[-1.120258781610034,0.5858513229453884] (9,-1; 9,-1), time: 30.0878s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_141, [-inf,inf]=>[-1.7240858906958063,0.294488595367537] (9,-1; 9,-1), time: 30.2779s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-0.8931181377624652,0.7943781823103357] (9,-1; 9,-1), time: 30.2803s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_167, [-inf,inf]=>[-1.0139986641307763,0.9437307208540728] (9,-1; 9,-1), time: 30.1335s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_195, [-inf,inf]=>[-0.7529781309051656,1.0535737328164934] (9,-1; 9,-1), time: 30.0293s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-1.5684165247507824,0.18092278549979735] (9,-1; 9,-1), time: 30.4376s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0973s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_161, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2085s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1455s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[-1.584223050056964,0.23838327123037906] (9,-1; 9,-1), time: 30.1464s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-1.344521005189011,0.251455381055655] (9,-1; 9,-1), time: 30.0737s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[-0.1672996949996654,1.9447521186561871] (9,-1; 9,-1), time: 30.6460s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2800s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2615s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-0.28739745903238173,1.3852742169772132] (9,-1; 9,-1), time: 30.0289s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-1.4510126756909398,0.4183155116474698] (9,-1; 9,-1), time: 30.3708s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-1.4346428823707231,0.41890342170857636] (9,-1; 9,-1), time: 30.0360s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_124, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5845s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5130s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_185, [-inf,inf]=>[-1.4906204043400457,0.5594071722598772] (9,-1; 9,-1), time: 30.2604s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2539s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_188, [-inf,inf]=>[-1.7154671336818375,0.30963764641770086] (9,-1; 9,-1), time: 30.4116s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_78, [-inf,inf]=>[1e-05,1.9205277210047462] (15,-1; 9,-1), time: 18.5873s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-1.2779281394844904,0.8435936035668072] (9,-1; 9,-1), time: 30.1606s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_172, [-inf,inf]=>[-1.5991878070408674,0.18846016824629633] (9,-1; 9,-1), time: 30.1011s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-2.0687322443373386,0.020229849251137827] (9,-1; 9,-1), time: 30.2356s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-1.2511963743310892,0.453341566650785] (9,-1; 9,-1), time: 30.7552s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_107, [-inf,inf]=>[-1.3292942887152006,0.2995198245402228] (9,-1; 9,-1), time: 30.0169s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[-1.9179593017142635,0.10490399784384295] (9,-1; 9,-1), time: 30.0658s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_130, [-inf,inf]=>[-0.6942328792790644,0.6284499438397276] (9,-1; 9,-1), time: 30.1277s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3729s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_194, [-inf,inf]=>[-1.4225685533850918,0.3818357037882438] (9,-1; 9,-1), time: 30.3995s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_142, [-inf,inf]=>[-0.8683967796492658,0.7877842681047946] (9,-1; 9,-1), time: 30.1304s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_175, [-inf,inf]=>[-1.0057567709294124,0.6813236123019699] (9,-1; 9,-1), time: 30.0362s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2121s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4247s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5566s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2250s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_168, [-inf,inf]=>[-1.2186538211850613,0.46810233539950524] (9,-1; 9,-1), time: 30.2868s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_115, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1981s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_191, [-inf,inf]=>[-0.46152295091094,1.375337528122939] (9,-1; 9,-1), time: 30.2829s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2753s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_126, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5098s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4379s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-1.4003704780802573,0.3820665412096953] (9,-1; 9,-1), time: 30.6223s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_152, [-inf,inf]=>[-0.030687391019325994,1.9258730306012013] (9,-1; 9,-1), time: 30.1792s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-0.9200778742788469,0.8270565276027556] (9,-1; 9,-1), time: 30.0879s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2501s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-1.4774163816149473,0.2452973309571399] (9,-1; 9,-1), time: 30.2098s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-0.17831561336207918,1.520939573085255] (9,-1; 9,-1), time: 30.0843s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-0.7049324714819809,1.13861085362429] (9,-1; 9,-1), time: 30.2901s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-1.2503804940715588,0.4147320577557219] (9,-1; 9,-1), time: 30.3707s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-1.730552020339052,0.08917810884583774] (9,-1; 9,-1), time: 30.8378s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-1.4681394745609824,0.4993642923670166] (9,-1; 9,-1), time: 30.7867s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_139, [-inf,inf]=>[-1.4144581592098162,0.39131373217893123] (9,-1; 9,-1), time: 30.2618s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-1.0045396474673096,0.4627865914863437] (9,-1; 9,-1), time: 30.2838s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_166, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4277s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_149, [-inf,inf]=>[-0.48433391457448616,1.188822312613374] (9,-1; 9,-1), time: 30.4915s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_110, [-inf,inf]=>[-1.2978096098128047,0.3786767858204075] (9,-1; 9,-1), time: 30.2385s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4172s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[1e-05,2.142222165934394] (15,-1; 9,-1), time: 21.4331s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-1.167601274250295,0.5229124612954041] (9,-1; 9,-1), time: 30.1193s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-1.6805104311225498,0.032230964016603914] (9,-1; 9,-1), time: 30.3419s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_116, [-inf,inf]=>[-1.4192949942884039,0.3244222012440405] (9,-1; 9,-1), time: 30.2089s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.4424s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[-1.5663934511404685,0.20583804902949243] (9,-1; 9,-1), time: 30.1167s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_197, [-inf,inf]=>[-0.8308889035996648,1.3356644461122942] (9,-1; 9,-1), time: 30.3232s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2653s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_187, [-inf,inf]=>[1e-05,2.9328368558723557] (15,-1; 9,-1), time: 16.4452s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-0.9511915828825221,0.7174599383792531] (9,-1; 9,-1), time: 30.1764s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[1e-05,2.45997127937387] (15,-1; 9,-1), time: 16.4168s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3737s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_165, [-inf,inf]=>[-1.1204878744227051,0.5512575573088458] (9,-1; 9,-1), time: 30.1943s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-1.4143688521309896,0.1757940685820512] (9,-1; 9,-1), time: 30.0552s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2201s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_104, [-inf,inf]=>[-1.0019572277800433,0.45459151709811646] (9,-1; 9,-1), time: 30.8071s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_125, [-inf,inf]=>[-0.8865442897106557,1.0012680994120071] (9,-1; 9,-1), time: 30.1397s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_120, [-inf,inf]=>[-1.47620181004016,0.06163725311750742] (9,-1; 9,-1), time: 30.8782s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-1.3865837815178814,0.46670548817941404] (9,-1; 9,-1), time: 30.6082s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_176, [-inf,inf]=>[-0.7310496011748144,1.1723350403686084] (9,-1; 9,-1), time: 30.3952s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_177, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7549s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-1.892797318382612,0.22390605503064517] (9,-1; 9,-1), time: 30.1576s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_174, [-inf,inf]=>[-1.0082514481927234,0.7155410827404316] (9,-1; 9,-1), time: 30.3479s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_133, [-inf,inf]=>[-1.023666374151676,0.9257509627805807] (9,-1; 9,-1), time: 30.1710s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-1.7481356622397932,0.37026049896452534] (9,-1; 9,-1), time: 30.2753s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_158, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2816s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[-0.11724875712310578,1.7544093475610503] (9,-1; 9,-1), time: 30.2166s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-0.8803764053195876,0.7995237727599704] (9,-1; 9,-1), time: 30.0746s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.9516s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_150, [-inf,inf]=>[-1.1049106033251417,0.6716816583390557] (9,-1; 9,-1), time: 30.0999s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_129, [-inf,inf]=>[-1.4539877827256324,0.1725123030996529] (9,-1; 9,-1), time: 30.2086s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[1e-05,4.365238891831864] (15,-1; 9,-1), time: 16.1297s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_127, [-inf,inf]=>[-1.161627827403562,0.39156616096956975] (9,-1; 9,-1), time: 30.2329s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-1.5736766448359187,0.16684105521033676] (9,-1; 9,-1), time: 30.3488s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3197s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2028s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_159, [-inf,inf]=>[-0.44418751568161957,1.7026931577486457] (9,-1; 9,-1), time: 30.3056s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[-1.3551077116520205,0.31341577799196096] (9,-1; 9,-1), time: 30.1401s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-0.40061923188053394,1.5534305437068976] (9,-1; 9,-1), time: 30.0931s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[-1.5424606726845813,0.5013461425978796] (9,-1; 9,-1), time: 30.3124s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3290s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_190, [-inf,inf]=>[-0.26340402659595497,1.865534469881552] (9,-1; 9,-1), time: 30.1384s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_196, [-inf,inf]=>[-1.6647797864699283,0.16843291172241923] (9,-1; 9,-1), time: 30.3853s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4171s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_155, [-inf,inf]=>[1e-05,2.0727055015267837] (15,-1; 9,-1), time: 18.3705s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_134, [-inf,inf]=>[-0.44344943067601694,1.0346754830362515] (9,-1; 9,-1), time: 30.1514s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_103, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2723s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_128, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2308s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.5738s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[-1.0878046982488345,0.39777717739974644] (9,-1; 9,-1), time: 30.2508s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-1.2100787100832366,0.7063917527307797] (9,-1; 9,-1), time: 30.6869s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_160, [-inf,inf]=>[-1.3456687500555204,0.538136644564936] (9,-1; 9,-1), time: 30.3251s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_148, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.9467s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-0.8658788148792362,0.6969616259429606] (9,-1; 9,-1), time: 30.2418s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2708s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_117, [-inf,inf]=>[-0.9592956807826315,1.1358335590277717] (9,-1; 9,-1), time: 30.2686s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_108, [-inf,inf]=>[-1.3230211946050716,0.3376586159838021] (9,-1; 9,-1), time: 30.5296s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_102, [-inf,inf]=>[1e-05,2.1890907567691995] (15,-1; 9,-1), time: 16.6516s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_173, [-inf,inf]=>[-1.7913874906798004,0.4141238784630138] (9,-1; 9,-1), time: 30.0379s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[1e-05,2.6737110627708893] (15,-1; 9,-1), time: 16.4484s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[1e-05,2.153309736569753] (15,-1; 9,-1), time: 20.7172s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[1e-05,2.2533268348107054] (15,-1; 9,-1), time: 16.7450s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3131s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[-1.6994657029488947,0.14078365581254831] (9,-1; 9,-1), time: 30.1667s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_183, [-inf,inf]=>[-1.4651485403136328,0.13689740963798142] (9,-1; 9,-1), time: 30.3301s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4535s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_136, [-inf,inf]=>[-0.3912439347905841,1.6197128389645332] (9,-1; 9,-1), time: 30.4530s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_145, [-inf,inf]=>[1e-05,3.3117471621922703] (15,-1; 9,-1), time: 16.4211s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-0.3479329182194513,1.4975306139099838] (9,-1; 9,-1), time: 30.1628s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-1.282903082555519,0.2808388320115388] (9,-1; 9,-1), time: 30.1601s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-1.1613305606900497,0.5419010939351719] (9,-1; 9,-1), time: 30.2779s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_181, [-inf,inf]=>[-1.7527288885969883,0.23503395691731316] (9,-1; 9,-1), time: 30.2630s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[1e-05,2.768336617255433] (15,-1; 9,-1), time: 16.3818s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[1e-05,4.093494163267154] (15,-1; 9,-1), time: 16.6333s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_123, [-inf,inf]=>[-0.496629650595101,1.015434655451254] (9,-1; 9,-1), time: 30.1067s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-1.4583355940015372,0.14779282113062664] (9,-1; 9,-1), time: 30.1523s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_121, [-inf,inf]=>[-0.5124521247491656,1.1046742832080465] (9,-1; 9,-1), time: 30.3128s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_119, [-inf,inf]=>[1e-05,3.3421222952459066] (15,-1; 9,-1), time: 16.1882s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[-1.4797336656720539,0.3928354770987195] (9,-1; 9,-1), time: 30.5043s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_113, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2979s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.6195s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1438s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-1.3030877488596155,0.38584574451664355] (9,-1; 9,-1), time: 30.2064s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1187s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_111, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2821s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3224s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-0.2782729526007511,1.4825698398259306] (9,-1; 9,-1), time: 30.2493s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[1e-05,2.299734433083821] (15,-1; 9,-1), time: 16.3034s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[-1.5480151776346163,0.11143367010204777] (9,-1; 9,-1), time: 30.0245s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_101, [-inf,inf]=>[-0.0850956420412417,1.7200987245424806] (9,-1; 9,-1), time: 30.2380s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_170, [-inf,inf]=>[-0.2385093273064221,2.2022235705864097] (9,-1; 9,-1), time: 30.1170s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-0.8859455593317369,0.5705737795936541] (9,-1; 9,-1), time: 30.5944s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-1.0897983246724823,0.3915252933993003] (9,-1; 9,-1), time: 30.1660s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_193, [-inf,inf]=>[-0.8253893382449111,0.8952447135779128] (9,-1; 9,-1), time: 30.1793s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_132, [-inf,inf]=>[-1.1129535209656058,0.4616257428533004] (9,-1; 9,-1), time: 30.3725s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_182, [-inf,inf]=>[-0.8393684856762127,0.6503328548926586] (9,-1; 9,-1), time: 30.0436s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_106, [-inf,inf]=>[-0.9113378464614192,0.9580177581208829] (9,-1; 9,-1), time: 30.2634s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.06685576416362812,1.7087164082263095] (9,-1; 9,-1), time: 30.2287s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_147, [-inf,inf]=>[-1.6164992674898937,0.023920922209258073] (9,-1; 9,-1), time: 30.1809s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-0.96799349051755,1.109677829901597] (9,-1; 9,-1), time: 30.3812s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_178, [-inf,inf]=>[-1.1628393150126213,0.4358101151323427] (9,-1; 9,-1), time: 30.7602s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_122, [-inf,inf]=>[-1.0297719994535222,0.5237219760545619] (9,-1; 9,-1), time: 30.2276s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_112, [-inf,inf]=>[-1.1577475879038936,0.44908661400381705] (9,-1; 9,-1), time: 30.0731s, #vars: 2311, #constrs: 1789, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-1.138910917536234,0.41421985138325507] (9,-1; 9,-1), time: 30.1302s, #vars: 2311, #constrs: 1789, improved: True
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 3 has unstable to stable neurons: [(45, -1), (0, -1), (65, -1), (85, -1), (98, -1), (130, -1), (49, -1), (119, -1), (175, -1), (128, -1), (16, -1), (185, -1), (156, -1), (140, -1), (57, -1), (7, -1), (127, -1), (174, -1), (83, -1), (158, -1), (171, -1), (24, -1), (20, -1), (62, -1), (149, -1), (195, -1), (22, -1), (178, -1), (111, -1), (104, -1), (179, -1), (69, 1), (27, -1), (196, -1), (165, -1), (94, -1), (146, 1), (8, -1), (154, -1), (84, -1), (37, -1), (36, 1), (101, -1), (134, -1), (90, -1), (67, -1), (192, -1), (61, -1), (31, -1), (129, 1), (74, 1), (95, -1), (47, -1), (39, -1), (138, -1), (139, -1), (194, -1), (72, -1), (52, -1), (120, -1), (107, -1), (109, 1), (168, 1), (11, -1), (161, 1), (93, -1), (68, -1), (113, -1), (151, 1), (152, -1), (50, 1), (38, -1), (148, -1), (79, -1), (137, -1), (182, -1), (100, 1), (142, -1), (132, -1), (96, 1), (108, -1), (176, 1), (126, -1), (123, -1), (153, -1), (189, 1), (105, 1), (198, -1), (191, -1), (4, 1), (3, -1), (46, -1), (66, -1), (102, -1), (125, -1), (114, 1), (34, 1), (32, 1), (51, -1), (193, 1), (103, -1), (99, 1), (71, -1), (28, 1), (116, -1), (30, 1), (40, -1), (197, -1), (131, 1), (135, 1)]
best_l after optimization: 14.10751724243164
beta sum per layer: []
alpha/beta optimization time: 6.8679094314575195
alpha-CROWN with intermediate bounds by MIP: tensor([[ 3.19603586, -0.46445036,  1.16857409,  1.23751688,  3.59278655,
          1.23771572, -0.61675262,  1.95232725,  2.80376434]], device='cuda:0') None
MIP improved 200 nodes out of 200 unstable nodes, lb improved 769.9153442382812, ub improved 884.306396484375, time 275.6705
maximum relu layer improved by MIP so far 4
Linear(in_features=200, out_features=10, bias=True) 5 12 torch.Size([9, 1])
MIP finished with 691.4761345386505s
Run final alpha-CROWN after MIP solving on layer 12 and relu idx 5
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
best_l after optimization: 17.57763671875
beta sum per layer: []
alpha/beta optimization time: 6.0983195304870605
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 3.47167349, -0.05642939,  1.56415582,  1.62393904,  3.95475388,
          1.61467266, -0.21187639,  2.42221260,  3.19453430]], device='cuda:0') None
Split layers:
  BoundLinear(name=/input.11, inputs=[/26, /7, /8]): [(BoundRelu(name=/28, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.15, inputs=[/28, /9, /10]): [(BoundRelu(name=/30, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.3, inputs=[/22, /3, /4]): [(BoundRelu(name=/24, inputs=[/input.3]), 0)]
  BoundLinear(name=/input, inputs=[/20, /1, /2]): [(BoundRelu(name=/22, inputs=[/input]), 0)]
  BoundLinear(name=/input.7, inputs=[/24, /5, /6]): [(BoundRelu(name=/26, inputs=[/input.7]), 0)]
refined global lb: tensor([[ 3.47167349],
        [-0.05642939],
        [ 1.56415582],
        [ 1.62393904],
        [ 3.95475388],
        [ 1.61467266],
        [-0.21187639],
        [ 2.42221260],
        [ 3.19453430]], device='cuda:0') min: tensor(-0.21187639, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200])]

Properties batch 0, size 1
Remaining timeout: 187.2870180606842
##### Instance 0 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.4716734886169434.

Properties batch 1, size 1
Remaining timeout: 187.20285964012146
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.05642939]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundShape(name=/13, inputs=[/0])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundGather(name=/15, inputs=[/13, /14])
  (/16): BoundConstant(name=/16, inputs=[])
  (/17): BoundUnsqueeze(name=/17, inputs=[/15])
  (/18): BoundUnsqueeze(name=/18, inputs=[/16])
  (/19): BoundConcat(name=/19, inputs=[/17, /18])
  (/20): BoundReshape(name=/20, inputs=[/0, /19])
  (/input): BoundLinear(name=/input, inputs=[/20, /1, /2])
  (/22): BoundRelu(name=/22, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/22, /3, /4])
  (/24): BoundRelu(name=/24, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/24, /5, /6])
  (/26): BoundRelu(name=/26, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/26, /7, /8])
  (/28): BoundRelu(name=/28, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/28, /9, /10])
  (/30): BoundRelu(name=/30, inputs=[/input.15])
  (/31): BoundLinear(name=/31, inputs=[/30, /11, /12])
)
Model prediction is: tensor([-2.63355017,  1.25981843,  7.96646833,  0.80176729, -0.23677054,
        -2.51228857,  0.08354779,  1.64332795, -0.40803528, -2.71555495],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /22 start_node /31 with alignment adjustment
setting alpha for layer /24 start_node /31 with alignment adjustment
setting alpha for layer /26 start_node /31 with alignment adjustment
setting alpha for layer /28 start_node /31 with alignment adjustment
setting alpha for layer /30 start_node /31 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.05642939]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input.11,/input.15,/input.3,/input,/input.7,/31
Split layers:
  BoundLinear(name=/input.3, inputs=[/22, /3, /4]): [(BoundRelu(name=/24, inputs=[/input.3]), 0)]
  BoundLinear(name=/input, inputs=[/20, /1, /2]): [(BoundRelu(name=/22, inputs=[/input]), 0)]
  BoundLinear(name=/input.15, inputs=[/28, /9, /10]): [(BoundRelu(name=/30, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.7, inputs=[/24, /5, /6]): [(BoundRelu(name=/26, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.11, inputs=[/26, /7, /8]): [(BoundRelu(name=/28, inputs=[/input.11]), 0)]
Keeping slopes for these layers: ['/31']
Keeping slopes for these layers: ['/31']
Node /22 input 0: size torch.Size([200]) unstable 55
Node /24 input 0: size torch.Size([200]) unstable 66
Node /26 input 0: size torch.Size([200]) unstable 52
Node /28 input 0: size torch.Size([200]) unstable 90
Node /30 input 0: size torch.Size([200]) unstable 123
-----------------
# of unstable neurons: 386
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.15, 146] 
split level 1: [/input.15, 26] 
split level 2: [/input.15, 31] 
split level 3: [/input.15, 90] 
split level 4: [/input.15, 91] 
split level 5: [/input.15, 185] 
pruning_in_iteration open status: True
ratio of positive domain = 48 / 64 = 0.75
pruning-in-iteration extra time: 0.016158342361450195
Time: prepare 0.0143    beta_bound 0.7298    bound 0.7299    transfer 0.0010    finalize 0.0064    func 0.7518    
Accumulated time: func 0.7518    prepare 0.0154    bound 0.7299    beta_bound 0.7298    transfer 0.0010    finalize 0.0064    
batch bounding time:  0.7521059513092041
Current worst splitting domains lb-rhs (depth):
-0.05643 (6), -0.05643 (6), -0.05643 (6), -0.05643 (6), -0.05643 (6), -0.05643 (6), -0.05643 (6), -0.05643 (6), -0.05643 (6), -0.05643 (6), -0.05643 (6), -0.05643 (6), -0.05643 (6), -0.05643 (6), -0.05643 (6), -0.05643 (6), 
length of domains: 16
Time: pickout 0.0010    decision 0.2702    set_bounds 0.0045    solve 0.7521    add 0.0016    
Accumulated time: pickout 0.0010    decision 0.2702    set_bounds 0.0045    solve 0.7521    add 0.0016    
Current (lb-rhs): -0.056429386138916016
16 domains visited
Cumulative time: 1.099271535873413

BaB round 2
batch: 16
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.11, 55] [/input.11, 159] [/input.11, 159] [/input.11, 159] [/input.11, 144] [/input.11, 159] [/input.11, 159] [/input.11, 159] [/input.11, 159] [/input.11, 159] 
split level 1: [/input.11, 144] [/input.11, 55] [/input.11, 55] [/input.11, 55] [/input.15, 164] [/input.11, 55] [/input.11, 55] [/input.11, 55] [/input.11, 55] [/input.11, 55] 
pruning_in_iteration open status: True
ratio of positive domain = 54 / 64 = 0.84375
pruning-in-iteration extra time: 0.014120101928710938
Time: prepare 0.0097    beta_bound 0.4098    bound 0.4099    transfer 0.0005    finalize 0.0058    func 0.4259    
Accumulated time: func 1.1777    prepare 0.0256    bound 1.1398    beta_bound 1.1396    transfer 0.0015    finalize 0.0122    
batch bounding time:  0.4260551929473877
Current worst splitting domains lb-rhs (depth):
-0.05643 (8), -0.05643 (8), -0.05643 (8), -0.05643 (8), -0.05643 (8), -0.05102 (8), -0.04913 (8), -0.04446 (8), -0.02376 (8), -0.00736 (8), 
length of domains: 10
Time: pickout 0.0011    decision 0.0288    set_bounds 0.0021    solve 0.4261    add 0.0017    
Accumulated time: pickout 0.0022    decision 0.2990    set_bounds 0.0065    solve 1.1782    add 0.0033    
Current (lb-rhs): -0.056429386138916016
26 domains visited
Cumulative time: 1.5601561069488525

BaB round 3
batch: 10
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.11, 122] [/input.11, 144] [/input.11, 144] [/input.11, 144] [/input.11, 144] [/input.11, 122] [/input.11, 144] [/input.11, 144] [/input.11, 144] [/input, 7] 
split level 1: [/input.11, 144] [/input, 7] [/input, 7] [/input, 7] [/input, 7] [/input.11, 144] [/input, 7] [/input, 7] [/input, 7] [/input, 190] 
split level 2: [/input, 7] [/input, 190] [/input.15, 167] [/input, 190] [/input, 190] [/input, 7] [/input, 190] [/input, 190] [/input, 190] [/input.11, 121] 

all verified at 1th iter
pruning_in_iteration open status: True
ratio of positive domain = 80 / 80 = 1.0
pruning-in-iteration extra time: 0.0005211830139160156
Time: prepare 0.0190    beta_bound 0.0257    bound 0.0258    transfer 0.0005    finalize 0.0080    func 0.0533    
Accumulated time: func 1.2310    prepare 0.0454    bound 1.1656    beta_bound 1.1653    transfer 0.0020    finalize 0.0203    
batch bounding time:  0.05341529846191406
length of domains: 0
Time: pickout 0.0016    decision 0.0355    set_bounds 0.0041    solve 0.0534    add 0.0002    
Accumulated time: pickout 0.0038    decision 0.3344    set_bounds 0.0107    solve 1.2316    add 0.0035    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
26 domains visited
Cumulative time: 1.6559841632843018


Properties batch 2, size 1
Remaining timeout: 185.4179825782776
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.5641558170318604.

Properties batch 3, size 1
Remaining timeout: 185.35495924949646
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.623939037322998.

Properties batch 4, size 1
Remaining timeout: 185.29237604141235
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.954753875732422.

Properties batch 5, size 1
Remaining timeout: 185.22921681404114
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.6146726608276367.

Properties batch 6, size 1
Remaining timeout: 185.16605734825134
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.21187639]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/1): BoundParams(name=/1, inputs=[])
  (/2): BoundParams(name=/2, inputs=[])
  (/3): BoundParams(name=/3, inputs=[])
  (/4): BoundParams(name=/4, inputs=[])
  (/5): BoundParams(name=/5, inputs=[])
  (/6): BoundParams(name=/6, inputs=[])
  (/7): BoundParams(name=/7, inputs=[])
  (/8): BoundParams(name=/8, inputs=[])
  (/9): BoundParams(name=/9, inputs=[])
  (/10): BoundParams(name=/10, inputs=[])
  (/11): BoundParams(name=/11, inputs=[])
  (/12): BoundParams(name=/12, inputs=[])
  (/13): BoundShape(name=/13, inputs=[/0])
  (/14): BoundConstant(name=/14, inputs=[])
  (/15): BoundGather(name=/15, inputs=[/13, /14])
  (/16): BoundConstant(name=/16, inputs=[])
  (/17): BoundUnsqueeze(name=/17, inputs=[/15])
  (/18): BoundUnsqueeze(name=/18, inputs=[/16])
  (/19): BoundConcat(name=/19, inputs=[/17, /18])
  (/20): BoundReshape(name=/20, inputs=[/0, /19])
  (/input): BoundLinear(name=/input, inputs=[/20, /1, /2])
  (/22): BoundRelu(name=/22, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/22, /3, /4])
  (/24): BoundRelu(name=/24, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/24, /5, /6])
  (/26): BoundRelu(name=/26, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/26, /7, /8])
  (/28): BoundRelu(name=/28, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/28, /9, /10])
  (/30): BoundRelu(name=/30, inputs=[/input.15])
  (/31): BoundLinear(name=/31, inputs=[/30, /11, /12])
)
Model prediction is: tensor([-2.63355017,  1.25981843,  7.96646833,  0.80176729, -0.23677054,
        -2.51228857,  0.08354779,  1.64332795, -0.40803528, -2.71555495],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /22 start_node /31 with alignment adjustment
setting alpha for layer /24 start_node /31 with alignment adjustment
setting alpha for layer /26 start_node /31 with alignment adjustment
setting alpha for layer /28 start_node /31 with alignment adjustment
setting alpha for layer /30 start_node /31 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.21187639]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input.11,/input.15,/input.3,/input,/input.7,/31
Split layers:
  BoundLinear(name=/input.15, inputs=[/28, /9, /10]): [(BoundRelu(name=/30, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.11, inputs=[/26, /7, /8]): [(BoundRelu(name=/28, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.3, inputs=[/22, /3, /4]): [(BoundRelu(name=/24, inputs=[/input.3]), 0)]
  BoundLinear(name=/input, inputs=[/20, /1, /2]): [(BoundRelu(name=/22, inputs=[/input]), 0)]
  BoundLinear(name=/input.7, inputs=[/24, /5, /6]): [(BoundRelu(name=/26, inputs=[/input.7]), 0)]
Keeping slopes for these layers: ['/31']
Keeping slopes for these layers: ['/31']
Node /22 input 0: size torch.Size([200]) unstable 55
Node /24 input 0: size torch.Size([200]) unstable 66
Node /26 input 0: size torch.Size([200]) unstable 52
Node /28 input 0: size torch.Size([200]) unstable 90
Node /30 input 0: size torch.Size([200]) unstable 123
-----------------
# of unstable neurons: 386
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.15, 90] 
split level 1: [/input.15, 186] 
split level 2: [/input.15, 195] 
split level 3: [/input.15, 99] 
split level 4: [/input.15, 146] 
split level 5: [/input.15, 18] 
pruning_in_iteration open status: True
ratio of positive domain = 56 / 64 = 0.875
pruning-in-iteration extra time: 0.016282320022583008
Time: prepare 0.0109    beta_bound 0.4547    bound 0.4548    transfer 0.0005    finalize 0.0058    func 0.4720    
Accumulated time: func 0.4720    prepare 0.0118    bound 0.4548    beta_bound 0.4547    transfer 0.0005    finalize 0.0058    
batch bounding time:  0.4721529483795166
Current worst splitting domains lb-rhs (depth):
-0.21188 (6), -0.21188 (6), -0.21188 (6), -0.21188 (6), -0.21188 (6), -0.21188 (6), -0.20788 (6), -0.20381 (6), 
length of domains: 8
Time: pickout 0.0010    decision 0.0452    set_bounds 0.0023    solve 0.4722    add 0.0014    
Accumulated time: pickout 0.0010    decision 0.0452    set_bounds 0.0023    solve 0.4722    add 0.0014    
Current (lb-rhs): -0.21187639236450195
8 domains visited
Cumulative time: 0.5321352481842041

BaB round 2
batch: 8
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.7, 15] [/input.15, 25] [/input.11, 183] [/input.11, 183] [/input.7, 15] [/input.15, 25] [/input.11, 183] [/input.11, 183] 
split level 1: [/input.11, 183] [/input.15, 174] [/input.15, 174] [/input.15, 174] [/input.11, 183] [/input.15, 174] [/input.3, 53] [/input.15, 174] 
split level 2: [/input.15, 174] [/input.15, 9] [/input.3, 53] [/input.3, 53] [/input.15, 174] [/input.15, 9] [/input.15, 174] [/input.3, 53] 
pruning_in_iteration open status: True
ratio of positive domain = 54 / 64 = 0.84375
pruning-in-iteration extra time: 0.015168905258178711
Time: prepare 0.0100    beta_bound 0.4403    bound 0.4404    transfer 0.0005    finalize 0.0087    func 0.4596    
Accumulated time: func 0.9317    prepare 0.0224    bound 0.8952    beta_bound 0.8950    transfer 0.0011    finalize 0.0145    
batch bounding time:  0.45975661277770996
Current worst splitting domains lb-rhs (depth):
-0.13311 (9), -0.11154 (9), -0.10883 (9), -0.09692 (9), -0.08747 (9), -0.07028 (9), -0.05499 (9), -0.04450 (9), -0.02328 (9), -0.00423 (9), 
length of domains: 10
Time: pickout 0.0012    decision 0.0302    set_bounds 0.0032    solve 0.4598    add 0.0017    
Accumulated time: pickout 0.0021    decision 0.0754    set_bounds 0.0056    solve 0.9319    add 0.0030    
Current (lb-rhs): -0.13311266899108887
18 domains visited
Cumulative time: 1.0296862125396729

BaB round 3
batch: 10
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.7, 15] [/input.7, 15] [/input.7, 15] [/input.7, 15] [/input.7, 15] [/input.7, 15] [/input.15, 25] [/input.15, 25] [/input.7, 15] [/input.7, 15] 
split level 1: [/input.15, 25] [/input.15, 25] [/input.15, 25] [/input.15, 25] [/input.15, 25] [/input.15, 25] [/input.15, 9] [/input.15, 9] [/input.15, 25] [/input.15, 25] 
split level 2: [/input.11, 76] [/input.15, 9] [/input.11, 76] [/input.7, 24] [/input.15, 9] [/input.15, 9] [/input.15, 197] [/input.15, 197] [/input.11, 76] [/input.7, 24] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 80 / 80 = 1.0
pruning-in-iteration extra time: 0.00010323524475097656
Time: prepare 0.0210    beta_bound 0.0119    bound 0.0120    transfer 0.0003    finalize 0.0107    func 0.0442    
Accumulated time: func 0.9759    prepare 0.0440    bound 0.9072    beta_bound 0.9070    transfer 0.0014    finalize 0.0251    
batch bounding time:  0.044358253479003906
length of domains: 0
Time: pickout 0.0029    decision 0.0380    set_bounds 0.0034    solve 0.0444    add 0.0002    
Accumulated time: pickout 0.0050    decision 0.1134    set_bounds 0.0090    solve 0.9763    add 0.0032    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
18 domains visited
Cumulative time: 1.1195809841156006


Properties batch 7, size 1
Remaining timeout: 183.92865562438965
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.422212600708008.

Properties batch 8, size 1
Remaining timeout: 183.86530566215515
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.1945343017578125.
Result: safe in 716.1971 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):716.1899458924416, max time: 716.1971077919006
mean time for verified SAFE instances(total 1): 716.1971077919006, max time: 716.1971077919006
safe (total 1), index: [0]
