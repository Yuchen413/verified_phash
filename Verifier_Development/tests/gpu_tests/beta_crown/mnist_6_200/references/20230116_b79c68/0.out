Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
model:
  name: mnist_6_200
  path: mnist_6_200_nat.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 15
  end: 16
  select_instance: null
  num_outputs: 10
  mean: [0.0]
  std: [1.0]
  pkl_path: null
  dataset: MNIST_ERAN_UN
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.015
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 900
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Sun Jan 15 23:35:54 2023 on diablo.cs.ucla.edu
Sequential(
  (0): Flatten()
  (1): Linear(in_features=784, out_features=200, bias=True)
  (2): ReLU()
  (3): Linear(in_features=200, out_features=200, bias=True)
  (4): ReLU()
  (5): Linear(in_features=200, out_features=200, bias=True)
  (6): ReLU()
  (7): Linear(in_features=200, out_features=200, bias=True)
  (8): ReLU()
  (9): Linear(in_features=200, out_features=200, bias=True)
  (10): ReLU()
  (11): Linear(in_features=200, out_features=10, bias=True)
)
############################
Sampled data loaded. No normalization used!
Shape: torch.Size([1000, 1, 28, 28]) torch.Size([1000]) torch.Size([1000])
X range: tensor(1.) tensor(0.) tensor(0.12226459)
Note runnerup label is empty here!
############################
Internal results will be saved to Verified_ret_[mnist_6_200]_start=15_end=16_iter=20_b=1024_timeout=900_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=after_cplex_cuts=False.npy.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model prediction is: tensor([[-3.25121307, -1.79723144, -1.20159948,  3.47173023, -2.67189574,
          6.15487766, -1.72229803, -1.42275953,  0.09232473,  1.46565974]],
       device='cuda:0')
layer /22 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 62 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [62]; unstable size 62; total size 200 (torch.Size([1, 200]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [130]; unstable size 130; total size 200 (torch.Size([1, 200]))
layer /26 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /26 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([200]); unstable size 188; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-23.58606339, -34.39701843, -36.64447784, -32.80580139, -33.41138077,
         -26.29252243, -38.70899200, -35.63383484, -37.37446213]],
       device='cuda:0') None
best_l after optimization: -218.48037719726562 with beta sum per layer: []
alpha/beta optimization time: 6.26908278465271
initial alpha-CROWN bounds: tensor([[-16.24152565, -24.74609947, -27.08579445, -23.85049248, -24.03909302,
         -19.38611221, -28.56131363, -26.47010040, -28.09985542]],
       device='cuda:0')
Worst class: (+ rhs) -28.56131362915039
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750000149011612, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.25121307, -1.79723144, -1.20159948,  3.47173023, -2.67189574,
          6.15487766, -1.72229803, -1.42275953,  0.09232473,  1.46565974]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.59212446, -1.47956812, -0.95566803,  3.88210440, -2.14192319,
           5.48387146, -2.22587490, -1.38508046, -0.15767342,  1.40862572],
         [-3.59212446, -1.47956812, -0.95566803,  3.88210440, -2.14192319,
           5.48387146, -2.22587490, -1.38508046, -0.15767342,  1.40862572]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[9.07599640, 6.96343946, 6.43953943, 1.60176706, 7.62579441,
          7.70974636, 6.86895180, 5.64154482, 4.07524586]]], device='cuda:0')
number of violation:  0
Attack finished in 0.6757 seconds.
PGD attack failed
Start solving intermediate bounds with MIP...
layer /22 using sparse-features alpha with shape [46]; unstable size 46; total size 200 (torch.Size([1, 200]))
layer /22 start_node /input.3 using sparse-spec alpha with unstable size 62 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /22 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /22 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /24 using sparse-features alpha with shape [62]; unstable size 62; total size 200 (torch.Size([1, 200]))
layer /24 start_node /input.7 using sparse-spec alpha with unstable size 130 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /24 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /24 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /26 using sparse-features alpha with shape [130]; unstable size 130; total size 200 (torch.Size([1, 200]))
layer /26 start_node /input.11 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /26 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /26 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /28 using full alpha with shape torch.Size([200]); unstable size 188; total size 200 (torch.Size([1, 200]))
layer /28 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /28 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
layer /30 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /30 start_node /31 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 720.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_45', 'lay4_166', 'lay4_104', 'lay4_192', 'lay4_8', 'lay4_4', 'lay4_42', 'lay4_23', 'lay4_15', 'lay4_18', 'lay4_87', 'lay4_150', 'lay4_73', 'lay4_187', 'lay4_1', 'lay4_32', 'lay4_108', 'lay4_179', 'lay4_178', 'lay4_136', 'lay4_93', 'lay4_156', 'lay4_148', 'lay4_10', 'lay4_50', 'lay4_20', 'lay4_172', 'lay4_17', 'lay4_121', 'lay4_168', 'lay4_26', 'lay4_102', 'lay4_47', 'lay4_169', 'lay4_116', 'lay4_13', 'lay4_12', 'lay4_82', 'lay4_29', 'lay4_127', 'lay4_56', 'lay4_149', 'lay4_162', 'lay4_174', 'lay4_177', 'lay4_181', 'lay4_154', 'lay4_97', 'lay4_193', 'lay4_59', 'lay4_77', 'lay4_16', 'lay4_142', 'lay4_86', 'lay4_182', 'lay4_38', 'lay4_24', 'lay4_41', 'lay4_190', 'lay4_28', 'lay4_21'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/data_utils.py:255: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  eps_temp = torch.tensor(eps_temp).reshape(1, -1, 1, 1)
Solving MIP for lay4_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4566s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4381s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.16702197216488615,0.661758839871907] (2,-1; 2,-1), time: 2.5790s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[-0.6233974804698788,0.32584451679006693] (2,-1; 2,-1), time: 3.0619s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_73, [-inf,inf]=>[-0.34409282495398763,0.422568285681958] (2,-1; 2,-1), time: 3.2232s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2861s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_179, [-inf,inf]=>[-0.3677689934647901,0.39472793112391635] (2,-1; 2,-1), time: 2.6819s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3907s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.3707718807541976,0.3926654531140145] (2,-1; 2,-1), time: 3.9426s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[-0.6913373020206224,0.01924097728602818] (2,-1; 2,-1), time: 4.0869s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-0.531385756764141,0.18448077096317647] (2,-1; 2,-1), time: 4.2764s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-0.6389688711153044,0.30375482641781687] (2,-1; 2,-1), time: 4.2813s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3281s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-0.2033258652213454,0.4484464778492497] (2,-1; 2,-1), time: 4.4846s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_166, [-inf,inf]=>[-0.24730128978425414,0.47636937493554155] (2,-1; 2,-1), time: 4.5156s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-0.36160236659615097,0.3704183100250817] (2,-1; 2,-1), time: 4.6618s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_4, [-inf,inf]=>[-0.3573762535934097,0.32718994483103236] (2,-1; 2,-1), time: 4.7512s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.5441368554128011,0.1216007188359016] (2,-1; 2,-1), time: 4.7667s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-0.3274788930883806,0.38015281295396985] (2,-1; 2,-1), time: 4.9001s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6844s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2933s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_192, [-inf,inf]=>[-0.2796631326206296,0.3958062728485823] (2,-1; 2,-1), time: 5.1508s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_121, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9086s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[-0.44552243445014755,0.23763348845657484] (2,-1; 2,-1), time: 5.3432s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8445s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2806s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6623s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-0.18161292949630836,0.41831541207260325] (2,-1; 2,-1), time: 3.1820s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_50, [-inf,inf]=>[-0.03621808595367354,0.7614514666831734] (2,-1; 2,-1), time: 2.1081s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_148, [-inf,inf]=>[-0.5813948072908733,0.02250903620299837] (2,-1; 2,-1), time: 2.9396s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-0.5970978725024888,0.0029062018341708407] (2,-1; 2,-1), time: 3.5273s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[1e-05,1.2050934746558548] (15,-1; 2,-1), time: 1.4682s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_10, [-inf,inf]=>[-0.7594124918745256,0.009337876471900375] (2,-1; 2,-1), time: 3.7958s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_127, [-inf,inf]=>[-0.29016605349931845,0.38391096416314124] (2,-1; 2,-1), time: 2.4008s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[-0.2319202072833164,0.44682020339898715] (2,-1; 2,-1), time: 3.3069s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2757s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.33772299270593303,0.25711811249375827] (2,-1; 2,-1), time: 3.1005s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_172, [-inf,inf]=>[-0.5118734065873342,0.16064728132970743] (2,-1; 2,-1), time: 3.9130s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_116, [-inf,inf]=>[-0.42140054238433866,0.2057619596004565] (2,-1; 2,-1), time: 3.4567s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-0.06758259054722045,0.5441518323048975] (2,-1; 2,-1), time: 2.9289s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_56, [-inf,inf]=>[-0.17700148546413344,0.41477019050294556] (2,-1; 2,-1), time: 3.2852s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_47, [-inf,inf]=>[-0.5712915656284494,0.12411043575546878] (2,-1; 2,-1), time: 3.9143s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3522s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_29, [-inf,inf]=>[-0.13524864604228293,0.4706645789526248] (2,-1; 2,-1), time: 3.7360s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_169, [-inf,inf]=>[-0.5673454994251365,0.16149203053612451] (2,-1; 2,-1), time: 4.6042s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8609s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_154, [-inf,inf]=>[-0.3865801271882364,0.2594526035836486] (2,-1; 2,-1), time: 2.8419s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_181, [-inf,inf]=>[-0.5670834285103973,0.04970534852801748] (2,-1; 2,-1), time: 3.4104s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_149, [-inf,inf]=>[-0.22666806884160132,0.3030543796334877] (2,-1; 2,-1), time: 4.5479s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_177, [-inf,inf]=>[-0.20140303742774024,0.44937868927895086] (2,-1; 2,-1), time: 4.0144s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_97, [-inf,inf]=>[-0.6984594790442724,0.12457090123598236] (2,-1; 2,-1), time: 3.1250s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_182, [-inf,inf]=>[-0.4266652929966233,0.34356756621737683] (2,-1; 2,-1), time: 2.0678s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_77, [-inf,inf]=>[-0.1612374741488992,0.6035601065717651] (2,-1; 2,-1), time: 3.0599s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[1e-05,0.7132612834362971] (15,-1; 2,-1), time: 3.6013s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_142, [-inf,inf]=>[-0.21860687436990286,0.40586996069687986] (2,-1; 2,-1), time: 3.4700s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_190, [-inf,inf]=>[-0.5840728832590383,0.16728633848733387] (2,-1; 2,-1), time: 2.5739s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[1e-05,0.8840034402362016] (15,-1; 2,-1), time: 2.9800s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_21, [-inf,inf]=>[1e-05,0.752734849394232] (15,-1; 2,-1), time: 3.1138s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-0.1363177655745325,0.5225779489347085] (2,-1; 2,-1), time: 4.3793s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.5490784860147054,0.057349921397517746] (2,-1; 2,-1), time: 4.1057s, #vars: 1277, #constrs: 538, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[-0.31935089697525465,0.24130328972587353] (2,-1; 2,-1), time: 11.1036s, #vars: 1277, #constrs: 538, improved: True
PGD done for relu layer 2
MIP improved 61 nodes out of 61 unstable nodes, lb improved 10.588593482971191, ub improved 11.390777587890625, time 20.1865
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_9', 'lay6_174', 'lay6_188', 'lay6_102', 'lay6_139', 'lay6_118', 'lay6_152', 'lay6_28', 'lay6_190', 'lay6_56', 'lay6_136', 'lay6_185', 'lay6_141', 'lay6_74', 'lay6_156', 'lay6_2', 'lay6_131', 'lay6_117', 'lay6_176', 'lay6_53', 'lay6_163', 'lay6_173', 'lay6_31', 'lay6_171', 'lay6_168', 'lay6_19', 'lay6_164', 'lay6_167', 'lay6_165', 'lay6_124', 'lay6_81', 'lay6_6', 'lay6_108', 'lay6_104', 'lay6_29', 'lay6_154', 'lay6_15', 'lay6_175', 'lay6_103', 'lay6_192', 'lay6_162', 'lay6_89', 'lay6_150', 'lay6_144', 'lay6_87', 'lay6_65', 'lay6_105', 'lay6_187', 'lay6_30', 'lay6_67', 'lay6_91', 'lay6_170', 'lay6_169', 'lay6_92', 'lay6_36', 'lay6_199', 'lay6_123', 'lay6_193', 'lay6_5', 'lay6_191', 'lay6_55', 'lay6_26', 'lay6_27', 'lay6_40', 'lay6_186', 'lay6_189', 'lay6_146', 'lay6_10', 'lay6_96', 'lay6_57', 'lay6_37', 'lay6_88', 'lay6_97', 'lay6_196', 'lay6_49', 'lay6_93', 'lay6_90', 'lay6_178', 'lay6_16', 'lay6_18', 'lay6_64', 'lay6_43', 'lay6_135', 'lay6_70', 'lay6_47', 'lay6_12', 'lay6_95', 'lay6_39', 'lay6_76', 'lay6_22', 'lay6_54', 'lay6_125', 'lay6_112', 'lay6_133', 'lay6_121', 'lay6_137', 'lay6_83', 'lay6_129', 'lay6_127', 'lay6_61', 'lay6_138', 'lay6_194', 'lay6_80', 'lay6_114', 'lay6_52', 'lay6_25', 'lay6_99', 'lay6_34', 'lay6_4', 'lay6_77', 'lay6_51', 'lay6_182', 'lay6_46', 'lay6_63', 'lay6_177', 'lay6_159', 'lay6_11', 'lay6_130', 'lay6_58', 'lay6_7', 'lay6_198', 'lay6_86', 'lay6_42', 'lay6_69', 'lay6_1'] filter: 1.0
Solving MIP for lay6_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4973s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_141, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9593s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0185s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3723s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_185, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1150s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4521s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2666s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8728s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.8873s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.2681s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2980s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.4214s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[1e-05,0.5321355105897023] (15,-1; 9,-1), time: 25.4506s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-0.24418927333937576,0.3224507608284122] (9,-1; 2,-1), time: 27.5662s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-0.3434119019052262,0.23678366550371305] (2,-1; 9,-1), time: 28.8956s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_152, [-inf,inf]=>[-0.45691905173483877,0.10687911825453396] (9,-1; 9,-1), time: 30.0147s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_174, [-inf,inf]=>[-0.4768893702450567,0.28643308760742053] (9,-1; 9,-1), time: 30.0137s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.21466892953097932,0.39895170952755066] (9,-1; 9,-1), time: 30.0172s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-0.5148341708389521,0.15146300957753414] (9,-1; 9,-1), time: 30.0160s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-0.21998370509555182,0.36972774597011615] (9,-1; 9,-1), time: 30.0154s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_188, [-inf,inf]=>[-0.554393634363875,0.0511456617044108] (9,-1; 9,-1), time: 30.0155s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-0.31291102648288494,0.3208633603358885] (9,-1; 9,-1), time: 30.0235s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-0.003861549835711523,0.48220984552002655] (9,-1; 9,-1), time: 30.0380s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_154, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3307s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3618s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-0.18527317747466876,0.4178844198110969] (9,-1; 9,-1), time: 30.0159s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2574s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3457s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8575s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[-0.25450997282435184,0.3657936373325752] (9,-1; 9,-1), time: 30.0124s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-0.011458778360043598,0.6573815747778629] (9,-1; 9,-1), time: 30.3634s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2208s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2991s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3422s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3741s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2903s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_164, [-inf,inf]=>[-0.45605299944363503,0.0335068866010264] (9,-1; 9,-1), time: 30.0143s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2035s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.2005s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3252s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2681s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2810s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2853s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2805s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2851s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.5429835277814162,0.08006798962304786] (9,-1; 9,-1), time: 30.1537s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2939s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.13585696612954898,0.6280788977990631] (2,-1; 9,-1), time: 22.3939s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_175, [-inf,inf]=>[-0.2318049092720903,0.4312928393199418] (2,-1; 2,-1), time: 20.3155s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3688s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-0.3387018278109073,0.19893630121057806] (9,-1; 2,-1), time: 24.6122s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3494s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_108, [-inf,inf]=>[-0.6670466114618532,0.07644403707428896] (9,-1; 2,-1), time: 23.4856s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.26107536558518996,0.38018120317538323] (9,-1; 2,-1), time: 23.3789s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.5646534015599615,0.005111917422002711] (9,-1; 9,-1), time: 30.0289s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-0.6012035778429835,0.01488291019097818] (9,-1; 9,-1), time: 30.0157s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_103, [-inf,inf]=>[-0.5608981981491148,0.01974020366587086] (9,-1; 9,-1), time: 30.0190s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_104, [-inf,inf]=>[-0.4032851815948043,0.18347238266904645] (9,-1; 9,-1), time: 30.0704s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2803s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-0.583004390064365,0.1144738479648957] (9,-1; 9,-1), time: 30.0281s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2751s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.1507s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2898s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-0.19988942916115973,0.43303026305241493] (9,-1; 9,-1), time: 30.1154s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-0.2840552683107367,0.0782294766776915] (9,-1; 9,-1), time: 30.0134s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.023255705115285706,0.6498767467939046] (2,-1; 9,-1), time: 24.7255s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9818s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2830s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.49007942476746214,0.042576266559358256] (9,-1; 9,-1), time: 30.0869s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0000s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-0.3279311427765536,0.22109999342317038] (9,-1; 2,-1), time: 24.5255s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3597s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-0.4095606744307221,0.1489874906113986] (9,-1; 9,-1), time: 30.1860s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_189, [-inf,inf]=>[-0.4796759223873561,0.20978085723374182] (9,-1; 2,-1), time: 21.9115s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[1e-05,0.86798165300872] (15,-1; 9,-1), time: 15.2552s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[1e-05,0.6504787188094616] (15,-1; 9,-1), time: 16.2173s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-0.12817522210107943,0.4360527365980754] (9,-1; 9,-1), time: 30.1257s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_196, [-inf,inf]=>[-0.5294034487168843,0.16728040807149241] (9,-1; 2,-1), time: 20.7080s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_112, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7385s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_133, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2969s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[1e-05,0.590817698087198] (15,-1; 9,-1), time: 20.5504s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.16762181786411964,0.30162955006570374] (9,-1; 9,-1), time: 30.0136s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[1e-05,1.049904430151047] (15,-1; 2,-1), time: 7.5244s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-0.07912723725495498,0.5367783719739482] (2,-1; 9,-1), time: 27.0943s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-0.42434372471964726,0.34427062287167415] (9,-1; 9,-1), time: 30.0256s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2689s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_37, [-inf,inf]=>[-0.39616787094354655,0.04043792244393902] (9,-1; 9,-1), time: 30.3001s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.20390957138089968,0.47805336590691] (9,-1; 9,-1), time: 30.0182s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-0.5285189258533384,0.049757765430138406] (9,-1; 9,-1), time: 30.0092s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[1e-05,0.580495873661013] (15,-1; 9,-1), time: 19.3288s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.8040s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_80, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.1838s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-0.6052914040743368,0.026568185141510214] (9,-1; 9,-1), time: 30.1918s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2884s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-0.37339806566191075,0.3101545489736292] (9,-1; 9,-1), time: 30.0094s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2917s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[-0.23915619713005615,0.3652981567262582] (9,-1; 9,-1), time: 30.0137s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_114, [-inf,inf]=>[1e-05,0.9084697037263203] (15,-1; 2,-1), time: 6.6129s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[1e-05,0.7759893344702818] (15,-1; 2,-1), time: 12.3283s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[1e-05,1.0901595839305258] (15,-1; 2,-1), time: 4.9814s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[1e-05,0.7734391657846885] (15,-1; 9,-1), time: 19.6194s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[-0.08130135151407873,0.4723348248969655] (9,-1; 9,-1), time: 30.0663s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[1e-05,0.8983837943044456] (15,-1; 2,-1), time: 7.4682s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_137, [-inf,inf]=>[-0.5122442290434432,0.06790530691543814] (9,-1; 2,-1), time: 22.2898s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.362426592180294,0.25597142723820915] (9,-1; 9,-1), time: 30.0095s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[1e-05,0.8052782457969314] (15,-1; 9,-1), time: 15.7853s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-0.4640792107591647,0.0769414514804335] (9,-1; 9,-1), time: 30.0130s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[1e-05,0.8564970177452199] (15,-1; 9,-1), time: 15.3739s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_129, [-inf,inf]=>[-0.3694800766524365,0.14361647946498476] (9,-1; 9,-1), time: 30.0173s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_159, [-inf,inf]=>[1e-05,1.046268138219549] (15,-1; 2,-1), time: 13.1380s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_127, [-inf,inf]=>[-0.48384088622777155,0.08819408965954673] (9,-1; 9,-1), time: 30.0112s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_177, [-inf,inf]=>[1e-05,0.9719295957081198] (15,-1; 9,-1), time: 15.3683s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[1e-05,1.1113809158546484] (15,-1; 9,-1), time: 15.2743s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_130, [-inf,inf]=>[1e-05,1.171370260269383] (15,-1; 9,-1), time: 15.3583s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_182, [-inf,inf]=>[-0.35442290687275546,0.17499047523955763] (9,-1; 2,-1), time: 20.6964s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[1e-05,0.6682044072448496] (15,-1; 9,-1), time: 20.5564s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[1e-05,0.8225931572711589] (15,-1; 9,-1), time: 15.2770s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[1e-05,0.807342752147373] (15,-1; 9,-1), time: 15.2809s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_198, [-inf,inf]=>[1e-05,1.2068410849634519] (15,-1; 9,-1), time: 15.3313s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[1e-05,0.9337203009050112] (15,-1; 9,-1), time: 15.3146s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.4584358337515348,0.0014485053943268994] (9,-1; 9,-1), time: 30.0095s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[1e-05,0.985650254640247] (15,-1; 2,-1), time: 11.7102s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.41718094559104124,0.137975936929959] (9,-1; 2,-1), time: 27.3783s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[1e-05,0.9231537068821958] (15,-1; 2,-1), time: 13.2922s, #vars: 1563, #constrs: 867, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.0329986786620718,0.5931148178615158] (9,-1; 9,-1), time: 30.1564s, #vars: 1563, #constrs: 867, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(32, -1), (108, -1), (136, -1), (156, -1), (20, -1), (17, -1), (121, -1), (26, -1), (102, -1), (13, -1), (82, -1), (174, 1), (193, -1), (16, 1), (24, -1), (41, -1), (28, 1), (21, 1)]
best_l after optimization: -51.16834259033203 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.088989496231079
alpha-CROWN with intermediate bounds by MIP: tensor([[-2.08052540, -5.77546406, -6.46106291, -7.40497494, -5.22298861,
         -3.44422054, -6.22108650, -6.54938698, -8.00863266]], device='cuda:0') None
MIP improved 125 nodes out of 125 unstable nodes, lb improved 28.149599075317383, ub improved 37.769222259521484, time 142.8343
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_146', 'lay8_181', 'lay8_32', 'lay8_36', 'lay8_7', 'lay8_176', 'lay8_0', 'lay8_140', 'lay8_77', 'lay8_59', 'lay8_38', 'lay8_69', 'lay8_112', 'lay8_171', 'lay8_3', 'lay8_1', 'lay8_157', 'lay8_161', 'lay8_34', 'lay8_58', 'lay8_111', 'lay8_50', 'lay8_73', 'lay8_55', 'lay8_114', 'lay8_166', 'lay8_19', 'lay8_131', 'lay8_65', 'lay8_109', 'lay8_115', 'lay8_180', 'lay8_48', 'lay8_4', 'lay8_120', 'lay8_108', 'lay8_145', 'lay8_129', 'lay8_104', 'lay8_25', 'lay8_196', 'lay8_11', 'lay8_121', 'lay8_35', 'lay8_82', 'lay8_76', 'lay8_2', 'lay8_128', 'lay8_141', 'lay8_149', 'lay8_86', 'lay8_167', 'lay8_40', 'lay8_27', 'lay8_95', 'lay8_133', 'lay8_117', 'lay8_184', 'lay8_135', 'lay8_172', 'lay8_143', 'lay8_91', 'lay8_179', 'lay8_137', 'lay8_88', 'lay8_174', 'lay8_195', 'lay8_188', 'lay8_159', 'lay8_158', 'lay8_28', 'lay8_107', 'lay8_9', 'lay8_151', 'lay8_98', 'lay8_160', 'lay8_63', 'lay8_85', 'lay8_162', 'lay8_122', 'lay8_49', 'lay8_51', 'lay8_130', 'lay8_105', 'lay8_194', 'lay8_189', 'lay8_155', 'lay8_119', 'lay8_127', 'lay8_165', 'lay8_175', 'lay8_29', 'lay8_197', 'lay8_80', 'lay8_54', 'lay8_18', 'lay8_17', 'lay8_106', 'lay8_134', 'lay8_20', 'lay8_152', 'lay8_47', 'lay8_169', 'lay8_118', 'lay8_163', 'lay8_168', 'lay8_13', 'lay8_132', 'lay8_21', 'lay8_26', 'lay8_74', 'lay8_138', 'lay8_96', 'lay8_97', 'lay8_92', 'lay8_78', 'lay8_90', 'lay8_24', 'lay8_94', 'lay8_52', 'lay8_41', 'lay8_193', 'lay8_42', 'lay8_6', 'lay8_70', 'lay8_192', 'lay8_124', 'lay8_186', 'lay8_62', 'lay8_16', 'lay8_190', 'lay8_75', 'lay8_100', 'lay8_148', 'lay8_53', 'lay8_44', 'lay8_156', 'lay8_154', 'lay8_31', 'lay8_110', 'lay8_33', 'lay8_126', 'lay8_56', 'lay8_177', 'lay8_142', 'lay8_99', 'lay8_61', 'lay8_144', 'lay8_123', 'lay8_23', 'lay8_147', 'lay8_43', 'lay8_81', 'lay8_164', 'lay8_57', 'lay8_102', 'lay8_46', 'lay8_139', 'lay8_185', 'lay8_178', 'lay8_198', 'lay8_173', 'lay8_15', 'lay8_22', 'lay8_10', 'lay8_170', 'lay8_12', 'lay8_66', 'lay8_182', 'lay8_5', 'lay8_150', 'lay8_83', 'lay8_93', 'lay8_125', 'lay8_64', 'lay8_153', 'lay8_39', 'lay8_30', 'lay8_87', 'lay8_191', 'lay8_68'] filter: 1.0
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4601s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5609s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_181, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5973s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6535s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4678s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4950s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_111, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6621s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.9242s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2967s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4277s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_176, [-inf,inf]=>[-0.5384914909918264,0.14574202179074577] (9,-1; 9,-1), time: 30.0215s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-0.15867353556135158,0.7410277959101421] (9,-1; 9,-1), time: 30.0279s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_112, [-inf,inf]=>[-0.5971213028480308,0.19034769126382733] (9,-1; 9,-1), time: 30.0296s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-0.45361332481649486,0.4550230882287715] (9,-1; 9,-1), time: 30.0253s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-0.3204357810529018,0.4804196343148733] (9,-1; 9,-1), time: 30.0217s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.44633483231281335,0.26253759587938125] (9,-1; 9,-1), time: 30.0422s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_140, [-inf,inf]=>[-0.15423071152867665,0.5778326323797418] (9,-1; 9,-1), time: 30.0411s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_146, [-inf,inf]=>[-0.4901891550604585,0.1924939200903607] (9,-1; 9,-1), time: 30.0593s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_171, [-inf,inf]=>[-0.26452773656587125,0.43118753681413935] (9,-1; 9,-1), time: 30.0466s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.8627054167334062,0.113265665414705] (9,-1; 9,-1), time: 30.2332s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_109, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4223s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_157, [-inf,inf]=>[-0.28342131991094366,0.3989326259784101] (9,-1; 9,-1), time: 30.0268s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4477s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_115, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4862s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_120, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4811s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_161, [-inf,inf]=>[-0.28338477224052694,0.2407156093701945] (9,-1; 9,-1), time: 30.0170s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-0.5262716763157057,0.22150873617485975] (9,-1; 9,-1), time: 30.7711s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_196, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4963s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_50, [-inf,inf]=>[-0.5190548351924903,0.11770927859458788] (9,-1; 9,-1), time: 30.0372s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3855s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-0.7429750477237156,0.579466982621762] (9,-1; 9,-1), time: 30.6987s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4817s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_128, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4648s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_141, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3887s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_166, [-inf,inf]=>[-0.5500758441165479,0.2584145829197073] (9,-1; 9,-1), time: 30.0307s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.8440s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_167, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0654s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0453s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4115s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4858s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-0.04184589940425577,0.8023602412316275] (9,-1; 9,-1), time: 30.0257s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_180, [-inf,inf]=>[-0.5109862268098179,0.25862300080030454] (9,-1; 9,-1), time: 30.0339s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_131, [-inf,inf]=>[-0.6505287942670317,0.02407669431483992] (9,-1; 9,-1), time: 30.0601s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.40333301343810274,0.20030014605392554] (9,-1; 9,-1), time: 30.2300s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-0.6464489699829671,0.1069736608113787] (9,-1; 9,-1), time: 30.4067s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4247s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_104, [-inf,inf]=>[-0.754825086664546,0.010442785016162724] (9,-1; 9,-1), time: 30.0197s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-0.5254171432311506,0.12000277199537168] (9,-1; 9,-1), time: 30.0163s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.3743967123748775,0.3621399476560432] (9,-1; 9,-1), time: 30.1614s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_129, [-inf,inf]=>[-0.7683621639196375,0.010430140886027083] (9,-1; 9,-1), time: 30.2044s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_121, [-inf,inf]=>[-0.32679371248310385,0.6508574789200386] (9,-1; 9,-1), time: 30.0239s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4502s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_145, [-inf,inf]=>[-0.3874483139962125,0.34349021650845357] (9,-1; 9,-1), time: 30.4704s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9571s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4110s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4771s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4051s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.16151381211488328,0.5452780564951443] (9,-1; 9,-1), time: 30.0127s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4857s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_107, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4856s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4151s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-0.6673016894870732,0.13747468496446213] (9,-1; 9,-1), time: 30.7221s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2598s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0457s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4081s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-0.5169540925022599,0.15737669872714036] (9,-1; 9,-1), time: 30.0253s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4688s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-0.018279953052148325,0.9654545566588731] (9,-1; 9,-1), time: 30.1765s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4303s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4261s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4844s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_133, [-inf,inf]=>[-0.4028911599737241,0.6048225677294787] (9,-1; 9,-1), time: 30.5223s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3806s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_151, [-inf,inf]=>[1e-05,1.4483395106786907] (15,-1; 9,-1), time: 15.5038s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_135, [-inf,inf]=>[-0.8217626071516834,0.010489141767491016] (9,-1; 9,-1), time: 30.0122s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_172, [-inf,inf]=>[-0.5789502597928452,0.078452348295389] (9,-1; 9,-1), time: 30.0166s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-0.6152734506440328,0.3179744271552734] (9,-1; 9,-1), time: 30.0370s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_179, [-inf,inf]=>[-0.3394326282162734,0.3450385285356383] (9,-1; 9,-1), time: 30.0124s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_137, [-inf,inf]=>[-0.49725962377586685,0.17007792895080656] (9,-1; 9,-1), time: 30.0290s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_197, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4354s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_158, [-inf,inf]=>[-0.4201331875558897,0.18830093460762085] (9,-1; 9,-1), time: 30.1350s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_159, [-inf,inf]=>[-0.15063719298272035,0.5637677937855049] (9,-1; 9,-1), time: 30.2467s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4063s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_106, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3843s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_98, [-inf,inf]=>[-0.27926215698582024,0.35114610647145383] (9,-1; 9,-1), time: 30.0178s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_134, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4800s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3892s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3990s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-0.7873827089465626,0.09289781438412918] (9,-1; 9,-1), time: 30.6161s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4762s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3966s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4081s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[-0.42102960754234564,0.5740599428986161] (9,-1; 9,-1), time: 30.8592s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4186s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3975s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0710s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_122, [-inf,inf]=>[-0.703258241403424,0.19693237795347873] (9,-1; 9,-1), time: 30.0527s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[-0.385146110062427,0.2790376854715839] (9,-1; 9,-1), time: 30.0128s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_130, [-inf,inf]=>[-0.17794856412460228,0.6062488365945495] (9,-1; 9,-1), time: 30.0325s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.6922s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.8349s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4051s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_155, [-inf,inf]=>[-0.660092693932537,0.1513142605531759] (9,-1; 9,-1), time: 30.0141s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5477s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_127, [-inf,inf]=>[-0.25025294332553444,0.4669568394489268] (9,-1; 9,-1), time: 30.0415s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_165, [-inf,inf]=>[-0.44956655416823593,0.268244694459019] (9,-1; 9,-1), time: 30.0331s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_80, [-inf,inf]=>[1e-05,1.005292216206758] (15,-1; 9,-1), time: 22.1788s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-0.5906599192999715,0.09102649017992011] (9,-1; 9,-1), time: 30.0244s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.5817952071976061,0.34545349697497074] (9,-1; 9,-1), time: 30.1619s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3944s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-0.3876717483439014,0.5161550408474749] (9,-1; 9,-1), time: 30.0342s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4835s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_169, [-inf,inf]=>[-0.35871408400385313,0.521916433352038] (9,-1; 9,-1), time: 30.0254s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_118, [-inf,inf]=>[-0.23068621439856815,0.3457421778846103] (9,-1; 9,-1), time: 30.2120s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_193, [-inf,inf]=>[1e-05,1.156640738103015] (15,-1; 9,-1), time: 15.4073s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4695s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.3493738936468602,0.26580112755880264] (9,-1; 9,-1), time: 30.0471s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.3042616774428771,0.35055100492979474] (9,-1; 9,-1), time: 30.0236s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_138, [-inf,inf]=>[-0.42574056739873783,0.17556780914887027] (9,-1; 9,-1), time: 30.1438s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_148, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3979s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_96, [-inf,inf]=>[-0.42570624455662204,0.3467168412192893] (9,-1; 9,-1), time: 30.0298s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5019s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.42496066583066083,0.21182697697017136] (9,-1; 9,-1), time: 30.6712s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5156s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-0.571312210286905,0.05455524176173318] (9,-1; 9,-1), time: 30.0138s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-0.3263139670233844,0.3924409751529341] (9,-1; 9,-1), time: 30.6389s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.5675s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_52, [-inf,inf]=>[-0.39028899513337373,0.4893952909761531] (9,-1; 9,-1), time: 30.5479s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_177, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6080s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5955s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5357s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-0.011876784681476831,0.5990221154048229] (9,-1; 9,-1), time: 30.3740s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5242s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_190, [-inf,inf]=>[1e-05,0.9656189700168241] (15,-1; 9,-1), time: 15.4599s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4091s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6260s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4986s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[1e-05,0.8780855438050771] (15,-1; 9,-1), time: 16.0428s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_164, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4872s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-0.5110317352829465,0.359630524793544] (9,-1; 9,-1), time: 30.2918s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4876s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[1e-05,1.5360815886039365] (15,-1; 9,-1), time: 15.4146s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4004s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-0.504224283822381,0.013965538534388722] (9,-1; 9,-1), time: 30.1332s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4170s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_124, [-inf,inf]=>[-0.41261389945314153,0.2697280226675253] (9,-1; 9,-1), time: 30.0618s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_186, [-inf,inf]=>[-0.27558514447857413,0.4063674047837258] (9,-1; 9,-1), time: 30.0150s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[1e-05,1.0002524951139966] (15,-1; 9,-1), time: 15.4872s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.20396102743862854,0.6235657511660134] (9,-1; 9,-1), time: 30.0395s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4102s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3139s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2269s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-0.3351185640597283,0.3627220556460864] (9,-1; 9,-1), time: 30.0186s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[-0.6126322819525978,0.2071924795365112] (9,-1; 9,-1), time: 30.0177s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[1e-05,1.7734593470717241] (15,-1; 9,-1), time: 15.4214s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_182, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3349s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[1e-05,0.8097758533033721] (15,-1; 9,-1), time: 17.1558s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_31, [-inf,inf]=>[-0.4688150764645664,0.10957755620083322] (9,-1; 9,-1), time: 30.0101s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3994s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_110, [-inf,inf]=>[-0.012204468408013085,0.7211781015321305] (9,-1; 9,-1), time: 30.0181s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_153, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3984s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.0774s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4040s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4573s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_126, [-inf,inf]=>[-0.6148641482260145,0.0436719356189886] (9,-1; 9,-1), time: 30.3181s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4575s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-0.6412267969631454,0.08879010915998865] (9,-1; 9,-1), time: 30.3900s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[1e-05,0.9873437874311828] (15,-1; 9,-1), time: 15.4864s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_147, [-inf,inf]=>[-0.6595574810946898,0.04203283813323803] (9,-1; 9,-1), time: 30.0279s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[1e-05,1.0472704306013183] (15,-1; 9,-1), time: 15.5139s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[1e-05,2.0470097884291563] (15,-1; 9,-1), time: 15.4146s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[1e-05,1.4301748671168653] (15,-1; 9,-1), time: 15.8233s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_64, [-inf,inf]=>[1e-05,1.5124193690804146] (15,-1; 9,-1), time: 15.4091s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_185, [-inf,inf]=>[-0.5749781644913892,0.046552438270984556] (9,-1; 9,-1), time: 30.0244s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_139, [-inf,inf]=>[-0.012707859417661314,0.6087063763956423] (9,-1; 9,-1), time: 30.5194s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_173, [-inf,inf]=>[-0.16927618405329237,0.46533093837474715] (9,-1; 9,-1), time: 30.5370s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-0.6117948956821077,0.12623720597420915] (9,-1; 9,-1), time: 30.1680s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-0.6685443349819508,0.18544984789601912] (9,-1; 9,-1), time: 30.1986s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_150, [-inf,inf]=>[-0.48316862223802526,0.29377379635042705] (9,-1; 9,-1), time: 30.0230s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-0.4148641252450518,0.47863264115732496] (9,-1; 9,-1), time: 30.4066s, #vars: 1869, #constrs: 1226, improved: True
Solving MIP for lay8_191, [-inf,inf]=>[-0.5918247771431914,0.05944813338421712] (9,-1; 9,-1), time: 30.0368s, #vars: 1869, #constrs: 1226, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(9, -1), (56, -1), (185, -1), (141, -1), (156, -1), (2, -1), (117, -1), (176, -1), (53, 1), (163, -1), (173, -1), (31, -1), (19, -1), (6, -1), (154, -1), (15, -1), (162, -1), (89, -1), (150, -1), (65, -1), (105, -1), (187, -1), (30, -1), (91, -1), (169, -1), (36, -1), (199, -1), (123, -1), (193, -1), (5, -1), (191, -1), (26, -1), (186, -1), (146, -1), (96, -1), (97, -1), (49, -1), (93, -1), (178, 1), (18, 1), (64, 1), (43, -1), (135, -1), (70, -1), (95, -1), (22, 1), (125, 1), (112, -1), (133, -1), (121, 1), (61, 1), (138, -1), (194, -1), (80, -1), (114, 1), (52, 1), (99, 1), (34, -1), (4, 1), (77, -1), (46, 1), (63, 1), (177, 1), (159, 1), (11, 1), (130, 1), (58, 1), (7, 1), (198, 1), (86, 1), (42, 1), (1, 1)]
best_l after optimization: 4.886300086975098 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 4.976967096328735
alpha-CROWN with intermediate bounds by MIP: tensor([[ 3.00411654,  0.72959900,  0.23353815, -2.11276364,  1.32309961,
          1.79409528,  0.99394917,  0.18928862, -1.26862240]], device='cuda:0') None
MIP improved 181 nodes out of 181 unstable nodes, lb improved 86.41947174072266, ub improved 123.36323547363281, time 189.0184
maximum relu layer improved by MIP so far 3
Linear(in_features=200, out_features=200, bias=True) 4 10 torch.Size([200])
sorted candidates ['lay10_78', 'lay10_186', 'lay10_195', 'lay10_141', 'lay10_170', 'lay10_176', 'lay10_191', 'lay10_9', 'lay10_28', 'lay10_159', 'lay10_174', 'lay10_17', 'lay10_53', 'lay10_136', 'lay10_19', 'lay10_97', 'lay10_165', 'lay10_119', 'lay10_155', 'lay10_199', 'lay10_36', 'lay10_137', 'lay10_181', 'lay10_139', 'lay10_187', 'lay10_168', 'lay10_71', 'lay10_66', 'lay10_123', 'lay10_95', 'lay10_138', 'lay10_135', 'lay10_185', 'lay10_196', 'lay10_93', 'lay10_108', 'lay10_116', 'lay10_146', 'lay10_112', 'lay10_99', 'lay10_86', 'lay10_92', 'lay10_30', 'lay10_3', 'lay10_167', 'lay10_64', 'lay10_73', 'lay10_23', 'lay10_26', 'lay10_59', 'lay10_74', 'lay10_65', 'lay10_14', 'lay10_11', 'lay10_84', 'lay10_90', 'lay10_145', 'lay10_2', 'lay10_102', 'lay10_50', 'lay10_88', 'lay10_183', 'lay10_164', 'lay10_143', 'lay10_1', 'lay10_98', 'lay10_124', 'lay10_31', 'lay10_152', 'lay10_10', 'lay10_69', 'lay10_111', 'lay10_115', 'lay10_154', 'lay10_166', 'lay10_22', 'lay10_34', 'lay10_83', 'lay10_121', 'lay10_122', 'lay10_173', 'lay10_4', 'lay10_113', 'lay10_12', 'lay10_114', 'lay10_25', 'lay10_18', 'lay10_57', 'lay10_49', 'lay10_190', 'lay10_151', 'lay10_125', 'lay10_42', 'lay10_133', 'lay10_7', 'lay10_75', 'lay10_160', 'lay10_33', 'lay10_54', 'lay10_162', 'lay10_72', 'lay10_142', 'lay10_48', 'lay10_96', 'lay10_130', 'lay10_51', 'lay10_81', 'lay10_44', 'lay10_163', 'lay10_61', 'lay10_105', 'lay10_15', 'lay10_153', 'lay10_180', 'lay10_60', 'lay10_189', 'lay10_103', 'lay10_70', 'lay10_56', 'lay10_117', 'lay10_77', 'lay10_40', 'lay10_120', 'lay10_29', 'lay10_107', 'lay10_188', 'lay10_21', 'lay10_104', 'lay10_172', 'lay10_128', 'lay10_91', 'lay10_171', 'lay10_67', 'lay10_13', 'lay10_144', 'lay10_198', 'lay10_182', 'lay10_161', 'lay10_106', 'lay10_148', 'lay10_87', 'lay10_47', 'lay10_89', 'lay10_175', 'lay10_178', 'lay10_20', 'lay10_35', 'lay10_52', 'lay10_94', 'lay10_46', 'lay10_184', 'lay10_110', 'lay10_6', 'lay10_82', 'lay10_41', 'lay10_109', 'lay10_197', 'lay10_68', 'lay10_5', 'lay10_127', 'lay10_24', 'lay10_177', 'lay10_179', 'lay10_140', 'lay10_149', 'lay10_158', 'lay10_58', 'lay10_37', 'lay10_132', 'lay10_157', 'lay10_192', 'lay10_193', 'lay10_27', 'lay10_134', 'lay10_100', 'lay10_0', 'lay10_101', 'lay10_32', 'lay10_39', 'lay10_150', 'lay10_131', 'lay10_85', 'lay10_76', 'lay10_126', 'lay10_63', 'lay10_147', 'lay10_80', 'lay10_169', 'lay10_118', 'lay10_55', 'lay10_45', 'lay10_16', 'lay10_43', 'lay10_156', 'lay10_62', 'lay10_38', 'lay10_129', 'lay10_79', 'lay10_194', 'lay10_8'] filter: 1.0
Solving MIP for lay10_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7726s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_141, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8139s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_159, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8623s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8748s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9214s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_170, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9372s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_137, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7059s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7634s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7274s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8812s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9168s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5922s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0148s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6182s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.8996s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.4755s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5971s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_185, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6064s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[-0.23234268906184508,1.021394466554993] (9,-1; 9,-1), time: 30.0154s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_17, [-inf,inf]=>[-0.8206309291882836,0.2866116783160501] (9,-1; 9,-1), time: 30.0193s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_195, [-inf,inf]=>[-1.0244838146927255,0.14588070692985494] (9,-1; 9,-1), time: 30.0237s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_186, [-inf,inf]=>[-1.022272443506115,0.2961158451145888] (9,-1; 9,-1), time: 30.0267s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[-0.38944024622411044,0.9195550932151872] (9,-1; 9,-1), time: 30.0270s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6604s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_116, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7080s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_93, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7190s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_165, [-inf,inf]=>[-0.8720839590608641,0.2594732539252949] (9,-1; 9,-1), time: 30.0137s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_119, [-inf,inf]=>[-0.9892759743196319,0.041280452402852594] (9,-1; 9,-1), time: 30.0213s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_155, [-inf,inf]=>[-1.012787087987216,0.041292524981547646] (9,-1; 9,-1), time: 30.0125s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_181, [-inf,inf]=>[-1.0076947950610815,0.13327015972919615] (9,-1; 9,-1), time: 30.0124s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_187, [-inf,inf]=>[-0.7003998205084382,0.5927683748007772] (9,-1; 9,-1), time: 30.0151s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_168, [-inf,inf]=>[-0.6804498060650558,0.25195668211702965] (9,-1; 9,-1), time: 30.0138s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[-0.8525497967862108,0.4557080509403512] (9,-1; 9,-1), time: 30.0185s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_66, [-inf,inf]=>[-0.6541373503802922,0.5592930303195915] (9,-1; 9,-1), time: 30.0189s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6360s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6996s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5584s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4898s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-0.5466257532990293,0.6296047873088415] (9,-1; 9,-1), time: 30.0157s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6818s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2625s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_146, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.9445s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_135, [-inf,inf]=>[-0.08318655485615198,1.3040394975843697] (9,-1; 9,-1), time: 30.0137s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_196, [-inf,inf]=>[-0.8355335619642589,0.04965819638025898] (9,-1; 9,-1), time: 30.0137s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6794s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.1654s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_183, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6740s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_112, [-inf,inf]=>[-1.107851304952102,0.004673562012527362] (9,-1; 9,-1), time: 30.0151s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_99, [-inf,inf]=>[-0.7474784817625777,0.43183387676258395] (9,-1; 9,-1), time: 30.0151s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_92, [-inf,inf]=>[-0.8698412830333705,0.0410130910056025] (9,-1; 9,-1), time: 30.0144s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[-0.8618479845784867,0.11852522769951443] (9,-1; 9,-1), time: 30.0361s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_3, [-inf,inf]=>[-0.8655625556273397,0.08622093402626398] (9,-1; 9,-1), time: 30.0155s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_167, [-inf,inf]=>[-1.1783718290026388,0.09029729905694626] (9,-1; 9,-1), time: 30.0266s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_124, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6097s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_64, [-inf,inf]=>[-0.3743392358722729,0.7203892339062883] (9,-1; 9,-1), time: 30.0146s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-0.6709671511185485,0.34952574568519146] (9,-1; 9,-1), time: 30.0222s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6813s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[-0.16197095916197454,1.0566631044115888] (9,-1; 9,-1), time: 30.0128s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6436s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_164, [-inf,inf]=>[1e-05,1.1069337501712893] (15,-1; 9,-1), time: 15.6131s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_111, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6446s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-0.19220349697806036,0.7521214503560347] (9,-1; 9,-1), time: 30.0166s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6957s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6235s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-0.7278459842632043,0.5743855925789442] (9,-1; 9,-1), time: 30.0207s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5994s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-0.540110786863828,0.5630775330702706] (9,-1; 9,-1), time: 30.0143s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_166, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1275s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_145, [-inf,inf]=>[-0.4886909455566838,0.4656685713038403] (9,-1; 9,-1), time: 30.0132s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6500s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.1375s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7585s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7842s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_102, [-inf,inf]=>[-0.7464484871383049,0.3222520665419858] (9,-1; 9,-1), time: 30.0141s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-0.6830446251719842,0.23339769702952812] (9,-1; 9,-1), time: 30.0129s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.0120s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_154, [-inf,inf]=>[1e-05,1.9221559679944964] (15,-1; 9,-1), time: 15.6553s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_143, [-inf,inf]=>[-0.7282269995964233,0.45969732873451663] (9,-1; 9,-1), time: 30.0102s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-0.5291755193699343,0.422291003567662] (9,-1; 9,-1), time: 30.0190s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_152, [-inf,inf]=>[-0.2698698115300629,0.820507677640325] (9,-1; 9,-1), time: 30.0340s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6666s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_115, [-inf,inf]=>[-0.8385872584359206,0.18763151841493286] (9,-1; 9,-1), time: 30.0187s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6738s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6835s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-0.5637591836292831,0.4647123669070405] (9,-1; 9,-1), time: 30.0253s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_121, [-inf,inf]=>[-0.613243531752911,0.35482134636148116] (9,-1; 9,-1), time: 30.0104s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_122, [-inf,inf]=>[-0.5663703957636119,0.3701273502373985] (9,-1; 9,-1), time: 30.0129s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-0.6823211184028782,0.3035059159228322] (9,-1; 9,-1), time: 30.0289s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_113, [-inf,inf]=>[-0.6289587325735293,0.213376140041647] (9,-1; 9,-1), time: 30.0115s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_12, [-inf,inf]=>[-0.8136960873582251,0.5054467781948024] (9,-1; 9,-1), time: 30.0120s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_25, [-inf,inf]=>[-0.9752509537754298,0.17772581099362245] (9,-1; 9,-1), time: 30.0245s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_49, [-inf,inf]=>[-0.8866457541399612,0.23654769309804158] (9,-1; 9,-1), time: 30.0104s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_190, [-inf,inf]=>[-0.6832951250145399,0.49052371626235025] (9,-1; 9,-1), time: 30.0177s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6702s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_151, [-inf,inf]=>[-0.7124372831021907,0.30288686866582104] (9,-1; 9,-1), time: 30.0120s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6659s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5889s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_125, [-inf,inf]=>[-0.2549835041082944,0.8215559724991113] (9,-1; 9,-1), time: 30.0131s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6802s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.8473s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7253s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.6350189755478564,0.3721262144717216] (9,-1; 9,-1), time: 30.0135s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_180, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.7246s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6237s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6125s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5908s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6506s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_120, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6875s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_133, [-inf,inf]=>[-0.18186847604796497,0.8757477206155099] (9,-1; 9,-1), time: 30.0122s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_189, [-inf,inf]=>[1e-05,1.2630163394085983] (15,-1; 9,-1), time: 15.6130s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_75, [-inf,inf]=>[-0.48021401218545046,0.5672941248103734] (9,-1; 9,-1), time: 30.0111s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6477s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_33, [-inf,inf]=>[-0.5219258576887594,1.0425624272976426] (9,-1; 9,-1), time: 30.0208s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_104, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7188s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_172, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6298s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_162, [-inf,inf]=>[-0.6176062477720766,0.3046980446722935] (9,-1; 9,-1), time: 30.0114s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_128, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7088s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_72, [-inf,inf]=>[-1.1008562366009547,0.02682190641580865] (9,-1; 9,-1), time: 30.0126s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_142, [-inf,inf]=>[-0.8594598381859488,0.1840570217717468] (9,-1; 9,-1), time: 30.0485s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6537s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_96, [-inf,inf]=>[-0.4660791101434479,0.4110108071200775] (9,-1; 9,-1), time: 30.0142s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_130, [-inf,inf]=>[-0.9717141097474655,0.012078713126317812] (9,-1; 9,-1), time: 30.0100s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_51, [-inf,inf]=>[-0.4171540407540648,0.6349809219245509] (9,-1; 9,-1), time: 30.0139s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_81, [-inf,inf]=>[-0.858489495545635,0.2596957668379041] (9,-1; 9,-1), time: 30.0103s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_44, [-inf,inf]=>[-0.7826188370103581,0.11553898060840262] (9,-1; 9,-1), time: 30.0207s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_153, [-inf,inf]=>[-0.38857362848534915,0.814650819597007] (9,-1; 9,-1), time: 30.0108s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_106, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.7707s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_103, [-inf,inf]=>[-0.6979755789024694,0.3071476323958752] (9,-1; 9,-1), time: 30.0121s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6217s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_188, [-inf,inf]=>[1e-05,2.623286716796007] (15,-1; 9,-1), time: 15.6740s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_161, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.9911s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-0.9240137146500922,0.0553542973373353] (9,-1; 9,-1), time: 30.0097s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6771s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[1e-05,2.3869674716030658] (15,-1; 9,-1), time: 15.6018s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6370s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5934s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_67, [-inf,inf]=>[1e-05,1.2202790364356593] (15,-1; 9,-1), time: 16.8099s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_110, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6606s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7941s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7188s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[1e-05,1.1855512927202831] (15,-1; 9,-1), time: 16.6769s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_29, [-inf,inf]=>[-0.004110781551776804,1.0171713847007515] (9,-1; 9,-1), time: 30.0156s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6538s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_107, [-inf,inf]=>[-0.24461235813073234,0.6967568899024034] (9,-1; 9,-1), time: 30.0108s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_175, [-inf,inf]=>[1e-05,2.4075809033582] (15,-1; 9,-1), time: 15.6234s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[1e-05,1.8952305806035656] (15,-1; 9,-1), time: 15.6902s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_171, [-inf,inf]=>[-0.9993187280029231,0.029259540191526132] (9,-1; 9,-1), time: 30.0122s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_13, [-inf,inf]=>[-0.6315582069524006,0.3478281237766436] (9,-1; 9,-1), time: 30.0150s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_94, [-inf,inf]=>[1e-05,2.2606974300440696] (15,-1; 9,-1), time: 15.6596s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_198, [-inf,inf]=>[-0.4574920044341228,0.5593959922077204] (9,-1; 9,-1), time: 30.0114s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_182, [-inf,inf]=>[-0.831434397487084,0.05891963274835089] (9,-1; 9,-1), time: 30.0171s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_148, [-inf,inf]=>[-1.0583930316013719,0.040094458250143516] (9,-1; 9,-1), time: 30.0124s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[1e-05,2.87343739503715] (15,-1; 9,-1), time: 15.5584s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_109, [-inf,inf]=>[1e-05,2.155336880982778] (15,-1; 9,-1), time: 15.6047s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[-0.21288966920531271,0.8478235948304408] (9,-1; 9,-1), time: 30.0163s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_178, [-inf,inf]=>[-0.6782368688744972,0.22638649428408575] (9,-1; 9,-1), time: 30.0224s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_177, [-inf,inf]=>[1e-05,1.4700994962905736] (15,-1; 9,-1), time: 15.6688s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-0.7681480626718912,0.2808174219274856] (9,-1; 9,-1), time: 30.0122s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_149, [-inf,inf]=>[1e-05,1.2419371709981626] (15,-1; 9,-1), time: 15.6876s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6803s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_197, [-inf,inf]=>[-0.5926685312907786,0.7868654431398061] (9,-1; 9,-1), time: 30.0136s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_5, [-inf,inf]=>[-0.7994846740124418,0.16005586414347162] (9,-1; 9,-1), time: 30.0125s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5906s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_192, [-inf,inf]=>[1e-05,1.8826573250814571] (15,-1; 9,-1), time: 15.6858s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_127, [-inf,inf]=>[-0.7829005489938609,0.25893494411403317] (9,-1; 9,-1), time: 30.0102s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_24, [-inf,inf]=>[-0.042199459002900404,0.8944946965827358] (9,-1; 9,-1), time: 30.0132s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7364s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_179, [-inf,inf]=>[-0.2657196713925934,0.7013854925387132] (9,-1; 9,-1), time: 30.1278s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_140, [-inf,inf]=>[-1.0373391565639312,0.022451655219385303] (9,-1; 9,-1), time: 30.0118s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_126, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6409s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_158, [-inf,inf]=>[-0.8691693405840126,0.24748354954846175] (9,-1; 9,-1), time: 30.0161s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_58, [-inf,inf]=>[-0.3388684939463846,0.6441113387972702] (9,-1; 9,-1), time: 30.0164s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_134, [-inf,inf]=>[1e-05,1.0998640090894887] (15,-1; 9,-1), time: 15.6459s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_147, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6721s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7777s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_37, [-inf,inf]=>[-0.17128234664133896,0.8957895172064627] (9,-1; 9,-1), time: 30.0144s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_132, [-inf,inf]=>[-0.32453933175349325,0.7846025094674715] (9,-1; 9,-1), time: 30.0098s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6910s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6711s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6743s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6171s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_157, [-inf,inf]=>[-1.0304238247480406,0.10191088373515515] (9,-1; 9,-1), time: 30.0127s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6231s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5921s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5906s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_27, [-inf,inf]=>[1e-05,0.8856821581273746] (15,-1; 9,-1), time: 25.5815s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.3117s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[1e-05,1.25779231259142] (15,-1; 9,-1), time: 15.6102s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_150, [-inf,inf]=>[1e-05,1.8520702351352052] (15,-1; 9,-1), time: 15.6771s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_193, [-inf,inf]=>[-0.05399621315785948,1.0226499495196093] (9,-1; 9,-1), time: 30.0136s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_118, [-inf,inf]=>[1e-05,2.142346711672674] (15,-1; 9,-1), time: 15.6837s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_0, [-inf,inf]=>[-0.25804117347492916,0.9549180666424473] (9,-1; 9,-1), time: 30.0113s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_101, [-inf,inf]=>[1e-05,1.0905045683378185] (15,-1; 9,-1), time: 24.0814s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_131, [-inf,inf]=>[-0.5678704415419507,0.4276827095897099] (9,-1; 9,-1), time: 30.0122s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_63, [-inf,inf]=>[-0.9116507337629404,0.18738474876405417] (9,-1; 9,-1), time: 30.0151s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_80, [-inf,inf]=>[-0.4420964362065612,0.4687413887765658] (9,-1; 9,-1), time: 30.0124s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-0.49443702744941964,0.5957001197824143] (9,-1; 9,-1), time: 30.0117s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[-0.9004901130869619,0.16539109096505833] (9,-1; 9,-1), time: 30.0123s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_62, [-inf,inf]=>[-0.7160305069400847,0.22837929258662426] (9,-1; 9,-1), time: 30.0099s, #vars: 2233, #constrs: 1672, improved: True
Solving MIP for lay10_129, [-inf,inf]=>[-0.13030170763726376,0.9184632232493447] (9,-1; 9,-1), time: 30.0154s, #vars: 2233, #constrs: 1672, improved: True
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
relu layer: 3 has unstable to stable neurons: [(181, -1), (36, -1), (38, -1), (69, -1), (3, -1), (34, -1), (58, -1), (111, -1), (55, -1), (114, -1), (109, -1), (115, -1), (4, -1), (120, -1), (108, -1), (196, -1), (35, -1), (2, -1), (128, -1), (141, -1), (167, -1), (40, -1), (27, -1), (95, -1), (117, -1), (184, -1), (143, -1), (88, -1), (174, -1), (195, -1), (188, -1), (28, -1), (107, -1), (9, -1), (151, 1), (160, -1), (85, -1), (51, -1), (105, -1), (194, -1), (189, -1), (119, -1), (175, -1), (197, -1), (80, 1), (18, -1), (106, -1), (134, -1), (20, -1), (152, -1), (47, -1), (163, -1), (168, -1), (13, -1), (132, -1), (26, -1), (97, -1), (78, -1), (94, -1), (193, 1), (70, -1), (192, -1), (16, -1), (190, 1), (75, -1), (100, 1), (148, -1), (44, -1), (156, -1), (33, 1), (177, -1), (142, -1), (99, -1), (61, -1), (144, 1), (123, -1), (23, -1), (43, -1), (81, 1), (164, -1), (57, 1), (102, -1), (46, -1), (178, -1), (198, -1), (15, -1), (22, -1), (170, -1), (12, 1), (182, -1), (5, 1), (83, 1), (93, 1), (125, -1), (64, 1), (153, -1), (30, -1), (87, -1), (68, -1)]
best_l after optimization: 20.633525848388672 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 5.2360358238220215
alpha-CROWN with intermediate bounds by MIP: tensor([[ 4.67602730,  2.55027080,  2.12690926, -0.66263580,  3.23726058,
          3.22340441,  2.93486786,  1.93922424,  0.60819769]], device='cuda:0') None
MIP improved 200 nodes out of 200 unstable nodes, lb improved 344.16436767578125, ub improved 488.12030029296875, time 218.2647
maximum relu layer improved by MIP so far 4
Linear(in_features=200, out_features=10, bias=True) 5 12 torch.Size([9, 1])
MIP finished with 574.4259140491486s
Run final alpha-CROWN after MIP solving on layer 12 and relu idx 5
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
best_l after optimization: 24.200485229492188 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 4.5244691371917725
alpha-CROWN with intermediate bounds improved by MIP: tensor([[ 4.96672773,  2.92193532,  2.59616661, -0.29989028,  3.65084481,
          3.53524399,  3.42646265,  2.32201672,  1.08097887]], device='cuda:0') None
refined global lb: tensor([[ 4.96672773],
        [ 2.92193532],
        [ 2.59616661],
        [-0.29989028],
        [ 3.65084481],
        [ 3.53524399],
        [ 3.42646265],
        [ 2.32201672],
        [ 1.08097887]], device='cuda:0') min: tensor(-0.29989028, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200])]

Properties batch 0, size 1
Remaining timeout: 310.8574378490448
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  0.  1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 4.9667277336120605.

Properties batch 1, size 1
Remaining timeout: 310.7584843635559
##### Instance 0 first 10 spec matrices: [[[ 0. -1.  0.  0.  0.  1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.9219353199005127.

Properties batch 2, size 1
Remaining timeout: 310.69950008392334
##### Instance 0 first 10 spec matrices: [[[ 0.  0. -1.  0.  0.  1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.5961666107177734.

Properties batch 3, size 1
Remaining timeout: 310.64062786102295
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0. -1.  0.  1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Remaining spec index [0] with bounds tensor([[-0.29989028]], device='cuda:0') need to verify.
Model prediction is: tensor([-3.25121307, -1.79723144, -1.20159948,  3.47173023, -2.67189574,
         6.15487766, -1.72229803, -1.42275953,  0.09232473,  1.46565974],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /22 start_node /31 with alignment adjustment
setting alpha for layer /24 start_node /31 with alignment adjustment
setting alpha for layer /26 start_node /31 with alignment adjustment
setting alpha for layer /28 start_node /31 with alignment adjustment
setting alpha for layer /30 start_node /31 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.29989028]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/31']
Keeping slopes for these layers: ['/31']
layer 0 name BoundLinear(name="/input") size torch.Size([200]) unstable 46
layer 1 name BoundLinear(name="/input.3") size torch.Size([200]) unstable 43
layer 2 name BoundLinear(name="/input.7") size torch.Size([200]) unstable 53
layer 3 name BoundLinear(name="/input.11") size torch.Size([200]) unstable 82
layer 4 name BoundLinear(name="/input.15") size torch.Size([200]) unstable 91
-----------------
# of unstable neurons: 315
-----------------

batch:  torch.Size([1, 200]) pre split depth:  6
post split depth:  6
splitting decisions: 
split level 0: [3, 73] 
split level 1: [3, 121] 
split level 2: [4, 186] 
split level 3: [4, 31] 
split level 4: [0, 194] 
split level 5: [1, 104] 
pruning_in_iteration open status: True
ratio of positive domain = 48 / 64 = 0.75
pruning-in-iteration extra time: 0.01419377326965332
Time: prepare 0.0129    beta_bound 0.5208    bound 0.5209    transfer 0.0007    finalize 0.0104    func 0.5449    
Accumulated time: func 0.5449    prepare 0.0181    bound 0.5209    beta_bound 0.5208    transfer 0.0007    finalize 0.0104    
batch bounding time:  0.5450541973114014
Current worst splitting domains lb-rhs (depth):
-0.29551 (6), -0.28433 (6), -0.24626 (6), -0.23532 (6), -0.22015 (6), -0.21600 (6), -0.21229 (6), -0.21032 (6), -0.16965 (6), -0.16331 (6), -0.16039 (6), -0.16030 (6), -0.14875 (6), -0.14546 (6), -0.09378 (6), -0.09159 (6), 
length of domains: 16
Time: pickout 0.0013    decision 0.2507    solve 0.5538    add 0.0042    
Accumulated time: pickout 0.0013    decision 0.2507    solve 0.5538    add 0.0042    
Current (lb-rhs): -0.29551005363464355
16 domains visited
Cumulative time: 0.8346738815307617

batch:  torch.Size([16, 200]) pre split depth:  2
post split depth:  2
splitting decisions: 
split level 0: [3, 32] [4, 74] [4, 74] [4, 74] [3, 32] [4, 74] [4, 74] [4, 74] [3, 32] [4, 74] 
split level 1: [0, 84] [2, 74] [0, 84] [3, 171] [0, 84] [2, 74] [0, 84] [3, 171] [0, 84] [2, 74] 
pruning_in_iteration open status: True
ratio of positive domain = 36 / 64 = 0.5625
pruning-in-iteration extra time: 0.013938665390014648
Time: prepare 0.0125    beta_bound 0.3102    bound 0.3103    transfer 0.0005    finalize 0.0101    func 0.3335    
Accumulated time: func 0.8784    prepare 0.0343    bound 0.8312    beta_bound 0.8310    transfer 0.0012    finalize 0.0205    
batch bounding time:  0.33356261253356934
Current worst splitting domains lb-rhs (depth):
-0.24039 (8), -0.23089 (8), -0.15896 (8), -0.15809 (8), -0.15717 (8), -0.15167 (8), -0.15086 (8), -0.15064 (8), -0.14012 (8), -0.13712 (8), -0.08787 (8), -0.08705 (8), -0.08512 (8), -0.08196 (8), -0.08125 (8), -0.08035 (8), -0.07776 (8), -0.07327 (8), -0.07235 (8), -0.06599 (8), 
length of domains: 28
Time: pickout 0.0015    decision 0.0294    solve 0.3385    add 0.0036    
Accumulated time: pickout 0.0028    decision 0.2801    solve 0.8923    add 0.0078    
Current (lb-rhs): -0.24039101600646973
44 domains visited
Cumulative time: 1.2081220149993896

batch:  torch.Size([28, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [1, 168] [1, 168] [2, 74] [4, 153] [4, 74] [1, 168] [2, 74] [4, 153] [1, 168] [1, 168] 
pruning_in_iteration open status: True
ratio of positive domain = 33 / 56 = 0.5892857142857143
pruning-in-iteration extra time: 0.01440572738647461
Time: prepare 0.0113    beta_bound 0.3162    bound 0.3163    transfer 0.0006    finalize 0.0092    func 0.3374    
Accumulated time: func 1.2159    prepare 0.0496    bound 1.1475    beta_bound 1.1473    transfer 0.0018    finalize 0.0297    
batch bounding time:  0.3375558853149414
Current worst splitting domains lb-rhs (depth):
-0.20352 (9), -0.19089 (9), -0.11883 (9), -0.11120 (9), -0.10881 (9), -0.10728 (9), -0.10120 (9), -0.08609 (9), -0.08492 (9), -0.07068 (9), -0.03413 (9), -0.03361 (9), -0.03345 (9), -0.02987 (9), -0.02369 (9), -0.02038 (9), -0.02020 (9), -0.01974 (9), -0.01677 (9), -0.01337 (9), 
length of domains: 23
Time: pickout 0.0013    decision 0.0297    solve 0.3376    add 0.0034    
Accumulated time: pickout 0.0040    decision 0.3098    solve 1.2299    add 0.0112    
Current (lb-rhs): -0.20351898670196533
67 domains visited
Cumulative time: 1.5805768966674805

batch:  torch.Size([23, 200]) pre split depth:  2
post split depth:  2
splitting decisions: 
split level 0: [4, 74] [0, 84] [2, 74] [1, 168] [0, 84] [3, 32] [2, 74] [4, 74] [0, 84] [4, 153] 
split level 1: [2, 74] [3, 91] [0, 84] [2, 74] [3, 91] [4, 145] [0, 84] [2, 74] [3, 91] [4, 145] 
pruning_in_iteration open status: True
ratio of positive domain = 80 / 92 = 0.8695652173913043
pruning-in-iteration extra time: 0.013923406600952148
Time: prepare 0.0168    beta_bound 0.3105    bound 0.3106    transfer 0.0006    finalize 0.0152    func 0.3431    
Accumulated time: func 1.5590    prepare 0.0702    bound 1.4581    beta_bound 1.4578    transfer 0.0023    finalize 0.0448    
batch bounding time:  0.34320735931396484
Current worst splitting domains lb-rhs (depth):
-0.13592 (11), -0.12568 (11), -0.08089 (11), -0.07474 (11), -0.04303 (11), -0.04260 (11), -0.04044 (11), -0.03558 (11), -0.02379 (11), -0.00513 (11), -0.00342 (11), -0.00214 (11), 
length of domains: 12
Time: pickout 0.0019    decision 0.0313    solve 0.3503    add 0.0028    
Accumulated time: pickout 0.0060    decision 0.3412    solve 1.5802    add 0.0140    
Current (lb-rhs): -0.13592422008514404
79 domains visited
Cumulative time: 1.9675474166870117

batch:  torch.Size([12, 200]) pre split depth:  3
post split depth:  3
splitting decisions: 
split level 0: [0, 66] [3, 166] [0, 66] [4, 145] [0, 66] [4, 153] [4, 145] [4, 153] [1, 168] [1, 45] 
split level 1: [1, 45] [4, 145] [4, 145] [1, 45] [1, 45] [3, 166] [0, 66] [0, 84] [4, 145] [0, 66] 
split level 2: [1, 172] [0, 66] [1, 172] [0, 66] [1, 172] [4, 145] [1, 172] [1, 45] [1, 172] [1, 172] 

all verified at 17th iter
pruning_in_iteration open status: True
ratio of positive domain = 96 / 96 = 1.0
pruning-in-iteration extra time: 0.012171268463134766
Time: prepare 0.0208    beta_bound 0.2792    bound 0.2793    transfer 0.0006    finalize 0.0158    func 0.3166    
Accumulated time: func 1.8756    prepare 0.0946    bound 1.7374    beta_bound 1.7370    transfer 0.0029    finalize 0.0606    
batch bounding time:  0.3166990280151367
length of domains: 0
Time: pickout 0.0012    decision 0.0292    solve 0.3270    add 0.0018    
Accumulated time: pickout 0.0072    decision 0.3703    solve 1.9072    add 0.0157    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
79 domains visited
Cumulative time: 2.3272464275360107


Properties batch 4, size 1
Remaining timeout: 308.2021555900574
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0. -1.  1.  0.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.6508448123931885.

Properties batch 5, size 1
Remaining timeout: 308.06054520606995
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  1. -1.  0.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.5352439880371094.

Properties batch 6, size 1
Remaining timeout: 308.0179252624512
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  1.  0. -1.  0.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 3.4264626502990723.

Properties batch 7, size 1
Remaining timeout: 307.97766160964966
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  1.  0.  0. -1.  0.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 2.322016716003418.

Properties batch 8, size 1
Remaining timeout: 307.93743777275085
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  1.  0.  0.  0. -1.]]]
thresholds: [0] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.0809788703918457.
Result: safe in 592.1029 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):592.0969525942405, max time: 592.1028735637665
mean time for verified SAFE instances(total 1): 592.1028735637665, max time: 592.1028735637665
safe (total 1), index: [0]
