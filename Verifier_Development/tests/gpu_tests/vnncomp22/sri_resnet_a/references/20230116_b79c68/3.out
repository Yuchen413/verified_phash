Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2022_benchmarks/benchmarks/sri_resnet_a
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: '''Reshape'': ''fix_batch_size'': True'
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 2
  end: 3
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 1024
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: true
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 10
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 100
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: false
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb-intercept-only
    candidates: 10
    reduceop: max
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: middle
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Sun Jan 15 22:07:27 2023 on diablo.cs.ucla.edu
customized start/end sample from instance 2 to 3 in instances.csv
Internal results will be saved to a-b-crown_[instances]_start=2_end=3_iter=10_b=1024_timeout=360_branching=kfsb-intercept-only-max-10_lra-init=0.1_lra=0.01_lrb=0.05_PGD=middle_cplex_cuts=False_initial_max_domains=100.npz.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx onnx/resnet_3b2_bn_mixup_adv_4.0_bs128_lr-1.onnx
Using vnnlib vnnlib/cifar10_spec_idx_2219_eps_0.00350.vnnlib
Precompiled vnnlib file found at ../../vnncomp2022_benchmarks/benchmarks/sri_resnet_a/vnnlib/cifar10_spec_idx_2219_eps_0.00350.vnnlib.compiled
Loading onnx ../../vnncomp2022_benchmarks/benchmarks/sri_resnet_a/onnx/resnet_3b2_bn_mixup_adv_4.0_bs128_lr-1.onnx wih quirks {'Reshape': {'fix_batch_size': True}}
Enabling quirks for Reshape operation: fix the first dimension shape to be -1 to support batchsize != 1.
input shape torch.Size([1, 128, 2, 2]), new shape is tensor([ -1, 512]).
Model prediction is: tensor([[-0.42332527,  0.65206802,  0.68119496,  0.33499286, -0.59562260,
          1.01654696, -0.51848346,  0.26373473, -1.10830522, -0.30265307]],
       device='cuda:0')
layer /51 using sparse-features alpha with shape [177]; unstable size 177; total size 4096 (torch.Size([1, 16, 16, 16]))
layer /51 start_node /input.4 using sparse-spec alpha with unstable size 145 total_size 2048 output_shape (32, 8, 8)
layer /51 start_node /56 using sparse-spec alpha with unstable size 196 total_size 2048 output_shape (32, 8, 8)
layer /51 start_node /input.12 using sparse-spec alpha with unstable size 144 total_size 1024 output_shape (64, 4, 4)
layer /51 start_node /62 using sparse-spec alpha with unstable size 223 total_size 1024 output_shape torch.Size([64, 4, 4])
layer /51 start_node /input.20 using sparse-spec alpha with unstable size 214 total_size 512 output_shape torch.Size([128, 2, 2])
layer /51 start_node /68 using full alpha with unstable size 469 total_size 512 output_shape torch.Size([128, 2, 2])
layer /51 start_node /input.24 using full alpha with unstable size 99 total_size 100 output_shape torch.Size([100])
layer /51 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /54 using sparse-features alpha with shape [145]; unstable size 145; total size 2048 (torch.Size([1, 32, 8, 8]))
layer /54 start_node /56 using sparse-spec alpha with unstable size 196 total_size 2048 output_shape (32, 8, 8)
layer /54 start_node /input.12 using sparse-spec alpha with unstable size 144 total_size 1024 output_shape (64, 4, 4)
layer /54 start_node /62 using sparse-spec alpha with unstable size 223 total_size 1024 output_shape torch.Size([64, 4, 4])
layer /54 start_node /input.20 using sparse-spec alpha with unstable size 214 total_size 512 output_shape torch.Size([128, 2, 2])
layer /54 start_node /68 using full alpha with unstable size 469 total_size 512 output_shape torch.Size([128, 2, 2])
layer /54 start_node /input.24 using full alpha with unstable size 99 total_size 100 output_shape torch.Size([100])
layer /54 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [196]; unstable size 196; total size 2048 (torch.Size([1, 32, 8, 8]))
layer /input.8 start_node /input.12 using sparse-spec alpha with unstable size 144 total_size 1024 output_shape (64, 4, 4)
layer /input.8 start_node /62 using sparse-spec alpha with unstable size 223 total_size 1024 output_shape (64, 4, 4)
layer /input.8 start_node /input.20 using sparse-spec alpha with unstable size 214 total_size 512 output_shape torch.Size([128, 2, 2])
layer /input.8 start_node /68 using full alpha with unstable size 469 total_size 512 output_shape torch.Size([128, 2, 2])/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/layer.py:30: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_numpy.cpp:178.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/model.py:154: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  "Using experimental implementation that allows 'batch_size > 1'."
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/reshape.py:45: UserWarning: __rfloordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  inferred_shape = prod(input.shape[1:]) // incomplete_shape
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/utils.py:21: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  return value.ndim == 0 or value.shape == torch.Size([1])
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/add.py:34: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  elif all(x == 1 for x in input[0].shape):
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/reshape.py:36: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if (shape[0] == 1 and (len(shape) == 4 or len(shape) == 2)
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/reshape.py:55: TracerWarning: Iterating over a tensor might cause the trace to be incorrect. Passing a tensor of different shape won't change the number of iterations executed (and might lead to errors or silently give incorrect results).
  shape = [x if x != 0 else input.size(i) for i, x in enumerate(shape)]

layer /input.8 start_node /input.24 using full alpha with unstable size 99 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /60 using sparse-features alpha with shape [144]; unstable size 144; total size 1024 (torch.Size([1, 64, 4, 4]))
layer /60 start_node /62 using sparse-spec alpha with unstable size 223 total_size 1024 output_shape (64, 4, 4)
layer /60 start_node /input.20 using sparse-spec alpha with unstable size 214 total_size 512 output_shape torch.Size([128, 2, 2])
layer /60 start_node /68 using full alpha with unstable size 469 total_size 512 output_shape torch.Size([128, 2, 2])
layer /60 start_node /input.24 using full alpha with unstable size 99 total_size 100 output_shape torch.Size([100])
layer /60 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.16 using sparse-features alpha with shape [223]; unstable size 223; total size 1024 (torch.Size([1, 64, 4, 4]))
layer /input.16 start_node /input.20 using sparse-spec alpha with unstable size 214 total_size 512 output_shape (128, 2, 2)
layer /input.16 start_node /68 using full alpha with unstable size 469 total_size 512 output_shape torch.Size([128, 2, 2])
layer /input.16 start_node /input.24 using full alpha with unstable size 99 total_size 100 output_shape torch.Size([100])
layer /input.16 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /66 using sparse-features alpha with shape [214]; unstable size 214; total size 512 (torch.Size([1, 128, 2, 2]))
layer /66 start_node /68 using full alpha with unstable size 469 total_size 512 output_shape torch.Size([128, 2, 2])
layer /66 start_node /input.24 using full alpha with unstable size 99 total_size 100 output_shape torch.Size([100])
layer /66 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /69 using full alpha with shape torch.Size([128, 2, 2]); unstable size 469; total size 512 (torch.Size([1, 128, 2, 2]))
layer /69 start_node /input.24 using full alpha with unstable size 99 total_size 100 output_shape torch.Size([100])
layer /69 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /79 using full alpha with shape torch.Size([100]); unstable size 99; total size 100 (torch.Size([1, 100]))
layer /79 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-16.12301636, -16.71327209, -16.16440582, -11.45329475, -15.07633018,
         -16.02803421, -15.98188114, -15.54017448, -15.99054432]],
       device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.004388190805912018, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.42332527,  0.65206802,  0.68119496,  0.33499286, -0.59562260,
          1.01654696, -0.51848346,  0.26373473, -1.10830522, -0.30265307]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.43849620,  1.08430600,  0.76354027,  0.16498974, -0.57982033,
           0.62419838, -0.58598542,  0.28604114, -1.09287190, -0.22575164],
         [-0.43849620,  1.08430600,  0.76354027,  0.16498974, -0.57982033,
           0.62419838, -0.58598542,  0.28604114, -1.09287190, -0.22575164]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 1.06269455, -0.46010762, -0.13934189,  0.45920864,  1.20401871,
           1.21018386,  0.33815724,  1.71707034,  0.84995002]]],
       device='cuda:0')
number of violation:  2
Attack finished in 1.2238 seconds.
PGD attack succeeded!
PGD attack succeeded.
Result: unsafe-pgd in 7.5568 seconds
############# Summary #############
Final verified acc: 0.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 0 , total falsified (unsafe/sat): 1 , timeout: 0
mean time for ALL instances (total 1):7.556714784719828, max time: 7.556790351867676
mean time for verified UNSAFE instances (total 1): 7.556790351867676, max time: 7.556790351867676
unsafe-pgd (total 1), index: [0]
