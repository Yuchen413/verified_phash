Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: eran_instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2021/benchmarks/eran
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: 'remove_ineffective_layers, remove_relu_in_last_layer'
data:
  start: 5
  end: 6
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 500
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Sun Jan 15 22:31:09 2023 on diablo.cs.ucla.edu
customized start/end sample from instance 5 to 6 in eran_instances.csv
Internal results will be saved to a-b-crown_[eran_instances]_start=5_end=6_iter=20_b=500_timeout=360_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_initial_max_domains=1.npz.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx nets/mnist_relu_9_200.onnx
Using vnnlib specs/mnist/mnist_spec_idx_2317_eps_0.01500.vnnlib
Precompiled vnnlib file found at ../../vnncomp2021/benchmarks/eran/specs/mnist/mnist_spec_idx_2317_eps_0.01500.vnnlib.compiled
Loading onnx ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx wih quirks {}
Onnx optimization with flag: remove_ineffective_layers, remove_relu_in_last_layer
Found existed optimized onnx model at ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx.optimized
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750000149011612, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.92660308, -0.14813061, -0.09978307,  1.60933113, -1.32460487,
         -1.72492540, -4.07398653,  7.23561954, -1.05326927,  2.85716438]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.62932944, -0.26645523, -0.21799649,  1.44977665, -1.08159041,
          -1.58631575, -3.68969631,  6.48447037, -0.97897124,  2.89782476],
         [-2.62932944, -0.26645523, -0.21799649,  1.44977665, -1.08159041,
          -1.58631575, -3.68969631,  6.48447037, -0.97897124,  2.89782476]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 9.11380005,  6.75092554,  6.70246696,  5.03469372,  7.56606102,
           8.07078648, 10.17416668,  7.46344185,  3.58664560]]],
       device='cuda:0')
number of violation:  0
Attack finished in 1.1637 seconds.
PGD attack failed
Model prediction is: tensor([[-2.92660308, -0.14813061, -0.09978307,  1.60933113, -1.32460487,
         -1.72492540, -4.07398653,  7.23561954, -1.05326927,  2.85716438]],
       device='cuda:0')
layer /39 using sparse-features alpha with shape [44]; unstable size 44; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 61 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 58 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using sparse-spec alpha with unstable size 76 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using sparse-spec alpha with unstable size 127 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [61]; unstable size 61; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 58 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using sparse-spec alpha with unstable size 76 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using sparse-spec alpha with unstable size 127 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [58]; unstable size 58; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using sparse-spec alpha with unstable size 76 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using sparse-spec alpha with unstable size 127 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using sparse-features alpha with shape [76]; unstable size 76; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using sparse-spec alpha with unstable size 127 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using sparse-features alpha with shape [127]; unstable size 127; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 187; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-160.19699097, -203.88699341, -237.49580383, -255.54284668,
         -222.65800476, -221.27027893, -245.45860291, -149.72363281,
         -168.54862976]], device='cuda:0') None
best_l after optimization: -944.9471435546875 with beta sum per layer: []
alpha/beta optimization time: 11.491352558135986
initial alpha-CROWN bounds: tensor([[ -76.93231201, -104.40824890, -121.84770966, -130.93655396,
         -111.79827118, -113.46375275, -123.29164886,  -74.40945435,
          -87.85920715]], device='cuda:0')
Worst class: (+ rhs) -130.93655395507812
Start solving intermediate bounds with MIP...
layer /39 using sparse-features alpha with shape [44]; unstable size 44; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 61 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 58 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using sparse-spec alpha with unstable size 76 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using sparse-spec alpha with unstable size 127 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [61]; unstable size 61; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 58 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using sparse-spec alpha with unstable size 76 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using sparse-spec alpha with unstable size 127 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [58]; unstable size 58; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using sparse-spec alpha with unstable size 76 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using sparse-spec alpha with unstable size 127 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using sparse-features alpha with shape [76]; unstable size 76; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using sparse-spec alpha with unstable size 127 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using sparse-features alpha with shape [127]; unstable size 127; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 187; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_23', 'lay4_171', 'lay4_158', 'lay4_187', 'lay4_89', 'lay4_120', 'lay4_15', 'lay4_64', 'lay4_54', 'lay4_86', 'lay4_195', 'lay4_108', 'lay4_124', 'lay4_174', 'lay4_112', 'lay4_177', 'lay4_155', 'lay4_114', 'lay4_52', 'lay4_186', 'lay4_117', 'lay4_159', 'lay4_57', 'lay4_44', 'lay4_172', 'lay4_42', 'lay4_133', 'lay4_79', 'lay4_104', 'lay4_88', 'lay4_87', 'lay4_74', 'lay4_173', 'lay4_137', 'lay4_188', 'lay4_1', 'lay4_56', 'lay4_150', 'lay4_82', 'lay4_72', 'lay4_0', 'lay4_12', 'lay4_62', 'lay4_17', 'lay4_39', 'lay4_47', 'lay4_152', 'lay4_139', 'lay4_163', 'lay4_75', 'lay4_53', 'lay4_77', 'lay4_144', 'lay4_156', 'lay4_76', 'lay4_131', 'lay4_95', 'lay4_157', 'lay4_134', 'lay4_161'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/model.py:154: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  "Using experimental implementation that allows 'batch_size > 1'."
Solving MIP for lay4_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0261s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_124, [-inf,inf]=>[1e-05,0.8368694671960795] (15,-1; 2,-1), time: 1.7766s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_89, [-inf,inf]=>[1e-05,0.721456618279668] (15,-1; 2,-1), time: 1.8264s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[1e-05,0.7131782933453393] (15,-1; 2,-1), time: 2.3273s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_158, [-inf,inf]=>[-0.671798127814736,0.18954542199793753] (2,-1; 2,-1), time: 2.3357s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_120, [-inf,inf]=>[-0.142226411133063,0.530905485808506] (2,-1; 2,-1), time: 2.8350s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[-0.2953310315667326,0.4107782926923343] (2,-1; 2,-1), time: 2.9144s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-0.27372382120475275,0.17202112556685367] (2,-1; 2,-1), time: 3.0183s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[-0.21828372721535722,0.47927679771913523] (2,-1; 2,-1), time: 3.2151s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-0.5102252308832335,0.09438645919192463] (2,-1; 2,-1), time: 3.2909s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[-0.6449407638099633,0.0488006470920299] (2,-1; 2,-1), time: 3.3506s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_171, [-inf,inf]=>[-0.48685145782291406,0.3054334382303644] (2,-1; 2,-1), time: 3.4084s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-0.38278095004508317,0.35537805013472645] (2,-1; 2,-1), time: 3.4880s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5049s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_195, [-inf,inf]=>[-0.44916430496664633,0.20939041911215645] (2,-1; 2,-1), time: 3.5899s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.17225221778970554,0.48758677618141216] (2,-1; 2,-1), time: 3.6609s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2754s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_177, [-inf,inf]=>[-0.3141639169845736,0.23290336592990052] (2,-1; 2,-1), time: 3.7394s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2981s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[1e-05,1.189498364069088] (15,-1; 2,-1), time: 0.6002s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2663s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2279s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2966s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_173, [-inf,inf]=>[1e-05,0.8456909129668956] (15,-1; 2,-1), time: 0.9536s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5289s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2475s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_117, [-inf,inf]=>[-0.5746141085096761,0.056667800688603914] (2,-1; 2,-1), time: 2.9749s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_155, [-inf,inf]=>[-0.4118123997148954,0.15946278567606453] (2,-1; 2,-1), time: 4.5582s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_186, [-inf,inf]=>[-0.24502724407920515,0.48080916645374394] (2,-1; 2,-1), time: 3.2608s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7259s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.40205905570283323,0.057268642201791974] (2,-1; 2,-1), time: 3.9217s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[1e-05,0.8276502839245166] (15,-1; 2,-1), time: 1.4092s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_172, [-inf,inf]=>[-0.33681014805495235,0.22584038920255345] (2,-1; 2,-1), time: 2.6193s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2783s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.40758772417564465,0.14507368252534872] (2,-1; 2,-1), time: 3.1128s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_159, [-inf,inf]=>[-0.5019685771380994,0.10340921374026202] (2,-1; 2,-1), time: 3.2666s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_88, [-inf,inf]=>[-0.0928928549852176,0.6410903006260705] (2,-1; 2,-1), time: 2.6324s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_152, [-inf,inf]=>[1e-05,1.0788995843013673] (15,-1; 2,-1), time: 0.7593s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_17, [-inf,inf]=>[-0.5100836746634642,0.1882558561100486] (2,-1; 2,-1), time: 1.1155s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-0.4728006640931987,0.02708468224550329] (2,-1; 2,-1), time: 3.4762s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[-0.08081562074280005,0.5414962645857792] (2,-1; 2,-1), time: 3.7101s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_56, [-inf,inf]=>[-0.2673378391010408,0.26468842540257786] (2,-1; 2,-1), time: 3.6234s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_144, [-inf,inf]=>[1e-05,0.7826651476182785] (15,-1; 2,-1), time: 1.5111s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.24474900214580877,0.33649709903674413] (2,-1; 2,-1), time: 2.7632s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_133, [-inf,inf]=>[-0.41521774026598596,0.041764742317736324] (2,-1; 2,-1), time: 4.5062s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_137, [-inf,inf]=>[-0.5133192874566407,0.08449203932526717] (2,-1; 2,-1), time: 4.1894s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[1e-05,0.7100374644604465] (15,-1; 2,-1), time: 1.9317s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_161, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2972s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_134, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3111s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_47, [-inf,inf]=>[-0.6462132320364182,0.1429320861039951] (2,-1; 2,-1), time: 2.5259s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5496s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_95, [-inf,inf]=>[-0.05065374525138727,0.7578510373365305] (2,-1; 2,-1), time: 1.0079s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_77, [-inf,inf]=>[1e-05,0.6384928022626145] (15,-1; 2,-1), time: 2.5203s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-0.242850295340506,0.4100241787037761] (2,-1; 2,-1), time: 2.4743s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_156, [-inf,inf]=>[-0.21548153934106154,0.3326194300239319] (2,-1; 2,-1), time: 2.3604s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_163, [-inf,inf]=>[-0.4440564964947316,0.15608163014675513] (2,-1; 2,-1), time: 3.3882s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_62, [-inf,inf]=>[-0.46126128207414957,0.10664908829716614] (2,-1; 2,-1), time: 3.9062s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_131, [-inf,inf]=>[1e-05,0.6601904286063917] (15,-1; 2,-1), time: 2.3740s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_139, [-inf,inf]=>[-0.35668353675118974,0.25228332739813764] (2,-1; 2,-1), time: 3.6768s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.6581116161034946,0.041391862403040866] (2,-1; 2,-1), time: 2.9081s, #vars: 1273, #constrs: 532, improved: True
PGD done for relu layer 2
MIP improved 60 nodes out of 60 unstable nodes, lb improved 9.982399940490723, ub improved 9.295243263244629, time 10.9981
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_190', 'lay6_53', 'lay6_162', 'lay6_8', 'lay6_73', 'lay6_161', 'lay6_143', 'lay6_22', 'lay6_18', 'lay6_28', 'lay6_71', 'lay6_9', 'lay6_102', 'lay6_7', 'lay6_60', 'lay6_75', 'lay6_34', 'lay6_2', 'lay6_10', 'lay6_13', 'lay6_20', 'lay6_17', 'lay6_40', 'lay6_94', 'lay6_125', 'lay6_35', 'lay6_183', 'lay6_194', 'lay6_98', 'lay6_197', 'lay6_122', 'lay6_160', 'lay6_27', 'lay6_95', 'lay6_101', 'lay6_86', 'lay6_155', 'lay6_144', 'lay6_110', 'lay6_21', 'lay6_186', 'lay6_146', 'lay6_69', 'lay6_64', 'lay6_90', 'lay6_124', 'lay6_123', 'lay6_177', 'lay6_29', 'lay6_132', 'lay6_172', 'lay6_74', 'lay6_135', 'lay6_148', 'lay6_61', 'lay6_41', 'lay6_107', 'lay6_51'] filter: 1.0
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3925s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8182s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8991s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9883s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_161, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0916s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3147s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3432s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7884s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8886s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3345s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2512s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.8456s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3453s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7726s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[1e-05,1.4227145627258873] (15,-1; 2,-1), time: 5.0397s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.5611s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3256s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[1e-05,0.7521992997109215] (15,-1; 2,-1), time: 6.2289s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2996s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3091s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_183, [-inf,inf]=>[1e-05,1.4083027204056122] (15,-1; 2,-1), time: 4.2718s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3411s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7368s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3040s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[1e-05,1.0069600972534887] (15,-1; 2,-1), time: 8.1201s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3883s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.22605897953699133,0.6885299107538306] (2,-1; 2,-1), time: 9.6869s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[1e-05,0.9942449965457205] (15,-1; 2,-1), time: 11.3802s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-0.6153140957461934,0.13157087016288094] (2,-1; 2,-1), time: 13.9727s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[1e-05,0.8552219850325262] (15,-1; 9,-1), time: 15.6883s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-0.21800641881582597,0.4887460324517396] (2,-1; 2,-1), time: 14.1471s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-0.3087189893932155,0.3125771578256322] (2,-1; 2,-1), time: 17.4653s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-0.26995726750823834,0.7321316889040703] (2,-1; 2,-1), time: 11.8138s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_177, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6931s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3076s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_155, [-inf,inf]=>[1e-05,1.0631665736230045] (15,-1; 2,-1), time: 11.9086s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3075s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.36308856574455295,0.1800367705587069] (9,-1; 2,-1), time: 20.8120s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[1e-05,0.9983564264419292] (15,-1; 2,-1), time: 7.2324s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.8565s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-0.38207515285717375,0.1875293169390044] (9,-1; 2,-1), time: 21.7574s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2958s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_107, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3456s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3005s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[1e-05,1.112080594399649] (15,-1; 2,-1), time: 6.6034s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_172, [-inf,inf]=>[1e-05,1.1551581345830733] (15,-1; 2,-1), time: 4.1915s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_197, [-inf,inf]=>[-0.1171893828871542,0.3918304607633486] (2,-1; 2,-1), time: 19.9947s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[1e-05,1.0471644063803114] (15,-1; 9,-1), time: 15.3508s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[-0.042639203017492563,0.5114347559062881] (9,-1; 2,-1), time: 23.0561s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-0.39232160809085226,0.13629152718767742] (9,-1; 2,-1), time: 19.8777s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-0.4498547361729892,0.022196037940036082] (9,-1; 9,-1), time: 30.0175s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-0.1895013410620751,0.45779386192528526] (9,-1; 9,-1), time: 30.0491s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-0.6217642052530982,0.08937892468362958] (2,-1; 9,-1), time: 19.2735s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[1e-05,0.6231260696361157] (15,-1; 2,-1), time: 14.0250s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-0.3608391503290803,0.12869412163706215] (9,-1; 2,-1), time: 19.6288s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-0.4355039619177151,0.06594130033655352] (9,-1; 2,-1), time: 21.1950s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_148, [-inf,inf]=>[-0.16503829919712532,0.37621229919713467] (2,-1; 2,-1), time: 22.5685s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.14452689782448305,0.3775102120754952] (9,-1; 9,-1), time: 30.0246s, #vars: 1543, #constrs: 837, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(89, 1), (108, -1), (124, 1), (112, 1), (114, -1), (44, -1), (42, 1), (79, -1), (87, -1), (173, 1), (188, -1), (1, -1), (150, -1), (82, 1), (72, -1), (0, -1), (39, -1), (152, 1), (53, 1), (77, 1), (144, 1), (131, 1), (157, -1), (134, -1), (161, -1)]
best_l after optimization: -2.826892375946045 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.968714475631714
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.61032581,  0.09950781, -1.07272911, -3.32522440,  0.90851355,
         -0.20056248,  2.06421661, -0.15902376, -2.75191641]], device='cuda:0') None
MIP improved 58 nodes out of 58 unstable nodes, lb improved 9.48477840423584, ub improved 14.942086219787598, time 46.3695
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_155', 'lay8_18', 'lay8_181', 'lay8_147', 'lay8_90', 'lay8_84', 'lay8_197', 'lay8_119', 'lay8_80', 'lay8_160', 'lay8_23', 'lay8_98', 'lay8_43', 'lay8_61', 'lay8_82', 'lay8_117', 'lay8_137', 'lay8_139', 'lay8_99', 'lay8_161', 'lay8_174', 'lay8_180', 'lay8_118', 'lay8_62', 'lay8_11', 'lay8_48', 'lay8_89', 'lay8_53', 'lay8_183', 'lay8_70', 'lay8_163', 'lay8_75', 'lay8_105', 'lay8_57', 'lay8_87', 'lay8_184', 'lay8_199', 'lay8_173', 'lay8_149', 'lay8_159', 'lay8_22', 'lay8_20', 'lay8_40', 'lay8_106', 'lay8_91', 'lay8_78', 'lay8_100', 'lay8_192', 'lay8_124', 'lay8_65', 'lay8_127', 'lay8_4', 'lay8_162', 'lay8_193', 'lay8_27', 'lay8_169', 'lay8_51', 'lay8_35', 'lay8_189', 'lay8_131', 'lay8_126', 'lay8_132', 'lay8_123', 'lay8_129', 'lay8_170', 'lay8_103', 'lay8_121', 'lay8_120', 'lay8_56', 'lay8_52', 'lay8_9', 'lay8_85'] filter: 1.0
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3117s, #vars: 1777, #constrs: 1088, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4514s, #vars: 1777, #constrs: 1088, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4574s, #vars: 1777, #constrs: 1088, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4774s, #vars: 1777, #constrs: 1088, improved: True
Solving MIP for lay8_137, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3558s, #vars: 1777, #constrs: 1088, improved: True
Solving MIP for lay8_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3663s, #vars: 1777, #constrs: 1088, improved: True
Solving MIP for lay8_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4174s, #vars: 1777, #constrs: 1088, improved: True
Solving MIP for lay8_180, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3735s, #vars: 1777, #constrs: 1088, improved: True
Solving MIP for lay8_155, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4611s, #vars: 1777, #constrs: 1088, improved: True
Solving MIP for lay8_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4910s, #vars: 1777, #constrs: 1088, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8667s, #vars: 1777, #constrs: 1088, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3883s, #vars: 1777, #constrs: 1088, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(53, -1), (161, -1), (143, -1), (22, -1), (18, -1), (28, 1), (71, 1), (9, -1), (60, 1), (75, -1), (34, 1), (2, -1), (13, -1), (20, -1), (17, -1), (40, 1), (94, -1), (35, -1), (183, 1), (194, -1), (98, -1), (122, -1), (95, -1), (101, -1), (86, -1), (155, 1), (144, -1), (110, -1), (21, -1), (146, -1), (69, 1), (90, 1), (123, 1), (177, -1), (132, -1), (172, 1), (74, -1), (61, 1), (41, -1), (107, -1), (51, -1)]

all verified at 0th iter
best_l after optimization: 39.06632995605469 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.06281709671020508
alpha-CROWN with intermediate bounds by MIP: tensor([[6.18500328, 4.30224323, 3.74326324, 1.58987069, 5.24558830, 5.02550697,
         7.38643551, 4.25187969, 1.33653665]], device='cuda:0') None
min of alpha-CROWN bounds 1.3365366458892822>=0, verified!
MIP finished with 64.71385288238525s
Run final alpha-CROWN after MIP solving on layer 7 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: 39.06632995605469 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.06155562400817871
alpha-CROWN with intermediate bounds improved by MIP: tensor([[6.18500328, 4.30224323, 3.74326324, 1.58987069, 5.24558830, 5.02550697,
         7.38643551, 4.25187969, 1.33653665]], device='cuda:0') None
refined global lb: tensor([[6.18500328],
        [4.30224323],
        [3.74326324],
        [1.58987069],
        [5.24558830],
        [5.02550697],
        [7.38643551],
        [4.25187969],
        [1.33653665]], device='cuda:0') min: tensor(1.33653665, device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
Result: safe-incomplete-refine in 80.5587 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):80.5578484914156, max time: 80.55865406990051
mean time for verified SAFE instances(total 1): 80.55865406990051, max time: 80.55865406990051
safe-incomplete-refine (total 1), index: [0]
