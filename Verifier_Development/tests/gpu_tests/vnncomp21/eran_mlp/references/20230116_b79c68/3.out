Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: eran_instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2021/benchmarks/eran
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: 'remove_ineffective_layers, remove_relu_in_last_layer'
data:
  start: 17
  end: 18
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 500
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Sun Jan 15 22:34:59 2023 on diablo.cs.ucla.edu
customized start/end sample from instance 17 to 18 in eran_instances.csv
Internal results will be saved to a-b-crown_[eran_instances]_start=17_end=18_iter=20_b=500_timeout=360_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_initial_max_domains=1.npz.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx nets/mnist_relu_9_200.onnx
Using vnnlib specs/mnist/mnist_spec_idx_969_eps_0.01500.vnnlib
Precompiled vnnlib file found at ../../vnncomp2021/benchmarks/eran/specs/mnist/mnist_spec_idx_969_eps_0.01500.vnnlib.compiled
Loading onnx ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx wih quirks {}
Onnx optimization with flag: remove_ineffective_layers, remove_relu_in_last_layer
Found existed optimized onnx model at ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx.optimized
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750002011656761, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.74227244, -1.45069635,  0.57550198, -2.76694155,  5.53834915,
         -0.84460747,  0.35401779, -0.27449408, -0.16281116,  1.33919895]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.92145532, -1.20563996,  0.20320798, -2.08004713,  4.40658236,
          -0.63109422,  0.03165451, -0.17879951,  0.03442124,  1.67058706],
         [-0.92145532, -1.20563996,  0.20320798, -2.08004713,  4.40658236,
          -0.63109422,  0.03165451, -0.17879951,  0.03442124,  1.67058706]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[5.32803774, 5.61222219, 4.20337439, 6.48662949, 5.03767681,
          4.37492800, 4.58538198, 4.37216091, 2.73599529]]], device='cuda:0')
number of violation:  0
Attack finished in 1.1750 seconds.
PGD attack failed
Model prediction is: tensor([[-0.74227244, -1.45069635,  0.57550198, -2.76694155,  5.53834915,
         -0.84460747,  0.35401779, -0.27449408, -0.16281116,  1.33919895]],
       device='cuda:0')
layer /39 using sparse-features alpha with shape [56]; unstable size 56; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 75 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 164 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [75]; unstable size 75; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 164 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [164]; unstable size 164; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1907.28625488, -3161.19067383, -3760.02124023, -4179.31835938,
         -3599.85058594, -3069.29150391, -2890.16015625, -3741.15942383,
         -3152.86352539]], device='cuda:0') None
best_l after optimization: -20894.455078125 with beta sum per layer: []
alpha/beta optimization time: 10.896664381027222
initial alpha-CROWN bounds: tensor([[-1399.17517090, -2176.92309570, -2689.25634766, -2930.00781250,
         -2591.23217773, -2211.00659180, -2018.26562500, -2630.13549805,
         -2248.45166016]], device='cuda:0')
Worst class: (+ rhs) -2930.0078125
Start solving intermediate bounds with MIP...
layer /39 using sparse-features alpha with shape [56]; unstable size 56; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 75 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 164 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [75]; unstable size 75; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 164 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [164]; unstable size 164; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_55', 'lay4_69', 'lay4_128', 'lay4_193', 'lay4_143', 'lay4_6', 'lay4_142', 'lay4_195', 'lay4_89', 'lay4_151', 'lay4_140', 'lay4_148', 'lay4_44', 'lay4_129', 'lay4_2', 'lay4_115', 'lay4_137', 'lay4_43', 'lay4_99', 'lay4_186', 'lay4_191', 'lay4_15', 'lay4_45', 'lay4_139', 'lay4_12', 'lay4_101', 'lay4_123', 'lay4_9', 'lay4_59', 'lay4_141', 'lay4_169', 'lay4_192', 'lay4_145', 'lay4_170', 'lay4_112', 'lay4_120', 'lay4_28', 'lay4_102', 'lay4_52', 'lay4_121', 'lay4_13', 'lay4_172', 'lay4_85', 'lay4_175', 'lay4_7', 'lay4_92', 'lay4_147', 'lay4_67', 'lay4_198', 'lay4_187', 'lay4_174', 'lay4_178', 'lay4_30', 'lay4_20', 'lay4_188', 'lay4_176', 'lay4_150', 'lay4_168', 'lay4_199', 'lay4_82', 'lay4_73', 'lay4_111', 'lay4_56', 'lay4_32', 'lay4_162', 'lay4_173', 'lay4_38', 'lay4_104', 'lay4_158', 'lay4_16', 'lay4_58', 'lay4_48', 'lay4_103', 'lay4_106', 'lay4_160'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/model.py:154: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  "Using experimental implementation that allows 'batch_size > 1'."
Solving MIP for lay4_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4561s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7065s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1917s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_148, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2723s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9877s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4858s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_137, [-inf,inf]=>[-0.6076931747008886,0.07115647225398497] (2,-1; 2,-1), time: 2.7528s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_129, [-inf,inf]=>[-0.39938445658521593,0.29048997005209704] (2,-1; 2,-1), time: 3.4995s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8486s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3263s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-0.28468151948190445,0.4140048852151583] (2,-1; 2,-1), time: 3.5870s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4810s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_195, [-inf,inf]=>[-0.3117827799459295,0.26938452205805163] (2,-1; 2,-1), time: 4.1756s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.6430140464840159,0.0697631577205839] (2,-1; 2,-1), time: 4.2034s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-0.48473731404650927,0.1021499085304412] (2,-1; 2,-1), time: 4.3935s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_128, [-inf,inf]=>[-0.15390618955803811,0.6530820137430738] (2,-1; 2,-1), time: 4.5089s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.14817764483745122,0.46010111238024787] (2,-1; 2,-1), time: 3.8854s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4494s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_193, [-inf,inf]=>[-0.48343099150864244,0.28121263671575314] (2,-1; 2,-1), time: 4.6587s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[-0.42833572624529365,0.3170986663962676] (2,-1; 2,-1), time: 4.7264s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3577s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_140, [-inf,inf]=>[-0.23271541831586134,0.40977261402795545] (2,-1; 2,-1), time: 4.8898s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_151, [-inf,inf]=>[-0.11401386241734146,0.6342985411929226] (2,-1; 2,-1), time: 4.9149s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_186, [-inf,inf]=>[-0.7655713995825199,0.020041447842865434] (2,-1; 2,-1), time: 4.4481s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_44, [-inf,inf]=>[-0.4919643553025634,0.19747748013337335] (2,-1; 2,-1), time: 5.8210s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_141, [-inf,inf]=>[-0.6344628327206638,0.04673467345858201] (2,-1; 2,-1), time: 2.1636s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_145, [-inf,inf]=>[-0.5096576714599014,0.10127926034459281] (2,-1; 2,-1), time: 1.9121s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_102, [-inf,inf]=>[1e-05,0.8217682484819773] (15,-1; 2,-1), time: 1.7412s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[-0.6342641439687962,0.009284643665069772] (2,-1; 2,-1), time: 2.5137s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_115, [-inf,inf]=>[-0.11412900580539087,0.4653409176728967] (2,-1; 2,-1), time: 6.6874s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.6585452310305621,0.07900199509044403] (2,-1; 2,-1), time: 3.2429s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_170, [-inf,inf]=>[-0.4808173989911322,0.33682754375191937] (2,-1; 2,-1), time: 2.7414s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_123, [-inf,inf]=>[-0.42525840653178487,0.17311274691833806] (2,-1; 2,-1), time: 4.3184s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3674s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_120, [-inf,inf]=>[-0.479019406490068,0.17119024325179633] (2,-1; 2,-1), time: 3.6224s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_172, [-inf,inf]=>[-inf,-0.0004495652216109369] (-1,-1; 2,-1), time: 1.9633s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3505s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4420s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_139, [-inf,inf]=>[-0.08035914410474343,0.47399839757777695] (2,-1; 2,-1), time: 5.4678s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.17969950082446481,0.4716794301212463] (2,-1; 2,-1), time: 4.1820s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3939s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[-0.11976133348180318,0.5137113708138165] (2,-1; 2,-1), time: 4.9441s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_121, [-inf,inf]=>[-0.09270361936246078,0.666713618806348] (2,-1; 2,-1), time: 3.9341s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3013s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[1e-05,0.770798754687016] (15,-1; 2,-1), time: 1.4149s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_169, [-inf,inf]=>[-0.6367162232377261,0.07095172904982872] (2,-1; 2,-1), time: 5.4392s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-0.0911728123231429,0.5839061275534384] (2,-1; 2,-1), time: 5.0525s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3642s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[-0.03360916603722219,0.7770002253902891] (2,-1; 2,-1), time: 3.2961s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_30, [-inf,inf]=>[-0.9419294759555386,0.02614916825496963] (2,-1; 2,-1), time: 1.4380s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_147, [-inf,inf]=>[1e-05,0.8011815402661056] (15,-1; 2,-1), time: 3.2091s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_111, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4282s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3262s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_85, [-inf,inf]=>[-0.5077000014052756,0.12396465148904896] (2,-1; 2,-1), time: 4.4507s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_7, [-inf,inf]=>[-0.4994831448670222,0.09241262844493553] (2,-1; 2,-1), time: 4.3754s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_175, [-inf,inf]=>[-0.40514579165528813,0.507798035618993] (2,-1; 2,-1), time: 4.5101s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3210s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[1e-05,0.7455442168911192] (15,-1; 2,-1), time: 2.2670s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[0.001001925568534982,0.6371518063020893] (2,-1; 2,-1), time: 6.2433s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_158, [-inf,inf]=>[1e-05,1.0135125241390563] (15,-1; 2,-1), time: 1.5665s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_176, [-inf,inf]=>[-0.431225917762177,0.21847035095414147] (2,-1; 2,-1), time: 3.5523s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_73, [-inf,inf]=>[-0.6003507712324708,0.12724918566041368] (2,-1; 2,-1), time: 3.1151s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_160, [-inf,inf]=>[1e-05,1.2540796277313795] (15,-1; 2,-1), time: 0.9162s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-0.5882104474539663,0.06905324771771147] (2,-1; 2,-1), time: 3.5876s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_56, [-inf,inf]=>[-0.4171655092248436,0.2796797443848853] (2,-1; 2,-1), time: 4.0847s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_199, [-inf,inf]=>[-0.66486187203641,0.2353363041562878] (2,-1; 2,-1), time: 4.7771s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_188, [-inf,inf]=>[-0.39072810672379304,0.20300923296475468] (2,-1; 2,-1), time: 5.5344s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.2020812131084559,0.3669660506369149] (2,-1; 2,-1), time: 4.3634s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-0.9432145095834109,0.05708842890834408] (2,-1; 2,-1), time: 4.8969s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_103, [-inf,inf]=>[-0.22139319105893407,0.40360850277745514] (2,-1; 2,-1), time: 3.6342s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_173, [-inf,inf]=>[-0.44115007799688927,0.2570245111117794] (2,-1; 2,-1), time: 4.7945s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-0.6264737139114402,0.06508840933095753] (2,-1; 2,-1), time: 4.3437s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[-0.464339791350505,0.1860664474837786] (2,-1; 2,-1), time: 5.6929s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[-0.014927049265861251,0.6320927296260132] (2,-1; 2,-1), time: 4.5763s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_106, [-inf,inf]=>[-0.5803506641012464,0.06253414175512617] (2,-1; 2,-1), time: 4.4771s, #vars: 1297, #constrs: 568, improved: True
PGD done for relu layer 2
MIP improved 75 nodes out of 75 unstable nodes, lb improved 11.907157897949219, ub improved 13.53750228881836, time 17.5905
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_143', 'lay6_139', 'lay6_34', 'lay6_158', 'lay6_159', 'lay6_43', 'lay6_17', 'lay6_118', 'lay6_16', 'lay6_187', 'lay6_60', 'lay6_127', 'lay6_59', 'lay6_166', 'lay6_112', 'lay6_190', 'lay6_68', 'lay6_131', 'lay6_33', 'lay6_41', 'lay6_125', 'lay6_142', 'lay6_123', 'lay6_7', 'lay6_119', 'lay6_172', 'lay6_28', 'lay6_54', 'lay6_10', 'lay6_164', 'lay6_197', 'lay6_106', 'lay6_178', 'lay6_30', 'lay6_160', 'lay6_62', 'lay6_26', 'lay6_152', 'lay6_169', 'lay6_75', 'lay6_162', 'lay6_67', 'lay6_183', 'lay6_94', 'lay6_23', 'lay6_50', 'lay6_78', 'lay6_40', 'lay6_95', 'lay6_87', 'lay6_45', 'lay6_5', 'lay6_96', 'lay6_148', 'lay6_163', 'lay6_111', 'lay6_46', 'lay6_77', 'lay6_99', 'lay6_71', 'lay6_73', 'lay6_52', 'lay6_155', 'lay6_64', 'lay6_81', 'lay6_124', 'lay6_102', 'lay6_146', 'lay6_44', 'lay6_55', 'lay6_185', 'lay6_63', 'lay6_100', 'lay6_193', 'lay6_85', 'lay6_174', 'lay6_72', 'lay6_199', 'lay6_79', 'lay6_156', 'lay6_65', 'lay6_115', 'lay6_42', 'lay6_101', 'lay6_1', 'lay6_22', 'lay6_132', 'lay6_167', 'lay6_74', 'lay6_35', 'lay6_188', 'lay6_3', 'lay6_18', 'lay6_130', 'lay6_9', 'lay6_195', 'lay6_135', 'lay6_168', 'lay6_121', 'lay6_19', 'lay6_114', 'lay6_133', 'lay6_141', 'lay6_8', 'lay6_136', 'lay6_88', 'lay6_97', 'lay6_157', 'lay6_12', 'lay6_149', 'lay6_147', 'lay6_194', 'lay6_25', 'lay6_6', 'lay6_14', 'lay6_145', 'lay6_129', 'lay6_83', 'lay6_140', 'lay6_69', 'lay6_98', 'lay6_47', 'lay6_82', 'lay6_109', 'lay6_4', 'lay6_2', 'lay6_116', 'lay6_53', 'lay6_20', 'lay6_170', 'lay6_186', 'lay6_70', 'lay6_191', 'lay6_161', 'lay6_120', 'lay6_56', 'lay6_184', 'lay6_107', 'lay6_171', 'lay6_0', 'lay6_11', 'lay6_179', 'lay6_29', 'lay6_86', 'lay6_138', 'lay6_92', 'lay6_117', 'lay6_122', 'lay6_173', 'lay6_150', 'lay6_192', 'lay6_51', 'lay6_165', 'lay6_15', 'lay6_151', 'lay6_61', 'lay6_110', 'lay6_21', 'lay6_137', 'lay6_144', 'lay6_104'] filter: 1.0
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5149s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2032s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2314s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5250s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3666s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7251s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4065s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.4131s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.8497s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.1404s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.1171s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0285s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0868s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_172, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5669s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_159, [-inf,inf]=>[-0.542681782027538,0.07745273232821946] (9,-1; 2,-1), time: 22.0037s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-0.2199593710856687,0.8396463017709704] (9,-1; 2,-1), time: 22.1250s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_158, [-inf,inf]=>[-0.4302084812253145,0.11285077667712923] (9,-1; 2,-1), time: 23.3981s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_164, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.7395s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-0.22008790410551893,0.2726222287839853] (9,-1; 2,-1), time: 23.5115s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-0.4961140175365,0.09847320878902396] (2,-1; 9,-1), time: 22.8460s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0499s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0219s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-0.5967576511726063,0.05103413597085195] (9,-1; 2,-1), time: 26.2615s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_166, [-inf,inf]=>[-0.4963720121669326,0.01629531803897553] (9,-1; 2,-1), time: 26.3012s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-0.2532121980236361,0.2273869947504012] (9,-1; 2,-1), time: 25.9322s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9004s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.4842s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_183, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3980s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-0.45158239898019065,0.026659774750364625] (2,-1; 9,-1), time: 26.9600s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7647s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_127, [-inf,inf]=>[-0.16492119690013607,0.3619023097398655] (9,-1; 9,-1), time: 30.0157s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_112, [-inf,inf]=>[-0.17053667908555328,0.35796642962836117] (9,-1; 9,-1), time: 30.0242s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_59, [-inf,inf]=>[-0.3917913198289243,0.14769505821063933] (9,-1; 9,-1), time: 30.0461s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.1448s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5525s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3314s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9890s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9301s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-0.36738353319092587,0.08477151005052673] (9,-1; 9,-1), time: 30.3612s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.4485s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.3970s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.32366530226495666,0.07705470185671288] (9,-1; 2,-1), time: 24.2334s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[1e-05,1.032521417763087] (15,-1; 2,-1), time: 6.3015s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3100s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.3101s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0745s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2949s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.1248s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.3753314553316051,0.24235803691155858] (9,-1; 9,-1), time: 30.0101s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.5254560584207707,0.08642705378629255] (2,-1; 9,-1), time: 22.9115s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[-0.2616511423688441,0.23834714747520602] (2,-1; 9,-1), time: 27.6272s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_197, [-inf,inf]=>[-0.42798924736953237,0.06661264554365405] (9,-1; 9,-1), time: 30.0708s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.022699890207503657,0.47064611891420177] (9,-1; 9,-1), time: 30.0199s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_148, [-inf,inf]=>[-0.4652744694894357,0.08427094405856805] (9,-1; 2,-1), time: 22.7173s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1555s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.6607s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8548s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3056s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-0.5128528113639496,0.030435350198526417] (9,-1; 9,-1), time: 30.2749s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2957s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.5856997956764495,0.003944218372765625] (9,-1; 9,-1), time: 30.3968s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8603s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-0.17800022512619432,0.33843124264374874] (9,-1; 9,-1), time: 30.0360s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-0.40033015814837,0.2238513900948938] (9,-1; 9,-1), time: 30.0130s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-0.5017381779355635,0.013178540643667245] (9,-1; 9,-1), time: 30.0242s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_155, [-inf,inf]=>[-0.9154726027185786,0.020863330065225293] (2,-1; 9,-1), time: 21.6068s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0102s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_111, [-inf,inf]=>[-0.4140010017508974,0.05104984660409363] (2,-1; 9,-1), time: 29.5873s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6523s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[1e-05,0.6897241705436523] (15,-1; 2,-1), time: 13.0689s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.7717s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.4578669448871885,0.11358696965623777] (9,-1; 2,-1), time: 28.3672s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-0.4986172320061234,0.08380955772129647] (2,-1; 9,-1), time: 23.4665s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.20332387259139476,0.2572211409030169] (9,-1; 2,-1), time: 23.5672s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8600s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4127s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.29686968013705967,0.2158006108009833] (9,-1; 9,-1), time: 30.0112s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3179s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.7251s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3912s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.3862s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8302s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3957s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[1e-05,1.0991647951796566] (15,-1; 2,-1), time: 7.2180s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_130, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.8960s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.0012404063909673565,0.4543508528987182] (9,-1; 9,-1), time: 30.4380s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_133, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3207s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-0.15839849667388828,0.3149535872058264] (9,-1; 2,-1), time: 20.8892s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.2816s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-0.5764615029255306,0.02954408172366905] (9,-1; 9,-1), time: 30.0278s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5833s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.2417s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2926s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3149s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3836s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8869s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_149, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9513s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_115, [-inf,inf]=>[-0.0046564422030690705,0.4723808047124437] (9,-1; 2,-1), time: 23.5054s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[1e-05,1.0039866360483831] (15,-1; 2,-1), time: 13.1843s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7662s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_185, [-inf,inf]=>[-0.493014727224944,0.018572384669395158] (9,-1; 9,-1), time: 30.0181s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3131s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4057s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_129, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3623s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9830s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2832s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-0.35823033166717855,0.16275923010660365] (9,-1; 9,-1), time: 30.0090s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-0.17166955336701675,0.326838010479378] (9,-1; 9,-1), time: 30.0205s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3760s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.3619860388215799,0.2728713286869234] (2,-1; 9,-1), time: 21.4808s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3019s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-0.12264060757402159,0.2679689534200241] (9,-1; 9,-1), time: 30.0162s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_140, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.6556s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[1e-05,0.8382695679534018] (15,-1; 2,-1), time: 7.8689s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.24643725216210496,0.2599988036647922] (9,-1; 9,-1), time: 30.6158s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-0.5128269372691104,0.0006669291832793664] (9,-1; 9,-1), time: 30.4623s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-0.45956923775501524,0.07997846897523521] (9,-1; 9,-1), time: 30.1915s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7941s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_195, [-inf,inf]=>[-0.5018725512567834,0.00153649083731148] (9,-1; 9,-1), time: 30.0172s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_116, [-inf,inf]=>[1e-05,0.8233246220927648] (15,-1; 2,-1), time: 11.7467s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3117s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[1e-05,0.7693048196667293] (15,-1; 9,-1), time: 15.3119s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9542s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_107, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3026s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.4842s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3780s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_141, [-inf,inf]=>[-0.22608562495687493,0.26421669509185974] (9,-1; 2,-1), time: 24.8534s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_120, [-inf,inf]=>[1e-05,0.904983240088177] (15,-1; 2,-1), time: 5.6296s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.3552494715510288,0.11504943863497294] (9,-1; 2,-1), time: 20.6557s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3839s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0862s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-0.5885993416741159,0.40131002774754815] (2,-1; 9,-1), time: 19.9990s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_145, [-inf,inf]=>[-0.09246801180134732,0.44826616989158363] (2,-1; 9,-1), time: 23.8632s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_194, [-inf,inf]=>[-0.5612410343864851,0.013494082191391973] (9,-1; 2,-1), time: 24.1221s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3822s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[1e-05,1.0150786775014586] (15,-1; 2,-1), time: 8.7188s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3131s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.3530s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9494s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_151, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3866s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[1e-05,0.7330434595655106] (15,-1; 2,-1), time: 5.1380s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-0.1227757163567594,0.4759462024634889] (9,-1; 2,-1), time: 24.6001s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_147, [-inf,inf]=>[-0.11081344414832771,0.3686063006443448] (9,-1; 2,-1), time: 29.4694s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[1e-05,0.507368312754032] (15,-1; 9,-1), time: 21.2390s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_179, [-inf,inf]=>[1e-05,0.887735151491735] (15,-1; 2,-1), time: 13.2109s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.32985092343186184,0.11399210030665699] (9,-1; 2,-1), time: 22.3365s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_109, [-inf,inf]=>[-0.2379939784066389,0.2679491005557523] (9,-1; 9,-1), time: 30.0111s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[1e-05,0.8196935720401556] (15,-1; 2,-1), time: 9.9049s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-0.45850283155928456,0.09225580901227329] (2,-1; 9,-1), time: 23.5222s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[1e-05,1.1565836089223571] (15,-1; 2,-1), time: 7.4183s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.5988218513486558,0.12420022415964832] (2,-1; 9,-1), time: 23.2975s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_161, [-inf,inf]=>[-0.3232360095603559,0.16407216473508818] (9,-1; 9,-1), time: 30.0950s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[1e-05,0.7577533748549969] (15,-1; 9,-1), time: 18.0252s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-0.08564826945210156,0.5700354628099389] (9,-1; 2,-1), time: 22.2402s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.15865623631734485,0.3823284557806243] (2,-1; 2,-1), time: 21.7861s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.030377350164575382,0.5867419034206625] (9,-1; 2,-1), time: 21.7540s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-0.4328613359537293,0.06340608060387348] (9,-1; 9,-1), time: 30.0125s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-0.5738440012484043,0.009681405251525065] (9,-1; 2,-1), time: 27.7213s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[-0.3570648951902775,0.13414231123904147] (9,-1; 9,-1), time: 30.0127s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_137, [-inf,inf]=>[-0.39994448985149544,0.11374810605699025] (9,-1; 9,-1), time: 30.0497s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_104, [-inf,inf]=>[-0.1693552893626075,0.2716158294984361] (9,-1; 9,-1), time: 30.3549s, #vars: 1591, #constrs: 909, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(143, -1), (142, -1), (89, -1), (148, -1), (99, -1), (191, -1), (15, -1), (45, -1), (101, -1), (59, -1), (192, -1), (102, 1), (13, 1), (172, -1), (147, 1), (67, -1), (198, -1), (187, 1), (174, -1), (178, -1), (20, -1), (150, 1), (168, -1), (111, -1), (104, -1), (158, 1), (58, -1), (160, 1)]
best_l after optimization: -7713.44970703125 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.6145658493042
alpha-CROWN with intermediate bounds by MIP: tensor([[ -516.74621582,  -803.29785156,  -992.54620361, -1081.42443848,
          -956.98645020,  -815.95983887,  -744.89312744,  -971.34649658,
          -830.24871826]], device='cuda:0') None
MIP improved 161 nodes out of 161 unstable nodes, lb improved 35.15459442138672, ub improved 51.39971160888672, time 147.1437
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_15', 'lay8_140', 'lay8_85', 'lay8_102', 'lay8_35', 'lay8_70', 'lay8_118', 'lay8_25', 'lay8_156', 'lay8_76', 'lay8_34', 'lay8_146', 'lay8_100', 'lay8_42', 'lay8_134', 'lay8_60', 'lay8_170', 'lay8_6', 'lay8_109', 'lay8_21', 'lay8_189', 'lay8_54', 'lay8_113', 'lay8_149', 'lay8_19', 'lay8_122', 'lay8_40', 'lay8_155', 'lay8_91', 'lay8_56', 'lay8_92', 'lay8_162', 'lay8_86', 'lay8_105', 'lay8_144', 'lay8_53', 'lay8_182', 'lay8_142', 'lay8_24', 'lay8_37', 'lay8_125', 'lay8_154', 'lay8_190', 'lay8_32', 'lay8_115', 'lay8_84', 'lay8_150', 'lay8_73', 'lay8_94', 'lay8_120', 'lay8_39', 'lay8_66', 'lay8_157', 'lay8_74', 'lay8_4', 'lay8_178', 'lay8_117', 'lay8_192', 'lay8_188', 'lay8_124', 'lay8_45', 'lay8_63', 'lay8_71', 'lay8_187', 'lay8_62', 'lay8_83', 'lay8_195', 'lay8_77', 'lay8_3', 'lay8_69', 'lay8_171', 'lay8_138', 'lay8_104', 'lay8_163', 'lay8_96', 'lay8_176', 'lay8_116', 'lay8_31', 'lay8_29', 'lay8_173', 'lay8_50', 'lay8_112', 'lay8_23', 'lay8_49', 'lay8_64', 'lay8_168', 'lay8_36', 'lay8_151', 'lay8_14', 'lay8_184', 'lay8_87', 'lay8_59', 'lay8_61', 'lay8_167', 'lay8_132', 'lay8_130', 'lay8_106', 'lay8_44', 'lay8_186', 'lay8_48', 'lay8_89', 'lay8_153', 'lay8_13', 'lay8_185', 'lay8_46', 'lay8_158', 'lay8_26', 'lay8_174', 'lay8_197', 'lay8_18', 'lay8_38', 'lay8_93', 'lay8_133', 'lay8_75', 'lay8_101', 'lay8_114', 'lay8_128', 'lay8_22', 'lay8_68', 'lay8_27', 'lay8_129', 'lay8_41', 'lay8_131', 'lay8_12', 'lay8_194', 'lay8_126', 'lay8_199', 'lay8_198', 'lay8_90', 'lay8_10', 'lay8_135', 'lay8_88', 'lay8_191', 'lay8_17', 'lay8_107', 'lay8_16', 'lay8_181', 'lay8_103', 'lay8_1', 'lay8_143', 'lay8_8', 'lay8_52', 'lay8_166', 'lay8_137', 'lay8_51', 'lay8_79', 'lay8_160', 'lay8_67', 'lay8_147', 'lay8_111', 'lay8_164', 'lay8_177', 'lay8_141', 'lay8_183', 'lay8_30', 'lay8_175', 'lay8_145', 'lay8_65', 'lay8_119', 'lay8_47', 'lay8_98', 'lay8_148', 'lay8_78', 'lay8_97', 'lay8_179', 'lay8_58', 'lay8_165', 'lay8_110', 'lay8_7', 'lay8_81', 'lay8_43', 'lay8_28', 'lay8_20', 'lay8_82', 'lay8_5', 'lay8_180', 'lay8_169', 'lay8_172', 'lay8_196', 'lay8_11', 'lay8_57', 'lay8_123', 'lay8_159', 'lay8_0', 'lay8_108', 'lay8_127', 'lay8_33', 'lay8_193', 'lay8_99', 'lay8_121', 'lay8_136', 'lay8_2', 'lay8_161', 'lay8_55', 'lay8_139', 'lay8_95', 'lay8_152', 'lay8_72', 'lay8_9', 'lay8_80'] filter: 1.0
Solving MIP for lay8_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5293s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5550s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6035s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5228s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8856s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0007s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_156, [-inf,inf]=>[1e-05,0.9509102578008921] (15,-1; 9,-1), time: 15.5295s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_140, [-inf,inf]=>[-0.11349311846411476,0.4020686196129502] (9,-1; 9,-1), time: 30.0168s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_134, [-inf,inf]=>[-0.3673114126061077,0.2116210139328316] (9,-1; 9,-1), time: 30.0194s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_118, [-inf,inf]=>[-0.24533602445690916,0.2146916390511186] (9,-1; 9,-1), time: 30.0234s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-0.7415468725418585,0.06160379581153427] (9,-1; 9,-1), time: 30.0241s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-0.5130966384437916,0.06059442567361105] (9,-1; 9,-1), time: 30.0360s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_146, [-inf,inf]=>[-0.6222333291352888,0.06311159627566504] (9,-1; 9,-1), time: 30.0284s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.41641108974042607,0.1232757309788327] (9,-1; 9,-1), time: 30.0315s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.599266351448752,0.09048165044966945] (9,-1; 9,-1), time: 30.0418s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-0.5009354251443854,0.05373861383832352] (9,-1; 9,-1), time: 30.0659s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_102, [-inf,inf]=>[-0.09897263590425319,0.5016781765364366] (9,-1; 9,-1), time: 30.1537s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[-0.030259163512881028,0.5154434801618655] (9,-1; 9,-1), time: 30.0381s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5543s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_109, [-inf,inf]=>[-0.011960895560995279,0.9352180232335723] (9,-1; 9,-1), time: 30.0264s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3943s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.4550725839407849,0.09847932385298379] (9,-1; 9,-1), time: 30.0124s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[-0.33211711006110156,0.15764650244446998] (9,-1; 9,-1), time: 30.0253s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.23349764650854832,0.3288654835347419] (9,-1; 9,-1), time: 30.0211s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4231s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4243s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_122, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8712s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6265s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3920s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_113, [-inf,inf]=>[-0.39076205034174616,0.3204672418783373] (9,-1; 9,-1), time: 30.0238s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[1e-05,1.7771130933143575] (15,-1; 9,-1), time: 16.0996s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_155, [-inf,inf]=>[1e-05,0.8667652562014765] (15,-1; 9,-1), time: 16.6406s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5009s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[1e-05,1.1850194971717545] (15,-1; 9,-1), time: 17.3296s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_115, [-inf,inf]=>[1e-05,0.7292751119007462] (15,-1; 9,-1), time: 22.9264s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.654832598083867,0.007819424146246843] (9,-1; 9,-1), time: 30.0111s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-0.30158570915306704,0.31299562190542574] (9,-1; 9,-1), time: 30.0126s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-0.2799792262012027,0.35960730479489617] (9,-1; 9,-1), time: 30.0391s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-0.42506426812283665,0.1317633364548261] (9,-1; 9,-1), time: 30.0141s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4592s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[-0.47437593939583056,0.13627576630446495] (9,-1; 9,-1), time: 30.0160s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-0.23279265318195164,0.4203306034801251] (9,-1; 9,-1), time: 30.0181s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4569s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_182, [-inf,inf]=>[-0.3164337724699677,0.18343504710261788] (9,-1; 9,-1), time: 30.0199s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_142, [-inf,inf]=>[-0.33901437513267135,0.3868505891478467] (9,-1; 9,-1), time: 30.0128s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4916s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4560s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_124, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4957s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-0.22077343691546497,0.2935429288228531] (9,-1; 9,-1), time: 30.0269s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[-0.28434732434659266,0.25688521652485397] (9,-1; 9,-1), time: 30.0374s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_190, [-inf,inf]=>[-0.16075094251174585,0.6193497151452276] (9,-1; 9,-1), time: 30.0254s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0363s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4894s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4896s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4134s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.2231s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4901s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_157, [-inf,inf]=>[1e-05,0.8826554708220815] (15,-1; 9,-1), time: 15.4752s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[-0.4892273846882772,0.0707451384725899] (9,-1; 9,-1), time: 30.0132s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_4, [-inf,inf]=>[1e-05,0.6069445646445388] (15,-1; 9,-1), time: 15.5789s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_150, [-inf,inf]=>[-0.506170231781163,0.23275959849571876] (9,-1; 9,-1), time: 30.0124s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_117, [-inf,inf]=>[1e-05,1.3131601232510866] (15,-1; 9,-1), time: 15.9116s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.28861328640475475,0.2925117320483201] (9,-1; 9,-1), time: 30.0503s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_120, [-inf,inf]=>[-0.20705777224138103,0.29226117683761693] (9,-1; 9,-1), time: 30.0286s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_171, [-inf,inf]=>[1e-05,1.3554212070354132] (15,-1; 9,-1), time: 16.6721s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-0.47245337943729226,0.03444223480569339] (9,-1; 9,-1), time: 30.0300s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[-0.31735517965199816,0.22955840488834076] (9,-1; 9,-1), time: 30.0191s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-0.6562191835927685,0.18343688185718499] (9,-1; 9,-1), time: 30.0325s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_187, [-inf,inf]=>[-0.5516751768242893,0.06526946902073656] (9,-1; 9,-1), time: 30.0418s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_62, [-inf,inf]=>[-0.5039893150007093,0.010286267813510972] (9,-1; 9,-1), time: 30.0563s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-0.3294227084190197,0.41541486463581945] (9,-1; 9,-1), time: 30.0353s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-0.42921653668995363,0.0788119169398625] (9,-1; 9,-1), time: 30.0143s, #vars: 1919, #constrs: 1301, improved: True
Solving MIP for lay8_104, [-inf,inf]=>[-0.46809646308290614,0.19153529283527565] (9,-1; 9,-1), time: 30.0130s, #vars: 1919, #constrs: 1301, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(143, -1), (34, -1), (17, -1), (118, -1), (16, -1), (187, -1), (60, -1), (33, -1), (142, -1), (123, -1), (7, -1), (119, -1), (172, -1), (28, -1), (164, -1), (178, -1), (160, -1), (62, -1), (26, -1), (152, -1), (169, -1), (183, -1), (94, -1), (23, -1), (50, -1), (40, -1), (87, -1), (45, -1), (96, 1), (163, -1), (46, -1), (77, -1), (99, -1), (52, -1), (102, -1), (146, 1), (55, -1), (63, -1), (100, -1), (193, -1), (174, -1), (79, -1), (65, -1), (42, -1), (101, -1), (1, 1), (132, -1), (35, -1), (188, -1), (18, -1), (130, -1), (9, -1), (135, -1), (168, -1), (121, 1), (19, -1), (114, -1), (133, -1), (8, -1), (136, -1), (88, -1), (97, -1), (157, -1), (12, -1), (149, -1), (6, -1), (14, -1), (129, -1), (83, -1), (140, -1), (69, 1), (98, -1), (47, 1), (82, -1), (2, -1), (116, 1), (20, 1), (186, -1), (191, -1), (120, 1), (56, -1), (184, -1), (107, -1), (171, -1), (0, 1), (11, -1), (179, 1), (29, -1), (138, -1), (117, 1), (122, 1), (173, -1), (51, -1), (165, -1), (151, -1), (110, 1), (144, 1)]
best_l after optimization: -2182.463134765625 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.622793436050415
alpha-CROWN with intermediate bounds by MIP: tensor([[-146.46223450, -226.98716736, -280.54406738, -305.69070435,
         -271.18057251, -230.59141541, -210.54588318, -275.28424072,
         -235.17678833]], device='cuda:0') None
MIP improved 73 nodes out of 200 unstable nodes, lb improved 65.57280731201172, ub improved 75.78010559082031, time 98.9235
maximum relu layer improved by MIP so far 3
MIP finished with 267.287220954895s
Run final alpha-CROWN after MIP solving on layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
best_l after optimization: -1837.059326171875 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 9.599917888641357
alpha-CROWN with intermediate bounds improved by MIP: tensor([[-123.32882690, -191.00125122, -236.08148193, -257.24575806,
         -228.34701538, -194.02873230, -177.17810059, -231.82466125,
         -198.02355957]], device='cuda:0') None
refined global lb: tensor([[-123.32882690],
        [-191.00125122],
        [-236.08148193],
        [-257.24575806],
        [-228.34701538],
        [-194.02873230],
        [-177.17810059],
        [-231.82466125],
        [-198.02355957]], device='cuda:0') min: tensor(-257.24575806, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200])]

Properties batch 0, size 1
Remaining timeout: 8.001296520233154
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  1.  0.  0.  0.  0.  0.]]]
thresholds: [0.] ######
Remaining spec index [0] with bounds tensor([[-123.32882690]], device='cuda:0') need to verify.
Model prediction is: tensor([-0.74227244, -1.45069635,  0.57550198, -2.76694155,  5.53834915,
        -0.84460747,  0.35401779, -0.27449408, -0.16281116,  1.33919895],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /39 start_node /54 with alignment adjustment
setting alpha for layer /41 start_node /54 with alignment adjustment
setting alpha for layer /43 start_node /54 with alignment adjustment
setting alpha for layer /45 start_node /54 with alignment adjustment
setting alpha for layer /47 start_node /54 with alignment adjustment
setting alpha for layer /49 start_node /54 with alignment adjustment
setting alpha for layer /51 start_node /54 with alignment adjustment
setting alpha for layer /53 start_node /54 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-123.32882690]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/54']
Keeping slopes for these layers: ['/54']
layer 0 name BoundLinear(name="/input") size torch.Size([200]) unstable 56
layer 1 name BoundLinear(name="/input.3") size torch.Size([200]) unstable 47
layer 2 name BoundLinear(name="/input.7") size torch.Size([200]) unstable 64
layer 3 name BoundLinear(name="/input.11") size torch.Size([200]) unstable 120
layer 4 name BoundLinear(name="/input.15") size torch.Size([200]) unstable 183
layer 5 name BoundLinear(name="/input.19") size torch.Size([200]) unstable 200
layer 6 name BoundLinear(name="/input.23") size torch.Size([200]) unstable 200
layer 7 name BoundLinear(name="/input.27") size torch.Size([200]) unstable 200
-----------------
# of unstable neurons: 1070
-----------------

batch:  torch.Size([1, 200]) pre split depth:  5
post split depth:  5
splitting decisions: 
split level 0: [7, 92] 
split level 1: [7, 17] 
split level 2: [7, 113] 
split level 3: [7, 15] 
split level 4: [7, 140] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 32 = 0.0
pruning-in-iteration extra time: 0.00012063980102539062
Time: prepare 0.0102    beta_bound 0.5491    bound 0.5492    transfer 0.0004    finalize 0.0065    func 0.5663    
Accumulated time: func 0.5663    prepare 0.0155    bound 0.5492    beta_bound 0.5491    transfer 0.0004    finalize 0.0065    
batch bounding time:  0.566387414932251
Current worst splitting domains lb-rhs (depth):
-104.87311 (5), -104.03508 (5), -102.52859 (5), -101.89056 (5), -101.32684 (5), -101.26662 (5), -100.98901 (5), -100.76646 (5), -99.60597 (5), -99.54005 (5), -98.75822 (5), -98.63052 (5), -97.51416 (5), -96.67859 (5), -95.83087 (5), -95.79906 (5), -92.18118 (5), -90.64674 (5), -90.30318 (5), -89.50620 (5), 
length of domains: 32
Time: pickout 0.0019    decision 0.2532    solve 0.5726    add 0.0053    
Accumulated time: pickout 0.0019    decision 0.2532    solve 0.5726    add 0.0053    
Current (lb-rhs): -104.87310791015625
32 domains visited
Cumulative time: 0.8671214580535889

batch:  torch.Size([32, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 59] [7, 59] [7, 59] [7, 59] [7, 100] [7, 100] [7, 59] [7, 59] [7, 59] [7, 107] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 64 = 0.0
pruning-in-iteration extra time: 0.00014853477478027344
Time: prepare 0.0160    beta_bound 0.3475    bound 0.3476    transfer 0.0004    finalize 0.0122    func 0.3763    
Accumulated time: func 0.9426    prepare 0.0351    bound 0.8968    beta_bound 0.8967    transfer 0.0008    finalize 0.0188    
batch bounding time:  0.3763716220855713
Current worst splitting domains lb-rhs (depth):
-101.61102 (6), -100.92030 (6), -100.78983 (6), -100.04093 (6), -99.37186 (6), -98.63741 (6), -98.46605 (6), -98.19951 (6), -98.04179 (6), -97.92756 (6), -97.79297 (6), -97.74541 (6), -97.12857 (6), -96.91924 (6), -96.74694 (6), -96.32040 (6), -96.19101 (6), -96.17603 (6), -95.66710 (6), -95.64332 (6), 
length of domains: 64
Time: pickout 0.0018    decision 0.0413    solve 0.3765    add 0.0060    
Accumulated time: pickout 0.0037    decision 0.2945    solve 0.9491    add 0.0114    
Current (lb-rhs): -101.61101531982422
96 domains visited
Cumulative time: 1.2932822704315186

batch:  torch.Size([64, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 107] [7, 107] [7, 107] [7, 107] [7, 54] [7, 59] [7, 54] [7, 54] [7, 54] [7, 54] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 128 = 0.0
pruning-in-iteration extra time: 0.00011205673217773438
Time: prepare 0.0284    beta_bound 0.3505    bound 0.3506    transfer 0.0005    finalize 0.0237    func 0.4033    
Accumulated time: func 1.3459    prepare 0.0673    bound 1.2474    beta_bound 1.2472    transfer 0.0013    finalize 0.0424    
batch bounding time:  0.40340590476989746
Current worst splitting domains lb-rhs (depth):
-98.64622 (7), -97.83183 (7), -97.77260 (7), -97.49016 (7), -97.02245 (7), -96.91354 (7), -96.69557 (7), -96.31147 (7), -96.01271 (7), -95.76524 (7), -95.45304 (7), -95.32195 (7), -95.09001 (7), -94.95302 (7), -94.93170 (7), -94.72153 (7), -94.68722 (7), -94.54027 (7), -94.51035 (7), -94.50200 (7), 
length of domains: 128
Time: pickout 0.0020    decision 0.0423    solve 0.4035    add 0.0074    
Accumulated time: pickout 0.0056    decision 0.3369    solve 1.3526    add 0.0187    
Current (lb-rhs): -98.6462173461914
224 domains visited
Cumulative time: 1.7490012645721436

batch:  torch.Size([128, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 54] [7, 82] [7, 54] [7, 54] [7, 59] [7, 107] [7, 82] [7, 82] [7, 107] [7, 59] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 256 = 0.0
pruning-in-iteration extra time: 0.00011444091796875
Time: prepare 0.0546    beta_bound 0.3514    bound 0.3514    transfer 0.0007    finalize 0.0463    func 0.4532    
Accumulated time: func 1.7991    prepare 0.1285    bound 1.5988    beta_bound 1.5986    transfer 0.0020    finalize 0.0888    
batch bounding time:  0.4533822536468506
Current worst splitting domains lb-rhs (depth):
-95.62373 (8), -95.03786 (8), -94.91051 (8), -94.74902 (8), -94.65519 (8), -94.11877 (8), -93.99447 (8), -93.77776 (8), -93.73871 (8), -93.66441 (8), -93.52129 (8), -93.28935 (8), -93.19766 (8), -93.08047 (8), -92.95435 (8), -92.93280 (8), -92.57407 (8), -92.54072 (8), -92.36713 (8), -92.30466 (8), 
length of domains: 256
Time: pickout 0.0020    decision 0.0586    solve 0.4535    add 0.0097    
Accumulated time: pickout 0.0077    decision 0.3955    solve 1.8060    add 0.0285    
Current (lb-rhs): -95.62373352050781
480 domains visited
Cumulative time: 2.2738194465637207

batch:  torch.Size([256, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 100] [7, 61] [7, 100] [7, 82] [7, 82] [7, 82] [7, 100] [7, 100] [7, 100] [7, 61] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 512 = 0.0
pruning-in-iteration extra time: 0.00013947486877441406
Time: prepare 0.1061    beta_bound 0.3528    bound 0.3528    transfer 0.0011    finalize 0.0963    func 0.5566    
Accumulated time: func 2.3557    prepare 0.2430    bound 1.9517    beta_bound 1.9513    transfer 0.0031    finalize 0.1851    
batch bounding time:  0.5568726062774658
Current worst splitting domains lb-rhs (depth):
-92.77065 (9), -92.18491 (9), -92.00974 (9), -91.80847 (9), -91.75773 (9), -91.73830 (9), -91.34351 (9), -91.25491 (9), -91.10623 (9), -91.03104 (9), -90.84872 (9), -90.84660 (9), -90.68662 (9), -90.59451 (9), -90.47699 (9), -90.46931 (9), -90.37549 (9), -90.29025 (9), -90.21072 (9), -90.19241 (9), 
length of domains: 512
Time: pickout 0.0023    decision 0.0759    solve 0.5570    add 0.0131    
Accumulated time: pickout 0.0100    decision 0.4714    solve 2.3630    add 0.0416    
Current (lb-rhs): -92.7706527709961
992 domains visited
Cumulative time: 2.924105167388916

batch:  torch.Size([500, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 181] [7, 181] [7, 181] [7, 181] [7, 100] [7, 61] [7, 54] [7, 181] [7, 107] [7, 181] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1000 = 0.0
pruning-in-iteration extra time: 0.00017642974853515625
Time: prepare 0.2074    beta_bound 0.3594    bound 0.3594    transfer 0.0018    finalize 0.1896    func 0.7588    
Accumulated time: func 3.1145    prepare 0.4583    bound 2.3111    beta_bound 2.3107    transfer 0.0048    finalize 0.3748    
batch bounding time:  0.7592110633850098
Current worst splitting domains lb-rhs (depth):
-92.77065 (9), -90.37549 (9), -89.49125 (10), -89.20506 (10), -89.19727 (9), -89.16680 (10), -89.06207 (10), -88.96576 (9), -88.75993 (10), -88.65900 (10), -88.64969 (9), -88.50278 (10), -88.49207 (10), -88.44404 (10), -88.30003 (10), -88.27338 (10), -88.13530 (10), -88.05020 (10), -87.98804 (10), -87.98562 (10), 
length of domains: 1012
Time: pickout 0.0029    decision 0.1073    solve 0.7593    add 0.0219    
Accumulated time: pickout 0.0129    decision 0.5787    solve 3.1223    add 0.0634    
Current (lb-rhs): -92.7706527709961
1992 domains visited
Cumulative time: 3.8193795680999756

batch:  torch.Size([500, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 107] [7, 107] [7, 107] [7, 107] [7, 54] [7, 82] [7, 61] [7, 54] [7, 181] [7, 100] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1000 = 0.0
pruning-in-iteration extra time: 0.0001201629638671875
Time: prepare 0.2069    beta_bound 0.3566    bound 0.3567    transfer 0.0033    finalize 0.2608    func 0.8282    
Accumulated time: func 3.9427    prepare 0.6723    bound 2.6678    beta_bound 2.6672    transfer 0.0081    finalize 0.6356    
batch bounding time:  0.8286552429199219
Current worst splitting domains lb-rhs (depth):
-92.77065 (9), -90.37549 (9), -89.49125 (10), -89.20506 (10), -89.19727 (9), -88.96576 (9), -88.75993 (10), -88.65900 (10), -88.64969 (9), -88.44404 (10), -88.30003 (10), -87.98804 (10), -87.88115 (10), -87.71854 (10), -87.57336 (10), -87.56573 (10), -87.37903 (10), -87.28046 (10), -87.28015 (10), -87.23811 (10), 
length of domains: 1512
Time: pickout 0.0029    decision 0.1049    solve 0.8288    add 0.0824    
Accumulated time: pickout 0.0158    decision 0.6835    solve 3.9511    add 0.1458    
Current (lb-rhs): -92.7706527709961
2992 domains visited
Cumulative time: 4.842684984207153

batch:  torch.Size([500, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 61] [7, 61] [7, 61] [7, 95] [7, 181] [7, 181] [7, 181] [7, 100] [7, 61] [7, 61] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1000 = 0.0
pruning-in-iteration extra time: 0.0001201629638671875
Time: prepare 0.2169    beta_bound 0.3542    bound 0.3543    transfer 0.0018    finalize 0.1881    func 0.7623    
Accumulated time: func 4.7050    prepare 0.8965    bound 3.0221    beta_bound 3.0215    transfer 0.0099    finalize 0.8237    
batch bounding time:  0.7628138065338135
Current worst splitting domains lb-rhs (depth):
-92.77065 (9), -90.37549 (9), -89.49125 (10), -89.20506 (10), -89.19727 (9), -88.96576 (9), -88.75993 (10), -88.65900 (10), -88.64969 (9), -88.44404 (10), -88.30003 (10), -87.98804 (10), -87.88115 (10), -87.71854 (10), -87.57336 (10), -87.56573 (10), -87.37903 (10), -87.28046 (10), -87.28015 (10), -87.23811 (10), 
length of domains: 2012
Time: pickout 0.0040    decision 0.1043    solve 0.7629    add 0.0235    
Accumulated time: pickout 0.0198    decision 0.7878    solve 4.7140    add 0.1693    
Current (lb-rhs): -92.7706527709961
3992 domains visited
Cumulative time: 5.742275953292847

batch:  torch.Size([500, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 95] [7, 95] [7, 95] [7, 147] [7, 154] [7, 154] [7, 154] [7, 154] [7, 95] [7, 154] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1000 = 0.0
pruning-in-iteration extra time: 0.00011873245239257812
Time: prepare 0.2095    beta_bound 0.3573    bound 0.3574    transfer 0.0018    finalize 0.1825    func 0.7516    
Accumulated time: func 5.4566    prepare 1.1131    bound 3.3795    beta_bound 3.3788    transfer 0.0117    finalize 1.0061    
batch bounding time:  0.7519817352294922
Current worst splitting domains lb-rhs (depth):
-92.77065 (9), -90.37549 (9), -89.49125 (10), -89.20506 (10), -89.19727 (9), -88.96576 (9), -88.75993 (10), -88.65900 (10), -88.64969 (9), -88.44404 (10), -88.30003 (10), -87.98804 (10), -87.88115 (10), -87.71854 (10), -87.57336 (10), -87.56573 (10), -87.37903 (10), -87.28046 (10), -87.28015 (10), -87.23811 (10), 
length of domains: 2512
Time: pickout 0.0035    decision 0.1045    solve 0.7521    add 0.2329    
Accumulated time: pickout 0.0233    decision 0.8923    solve 5.4661    add 0.4022    
Current (lb-rhs): -92.7706527709961
4992 domains visited
Cumulative time: 6.84021782875061

batch:  torch.Size([500, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 154] [7, 154] [7, 147] [7, 61] [7, 147] [7, 147] [7, 147] [7, 147] [7, 154] [7, 95] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1000 = 0.0
pruning-in-iteration extra time: 0.00011491775512695312
Time: prepare 0.2084    beta_bound 0.3556    bound 0.3556    transfer 0.0017    finalize 0.1823    func 0.7486    
Accumulated time: func 6.2052    prepare 1.3286    bound 3.7351    beta_bound 3.7344    transfer 0.0134    finalize 1.1884    
batch bounding time:  0.7490067481994629
Current worst splitting domains lb-rhs (depth):
-92.77065 (9), -90.37549 (9), -89.49125 (10), -89.20506 (10), -89.19727 (9), -88.96576 (9), -88.75993 (10), -88.65900 (10), -88.64969 (9), -88.44404 (10), -88.30003 (10), -87.98804 (10), -87.88115 (10), -87.71854 (10), -87.57336 (10), -87.56573 (10), -87.37903 (10), -87.28046 (10), -87.28015 (10), -87.23811 (10), 
length of domains: 3012
Time: pickout 0.0033    decision 0.1059    solve 0.7491    add 0.0213    
Accumulated time: pickout 0.0265    decision 0.9982    solve 6.2152    add 0.4235    
Current (lb-rhs): -92.7706527709961
5992 domains visited
Cumulative time: 7.724482536315918

batch:  torch.Size([500, 200]) pre split depth:  1
post split depth:  1
splitting decisions: 
split level 0: [7, 114] [7, 147] [7, 154] [7, 154] [7, 95] [7, 114] [7, 114] [7, 95] [7, 147] [7, 147] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1000 = 0.0
pruning-in-iteration extra time: 0.00012063980102539062
Time: prepare 0.2089    beta_bound 0.3555    bound 0.3556    transfer 0.0018    finalize 0.1834    func 0.7502    
Accumulated time: func 6.9554    prepare 1.5450    bound 4.0907    beta_bound 4.0899    transfer 0.0152    finalize 1.3718    
batch bounding time:  0.7505872249603271
Current worst splitting domains lb-rhs (depth):
-92.77065 (9), -90.37549 (9), -89.49125 (10), -89.20506 (10), -89.19727 (9), -88.96576 (9), -88.75993 (10), -88.65900 (10), -88.64969 (9), -88.44404 (10), -88.30003 (10), -87.98804 (10), -87.88115 (10), -87.71854 (10), -87.57336 (10), -87.56573 (10), -87.37903 (10), -87.28046 (10), -87.28015 (10), -87.23811 (10), 
length of domains: 3512
Time: pickout 0.0032    decision 0.1074    solve 0.7507    add 0.1044    
Accumulated time: pickout 0.0298    decision 1.1056    solve 6.9659    add 0.5278    
Current (lb-rhs): -92.7706527709961
6992 domains visited
Time out!!!!!!!!
Result: unknown in 300.8948 seconds
############# Summary #############
Final verified acc: 0.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 0 , total falsified (unsafe/sat): 0 , timeout: 1
mean time for ALL instances (total 1):300.89178959933116, max time: 300.8947985172272
unknown (total 1), index: [0]
