Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: eran_instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2021/benchmarks/eran
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: 'remove_ineffective_layers, remove_relu_in_last_layer'
data:
  start: 24
  end: 25
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 500
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Sun Jan 15 22:32:32 2023 on diablo.cs.ucla.edu
customized start/end sample from instance 24 to 25 in eran_instances.csv
Internal results will be saved to a-b-crown_[eran_instances]_start=24_end=25_iter=20_b=500_timeout=360_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_initial_max_domains=1.npz.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 24 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx nets/mnist_relu_9_200.onnx
Using vnnlib specs/mnist/mnist_spec_idx_9345_eps_0.01500.vnnlib
Precompiled vnnlib file found at ../../vnncomp2021/benchmarks/eran/specs/mnist/mnist_spec_idx_9345_eps_0.01500.vnnlib.compiled
Loading onnx ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx wih quirks {}
Onnx optimization with flag: remove_ineffective_layers, remove_relu_in_last_layer
Found existed optimized onnx model at ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx.optimized
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750000149011612, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.27491975,  8.60148335, -2.06938982, -2.56802106, -2.00082350,
         -0.87261558, -1.43051815,  1.02568221, -0.53341603, -1.41532195]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.90972519,  7.63199902, -1.83080029, -2.28776240, -1.76596808,
          -0.72744429, -1.28347540,  0.91130930, -0.42125428, -1.22045147],
         [-2.90972519,  7.63199902, -1.83080029, -2.28776240, -1.76596808,
          -0.72744429, -1.28347540,  0.91130930, -0.42125428, -1.22045147]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[10.54172421,  9.46279907,  9.91976166,  9.39796734,  8.35944366,
           8.91547394,  6.72068977,  8.05325317,  8.85245037]]],
       device='cuda:0')
number of violation:  0
Attack finished in 1.1800 seconds.
PGD attack failed
Model prediction is: tensor([[-3.27491975,  8.60148335, -2.06938982, -2.56802106, -2.00082350,
         -0.87261558, -1.43051815,  1.02568221, -0.53341603, -1.41532195]],
       device='cuda:0')
layer /39 using sparse-features alpha with shape [51]; unstable size 51; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 96 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 98 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using sparse-spec alpha with unstable size 145 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [96]; unstable size 96; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 98 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using sparse-spec alpha with unstable size 145 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [98]; unstable size 98; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using sparse-spec alpha with unstable size 145 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using sparse-features alpha with shape [145]; unstable size 145; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using full alpha with shape torch.Size([200]); unstable size 188; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ -743.80389404, -1126.82556152, -1047.54699707, -1119.40087891,
         -1107.70983887, -1044.36682129,  -964.29547119, -1150.80383301,
         -1236.04931641]], device='cuda:0') None
best_l after optimization: -5674.1396484375 with beta sum per layer: []
alpha/beta optimization time: 11.18206524848938
initial alpha-CROWN bounds: tensor([[-444.33163452, -680.67498779, -631.46398926, -667.92193604,
         -677.95886230, -632.55328369, -537.24914551, -675.95971680,
         -726.02612305]], device='cuda:0')
Worst class: (+ rhs) -726.026123046875
Start solving intermediate bounds with MIP...
layer /39 using sparse-features alpha with shape [51]; unstable size 51; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 96 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 98 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using sparse-spec alpha with unstable size 145 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [96]; unstable size 96; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 98 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using sparse-spec alpha with unstable size 145 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [98]; unstable size 98; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using sparse-spec alpha with unstable size 145 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using sparse-features alpha with shape [145]; unstable size 145; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using full alpha with shape torch.Size([200]); unstable size 188; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_87', 'lay4_84', 'lay4_121', 'lay4_9', 'lay4_92', 'lay4_74', 'lay4_161', 'lay4_136', 'lay4_198', 'lay4_95', 'lay4_77', 'lay4_13', 'lay4_76', 'lay4_142', 'lay4_88', 'lay4_27', 'lay4_1', 'lay4_178', 'lay4_53', 'lay4_37', 'lay4_139', 'lay4_110', 'lay4_14', 'lay4_194', 'lay4_19', 'lay4_50', 'lay4_11', 'lay4_175', 'lay4_33', 'lay4_64', 'lay4_73', 'lay4_176', 'lay4_132', 'lay4_128', 'lay4_152', 'lay4_134', 'lay4_108', 'lay4_47', 'lay4_115', 'lay4_55', 'lay4_117', 'lay4_133', 'lay4_138', 'lay4_145', 'lay4_151', 'lay4_150', 'lay4_8', 'lay4_154', 'lay4_129', 'lay4_127', 'lay4_3', 'lay4_137', 'lay4_69', 'lay4_167', 'lay4_168', 'lay4_52', 'lay4_43', 'lay4_172', 'lay4_51', 'lay4_123', 'lay4_59', 'lay4_107', 'lay4_183', 'lay4_196', 'lay4_191', 'lay4_12', 'lay4_193', 'lay4_171', 'lay4_98', 'lay4_6', 'lay4_174', 'lay4_165', 'lay4_20', 'lay4_7', 'lay4_35', 'lay4_162', 'lay4_114', 'lay4_31', 'lay4_26', 'lay4_166', 'lay4_182', 'lay4_18', 'lay4_70', 'lay4_103', 'lay4_41', 'lay4_30', 'lay4_197', 'lay4_34', 'lay4_28', 'lay4_153', 'lay4_24', 'lay4_71'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/model.py:154: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  "Using experimental implementation that allows 'batch_size > 1'."
Solving MIP for lay4_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7809s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_88, [-inf,inf]=>[-0.23563512730021588,0.4392624130471628] (2,-1; 2,-1), time: 3.6745s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-0.583000313767129,0.25702456591583556] (2,-1; 2,-1), time: 4.6282s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.3823493564534387,0.2513703180138128] (2,-1; 2,-1), time: 4.8864s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[-0.5429739576381187,0.09733983758967153] (2,-1; 2,-1), time: 4.9351s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_77, [-inf,inf]=>[-0.508591287271313,0.02861727070927017] (2,-1; 2,-1), time: 4.9635s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_95, [-inf,inf]=>[-0.019205354285242573,0.6865321395053676] (2,-1; 2,-1), time: 4.9738s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_136, [-inf,inf]=>[-0.14484247420072674,0.528573217225749] (2,-1; 2,-1), time: 5.3138s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_84, [-inf,inf]=>[-0.34655653114543655,0.3637575107463162] (2,-1; 2,-1), time: 5.4065s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6231s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_198, [-inf,inf]=>[-0.5763622273950648,0.1157295623398693] (2,-1; 2,-1), time: 5.9510s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.44090808859325953,0.13519455710931794] (2,-1; 2,-1), time: 5.4926s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[-0.24434751137101832,0.45488045909674624] (2,-1; 2,-1), time: 6.3253s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3817s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_121, [-inf,inf]=>[-0.62361996214042,0.03755020578498754] (2,-1; 2,-1), time: 6.7074s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_139, [-inf,inf]=>[-0.18124760075558075,0.428501752555002] (2,-1; 2,-1), time: 1.9588s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-0.39944288142677914,0.21136221803084415] (2,-1; 2,-1), time: 6.9238s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2801s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[-0.2841421998923148,0.30197164584955904] (2,-1; 2,-1), time: 7.1285s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_161, [-inf,inf]=>[-0.38182969784640186,0.1810302224078951] (2,-1; 2,-1), time: 7.1603s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_128, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3556s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5184s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_134, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3092s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3063s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-0.6767193244709893,0.040831179052348954] (2,-1; 2,-1), time: 5.1395s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7424s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[-0.14165424606725213,0.5262736575822784] (2,-1; 2,-1), time: 4.6514s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[-0.47596905141480483,0.18999709410377708] (2,-1; 2,-1), time: 3.4150s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_117, [-inf,inf]=>[-inf,-0.0005570365945986311] (-1,-1; 2,-1), time: 1.0431s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_14, [-inf,inf]=>[-0.5350453595231514,0.014443698578918134] (2,-1; 2,-1), time: 5.3155s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_175, [-inf,inf]=>[1e-05,0.6978483058256929] (15,-1; 2,-1), time: 4.1566s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-0.5154837009157922,0.3473555381436191] (2,-1; 2,-1), time: 4.1472s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_145, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6565s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3641s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-0.2907504336463642,0.3066519674655875] (2,-1; 2,-1), time: 5.9567s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_129, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6606s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_50, [-inf,inf]=>[-0.47481650321094765,0.18129512947149728] (2,-1; 2,-1), time: 5.3321s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_137, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2621s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_152, [-inf,inf]=>[-0.2164521153482819,0.5248286145773617] (2,-1; 2,-1), time: 4.6150s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_167, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3265s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4707s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_47, [-inf,inf]=>[-0.40065356451865036,0.2512165502057129] (2,-1; 2,-1), time: 4.0866s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_138, [-inf,inf]=>[-0.47890387108583343,0.046518602809663474] (2,-1; 2,-1), time: 4.1889s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3248s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2865s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3064s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_133, [-inf,inf]=>[-0.11007742699434969,0.3811298036614646] (2,-1; 2,-1), time: 5.0960s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_115, [-inf,inf]=>[-0.32500652415307313,0.1943059995004441] (2,-1; 2,-1), time: 5.8963s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[-0.3267190177023228,0.3073551161455452] (2,-1; 2,-1), time: 9.1227s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_107, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2972s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2833s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_154, [-inf,inf]=>[-0.651551066508506,0.0036560386766651687] (2,-1; 2,-1), time: 4.4346s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.38956952316117516,0.20932842907429805] (2,-1; 2,-1), time: 4.6257s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1161s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2744s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_191, [-inf,inf]=>[1e-05,0.8473172870976027] (15,-1; 2,-1), time: 1.8998s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-0.48306947202496797,0.10698442413724951] (9,-1; 2,-1), time: 16.5540s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2985s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_196, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5052s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_151, [-inf,inf]=>[-0.07278593893977559,0.4889267576243315] (2,-1; 2,-1), time: 7.1726s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[-0.3998647443691013,0.13929451442800939] (2,-1; 2,-1), time: 5.7241s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_172, [-inf,inf]=>[-0.3938209771243417,0.13448512957270645] (2,-1; 2,-1), time: 5.2305s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0549s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_127, [-inf,inf]=>[-0.5492215625027771,0.10505721001315377] (2,-1; 2,-1), time: 8.1627s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.21126639250640764,0.336147280972268] (2,-1; 2,-1), time: 6.9952s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_132, [-inf,inf]=>[-0.44588140814353483,0.11596412919701152] (2,-1; 2,-1), time: 12.0152s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_183, [-inf,inf]=>[-0.2894984017704485,0.2549879061501308] (2,-1; 2,-1), time: 4.6130s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_110, [-inf,inf]=>[-0.31923348568719484,0.1838739525219312] (2,-1; 2,-1), time: 15.1855s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-0.1610752843370603,0.5181186132793166] (2,-1; 2,-1), time: 3.8507s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_171, [-inf,inf]=>[-0.041507288626476596,0.5212036546144083] (2,-1; 2,-1), time: 6.3320s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[1e-05,0.723978212665403] (15,-1; 2,-1), time: 2.7969s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[-0.4883467250930835,0.11563162512158727] (2,-1; 2,-1), time: 5.0771s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2989s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3211s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[1e-05,0.6406020096471073] (15,-1; 2,-1), time: 3.1166s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_114, [-inf,inf]=>[-0.07748747820176785,0.4311743314077564] (2,-1; 2,-1), time: 4.5956s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3212s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[1e-05,0.6438111021009074] (15,-1; 2,-1), time: 8.3877s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_7, [-inf,inf]=>[-0.5261057378492953,0.025527690345354764] (2,-1; 2,-1), time: 5.6393s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3029s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_193, [-inf,inf]=>[-0.5536390261303947,0.1145036867857255] (2,-1; 2,-1), time: 7.8637s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_182, [-inf,inf]=>[-0.2031278869480948,0.4869583107323922] (2,-1; 2,-1), time: 4.5471s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_3, [-inf,inf]=>[-0.275800015763531,0.27035717399173803] (2,-1; 2,-1), time: 12.8216s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_166, [-inf,inf]=>[1e-05,0.577298993893671] (15,-1; 2,-1), time: 4.9040s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_35, [-inf,inf]=>[-0.5357275476647194,0.02846133181777729] (2,-1; 2,-1), time: 6.7978s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-0.4040465551284316,0.3372190164371551] (2,-1; 2,-1), time: 4.9300s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_31, [-inf,inf]=>[-0.21690268987066708,0.297986154385348] (2,-1; 2,-1), time: 6.3759s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_153, [-inf,inf]=>[1e-05,0.9940410821455439] (15,-1; 2,-1), time: 2.0714s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_103, [-inf,inf]=>[-0.2623812380528285,0.3030760605257062] (2,-1; 2,-1), time: 5.3803s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-0.06377278916978821,0.547888785800764] (2,-1; 2,-1), time: 4.9764s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-0.4767945381586943,0.19896869054486482] (2,-1; 2,-1), time: 5.0698s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_197, [-inf,inf]=>[-0.4170620178277174,0.18170589545159216] (2,-1; 2,-1), time: 5.4273s, #vars: 1287, #constrs: 553, improved: True
PGD done for relu layer 2
MIP improved 92 nodes out of 92 unstable nodes, lb improved 15.572967529296875, ub improved 15.370745658874512, time 28.1932
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_10', 'lay6_190', 'lay6_8', 'lay6_159', 'lay6_61', 'lay6_160', 'lay6_62', 'lay6_172', 'lay6_167', 'lay6_124', 'lay6_111', 'lay6_18', 'lay6_179', 'lay6_35', 'lay6_101', 'lay6_139', 'lay6_154', 'lay6_21', 'lay6_192', 'lay6_88', 'lay6_118', 'lay6_55', 'lay6_90', 'lay6_110', 'lay6_31', 'lay6_144', 'lay6_49', 'lay6_145', 'lay6_123', 'lay6_106', 'lay6_65', 'lay6_44', 'lay6_115', 'lay6_105', 'lay6_76', 'lay6_24', 'lay6_78', 'lay6_13', 'lay6_3', 'lay6_116', 'lay6_17', 'lay6_130', 'lay6_4', 'lay6_63', 'lay6_146', 'lay6_20', 'lay6_98', 'lay6_135', 'lay6_83', 'lay6_74', 'lay6_9', 'lay6_42', 'lay6_69', 'lay6_168', 'lay6_43', 'lay6_156', 'lay6_108', 'lay6_109', 'lay6_12', 'lay6_41', 'lay6_136', 'lay6_103', 'lay6_163', 'lay6_199', 'lay6_27', 'lay6_29', 'lay6_153', 'lay6_122', 'lay6_47', 'lay6_16', 'lay6_119', 'lay6_165', 'lay6_169', 'lay6_158', 'lay6_94', 'lay6_52', 'lay6_5', 'lay6_121', 'lay6_175', 'lay6_162', 'lay6_198', 'lay6_28', 'lay6_138', 'lay6_81', 'lay6_46', 'lay6_53', 'lay6_180', 'lay6_54', 'lay6_40', 'lay6_15', 'lay6_188', 'lay6_73', 'lay6_82'] filter: 1.0
Solving MIP for lay6_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4124s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3451s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2378s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_179, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1251s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4525s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8489s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3653s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3563s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0459s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_159, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.9429s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2979s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3472s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.8047s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3183s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_154, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.3194s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_145, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.1580s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4168s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_115, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3422s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9584s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.5995s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3031s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8837s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.4994s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.4121s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_116, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3562s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3109s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_130, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2964s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0191s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3383s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9124s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_111, [-inf,inf]=>[-0.5807354636285128,0.12588208163043052] (2,-1; 9,-1), time: 26.7071s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4162s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.7379572535406024,0.17327944152467203] (9,-1; 9,-1), time: 30.0299s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-0.8230578459539535,0.06178337643181845] (9,-1; 9,-1), time: 30.0295s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_172, [-inf,inf]=>[-0.5585115455413916,0.08698910573912348] (9,-1; 9,-1), time: 30.0917s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.27531490423296545,0.3615374509873234] (9,-1; 9,-1), time: 30.0168s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.6058082984512945,0.06538814588005891] (9,-1; 9,-1), time: 30.0193s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3995s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.5262540904815716,0.23490537954042753] (9,-1; 9,-1), time: 30.0147s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3183s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-0.6834240196676452,0.018324531201219338] (9,-1; 9,-1), time: 30.3379s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3117s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4051s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9066s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4154s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-0.2333464082839571,0.466068494144439] (9,-1; 9,-1), time: 30.0211s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3874s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3141s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3151s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-0.22562118378479426,0.3694218659621816] (9,-1; 9,-1), time: 30.3457s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[-0.6987032500103244,0.05001943514602781] (9,-1; 9,-1), time: 30.0159s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3840s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-0.24455336186924456,0.34864663316544886] (9,-1; 9,-1), time: 30.1335s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3982s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3101s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4400s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2965s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.3121s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.10348369149317208,0.42898470632541624] (9,-1; 9,-1), time: 30.0586s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-0.14673453220260932,0.35842479099119107] (9,-1; 9,-1), time: 30.0600s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3927s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-0.31606391834914027,0.3515418508479785] (9,-1; 9,-1), time: 30.0169s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_119, [-inf,inf]=>[1e-05,0.962588470543264] (15,-1; 9,-1), time: 15.6479s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8136s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3259s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3336s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[-0.3412964144354016,0.2814508513183986] (9,-1; 9,-1), time: 30.0133s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[1e-05,0.9072509525260462] (15,-1; 9,-1), time: 21.8567s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_158, [-inf,inf]=>[1e-05,0.7940507592477435] (15,-1; 9,-1), time: 15.4083s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[1e-05,1.0125139826206562] (15,-1; 9,-1), time: 15.4169s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-0.38262741535167305,0.1764681446870719] (9,-1; 9,-1), time: 30.0190s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.04942746611445566,0.6034297835308067] (9,-1; 9,-1), time: 30.0994s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_109, [-inf,inf]=>[-0.16328813521832175,0.5870884480236687] (9,-1; 9,-1), time: 30.0223s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3060s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-0.4564113442404495,0.20540077170749735] (9,-1; 9,-1), time: 30.3674s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3255s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-0.32168335653731334,0.396220745120847] (9,-1; 9,-1), time: 30.0145s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_103, [-inf,inf]=>[-0.4359160934507714,0.18289232478831743] (9,-1; 9,-1), time: 30.0323s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-0.5711579145802043,0.024037470653950763] (9,-1; 9,-1), time: 30.0299s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[1e-05,1.0426702728418373] (15,-1; 9,-1), time: 15.3036s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_153, [-inf,inf]=>[-0.760469447708876,0.0565915134844945] (9,-1; 9,-1), time: 30.0113s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-0.16746121061542835,0.41570744944794297] (9,-1; 9,-1), time: 30.0464s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[1e-05,0.8024370604940428] (15,-1; 9,-1), time: 15.5217s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[1e-05,0.8741195972673086] (15,-1; 9,-1), time: 15.2926s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[1e-05,1.4391723030120176] (15,-1; 2,-1), time: 9.9138s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[1e-05,1.3877678335602306] (15,-1; 9,-1), time: 15.2966s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-0.18989426059591114,0.5079512912274641] (9,-1; 9,-1), time: 30.0274s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[1e-05,0.9852426995101514] (15,-1; 9,-1), time: 15.2962s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.13410247967976946,0.49516177745875833] (9,-1; 9,-1), time: 30.0144s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[-0.4670273178416316,0.1860684542443087] (9,-1; 9,-1), time: 30.0178s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_180, [-inf,inf]=>[-0.34759578482145237,0.41003284291750625] (9,-1; 9,-1), time: 30.1881s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-0.16756819024502886,0.5140359026416097] (9,-1; 9,-1), time: 30.0126s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_188, [-inf,inf]=>[-0.2134924432949452,0.35076009467090047] (9,-1; 9,-1), time: 30.1914s, #vars: 1597, #constrs: 918, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(142, -1), (194, -1), (11, -1), (175, 1), (73, -1), (176, -1), (128, -1), (134, -1), (108, -1), (55, -1), (117, -1), (145, -1), (150, -1), (129, -1), (137, -1), (69, -1), (167, -1), (52, -1), (51, -1), (123, -1), (59, 1), (107, -1), (196, -1), (191, 1), (12, -1), (98, -1), (6, -1), (165, -1), (20, -1), (26, 1), (166, 1), (18, 1), (30, -1), (28, -1), (153, 1), (24, -1), (71, -1)]
best_l after optimization: -33.810054779052734 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 10.886225700378418
alpha-CROWN with intermediate bounds by MIP: tensor([[-3.12434483, -2.71609688, -2.21588421, -4.14937973, -4.78743458,
         -3.99240685, -3.64977646, -3.91804886, -5.25668144]], device='cuda:0') None
MIP improved 93 nodes out of 93 unstable nodes, lb improved 18.21891975402832, ub improved 30.073041915893555, time 91.9970
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_162', 'lay8_100', 'lay8_37', 'lay8_193', 'lay8_176', 'lay8_184', 'lay8_181', 'lay8_160', 'lay8_28', 'lay8_40', 'lay8_91', 'lay8_186', 'lay8_60', 'lay8_76', 'lay8_167', 'lay8_22', 'lay8_130', 'lay8_137', 'lay8_71', 'lay8_171', 'lay8_15', 'lay8_119', 'lay8_29', 'lay8_149', 'lay8_39', 'lay8_121', 'lay8_154', 'lay8_159', 'lay8_156', 'lay8_131', 'lay8_99', 'lay8_20', 'lay8_105', 'lay8_102', 'lay8_101', 'lay8_185', 'lay8_125', 'lay8_4', 'lay8_1', 'lay8_150', 'lay8_21', 'lay8_170', 'lay8_133', 'lay8_190', 'lay8_35', 'lay8_49', 'lay8_90', 'lay8_103', 'lay8_163', 'lay8_14', 'lay8_145', 'lay8_155', 'lay8_192', 'lay8_98', 'lay8_11', 'lay8_79', 'lay8_140', 'lay8_70', 'lay8_172', 'lay8_114', 'lay8_51', 'lay8_128', 'lay8_168', 'lay8_151', 'lay8_129', 'lay8_84', 'lay8_117', 'lay8_30', 'lay8_111', 'lay8_96', 'lay8_83', 'lay8_68', 'lay8_118', 'lay8_198', 'lay8_81', 'lay8_36', 'lay8_153', 'lay8_124', 'lay8_47', 'lay8_97', 'lay8_64', 'lay8_87', 'lay8_134', 'lay8_92', 'lay8_173', 'lay8_123', 'lay8_142', 'lay8_16', 'lay8_13', 'lay8_7', 'lay8_115', 'lay8_75', 'lay8_33', 'lay8_59', 'lay8_46', 'lay8_187', 'lay8_78', 'lay8_17', 'lay8_126', 'lay8_53', 'lay8_54', 'lay8_174', 'lay8_157', 'lay8_25', 'lay8_63', 'lay8_57', 'lay8_178', 'lay8_27', 'lay8_135', 'lay8_158', 'lay8_196', 'lay8_82', 'lay8_55', 'lay8_85', 'lay8_164', 'lay8_112', 'lay8_120', 'lay8_180', 'lay8_113', 'lay8_58', 'lay8_165', 'lay8_43', 'lay8_95', 'lay8_177', 'lay8_194', 'lay8_2', 'lay8_107', 'lay8_169', 'lay8_110', 'lay8_26', 'lay8_144', 'lay8_122', 'lay8_86', 'lay8_32'] filter: 1.0
Solving MIP for lay8_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4697s, #vars: 1859, #constrs: 1211, improved: True
Solving MIP for lay8_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4811s, #vars: 1859, #constrs: 1211, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4810s, #vars: 1859, #constrs: 1211, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5556s, #vars: 1859, #constrs: 1211, improved: True
Solving MIP for lay8_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5766s, #vars: 1859, #constrs: 1211, improved: True
Solving MIP for lay8_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5931s, #vars: 1859, #constrs: 1211, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6109s, #vars: 1859, #constrs: 1211, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6291s, #vars: 1859, #constrs: 1211, improved: True
Solving MIP for lay8_181, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6227s, #vars: 1859, #constrs: 1211, improved: True
Solving MIP for lay8_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3694s, #vars: 1859, #constrs: 1211, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5124s, #vars: 1859, #constrs: 1211, improved: True
Solving MIP for lay8_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5250s, #vars: 1859, #constrs: 1211, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5966s, #vars: 1859, #constrs: 1211, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4674s, #vars: 1859, #constrs: 1211, improved: True
Solving MIP for lay8_159, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4957s, #vars: 1859, #constrs: 1211, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4497s, #vars: 1859, #constrs: 1211, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4125s, #vars: 1859, #constrs: 1211, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(190, -1), (8, -1), (159, -1), (160, -1), (179, -1), (35, -1), (101, -1), (139, -1), (154, -1), (21, -1), (88, -1), (118, -1), (90, -1), (144, -1), (49, -1), (145, -1), (123, -1), (106, -1), (44, -1), (115, -1), (105, -1), (76, -1), (24, -1), (13, -1), (116, -1), (17, -1), (130, -1), (4, -1), (63, -1), (146, -1), (98, -1), (83, -1), (74, -1), (9, -1), (42, -1), (168, -1), (43, -1), (108, -1), (12, -1), (41, -1), (136, -1), (27, 1), (29, -1), (122, -1), (47, -1), (16, -1), (119, 1), (165, -1), (158, 1), (94, 1), (52, -1), (121, 1), (175, -1), (162, -1), (198, -1), (81, 1), (46, 1), (53, 1), (54, -1), (40, -1), (73, 1), (82, 1)]

all verified at 0th iter
best_l after optimization: 53.97096252441406 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.06265854835510254
alpha-CROWN with intermediate bounds by MIP: tensor([[6.96575594, 6.55504560, 6.96104765, 6.43424129, 5.42214489, 5.94999504,
         4.47883701, 5.35543633, 5.84846020]], device='cuda:0') None
min of alpha-CROWN bounds 4.478837013244629>=0, verified!
MIP finished with 128.29584765434265s
Run final alpha-CROWN after MIP solving on layer 7 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: 53.97096252441406 with beta sum per layer: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.05878806114196777
alpha-CROWN with intermediate bounds improved by MIP: tensor([[6.96575594, 6.55504560, 6.96104765, 6.43424129, 5.42214489, 5.94999504,
         4.47883701, 5.35543633, 5.84846020]], device='cuda:0') None
refined global lb: tensor([[6.96575594],
        [6.55504560],
        [6.96104765],
        [6.43424129],
        [5.42214489],
        [5.94999504],
        [4.47883701],
        [5.35543633],
        [5.84846020]], device='cuda:0') min: tensor(4.47883701, device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
Result: safe-incomplete-refine in 143.7805 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):143.77903544191486, max time: 143.7804732322693
mean time for verified SAFE instances(total 1): 143.7804732322693, max time: 143.7804732322693
safe-incomplete-refine (total 1), index: [0]
