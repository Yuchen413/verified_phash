Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: eran_instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2021/benchmarks/eran
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: 'remove_ineffective_layers, remove_relu_in_last_layer'
data:
  start: 24
  end: 25
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 500
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 13:42:14 2023 on zeratul
customized start/end sample from instance 24 to 25 in eran_instances.csv
Internal results will be saved to a-b-crown_[eran_instances]_start=24_end=25_iter=20_b=500_timeout=360_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_initial_max_domains=1.npz.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 24 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx nets/mnist_relu_9_200.onnx
Using vnnlib specs/mnist/mnist_spec_idx_9345_eps_0.01500.vnnlib
Precompiled vnnlib file found at ../../vnncomp2021/benchmarks/eran/specs/mnist/mnist_spec_idx_9345_eps_0.01500.vnnlib.compiled
Loading onnx ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx wih quirks {}
Onnx optimization with flag: remove_ineffective_layers, remove_relu_in_last_layer
Found existed optimized onnx model at ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx.optimized
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750000149011612, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.27491903,  8.60148430, -2.06939006, -2.56802154, -2.00082374,
         -0.87261558, -1.43051803,  1.02568209, -0.53341603, -1.41532218]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.90972495,  7.63199806, -1.83080029, -2.28776193, -1.76596797,
          -0.72744441, -1.28347540,  0.91130954, -0.42125368, -1.22045135],
         [-2.90972495,  7.63199806, -1.83080029, -2.28776193, -1.76596797,
          -0.72744441, -1.28347540,  0.91130954, -0.42125368, -1.22045135]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[10.54172325,  9.46279812,  9.91975975,  9.39796638,  8.35944271,
           8.91547394,  6.72068834,  8.05325127,  8.85244942]]],
       device='cuda:0')
number of violation:  0
Attack finished in 2.2176 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/19): BoundParams(name=/19, inputs=[])
  (/20): BoundParams(name=/20, inputs=[])
  (/21): BoundParams(name=/21, inputs=[])
  (/22): BoundParams(name=/22, inputs=[])
  (/23): BoundParams(name=/23, inputs=[])
  (/24): BoundParams(name=/24, inputs=[])
  (/25): BoundParams(name=/25, inputs=[])
  (/26): BoundParams(name=/26, inputs=[])
  (/27): BoundParams(name=/27, inputs=[])
  (/28): BoundParams(name=/28, inputs=[])
  (/29): BoundParams(name=/29, inputs=[])
  (/30): BoundParams(name=/30, inputs=[])
  (/31): BoundParams(name=/31, inputs=[])
  (/32): BoundParams(name=/32, inputs=[])
  (/33): BoundParams(name=/33, inputs=[])
  (/34): BoundParams(name=/34, inputs=[])
  (/35): BoundParams(name=/35, inputs=[])
  (/36): BoundParams(name=/36, inputs=[])
  (/37): BoundFlatten(name=/37, inputs=[/0])
  (/input): BoundLinear(name=/input, inputs=[/37, /19, /20])
  (/39): BoundRelu(name=/39, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/39, /21, /22])
  (/41): BoundRelu(name=/41, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/41, /23, /24])
  (/43): BoundRelu(name=/43, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/43, /25, /26])
  (/45): BoundRelu(name=/45, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/45, /27, /28])
  (/47): BoundRelu(name=/47, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/47, /29, /30])
  (/49): BoundRelu(name=/49, inputs=[/input.19])
  (/input.23): BoundLinear(name=/input.23, inputs=[/49, /31, /32])
  (/51): BoundRelu(name=/51, inputs=[/input.23])
  (/input.27): BoundLinear(name=/input.27, inputs=[/51, /33, /34])
  (/53): BoundRelu(name=/53, inputs=[/input.27])
  (/54): BoundLinear(name=/54, inputs=[/53, /35, /36])
)
Model prediction is: tensor([[-3.27491903,  8.60148430, -2.06939006, -2.56802154, -2.00082374,
         -0.87261558, -1.43051803,  1.02568209, -0.53341603, -1.41532218]],
       device='cuda:0')
layer /39 using sparse-features alpha with shape [51]; unstable size 51; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 96 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 98 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using sparse-spec alpha with unstable size 145 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [96]; unstable size 96; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 98 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using sparse-spec alpha with unstable size 145 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [98]; unstable size 98; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using sparse-spec alpha with unstable size 145 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using sparse-features alpha with shape [145]; unstable size 145; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using full alpha with shape torch.Size([200]); unstable size 188; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ -743.80389404, -1126.82568359, -1047.54711914, -1119.40100098,
         -1107.70983887, -1044.36694336,  -964.29553223, -1150.80407715,
         -1236.04968262]], device='cuda:0') None
best_l after optimization: -5674.119140625
alpha/beta optimization time: 14.894282102584839
initial alpha-CROWN bounds: tensor([[-444.33016968, -680.67041016, -631.46209717, -667.92028809,
         -677.95654297, -632.55108643, -537.24609375, -675.95764160,
         -726.02465820]], device='cuda:0')
Worst class: (+ rhs) -726.024658203125
Split layers:
  BoundLinear(name=/input.15, inputs=[/45, /27, /28]): [(BoundRelu(name=/47, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.23, inputs=[/49, /31, /32]): [(BoundRelu(name=/51, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.7, inputs=[/41, /23, /24]): [(BoundRelu(name=/43, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.3, inputs=[/39, /21, /22]): [(BoundRelu(name=/41, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.11, inputs=[/43, /25, /26]): [(BoundRelu(name=/45, inputs=[/input.11]), 0)]
  BoundLinear(name=/input, inputs=[/37, /19, /20]): [(BoundRelu(name=/39, inputs=[/input]), 0)]
  BoundLinear(name=/input.19, inputs=[/47, /29, /30]): [(BoundRelu(name=/49, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.27, inputs=[/51, /33, /34]): [(BoundRelu(name=/53, inputs=[/input.27]), 0)]
Start solving intermediate bounds with MIP...
layer /39 using sparse-features alpha with shape [51]; unstable size 51; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 96 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 98 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using sparse-spec alpha with unstable size 145 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [96]; unstable size 96; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 98 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using sparse-spec alpha with unstable size 145 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [98]; unstable size 98; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using sparse-spec alpha with unstable size 145 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using sparse-features alpha with shape [145]; unstable size 145; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using full alpha with unstable size 188 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using full alpha with shape torch.Size([200]); unstable size 188; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2024-02-29
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_87', 'lay4_84', 'lay4_121', 'lay4_9', 'lay4_92', 'lay4_74', 'lay4_161', 'lay4_136', 'lay4_198', 'lay4_95', 'lay4_77', 'lay4_13', 'lay4_76', 'lay4_142', 'lay4_88', 'lay4_27', 'lay4_1', 'lay4_178', 'lay4_53', 'lay4_37', 'lay4_139', 'lay4_110', 'lay4_14', 'lay4_194', 'lay4_19', 'lay4_50', 'lay4_11', 'lay4_175', 'lay4_33', 'lay4_64', 'lay4_73', 'lay4_176', 'lay4_132', 'lay4_128', 'lay4_152', 'lay4_134', 'lay4_108', 'lay4_47', 'lay4_115', 'lay4_55', 'lay4_117', 'lay4_133', 'lay4_138', 'lay4_145', 'lay4_151', 'lay4_150', 'lay4_8', 'lay4_154', 'lay4_129', 'lay4_127', 'lay4_3', 'lay4_137', 'lay4_69', 'lay4_167', 'lay4_168', 'lay4_52', 'lay4_43', 'lay4_172', 'lay4_51', 'lay4_123', 'lay4_59', 'lay4_107', 'lay4_183', 'lay4_196', 'lay4_191', 'lay4_12', 'lay4_193', 'lay4_171', 'lay4_98', 'lay4_6', 'lay4_174', 'lay4_165', 'lay4_20', 'lay4_7', 'lay4_35', 'lay4_162', 'lay4_114', 'lay4_31', 'lay4_26', 'lay4_166', 'lay4_182', 'lay4_18', 'lay4_70', 'lay4_103', 'lay4_41', 'lay4_30', 'lay4_197', 'lay4_34', 'lay4_28', 'lay4_153', 'lay4_24', 'lay4_71'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/convert/model.py:154: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  "Using experimental implementation that allows 'batch_size > 1'."
Solving MIP for lay4_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0413s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_88, [-inf,inf]=>[-0.2356351281829501,0.4392077649719311] (2,-1; 2,-1), time: 4.7080s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_95, [-inf,inf]=>[-0.019763915639870944,0.6872396491179077] (2,-1; 2,-1), time: 5.2355s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.38225012662984287,0.2520778276906531] (2,-1; 2,-1), time: 5.8461s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_136, [-inf,inf]=>[-0.14657630470852706,0.529890930739141] (2,-1; 2,-1), time: 5.9912s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-0.5828158114204595,0.25637449374001675] (2,-1; 2,-1), time: 6.3621s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_77, [-inf,inf]=>[-0.5047011766036228,0.028440466733842505] (2,-1; 2,-1), time: 6.3923s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[-0.5452407263402275,0.09793930453879926] (2,-1; 2,-1), time: 7.0687s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_198, [-inf,inf]=>[-0.5780114010314872,0.11218493553835676] (2,-1; 2,-1), time: 7.2599s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_84, [-inf,inf]=>[-0.34551935954354107,0.36248006874604943] (2,-1; 2,-1), time: 7.3082s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7911s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-0.44252639735648824,0.1364885307507678] (2,-1; 2,-1), time: 6.9850s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-0.4012586173005828,0.21155582210918766] (2,-1; 2,-1), time: 8.3508s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5618s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_121, [-inf,inf]=>[-0.6272375127078561,0.03848920997843895] (2,-1; 2,-1), time: 8.5361s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4506s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[-0.283482037096513,0.3004454859793954] (2,-1; 2,-1), time: 9.0216s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[-0.24057991615270385,0.45533615629968127] (2,-1; 2,-1), time: 9.1045s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_161, [-inf,inf]=>[-0.3818119230723206,0.18050700248716867] (2,-1; 2,-1), time: 9.4153s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_139, [-inf,inf]=>[-0.18164804584323416,0.4278292485768622] (2,-1; 2,-1), time: 3.5097s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_128, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4578s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7426s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4564s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-0.6780737448932853,0.04169976838666724] (2,-1; 2,-1), time: 5.9986s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[-0.14507922294636694,0.5281099541919323] (2,-1; 2,-1), time: 6.2081s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_134, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1055s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0845s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_117, [-inf,inf]=>[-inf,-0.003940654908241498] (-1,-1; 2,-1), time: 1.6563s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_14, [-inf,inf]=>[-0.5349958039360789,0.017428298914525315] (2,-1; 2,-1), time: 6.7892s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[-0.47712639019406267,0.1894781486415377] (2,-1; 2,-1), time: 4.8018s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-0.2911781772545362,0.3066769688394486] (2,-1; 2,-1), time: 7.5376s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_175, [-inf,inf]=>[1e-05,0.6970182115205825] (15,-1; 2,-1), time: 5.4859s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4822s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_145, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9097s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_33, [-inf,inf]=>[-0.5160993467970375,0.3482336243924688] (2,-1; 2,-1), time: 6.0272s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_129, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9100s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_50, [-inf,inf]=>[-0.47303702645120715,0.18260375642517576] (2,-1; 2,-1), time: 7.4948s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_137, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3780s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_47, [-inf,inf]=>[-0.4003863771405151,0.24840116879551327] (2,-1; 2,-1), time: 5.3564s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_152, [-inf,inf]=>[-0.21799210900123003,0.5249978828745864] (2,-1; 2,-1), time: 5.9104s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_167, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4843s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7556s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-0.5053196344540846,0.10738405049843887] (9,-1; 2,-1), time: 17.2595s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4584s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_115, [-inf,inf]=>[-0.32026835773090173,0.1960000148576483] (2,-1; 2,-1), time: 7.8036s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4339s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.9833s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_138, [-inf,inf]=>[-0.4795318214405645,0.04582215248564688] (2,-1; 2,-1), time: 6.5804s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_107, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4382s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_133, [-inf,inf]=>[-0.1106735202821298,0.3811638817196346] (2,-1; 2,-1), time: 7.0127s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3964s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_154, [-inf,inf]=>[-0.6571689019824095,0.003813422957846138] (2,-1; 2,-1), time: 6.2693s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_8, [-inf,inf]=>[-0.38950886497408366,0.21048792704946126] (2,-1; 2,-1), time: 6.6444s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_191, [-inf,inf]=>[1e-05,0.8469944838773347] (15,-1; 2,-1), time: 2.5936s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_196, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.1263s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4256s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[-0.4053636727435136,0.1384298106708586] (2,-1; 2,-1), time: 6.6790s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4325s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_19, [-inf,inf]=>[-0.33916889780007115,0.307355115676156] (9,-1; 2,-1), time: 15.7472s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_151, [-inf,inf]=>[-0.07326153573281609,0.4884547832797274] (2,-1; 2,-1), time: 9.8542s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.0371s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_132, [-inf,inf]=>[-0.4458592748962092,0.12004725691072335] (2,-1; 2,-1), time: 14.5275s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.2110029716762981,0.33662294359669326] (2,-1; 2,-1), time: 8.2327s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_172, [-inf,inf]=>[-0.39462034528689105,0.1320651279793424] (2,-1; 2,-1), time: 8.2611s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_183, [-inf,inf]=>[-0.29002435098841134,0.2551616307452997] (2,-1; 2,-1), time: 6.0143s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_127, [-inf,inf]=>[-0.5489150242038876,0.10505720984742824] (2,-1; 2,-1), time: 10.4817s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_110, [-inf,inf]=>[-0.3521626147707647,0.186083525765502] (9,-1; 2,-1), time: 18.1870s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.9477s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[1e-05,0.7242533129531874] (15,-1; 2,-1), time: 3.7499s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[1e-05,0.6437271648398827] (15,-1; 2,-1), time: 9.7005s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_30, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4436s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_193, [-inf,inf]=>[-0.5542491088159347,0.11446547456371564] (2,-1; 2,-1), time: 9.3733s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[-0.48671093583672737,0.11653182811851846] (2,-1; 2,-1), time: 7.2231s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[1e-05,0.6423157157675949] (15,-1; 2,-1), time: 4.6089s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4600s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_114, [-inf,inf]=>[-0.07500690119144275,0.43083470546297176] (2,-1; 2,-1), time: 6.4900s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4715s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-0.15766743769967473,0.5165125311736163] (2,-1; 2,-1), time: 6.7573s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_171, [-inf,inf]=>[-0.04168985661016027,0.521460058022299] (2,-1; 2,-1), time: 10.0112s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4335s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_166, [-inf,inf]=>[1e-05,0.5796031062786765] (15,-1; 2,-1), time: 7.3857s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_182, [-inf,inf]=>[-0.20467668075984305,0.4893358772634297] (2,-1; 2,-1), time: 6.9898s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_7, [-inf,inf]=>[-0.5252136491753755,0.02444723306008674] (2,-1; 2,-1), time: 9.4894s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_153, [-inf,inf]=>[1e-05,0.9940345803993931] (15,-1; 2,-1), time: 2.7342s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_3, [-inf,inf]=>[-0.3025998231294561,0.2691729273874646] (9,-1; 2,-1), time: 17.6520s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-0.40231224198983506,0.3373526702080801] (2,-1; 2,-1), time: 7.6136s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_103, [-inf,inf]=>[-0.26254044277886335,0.30285552628439627] (2,-1; 2,-1), time: 7.8835s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_31, [-inf,inf]=>[-0.2171270106387012,0.29719786115780084] (2,-1; 2,-1), time: 9.4500s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_41, [-inf,inf]=>[-0.06347241692751711,0.544395919445211] (2,-1; 2,-1), time: 6.5161s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_35, [-inf,inf]=>[-0.535009083899134,0.02962628860934092] (2,-1; 2,-1), time: 11.8500s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_197, [-inf,inf]=>[-0.4164048118999995,0.18190865753986205] (2,-1; 2,-1), time: 7.8042s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-0.4795229295570202,0.1995553140955928] (2,-1; 2,-1), time: 7.4163s, #vars: 1287, #constrs: 553, improved: True
PGD done for relu layer 2
MIP improved 92 nodes out of 92 unstable nodes, lb improved 15.46573257446289, ub improved 15.36574649810791, time 38.1379
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_10', 'lay6_190', 'lay6_8', 'lay6_159', 'lay6_61', 'lay6_160', 'lay6_62', 'lay6_172', 'lay6_167', 'lay6_124', 'lay6_111', 'lay6_18', 'lay6_179', 'lay6_35', 'lay6_101', 'lay6_139', 'lay6_154', 'lay6_21', 'lay6_192', 'lay6_88', 'lay6_118', 'lay6_55', 'lay6_90', 'lay6_110', 'lay6_31', 'lay6_144', 'lay6_49', 'lay6_145', 'lay6_123', 'lay6_106', 'lay6_65', 'lay6_44', 'lay6_115', 'lay6_105', 'lay6_76', 'lay6_24', 'lay6_78', 'lay6_13', 'lay6_3', 'lay6_116', 'lay6_130', 'lay6_17', 'lay6_4', 'lay6_63', 'lay6_20', 'lay6_146', 'lay6_98', 'lay6_135', 'lay6_83', 'lay6_74', 'lay6_9', 'lay6_42', 'lay6_69', 'lay6_168', 'lay6_43', 'lay6_156', 'lay6_108', 'lay6_109', 'lay6_12', 'lay6_41', 'lay6_136', 'lay6_103', 'lay6_163', 'lay6_199', 'lay6_27', 'lay6_29', 'lay6_153', 'lay6_122', 'lay6_47', 'lay6_16', 'lay6_119', 'lay6_165', 'lay6_169', 'lay6_158', 'lay6_94', 'lay6_52', 'lay6_5', 'lay6_121', 'lay6_175', 'lay6_162', 'lay6_198', 'lay6_28', 'lay6_138', 'lay6_81', 'lay6_46', 'lay6_53', 'lay6_180', 'lay6_54', 'lay6_40', 'lay6_15', 'lay6_188', 'lay6_73', 'lay6_82'] filter: 1.0
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6046s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8154s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5849s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_179, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6345s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8874s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0733s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2895s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6598s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_159, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8167s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5148s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6066s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5074s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_145, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.1183s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4939s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.9499s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_111, [-inf,inf]=>[-0.5892932087740307,0.16763128761974436] (9,-1; 9,-1), time: 30.0151s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-0.7023907544172021,0.029858228166677395] (9,-1; 9,-1), time: 30.0170s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-0.818748128143405,0.020591975004573965] (9,-1; 9,-1), time: 30.0284s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.6155361363928544,0.06041393353030079] (9,-1; 9,-1), time: 30.0342s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-0.817154983173009,0.06070038656281027] (9,-1; 9,-1), time: 30.0399s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.7443913914601993,0.17466128939935938] (9,-1; 9,-1), time: 30.0526s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.2882073414195809,0.363889707004208] (9,-1; 9,-1), time: 30.0803s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_172, [-inf,inf]=>[-0.5471117458295162,0.08722884172372852] (9,-1; 9,-1), time: 30.1270s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.5285179973944285,0.24426365442537554] (9,-1; 9,-1), time: 30.3773s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5411s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_154, [-inf,inf]=>[-0.7035434839787624,0.011586349906673102] (9,-1; 9,-1), time: 30.0795s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_115, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6871s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7090s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_116, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6023s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_130, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5173s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1292s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5984s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3965s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8272s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-0.23120306430382231,0.46636243947697764] (9,-1; 9,-1), time: 30.0330s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6299s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-0.6652141755894121,0.002564626491982581] (9,-1; 9,-1), time: 30.0207s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3788s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-0.22486476117815565,0.37737740246974316] (9,-1; 9,-1), time: 30.0997s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6489s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5085s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2730s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5119s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3019s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_31, [-inf,inf]=>[-0.25465456183902996,0.36200712362230886] (9,-1; 9,-1), time: 30.0181s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6326s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5087s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[-0.718763953878817,0.05322391742130639] (9,-1; 9,-1), time: 30.0548s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5188s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4774s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6331s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5684s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5837s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.8561s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5259s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4296s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5854s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.4985s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_119, [-inf,inf]=>[1e-05,0.9597608550691167] (15,-1; 9,-1), time: 15.5328s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-0.10046894050987182,0.44336686160466504] (9,-1; 9,-1), time: 30.0455s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5181s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[1e-05,0.9153682155572948] (15,-1; 9,-1), time: 25.2175s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-0.15751605473462413,0.37958031314243157] (9,-1; 9,-1), time: 30.0183s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-0.3256010365089367,0.3551060543612206] (9,-1; 9,-1), time: 30.2009s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_158, [-inf,inf]=>[1e-05,0.8025666233805924] (15,-1; 9,-1), time: 15.5861s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6563s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[-0.3504489971992093,0.3016479796489422] (9,-1; 9,-1), time: 30.0381s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2209s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-0.382010270974349,0.19289980773602694] (9,-1; 9,-1), time: 30.0244s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6278s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.0631607250057653,0.6079441136555068] (9,-1; 9,-1), time: 30.0188s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-0.4552090986795568,0.20366154615464815] (9,-1; 9,-1), time: 30.0426s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_109, [-inf,inf]=>[-0.17932904061201269,0.5779245092010405] (9,-1; 9,-1), time: 30.0151s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_103, [-inf,inf]=>[-0.4424678223160171,0.22156544974825787] (9,-1; 9,-1), time: 30.0225s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-0.3361741021191342,0.40275538623748997] (9,-1; 9,-1), time: 30.0134s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-0.5805721293263528,0.03280478685378247] (9,-1; 9,-1), time: 30.0154s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6543s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5536s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_153, [-inf,inf]=>[-0.7628159532286911,0.06713455624566916] (9,-1; 9,-1), time: 30.4006s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[1e-05,1.0113305201619067] (15,-1; 9,-1), time: 15.5300s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-0.1684237668297788,0.4044084826997746] (9,-1; 9,-1), time: 30.3781s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[1e-05,1.0497528584676765] (15,-1; 9,-1), time: 15.6332s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[1e-05,0.8090662701225027] (15,-1; 9,-1), time: 15.5766s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[1e-05,1.371203439834352] (15,-1; 9,-1), time: 15.5376s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[1e-05,0.8812017756881607] (15,-1; 9,-1), time: 15.6015s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[1e-05,1.4462378908658164] (15,-1; 9,-1), time: 15.4765s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[1e-05,0.9938832679108607] (15,-1; 9,-1), time: 15.5853s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-0.20047720486644185,0.5038107872793391] (9,-1; 9,-1), time: 30.1327s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[-0.46381762927173026,0.1960273067458196] (9,-1; 9,-1), time: 30.0391s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-0.1336102082623652,0.49205840224373776] (9,-1; 9,-1), time: 30.1376s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_180, [-inf,inf]=>[-0.3352200222459311,0.4093590232027688] (9,-1; 9,-1), time: 30.0530s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_188, [-inf,inf]=>[-0.21685187133057784,0.3586608183488381] (9,-1; 9,-1), time: 30.0334s, #vars: 1597, #constrs: 918, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-0.1780424176375248,0.5193790667351454] (9,-1; 9,-1), time: 30.3763s, #vars: 1597, #constrs: 918, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(142, -1), (194, -1), (11, -1), (175, 1), (73, -1), (176, -1), (128, -1), (134, -1), (108, -1), (55, -1), (117, -1), (145, -1), (150, -1), (129, -1), (137, -1), (69, -1), (167, -1), (52, -1), (51, -1), (123, -1), (59, 1), (107, -1), (196, -1), (191, 1), (12, -1), (98, -1), (6, -1), (165, -1), (20, -1), (26, 1), (166, 1), (18, 1), (30, -1), (28, -1), (153, 1), (24, -1), (71, -1)]
best_l after optimization: -36.45793914794922
beta sum per layer: []
alpha/beta optimization time: 16.717045783996582
alpha-CROWN with intermediate bounds by MIP: tensor([[-3.36534786, -3.01679230, -2.51187134, -4.46298790, -5.10020924,
         -4.28201294, -3.89449024, -4.23429394, -5.58993340]], device='cuda:0') None
MIP improved 93 nodes out of 93 unstable nodes, lb improved 19.540136337280273, ub improved 29.782482147216797, time 94.8558
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_162', 'lay8_100', 'lay8_37', 'lay8_193', 'lay8_176', 'lay8_184', 'lay8_181', 'lay8_160', 'lay8_28', 'lay8_40', 'lay8_91', 'lay8_186', 'lay8_60', 'lay8_76', 'lay8_167', 'lay8_22', 'lay8_130', 'lay8_137', 'lay8_71', 'lay8_171', 'lay8_15', 'lay8_119', 'lay8_29', 'lay8_149', 'lay8_39', 'lay8_121', 'lay8_154', 'lay8_159', 'lay8_156', 'lay8_131', 'lay8_99', 'lay8_20', 'lay8_105', 'lay8_102', 'lay8_101', 'lay8_185', 'lay8_125', 'lay8_4', 'lay8_1', 'lay8_150', 'lay8_21', 'lay8_170', 'lay8_133', 'lay8_190', 'lay8_35', 'lay8_49', 'lay8_90', 'lay8_103', 'lay8_14', 'lay8_163', 'lay8_145', 'lay8_155', 'lay8_98', 'lay8_192', 'lay8_11', 'lay8_79', 'lay8_140', 'lay8_70', 'lay8_172', 'lay8_114', 'lay8_128', 'lay8_51', 'lay8_168', 'lay8_151', 'lay8_84', 'lay8_129', 'lay8_117', 'lay8_30', 'lay8_111', 'lay8_96', 'lay8_83', 'lay8_68', 'lay8_118', 'lay8_198', 'lay8_81', 'lay8_36', 'lay8_153', 'lay8_124', 'lay8_47', 'lay8_97', 'lay8_64', 'lay8_87', 'lay8_92', 'lay8_134', 'lay8_173', 'lay8_123', 'lay8_142', 'lay8_16', 'lay8_13', 'lay8_7', 'lay8_115', 'lay8_75', 'lay8_33', 'lay8_59', 'lay8_46', 'lay8_187', 'lay8_78', 'lay8_17', 'lay8_126', 'lay8_53', 'lay8_54', 'lay8_174', 'lay8_157', 'lay8_25', 'lay8_63', 'lay8_57', 'lay8_178', 'lay8_27', 'lay8_158', 'lay8_135', 'lay8_82', 'lay8_196', 'lay8_55', 'lay8_85', 'lay8_164', 'lay8_112', 'lay8_120', 'lay8_180', 'lay8_113', 'lay8_58', 'lay8_165', 'lay8_43', 'lay8_95', 'lay8_177', 'lay8_194', 'lay8_2', 'lay8_107', 'lay8_169', 'lay8_110', 'lay8_26', 'lay8_144', 'lay8_122', 'lay8_86', 'lay8_32'] filter: 1.0
Solving MIP for lay8_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7569s, #vars: 1865, #constrs: 1220, improved: True
Solving MIP for lay8_181, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7643s, #vars: 1865, #constrs: 1220, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7654s, #vars: 1865, #constrs: 1220, improved: True
Solving MIP for lay8_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7654s, #vars: 1865, #constrs: 1220, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7804s, #vars: 1865, #constrs: 1220, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7978s, #vars: 1865, #constrs: 1220, improved: True
Solving MIP for lay8_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8184s, #vars: 1865, #constrs: 1220, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8567s, #vars: 1865, #constrs: 1220, improved: True
Solving MIP for lay8_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9097s, #vars: 1865, #constrs: 1220, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(190, -1), (159, -1), (160, -1), (179, -1), (35, -1), (101, -1), (139, -1), (21, -1), (88, -1), (90, -1), (144, -1), (49, -1), (145, -1), (123, -1), (106, -1), (44, -1), (115, -1), (105, -1), (76, -1), (24, -1), (13, -1), (116, -1), (130, -1), (17, -1), (4, -1), (63, -1), (146, -1), (98, -1), (83, -1), (74, -1), (9, -1), (42, -1), (168, -1), (43, -1), (108, -1), (12, -1), (41, -1), (136, -1), (27, 1), (29, -1), (122, -1), (47, -1), (16, -1), (119, 1), (165, -1), (158, 1), (94, 1), (52, -1), (121, 1), (175, -1), (162, -1), (198, -1), (81, 1), (46, 1), (53, 1), (54, -1), (40, -1), (73, 1), (82, 1)]

all verified at 0th iter
best_l after optimization: 52.95953369140625
beta sum per layer: []
alpha/beta optimization time: 0.08994579315185547
alpha-CROWN with intermediate bounds by MIP: tensor([[6.83311796, 6.46144390, 6.85354090, 6.32453346, 5.27546787, 5.85331059,
         4.38044882, 5.24567890, 5.73199368]], device='cuda:0') None
min of alpha-CROWN bounds 4.380448818206787>=0, verified!
MIP finished with 139.58799958229065s
Run final alpha-CROWN after MIP solving on layer 7 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: 52.95953369140625
beta sum per layer: []
alpha/beta optimization time: 0.08250164985656738
alpha-CROWN with intermediate bounds improved by MIP: tensor([[6.83311796, 6.46144390, 6.85354090, 6.32453346, 5.27546787, 5.85331059,
         4.38044882, 5.24567890, 5.73199368]], device='cuda:0') None
Split layers:
  BoundLinear(name=/input.15, inputs=[/45, /27, /28]): [(BoundRelu(name=/47, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.23, inputs=[/49, /31, /32]): [(BoundRelu(name=/51, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.7, inputs=[/41, /23, /24]): [(BoundRelu(name=/43, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.3, inputs=[/39, /21, /22]): [(BoundRelu(name=/41, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.11, inputs=[/43, /25, /26]): [(BoundRelu(name=/45, inputs=[/input.11]), 0)]
  BoundLinear(name=/input, inputs=[/37, /19, /20]): [(BoundRelu(name=/39, inputs=[/input]), 0)]
  BoundLinear(name=/input.19, inputs=[/47, /29, /30]): [(BoundRelu(name=/49, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.27, inputs=[/51, /33, /34]): [(BoundRelu(name=/53, inputs=[/input.27]), 0)]
refined global lb: tensor([[6.83311796],
        [6.46144390],
        [6.85354090],
        [6.32453346],
        [5.27546787],
        [5.85331059],
        [4.38044882],
        [5.24567890],
        [5.73199368]], device='cuda:0') min: tensor(4.38044882, device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
Result: safe-incomplete-refine in 162.8066 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):162.80493985793478, max time: 162.80656790733337
mean time for verified SAFE instances(total 1): 162.80656790733337, max time: 162.80656790733337
safe-incomplete-refine (total 1), index: [0]
