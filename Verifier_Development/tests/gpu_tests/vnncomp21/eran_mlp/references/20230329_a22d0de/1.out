Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: eran_instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2021/benchmarks/eran
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: 'remove_ineffective_layers, remove_relu_in_last_layer'
data:
  start: 5
  end: 6
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 500
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 13:40:29 2023 on zeratul
customized start/end sample from instance 5 to 6 in eran_instances.csv
Internal results will be saved to a-b-crown_[eran_instances]_start=5_end=6_iter=20_b=500_timeout=360_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_initial_max_domains=1.npz.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx nets/mnist_relu_9_200.onnx
Using vnnlib specs/mnist/mnist_spec_idx_2317_eps_0.01500.vnnlib
Precompiled vnnlib file found at ../../vnncomp2021/benchmarks/eran/specs/mnist/mnist_spec_idx_2317_eps_0.01500.vnnlib.compiled
Loading onnx ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx wih quirks {}
Onnx optimization with flag: remove_ineffective_layers, remove_relu_in_last_layer
Found existed optimized onnx model at ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx.optimized
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750000149011612, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.92660332, -0.14813057, -0.09978302,  1.60933089, -1.32460463,
         -1.72492540, -4.07398558,  7.23561764, -1.05326903,  2.85716391]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.62932968, -0.26645511, -0.21799642,  1.44977689, -1.08159101,
          -1.58631575, -3.68969655,  6.48447037, -0.97897124,  2.89782500],
         [-2.62932968, -0.26645511, -0.21799642,  1.44977689, -1.08159101,
          -1.58631575, -3.68969655,  6.48447037, -0.97897124,  2.89782500]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 9.11380005,  6.75092554,  6.70246696,  5.03469372,  7.56606150,
           8.07078648, 10.17416668,  7.46344185,  3.58664536]]],
       device='cuda:0')
number of violation:  0
Attack finished in 2.2315 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/19): BoundParams(name=/19, inputs=[])
  (/20): BoundParams(name=/20, inputs=[])
  (/21): BoundParams(name=/21, inputs=[])
  (/22): BoundParams(name=/22, inputs=[])
  (/23): BoundParams(name=/23, inputs=[])
  (/24): BoundParams(name=/24, inputs=[])
  (/25): BoundParams(name=/25, inputs=[])
  (/26): BoundParams(name=/26, inputs=[])
  (/27): BoundParams(name=/27, inputs=[])
  (/28): BoundParams(name=/28, inputs=[])
  (/29): BoundParams(name=/29, inputs=[])
  (/30): BoundParams(name=/30, inputs=[])
  (/31): BoundParams(name=/31, inputs=[])
  (/32): BoundParams(name=/32, inputs=[])
  (/33): BoundParams(name=/33, inputs=[])
  (/34): BoundParams(name=/34, inputs=[])
  (/35): BoundParams(name=/35, inputs=[])
  (/36): BoundParams(name=/36, inputs=[])
  (/37): BoundFlatten(name=/37, inputs=[/0])
  (/input): BoundLinear(name=/input, inputs=[/37, /19, /20])
  (/39): BoundRelu(name=/39, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/39, /21, /22])
  (/41): BoundRelu(name=/41, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/41, /23, /24])
  (/43): BoundRelu(name=/43, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/43, /25, /26])
  (/45): BoundRelu(name=/45, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/45, /27, /28])
  (/47): BoundRelu(name=/47, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/47, /29, /30])
  (/49): BoundRelu(name=/49, inputs=[/input.19])
  (/input.23): BoundLinear(name=/input.23, inputs=[/49, /31, /32])
  (/51): BoundRelu(name=/51, inputs=[/input.23])
  (/input.27): BoundLinear(name=/input.27, inputs=[/51, /33, /34])
  (/53): BoundRelu(name=/53, inputs=[/input.27])
  (/54): BoundLinear(name=/54, inputs=[/53, /35, /36])
)
Model prediction is: tensor([[-2.92660332, -0.14813057, -0.09978302,  1.60933089, -1.32460463,
         -1.72492540, -4.07398558,  7.23561764, -1.05326903,  2.85716391]],
       device='cuda:0')
layer /39 using sparse-features alpha with shape [44]; unstable size 44; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 61 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 58 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using sparse-spec alpha with unstable size 76 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using sparse-spec alpha with unstable size 127 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [61]; unstable size 61; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 58 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using sparse-spec alpha with unstable size 76 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using sparse-spec alpha with unstable size 127 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [58]; unstable size 58; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using sparse-spec alpha with unstable size 76 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using sparse-spec alpha with unstable size 127 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using sparse-features alpha with shape [76]; unstable size 76; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using sparse-spec alpha with unstable size 127 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using sparse-features alpha with shape [127]; unstable size 127; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 187; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-160.19696045, -203.88697815, -237.49577332, -255.54281616,
         -222.65800476, -221.27027893, -245.45857239, -149.72360229,
         -168.54861450]], device='cuda:0') None
best_l after optimization: -944.94921875
alpha/beta optimization time: 15.516623258590698
initial alpha-CROWN bounds: tensor([[ -76.93245697, -104.40837860, -121.84757996, -130.93678284,
         -111.79932404, -113.46398163, -123.29185486,  -74.40959167,
          -87.85922241]], device='cuda:0')
Worst class: (+ rhs) -130.93678283691406
Split layers:
  BoundLinear(name=/input.3, inputs=[/39, /21, /22]): [(BoundRelu(name=/41, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.19, inputs=[/47, /29, /30]): [(BoundRelu(name=/49, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.11, inputs=[/43, /25, /26]): [(BoundRelu(name=/45, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.7, inputs=[/41, /23, /24]): [(BoundRelu(name=/43, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.23, inputs=[/49, /31, /32]): [(BoundRelu(name=/51, inputs=[/input.23]), 0)]
  BoundLinear(name=/input, inputs=[/37, /19, /20]): [(BoundRelu(name=/39, inputs=[/input]), 0)]
  BoundLinear(name=/input.27, inputs=[/51, /33, /34]): [(BoundRelu(name=/53, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.15, inputs=[/45, /27, /28]): [(BoundRelu(name=/47, inputs=[/input.15]), 0)]
Start solving intermediate bounds with MIP...
layer /39 using sparse-features alpha with shape [44]; unstable size 44; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 61 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 58 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using sparse-spec alpha with unstable size 76 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using sparse-spec alpha with unstable size 127 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [61]; unstable size 61; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 58 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using sparse-spec alpha with unstable size 76 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using sparse-spec alpha with unstable size 127 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [58]; unstable size 58; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using sparse-spec alpha with unstable size 76 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using sparse-spec alpha with unstable size 127 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using sparse-features alpha with shape [76]; unstable size 76; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using sparse-spec alpha with unstable size 127 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using sparse-features alpha with shape [127]; unstable size 127; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 187 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 187; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2024-02-29
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_23', 'lay4_171', 'lay4_158', 'lay4_187', 'lay4_89', 'lay4_120', 'lay4_15', 'lay4_64', 'lay4_54', 'lay4_86', 'lay4_195', 'lay4_108', 'lay4_124', 'lay4_174', 'lay4_112', 'lay4_177', 'lay4_155', 'lay4_114', 'lay4_52', 'lay4_186', 'lay4_117', 'lay4_159', 'lay4_57', 'lay4_44', 'lay4_172', 'lay4_42', 'lay4_133', 'lay4_79', 'lay4_104', 'lay4_88', 'lay4_87', 'lay4_74', 'lay4_173', 'lay4_137', 'lay4_188', 'lay4_1', 'lay4_56', 'lay4_150', 'lay4_82', 'lay4_72', 'lay4_0', 'lay4_12', 'lay4_62', 'lay4_17', 'lay4_39', 'lay4_47', 'lay4_152', 'lay4_139', 'lay4_163', 'lay4_75', 'lay4_53', 'lay4_77', 'lay4_144', 'lay4_156', 'lay4_76', 'lay4_131', 'lay4_95', 'lay4_157', 'lay4_134', 'lay4_161'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/convert/model.py:154: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  "Using experimental implementation that allows 'batch_size > 1'."
Solving MIP for lay4_108, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3974s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_89, [-inf,inf]=>[1e-05,0.7259684690765111] (15,-1; 2,-1), time: 2.4701s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_124, [-inf,inf]=>[1e-05,0.8362295639646544] (15,-1; 2,-1), time: 2.5948s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[1e-05,0.713225442271162] (15,-1; 2,-1), time: 2.9066s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_158, [-inf,inf]=>[-0.6732424585422013,0.18941562216663382] (2,-1; 2,-1), time: 3.1961s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[-0.2953397634194104,0.40910184981692727] (2,-1; 2,-1), time: 3.5389s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-0.2729443827440786,0.16743477637343163] (2,-1; 2,-1), time: 4.2279s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_120, [-inf,inf]=>[-0.13986948538512411,0.5312661276264545] (2,-1; 2,-1), time: 4.3601s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[-0.6436853712115292,0.048920226997253694] (2,-1; 2,-1), time: 4.3755s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-0.17229800275238258,0.48717152430725386] (2,-1; 2,-1), time: 4.5115s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_195, [-inf,inf]=>[-0.44810478096442075,0.21007391502852502] (2,-1; 2,-1), time: 4.5803s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-0.5095689728587973,0.0930899674699575] (2,-1; 2,-1), time: 4.6523s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_23, [-inf,inf]=>[-0.3833700880365678,0.3553879424811835] (2,-1; 2,-1), time: 4.7279s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[-0.21721969997313412,0.47540260301965664] (2,-1; 2,-1), time: 5.0344s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4011s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7067s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_171, [-inf,inf]=>[-0.4862578430103511,0.3058000970351732] (2,-1; 2,-1), time: 5.2225s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[1e-05,1.1894983645025843] (15,-1; 2,-1), time: 0.9523s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4698s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_177, [-inf,inf]=>[-0.31436923083315044,0.23232374977303782] (2,-1; 2,-1), time: 5.7482s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4124s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3966s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.0181s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_173, [-inf,inf]=>[1e-05,0.8456909130350374] (15,-1; 2,-1), time: 1.5060s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_186, [-inf,inf]=>[-0.24491571732448197,0.4804232272130846] (2,-1; 2,-1), time: 3.8706s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8131s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_72, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3494s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_117, [-inf,inf]=>[-0.5744477570791146,0.05874263417185542] (2,-1; 2,-1), time: 4.1873s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0723s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_172, [-inf,inf]=>[-0.33664416943934844,0.2272809127059779] (2,-1; 2,-1), time: 3.7207s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_155, [-inf,inf]=>[-0.41276499358944574,0.15946278550962747] (2,-1; 2,-1), time: 6.7387s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4445s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.4020901695219334,0.05681351183707545] (2,-1; 2,-1), time: 5.8961s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[1e-05,0.8273692865131458] (15,-1; 2,-1), time: 2.0273s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_159, [-inf,inf]=>[-0.5015679874307177,0.10315795556840673] (2,-1; 2,-1), time: 5.0101s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_17, [-inf,inf]=>[-0.5100870375758594,0.18825585561786048] (2,-1; 2,-1), time: 1.5568s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.40729023790000185,0.14507368305654375] (2,-1; 2,-1), time: 4.9114s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_88, [-inf,inf]=>[-0.09289624681024602,0.6441425853035374] (2,-1; 2,-1), time: 4.1618s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_152, [-inf,inf]=>[1e-05,1.0805424431215203] (15,-1; 2,-1), time: 1.1704s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-0.47372828944039935,0.026790642644538856] (2,-1; 2,-1), time: 4.8173s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_56, [-inf,inf]=>[-0.26493975373767875,0.2622648833808878] (2,-1; 2,-1), time: 4.4031s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_74, [-inf,inf]=>[-0.0804094572682988,0.543962730602361] (2,-1; 2,-1), time: 5.5196s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[1e-05,0.7105620997171085] (15,-1; 2,-1), time: 2.2226s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.241396875996426,0.33647302053671646] (2,-1; 2,-1), time: 3.9091s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_134, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3735s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7600s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_161, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4711s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_137, [-inf,inf]=>[-0.513049171615488,0.08593341978107057] (2,-1; 2,-1), time: 5.9451s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_144, [-inf,inf]=>[1e-05,0.7828745826403172] (15,-1; 2,-1), time: 2.3096s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_133, [-inf,inf]=>[-0.41846415797931313,0.04364805460759914] (2,-1; 2,-1), time: 7.0379s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_95, [-inf,inf]=>[-0.05065374523564706,0.757851037386286] (2,-1; 2,-1), time: 1.3821s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_47, [-inf,inf]=>[-0.6460909995579571,0.14576528403801844] (2,-1; 2,-1), time: 3.8432s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_75, [-inf,inf]=>[-0.24371290392478087,0.4100241787450476] (2,-1; 2,-1), time: 3.5492s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_77, [-inf,inf]=>[1e-05,0.638431264361403] (15,-1; 2,-1), time: 3.1602s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_156, [-inf,inf]=>[-0.22011590168990972,0.3326194300092288] (2,-1; 2,-1), time: 3.5065s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_131, [-inf,inf]=>[1e-05,0.6601554368340137] (15,-1; 2,-1), time: 3.2512s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_62, [-inf,inf]=>[-0.46103510582366664,0.10741764703321731] (2,-1; 2,-1), time: 6.1517s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_163, [-inf,inf]=>[-0.44454493326463296,0.15608162991282448] (2,-1; 2,-1), time: 4.9591s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.6586247877990706,0.041391840212331193] (2,-1; 2,-1), time: 4.2029s, #vars: 1273, #constrs: 532, improved: True
Solving MIP for lay4_139, [-inf,inf]=>[-0.35510256745395014,0.2480436012657205] (2,-1; 2,-1), time: 5.7335s, #vars: 1273, #constrs: 532, improved: True
PGD done for relu layer 2
MIP improved 60 nodes out of 60 unstable nodes, lb improved 9.985706329345703, ub improved 9.29245662689209, time 16.4863
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_190', 'lay6_53', 'lay6_162', 'lay6_8', 'lay6_73', 'lay6_161', 'lay6_143', 'lay6_22', 'lay6_18', 'lay6_28', 'lay6_71', 'lay6_9', 'lay6_102', 'lay6_7', 'lay6_60', 'lay6_75', 'lay6_34', 'lay6_2', 'lay6_10', 'lay6_13', 'lay6_20', 'lay6_17', 'lay6_40', 'lay6_94', 'lay6_125', 'lay6_35', 'lay6_183', 'lay6_194', 'lay6_98', 'lay6_197', 'lay6_122', 'lay6_160', 'lay6_27', 'lay6_95', 'lay6_101', 'lay6_86', 'lay6_155', 'lay6_144', 'lay6_110', 'lay6_21', 'lay6_186', 'lay6_146', 'lay6_69', 'lay6_64', 'lay6_90', 'lay6_124', 'lay6_123', 'lay6_177', 'lay6_29', 'lay6_132', 'lay6_172', 'lay6_74', 'lay6_135', 'lay6_148', 'lay6_61', 'lay6_41', 'lay6_107', 'lay6_51'] filter: 1.0
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6289s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1236s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1453s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_161, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2479s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5054s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5781s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6219s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1890s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2515s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5753s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4490s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.7239s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5933s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[1e-05,1.4225331820385134] (15,-1; 2,-1), time: 6.5025s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.5001s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3575s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6385s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[1e-05,0.7527689734375775] (15,-1; 2,-1), time: 8.6975s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5546s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5152s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_183, [-inf,inf]=>[1e-05,1.4090643340536548] (15,-1; 2,-1), time: 6.3062s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5798s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5241s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6431s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5956s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.2260105655845322,0.689379416892541] (2,-1; 2,-1), time: 13.2584s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[1e-05,0.853725415620749] (15,-1; 9,-1), time: 16.0644s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[1e-05,1.0064762292704053] (15,-1; 2,-1), time: 14.4790s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[1e-05,0.9993604853998798] (15,-1; 9,-1), time: 16.4482s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-0.6152820262270887,0.13115022721474154] (2,-1; 2,-1), time: 18.6128s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-0.30703763397731415,0.3128829536787602] (2,-1; 2,-1), time: 23.5307s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-0.3787169271766499,0.1861659541047883] (9,-1; 2,-1), time: 23.5476s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.36482734761881336,0.1798124448589822] (9,-1; 2,-1), time: 23.8416s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_177, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9840s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-0.21856493715516565,0.4875312604105772] (2,-1; 2,-1), time: 21.6336s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5551s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-0.2702946727975822,0.7304035169891293] (2,-1; 2,-1), time: 17.4231s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5434s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_155, [-inf,inf]=>[1e-05,1.0777937852722754] (15,-1; 9,-1), time: 15.6242s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[1e-05,0.998821977312964] (15,-1; 2,-1), time: 12.0487s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4982s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_107, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5000s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4567s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-0.21095003134142934,0.4820484797510192] (9,-1; 9,-1), time: 30.0235s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-0.4675204279762251,0.011732646289013885] (9,-1; 9,-1), time: 30.0195s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[1e-05,1.111623606529204] (15,-1; 2,-1), time: 7.6545s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_172, [-inf,inf]=>[1e-05,1.1546752666121733] (15,-1; 2,-1), time: 6.6921s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[1e-05,1.054190419848118] (15,-1; 9,-1), time: 15.5268s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[-0.049028727299154945,0.5115649558149197] (9,-1; 2,-1), time: 24.6860s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_197, [-inf,inf]=>[-0.1214217625683552,0.3918577586377233] (9,-1; 2,-1), time: 26.3282s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-0.4075823694408635,0.13795065930391323] (9,-1; 2,-1), time: 21.2880s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-0.6217650784082066,0.08743889967167853] (2,-1; 9,-1), time: 20.4841s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[-0.5288866468874974,0.0034473150724923115] (9,-1; 9,-1), time: 30.0176s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[1e-05,0.6225917074742333] (15,-1; 2,-1), time: 18.7442s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-0.36231405789667426,0.1288804090490714] (9,-1; 2,-1), time: 22.2102s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.13443100740241104,0.39492734796027423] (9,-1; 9,-1), time: 30.0971s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-0.4642348970555474,0.06576120801407404] (9,-1; 2,-1), time: 23.3996s, #vars: 1543, #constrs: 837, improved: True
Solving MIP for lay6_148, [-inf,inf]=>[-0.16502602319885945,0.3803865021225065] (2,-1; 9,-1), time: 25.6046s, #vars: 1543, #constrs: 837, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(89, 1), (108, -1), (124, 1), (112, 1), (114, -1), (44, -1), (42, 1), (79, -1), (87, -1), (173, 1), (188, -1), (1, -1), (150, -1), (82, 1), (72, -1), (0, -1), (39, -1), (152, 1), (53, 1), (77, 1), (144, 1), (131, 1), (157, -1), (134, -1), (161, -1)]
best_l after optimization: -2.6958165168762207
beta sum per layer: []
alpha/beta optimization time: 17.0712730884552
alpha-CROWN with intermediate bounds by MIP: tensor([[ 1.62313318,  0.11217260, -1.05828619, -3.30969715,  0.92354155,
         -0.18311214,  2.08044910, -0.14544058, -2.73857689]], device='cuda:0') None
MIP improved 58 nodes out of 58 unstable nodes, lb improved 9.745140075683594, ub improved 14.882229804992676, time 52.7184
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_155', 'lay8_18', 'lay8_181', 'lay8_147', 'lay8_90', 'lay8_84', 'lay8_197', 'lay8_119', 'lay8_80', 'lay8_160', 'lay8_23', 'lay8_98', 'lay8_43', 'lay8_61', 'lay8_82', 'lay8_117', 'lay8_137', 'lay8_139', 'lay8_99', 'lay8_161', 'lay8_174', 'lay8_180', 'lay8_118', 'lay8_62', 'lay8_11', 'lay8_48', 'lay8_89', 'lay8_53', 'lay8_183', 'lay8_70', 'lay8_163', 'lay8_75', 'lay8_105', 'lay8_57', 'lay8_87', 'lay8_184', 'lay8_199', 'lay8_173', 'lay8_149', 'lay8_159', 'lay8_22', 'lay8_20', 'lay8_40', 'lay8_106', 'lay8_91', 'lay8_78', 'lay8_100', 'lay8_192', 'lay8_124', 'lay8_65', 'lay8_127', 'lay8_4', 'lay8_162', 'lay8_193', 'lay8_27', 'lay8_169', 'lay8_51', 'lay8_35', 'lay8_189', 'lay8_131', 'lay8_126', 'lay8_132', 'lay8_123', 'lay8_129', 'lay8_170', 'lay8_103', 'lay8_121', 'lay8_120', 'lay8_56', 'lay8_52', 'lay8_9', 'lay8_85'] filter: 1.0
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6649s, #vars: 1779, #constrs: 1091, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7053s, #vars: 1779, #constrs: 1091, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7600s, #vars: 1779, #constrs: 1091, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7925s, #vars: 1779, #constrs: 1091, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(53, -1), (161, -1), (143, -1), (22, -1), (18, -1), (28, 1), (71, 1), (9, -1), (60, 1), (75, -1), (34, 1), (2, -1), (13, -1), (20, -1), (17, -1), (40, 1), (94, -1), (35, -1), (183, 1), (194, -1), (98, -1), (122, -1), (95, -1), (101, -1), (86, -1), (155, 1), (144, -1), (110, -1), (21, -1), (69, 1), (90, 1), (123, 1), (177, -1), (132, -1), (172, 1), (74, -1), (61, 1), (41, -1), (107, -1), (51, -1)]

all verified at 0th iter
best_l after optimization: 39.019710540771484
beta sum per layer: []
alpha/beta optimization time: 0.09256482124328613
alpha-CROWN with intermediate bounds by MIP: tensor([[6.17690611, 4.29692173, 3.73793817, 1.58513212, 5.24208212, 5.02035666,
         7.38205528, 4.24646759, 1.33185196]], device='cuda:0') None
min of alpha-CROWN bounds 1.3318519592285156>=0, verified!
MIP finished with 76.15001583099365s
Run final alpha-CROWN after MIP solving on layer 7 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: 39.019710540771484
beta sum per layer: []
alpha/beta optimization time: 0.08563923835754395
alpha-CROWN with intermediate bounds improved by MIP: tensor([[6.17690611, 4.29692173, 3.73793817, 1.58513212, 5.24208212, 5.02035666,
         7.38205528, 4.24646759, 1.33185196]], device='cuda:0') None
Split layers:
  BoundLinear(name=/input.3, inputs=[/39, /21, /22]): [(BoundRelu(name=/41, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.19, inputs=[/47, /29, /30]): [(BoundRelu(name=/49, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.11, inputs=[/43, /25, /26]): [(BoundRelu(name=/45, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.7, inputs=[/41, /23, /24]): [(BoundRelu(name=/43, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.23, inputs=[/49, /31, /32]): [(BoundRelu(name=/51, inputs=[/input.23]), 0)]
  BoundLinear(name=/input, inputs=[/37, /19, /20]): [(BoundRelu(name=/39, inputs=[/input]), 0)]
  BoundLinear(name=/input.27, inputs=[/51, /33, /34]): [(BoundRelu(name=/53, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.15, inputs=[/45, /27, /28]): [(BoundRelu(name=/47, inputs=[/input.15]), 0)]
refined global lb: tensor([[6.17690611],
        [4.29692173],
        [3.73793817],
        [1.58513212],
        [5.24208212],
        [5.02035666],
        [7.38205528],
        [4.24646759],
        [1.33185196]], device='cuda:0') min: tensor(1.33185196, device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
Result: safe-incomplete-refine in 100.3761 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):100.37506198042877, max time: 100.37606573104858
mean time for verified SAFE instances(total 1): 100.37606573104858, max time: 100.37606573104858
safe-incomplete-refine (total 1), index: [0]
