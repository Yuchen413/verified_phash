Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: eran_instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2021/benchmarks/eran
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: 'remove_ineffective_layers, remove_relu_in_last_layer'
data:
  start: 33
  end: 34
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 500
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 13:50:07 2023 on zeratul
customized start/end sample from instance 33 to 34 in eran_instances.csv
Internal results will be saved to a-b-crown_[eran_instances]_start=33_end=34_iter=20_b=500_timeout=360_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_initial_max_domains=1.npz.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 33 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx nets/mnist_relu_9_200.onnx
Using vnnlib specs/mnist/mnist_spec_idx_266_eps_0.01500.vnnlib
Precompiled vnnlib file found at ../../vnncomp2021/benchmarks/eran/specs/mnist/mnist_spec_idx_266_eps_0.01500.vnnlib.compiled
Loading onnx ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx wih quirks {}
Onnx optimization with flag: remove_ineffective_layers, remove_relu_in_last_layer
Found existed optimized onnx model at ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx.optimized
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.0037500010803341866, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.89302188, -1.29327548,  0.24553926,  0.41818297, -1.87520230,
         -0.48155743, -1.69872141, -1.31648350,  5.59899759, -0.11588457]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.70448607, -0.93137306,  0.06192601,  0.18712196, -1.30393589,
          -0.28104484, -1.32307649, -1.11748934,  4.61614704,  0.08003671],
         [-0.70448607, -0.93137306,  0.06192601,  0.18712196, -1.30393589,
          -0.28104484, -1.32307649, -1.11748934,  4.61614704,  0.08003671]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[5.32063293, 5.54752016, 4.55422115, 4.42902517, 5.92008305,
          4.89719200, 5.93922329, 5.73363638, 4.53611040]]], device='cuda:0')
number of violation:  0
Attack finished in 2.3575 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/19): BoundParams(name=/19, inputs=[])
  (/20): BoundParams(name=/20, inputs=[])
  (/21): BoundParams(name=/21, inputs=[])
  (/22): BoundParams(name=/22, inputs=[])
  (/23): BoundParams(name=/23, inputs=[])
  (/24): BoundParams(name=/24, inputs=[])
  (/25): BoundParams(name=/25, inputs=[])
  (/26): BoundParams(name=/26, inputs=[])
  (/27): BoundParams(name=/27, inputs=[])
  (/28): BoundParams(name=/28, inputs=[])
  (/29): BoundParams(name=/29, inputs=[])
  (/30): BoundParams(name=/30, inputs=[])
  (/31): BoundParams(name=/31, inputs=[])
  (/32): BoundParams(name=/32, inputs=[])
  (/33): BoundParams(name=/33, inputs=[])
  (/34): BoundParams(name=/34, inputs=[])
  (/35): BoundParams(name=/35, inputs=[])
  (/36): BoundParams(name=/36, inputs=[])
  (/37): BoundFlatten(name=/37, inputs=[/0])
  (/input): BoundLinear(name=/input, inputs=[/37, /19, /20])
  (/39): BoundRelu(name=/39, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/39, /21, /22])
  (/41): BoundRelu(name=/41, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/41, /23, /24])
  (/43): BoundRelu(name=/43, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/43, /25, /26])
  (/45): BoundRelu(name=/45, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/45, /27, /28])
  (/47): BoundRelu(name=/47, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/47, /29, /30])
  (/49): BoundRelu(name=/49, inputs=[/input.19])
  (/input.23): BoundLinear(name=/input.23, inputs=[/49, /31, /32])
  (/51): BoundRelu(name=/51, inputs=[/input.23])
  (/input.27): BoundLinear(name=/input.27, inputs=[/51, /33, /34])
  (/53): BoundRelu(name=/53, inputs=[/input.27])
  (/54): BoundLinear(name=/54, inputs=[/53, /35, /36])
)
Model prediction is: tensor([[-0.89302188, -1.29327548,  0.24553926,  0.41818297, -1.87520230,
         -0.48155743, -1.69872141, -1.31648350,  5.59899759, -0.11588457]],
       device='cuda:0')
layer /39 using sparse-features alpha with shape [16]; unstable size 16; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 59 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 116 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using sparse-spec alpha with unstable size 169 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [59]; unstable size 59; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 116 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using sparse-spec alpha with unstable size 169 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [116]; unstable size 116; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using sparse-spec alpha with unstable size 169 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using sparse-features alpha with shape [169]; unstable size 169; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ -838.52478027, -1168.72424316, -1239.70959473, -1322.99816895,
         -1233.72558594, -1080.10986328, -1245.11889648,  -727.75708008,
         -1029.82153320]], device='cuda:0') None
best_l after optimization: -5183.9072265625
alpha/beta optimization time: 13.852554559707642
initial alpha-CROWN bounds: tensor([[-446.45712280, -614.77239990, -654.01550293, -692.82824707,
         -646.04949951, -569.58282471, -653.37115479, -374.09176636,
         -532.73907471]], device='cuda:0')
Worst class: (+ rhs) -692.8282470703125
Split layers:
  BoundLinear(name=/input.7, inputs=[/41, /23, /24]): [(BoundRelu(name=/43, inputs=[/input.7]), 0)]
  BoundLinear(name=/input, inputs=[/37, /19, /20]): [(BoundRelu(name=/39, inputs=[/input]), 0)]
  BoundLinear(name=/input.19, inputs=[/47, /29, /30]): [(BoundRelu(name=/49, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.3, inputs=[/39, /21, /22]): [(BoundRelu(name=/41, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.11, inputs=[/43, /25, /26]): [(BoundRelu(name=/45, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.23, inputs=[/49, /31, /32]): [(BoundRelu(name=/51, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.27, inputs=[/51, /33, /34]): [(BoundRelu(name=/53, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.15, inputs=[/45, /27, /28]): [(BoundRelu(name=/47, inputs=[/input.15]), 0)]
Start solving intermediate bounds with MIP...
layer /39 using sparse-features alpha with shape [16]; unstable size 16; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 59 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 116 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using sparse-spec alpha with unstable size 169 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [59]; unstable size 59; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 116 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using sparse-spec alpha with unstable size 169 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [116]; unstable size 116; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using sparse-spec alpha with unstable size 169 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using sparse-features alpha with shape [169]; unstable size 169; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2024-02-29
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_192', 'lay4_180', 'lay4_109', 'lay4_99', 'lay4_3', 'lay4_82', 'lay4_27', 'lay4_47', 'lay4_84', 'lay4_1', 'lay4_144', 'lay4_26', 'lay4_175', 'lay4_197', 'lay4_158', 'lay4_122', 'lay4_137', 'lay4_13', 'lay4_114', 'lay4_6', 'lay4_79', 'lay4_140', 'lay4_151', 'lay4_83', 'lay4_87', 'lay4_110', 'lay4_185', 'lay4_126', 'lay4_63', 'lay4_138', 'lay4_60', 'lay4_195', 'lay4_46', 'lay4_68', 'lay4_12', 'lay4_112', 'lay4_73', 'lay4_115', 'lay4_42', 'lay4_134', 'lay4_80', 'lay4_88', 'lay4_28', 'lay4_145', 'lay4_20', 'lay4_40', 'lay4_147', 'lay4_149', 'lay4_199', 'lay4_94', 'lay4_128', 'lay4_85', 'lay4_124', 'lay4_5', 'lay4_34', 'lay4_64', 'lay4_153', 'lay4_142', 'lay4_90'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/convert/model.py:154: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  "Using experimental implementation that allows 'batch_size > 1'."
Solving MIP for lay4_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1863s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2024s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-inf,-0.017394665096754178] (-1,-1; 2,-1), time: 0.2043s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_158, [-inf,inf]=>[-0.2854833211292278,0.10633197417626092] (2,-1; 2,-1), time: 0.3831s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-0.5148762246365411,0.028293054924277042] (2,-1; 2,-1), time: 0.4895s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_84, [-inf,inf]=>[-0.27004621058772543,0.15586904388716985] (2,-1; 2,-1), time: 0.5346s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_144, [-inf,inf]=>[-0.08889141936999141,0.19206029071399128] (2,-1; 2,-1), time: 0.5429s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_122, [-inf,inf]=>[1e-05,0.4588621723881149] (15,-1; 2,-1), time: 0.5602s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_47, [-inf,inf]=>[-0.33302410658142045,0.059991793899960455] (2,-1; 2,-1), time: 0.6394s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2576s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_192, [-inf,inf]=>[-0.2891983465762038,0.20918483031216234] (2,-1; 2,-1), time: 0.6991s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-0.0939758138515889,0.3650659518268644] (2,-1; 2,-1), time: 0.6999s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_3, [-inf,inf]=>[-0.19641838382422205,0.2626914023771031] (2,-1; 2,-1), time: 0.7038s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-0.33413576363065445,0.04431674816869071] (2,-1; 2,-1), time: 0.5123s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_109, [-inf,inf]=>[-0.2360327850290153,0.2343317787683886] (2,-1; 2,-1), time: 0.7432s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_114, [-inf,inf]=>[-0.22986507315375707,0.13652084942731202] (2,-1; 2,-1), time: 0.6557s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_110, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2210s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_197, [-inf,inf]=>[-0.2082353019017636,0.12383109356659139] (2,-1; 2,-1), time: 0.9433s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_180, [-inf,inf]=>[-0.09076379740445423,0.24013255320913363] (2,-1; 2,-1), time: 1.0520s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_151, [-inf,inf]=>[-0.33192477924372393,0.07343761761099282] (2,-1; 2,-1), time: 0.5192s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2267s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_137, [-inf,inf]=>[-0.07917040982708616,0.2909033157136714] (2,-1; 2,-1), time: 0.9917s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_140, [-inf,inf]=>[-0.00239316284575998,0.27486021056479265] (2,-1; 2,-1), time: 0.6926s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1859s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_60, [-inf,inf]=>[-0.03664692873276104,0.29297514222232524] (2,-1; 2,-1), time: 0.5398s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_63, [-inf,inf]=>[1e-05,0.3999863928334945] (15,-1; 2,-1), time: 0.6557s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_83, [-inf,inf]=>[-0.15634791663534184,0.2586391164061952] (2,-1; 2,-1), time: 0.7913s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-0.20496154862994387,0.05786143460285206] (2,-1; 2,-1), time: 1.3907s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_134, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1767s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_195, [-inf,inf]=>[-0.27829275387126295,0.12402924312394625] (2,-1; 2,-1), time: 0.5766s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_185, [-inf,inf]=>[-0.07829406084374295,0.3789193489200419] (2,-1; 2,-1), time: 0.7860s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_79, [-inf,inf]=>[-0.03294913441971004,0.2882876488683012] (2,-1; 2,-1), time: 1.0480s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1526s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_126, [-inf,inf]=>[-0.030061965486422183,0.4276120941211164] (2,-1; 2,-1), time: 0.9115s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_87, [-inf,inf]=>[-0.27429526143480687,0.15256452440572563] (2,-1; 2,-1), time: 1.0203s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_88, [-inf,inf]=>[1e-05,0.4883587149572557] (15,-1; 2,-1), time: 0.4995s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_138, [-inf,inf]=>[-0.3358818859538746,0.061178761783055056] (2,-1; 2,-1), time: 1.1743s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_115, [-inf,inf]=>[-0.12385105018946305,0.2868465283752144] (2,-1; 2,-1), time: 0.7303s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_68, [-inf,inf]=>[-0.15667116857668073,0.16674551720870848] (2,-1; 2,-1), time: 0.9922s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_73, [-inf,inf]=>[-0.20630399257060383,0.14001040763746703] (2,-1; 2,-1), time: 0.8850s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_40, [-inf,inf]=>[-0.2866609517756001,0.07410516771358464] (2,-1; 2,-1), time: 0.5714s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.2207050570082803,0.25247167461703846] (2,-1; 2,-1), time: 1.0059s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-inf,-0.014029733601049255] (-1,-1; 2,-1), time: 0.1713s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_5, [-inf,inf]=>[-inf,-0.020758361937291324] (-1,-1; 2,-1), time: 0.2338s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_94, [-inf,inf]=>[-0.4124705357872848,0.20177516367912826] (2,-1; 2,-1), time: 0.6539s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-0.31093535025575403,0.11810584190856807] (2,-1; 2,-1), time: 1.0007s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-0.3362080787583406,0.034154092972281405] (2,-1; 2,-1), time: 0.9390s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1829s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2513s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_149, [-inf,inf]=>[-0.4086251181708493,0.16323061961547342] (2,-1; 2,-1), time: 0.7830s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-0.18715111993921438,0.17815562806314897] (2,-1; 2,-1), time: 1.1707s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_64, [-inf,inf]=>[1e-05,0.3658663658067937] (15,-1; 2,-1), time: 0.4454s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_145, [-inf,inf]=>[-0.27335068311818006,0.021587991866555967] (2,-1; 2,-1), time: 1.1621s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_124, [-inf,inf]=>[-0.39116176504073563,0.03953176045506983] (2,-1; 2,-1), time: 0.7449s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_85, [-inf,inf]=>[-0.011772500678630005,0.332631720967214] (2,-1; 2,-1), time: 0.7801s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_199, [-inf,inf]=>[-0.180204609937199,0.21868918791057732] (2,-1; 2,-1), time: 1.0990s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_147, [-inf,inf]=>[-0.04612294610264648,0.22858217468825937] (2,-1; 2,-1), time: 1.3046s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_153, [-inf,inf]=>[-0.12800921393482825,0.20273188545356668] (2,-1; 2,-1), time: 0.7726s, #vars: 1217, #constrs: 448, improved: True
Solving MIP for lay4_128, [-inf,inf]=>[-0.25096229538262554,0.13029381738941972] (2,-1; 2,-1), time: 1.5815s, #vars: 1217, #constrs: 448, improved: True
PGD done for relu layer 2
MIP improved 59 nodes out of 59 unstable nodes, lb improved 4.000154495239258, ub improved 3.277466297149658, time 5.3918
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_139', 'lay6_167', 'lay6_62', 'lay6_97', 'lay6_81', 'lay6_172', 'lay6_106', 'lay6_39', 'lay6_131', 'lay6_151', 'lay6_117', 'lay6_121', 'lay6_145', 'lay6_193', 'lay6_73', 'lay6_45', 'lay6_179', 'lay6_67', 'lay6_154', 'lay6_138', 'lay6_8', 'lay6_48', 'lay6_89', 'lay6_153', 'lay6_14', 'lay6_76', 'lay6_169', 'lay6_163', 'lay6_192', 'lay6_22', 'lay6_79', 'lay6_32', 'lay6_171', 'lay6_54', 'lay6_21', 'lay6_157', 'lay6_190', 'lay6_16', 'lay6_149', 'lay6_133', 'lay6_68', 'lay6_119', 'lay6_125', 'lay6_114', 'lay6_5', 'lay6_143', 'lay6_134', 'lay6_10', 'lay6_170', 'lay6_84', 'lay6_142', 'lay6_108', 'lay6_164', 'lay6_88', 'lay6_41', 'lay6_101', 'lay6_96', 'lay6_199', 'lay6_7', 'lay6_178', 'lay6_18', 'lay6_94', 'lay6_69', 'lay6_161', 'lay6_118', 'lay6_47', 'lay6_186', 'lay6_26', 'lay6_63', 'lay6_78', 'lay6_50', 'lay6_85', 'lay6_122', 'lay6_181', 'lay6_126', 'lay6_168', 'lay6_65', 'lay6_86', 'lay6_11', 'lay6_34', 'lay6_144', 'lay6_91', 'lay6_194', 'lay6_175', 'lay6_30', 'lay6_75', 'lay6_95', 'lay6_77', 'lay6_51', 'lay6_0', 'lay6_55', 'lay6_29', 'lay6_90', 'lay6_93', 'lay6_72', 'lay6_57', 'lay6_150', 'lay6_13', 'lay6_9', 'lay6_28', 'lay6_165', 'lay6_173', 'lay6_24', 'lay6_188'] filter: 1.0
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3953s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_179, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3495s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4491s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8754s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0633s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3749s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_154, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1952s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_172, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.9955s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[-0.0630970138650534,0.17457403912352035] (2,-1; 2,-1), time: 5.7028s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-0.2551756957175827,0.013535861836198985] (2,-1; 2,-1), time: 5.7568s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[1e-05,0.34999682393784937] (15,-1; 2,-1), time: 6.1538s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4672s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[-0.10778821639337571,0.08368299972188709] (2,-1; 2,-1), time: 6.7504s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[1e-05,0.282080943741143] (15,-1; 2,-1), time: 9.3533s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_89, [-inf,inf]=>[-0.0774361146606424,0.10850294703393269] (2,-1; 2,-1), time: 7.1951s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_48, [-inf,inf]=>[-0.008539506920574926,0.21760216744632643] (2,-1; 2,-1), time: 8.5415s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_145, [-inf,inf]=>[-0.10234044557154937,0.08292690194300413] (2,-1; 2,-1), time: 11.0643s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1814s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-0.19279372703143083,0.022456534571007093] (2,-1; 2,-1), time: 5.6867s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1340s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.14071596458358795,0.0457577422570551] (2,-1; 2,-1), time: 13.0209s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-0.17414446900936975,0.03723963372260894] (2,-1; 2,-1), time: 6.3871s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2051s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_76, [-inf,inf]=>[-0.08027615262069648,0.15535189147312659] (2,-1; 2,-1), time: 7.5281s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[-0.17434903088186718,0.06730744742086435] (2,-1; 2,-1), time: 13.4608s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.12925809158562332,0.06636811103976811] (2,-1; 2,-1), time: 15.7245s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[1e-05,0.25041135190208375] (15,-1; 2,-1), time: 5.9150s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-0.12292929565933693,0.09964616441903415] (2,-1; 2,-1), time: 8.3508s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-0.11326278265309259,0.16751448882648703] (9,-1; 2,-1), time: 17.1348s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.04840834416940121,0.20063298753129077] (9,-1; 2,-1), time: 17.3065s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1821s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-0.014421062120107776,0.2109563025079684] (9,-1; 2,-1), time: 17.3556s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1782s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[1e-05,0.28640813201207577] (15,-1; 2,-1), time: 6.4797s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_134, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3272s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2905s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.11393626222229267,0.11615676403504499] (2,-1; 2,-1), time: 7.9704s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-0.009992187984474838,0.1929239966174428] (2,-1; 2,-1), time: 4.9083s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-0.033557496304945596,0.18483327194612004] (2,-1; 2,-1), time: 5.8649s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[1e-05,0.5512594634314874] (15,-1; 2,-1), time: 1.7429s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2155s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_133, [-inf,inf]=>[-0.297315112912141,0.01460305600004304] (2,-1; 2,-1), time: 5.9042s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1960s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9880s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_153, [-inf,inf]=>[-0.06615597390354559,0.21679907710036217] (9,-1; 2,-1), time: 16.4357s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.4449s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_151, [-inf,inf]=>[-0.047932516734958706,0.17580530376706813] (2,-1; 2,-1), time: 20.5149s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5717s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_119, [-inf,inf]=>[-0.1486465045078922,0.11850735460523071] (2,-1; 2,-1), time: 6.9799s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_108, [-inf,inf]=>[-0.1928755099266969,0.07453923521700195] (2,-1; 2,-1), time: 5.9501s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.13136978043505865,0.08048827176942595] (2,-1; 2,-1), time: 6.9960s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-0.07990885529303395,0.21569750139251084] (2,-1; 2,-1), time: 5.3378s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2285s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_164, [-inf,inf]=>[-0.15936806158879221,0.03645924622580677] (2,-1; 2,-1), time: 6.8203s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_149, [-inf,inf]=>[-0.22336879162146492,0.03466058183328408] (2,-1; 2,-1), time: 12.2444s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[1e-05,0.37918163233389035] (15,-1; 2,-1), time: 2.9567s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[1e-05,0.26413849607715423] (15,-1; 2,-1), time: 6.9287s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4983s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3160s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_126, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1744s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.2666342073521814,0.003534802925582623] (9,-1; 2,-1), time: 16.4841s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-0.11411313997315664,0.417796312520638] (2,-1; 2,-1), time: 8.1888s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-0.126938205466349,0.19175541623103] (2,-1; 2,-1), time: 4.8474s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1724s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_157, [-inf,inf]=>[-0.23696190858810456,0.027360336165058053] (9,-1; 2,-1), time: 16.5495s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1823s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-0.2414906847471114,0.047979824942096815] (2,-1; 2,-1), time: 4.1455s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[1e-05,0.3343333958087242] (15,-1; 2,-1), time: 4.8318s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1681s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-0.24198591552264032,0.03981643213757407] (2,-1; 2,-1), time: 5.4561s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-0.12229867754480118,0.15332649609258048] (2,-1; 2,-1), time: 11.1123s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1786s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[1e-05,0.6533894248624994] (15,-1; 2,-1), time: 2.1617s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-0.13782483342802612,0.08457668311040373] (9,-1; 2,-1), time: 16.5134s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_181, [-inf,inf]=>[-0.19034673542078243,0.04458658217709454] (2,-1; 2,-1), time: 7.3355s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_91, [-inf,inf]=>[-0.03517887663707498,0.24535831428659202] (2,-1; 2,-1), time: 4.4239s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1803s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0546s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-0.11362947407374063,0.17617381592507986] (2,-1; 2,-1), time: 6.0294s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2741s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.17892512432906207,0.026665078703320695] (2,-1; 2,-1), time: 5.9334s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[1e-05,0.4315295368800077] (15,-1; 2,-1), time: 1.8110s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[1e-05,0.36538081792937827] (15,-1; 2,-1), time: 6.1550s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3071s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-0.060058376106834725,0.10355496184077931] (9,-1; 2,-1), time: 18.6282s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[-0.0819780873890685,0.09118361223674075] (9,-1; 2,-1), time: 17.3770s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.1795s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3275s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-0.14226347819873192,0.3216164007117019] (2,-1; 2,-1), time: 13.2407s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-0.1121737606092216,0.13422938679203583] (2,-1; 2,-1), time: 7.1238s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3984s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[1e-05,0.20218372566241619] (15,-1; 2,-1), time: 11.2805s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_161, [-inf,inf]=>[-0.007400179756123286,0.22826957177288437] (9,-1; 2,-1), time: 18.3294s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.8098s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_93, [-inf,inf]=>[-0.07492664121276937,0.11495465406317974] (2,-1; 2,-1), time: 5.3917s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-0.18782839832047563,0.07613399832195221] (2,-1; 2,-1), time: 5.0558s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[-0.1337764060666634,0.13391656367593896] (2,-1; 2,-1), time: 7.1452s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[1e-05,0.3721160464858006] (15,-1; 2,-1), time: 5.0269s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-0.1555293569898585,0.011671226258514628] (9,-1; 2,-1), time: 20.6262s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-0.167992763113402,0.08718591722269288] (9,-1; 2,-1), time: 16.6655s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_188, [-inf,inf]=>[-0.0023003651435403354,0.24921099627862944] (2,-1; 2,-1), time: 6.4855s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.14431360955570824,0.1840302707464107] (2,-1; 9,-1), time: 16.0434s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[1e-05,0.2869202556409199] (15,-1; 9,-1), time: 15.6769s, #vars: 1501, #constrs: 774, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-0.1881874846531918,0.05397581395079664] (2,-1; 9,-1), time: 17.4740s, #vars: 1501, #constrs: 774, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(82, -1), (1, -1), (175, -1), (122, 1), (6, -1), (110, -1), (63, 1), (46, -1), (112, -1), (134, -1), (88, 1), (20, -1), (5, -1), (34, -1), (64, 1), (142, -1), (90, -1)]
best_l after optimization: -1592.3819580078125
beta sum per layer: []
alpha/beta optimization time: 17.144310474395752
alpha-CROWN with intermediate bounds by MIP: tensor([[-137.46263123, -188.17651367, -200.59034729, -212.09719849,
         -198.62168884, -175.16767883, -200.33047485, -115.33943176,
         -164.59597778]], device='cuda:0') None
MIP improved 104 nodes out of 104 unstable nodes, lb improved 11.207304000854492, ub improved 12.587109565734863, time 55.7639
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_114', 'lay8_176', 'lay8_189', 'lay8_59', 'lay8_160', 'lay8_192', 'lay8_79', 'lay8_48', 'lay8_12', 'lay8_65', 'lay8_22', 'lay8_111', 'lay8_165', 'lay8_90', 'lay8_83', 'lay8_168', 'lay8_179', 'lay8_131', 'lay8_93', 'lay8_149', 'lay8_157', 'lay8_196', 'lay8_37', 'lay8_18', 'lay8_115', 'lay8_23', 'lay8_76', 'lay8_127', 'lay8_181', 'lay8_171', 'lay8_32', 'lay8_17', 'lay8_6', 'lay8_173', 'lay8_107', 'lay8_154', 'lay8_198', 'lay8_82', 'lay8_199', 'lay8_85', 'lay8_113', 'lay8_39', 'lay8_70', 'lay8_19', 'lay8_140', 'lay8_162', 'lay8_8', 'lay8_197', 'lay8_191', 'lay8_150', 'lay8_144', 'lay8_29', 'lay8_117', 'lay8_51', 'lay8_178', 'lay8_163', 'lay8_153', 'lay8_0', 'lay8_94', 'lay8_169', 'lay8_142', 'lay8_101', 'lay8_75', 'lay8_40', 'lay8_33', 'lay8_53', 'lay8_152', 'lay8_34', 'lay8_172', 'lay8_174', 'lay8_47', 'lay8_180', 'lay8_166', 'lay8_68', 'lay8_97', 'lay8_170', 'lay8_61', 'lay8_45', 'lay8_128', 'lay8_49', 'lay8_78', 'lay8_84', 'lay8_151', 'lay8_106', 'lay8_35', 'lay8_7', 'lay8_21', 'lay8_27', 'lay8_194', 'lay8_99', 'lay8_125', 'lay8_134', 'lay8_36', 'lay8_20', 'lay8_92', 'lay8_1', 'lay8_186', 'lay8_81', 'lay8_118', 'lay8_10', 'lay8_121', 'lay8_60', 'lay8_146', 'lay8_41', 'lay8_141', 'lay8_16', 'lay8_148', 'lay8_188', 'lay8_158', 'lay8_159', 'lay8_55', 'lay8_167', 'lay8_43', 'lay8_137', 'lay8_14', 'lay8_3', 'lay8_135', 'lay8_57', 'lay8_183', 'lay8_5', 'lay8_187', 'lay8_182', 'lay8_13', 'lay8_116', 'lay8_190', 'lay8_147', 'lay8_91', 'lay8_110', 'lay8_175', 'lay8_122', 'lay8_25', 'lay8_109', 'lay8_74', 'lay8_77', 'lay8_88', 'lay8_86', 'lay8_164', 'lay8_2', 'lay8_132', 'lay8_139', 'lay8_120', 'lay8_54', 'lay8_56', 'lay8_126', 'lay8_89'] filter: 1.0
Solving MIP for lay8_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2778s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_22, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2736s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_176, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3004s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3001s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3346s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3376s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3069s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4850s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_196, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6785s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.1972s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.8646s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[1e-05,0.7944734130304837] (15,-1; 2,-1), time: 7.6190s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4092s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_127, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3090s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2806s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3185s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_168, [-inf,inf]=>[1e-05,0.6245621647180918] (15,-1; 9,-1), time: 15.3352s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3186s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.4323s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_107, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3238s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[1e-05,0.3446211869891554] (15,-1; 9,-1), time: 19.1840s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3535s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3339s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_199, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3069s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_181, [-inf,inf]=>[1e-05,0.4604000125202754] (15,-1; 9,-1), time: 15.2784s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_18, [-inf,inf]=>[-0.4992989223923631,0.04315932950394195] (2,-1; 9,-1), time: 24.5880s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3060s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3215s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3223s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_140, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2977s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_114, [-inf,inf]=>[-0.16038310569139824,0.14348610882507806] (9,-1; 9,-1), time: 30.0191s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-0.29312345474698753,0.07495992192968538] (9,-1; 9,-1), time: 30.0157s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_160, [-inf,inf]=>[-0.21307894360262175,0.12346067468325012] (9,-1; 9,-1), time: 30.0193s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_111, [-inf,inf]=>[-0.26434489018222057,0.1994328233079129] (9,-1; 9,-1), time: 30.0165s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_165, [-inf,inf]=>[-0.2967987376395923,0.15832631368103064] (9,-1; 9,-1), time: 30.0173s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_83, [-inf,inf]=>[-0.16967337535373514,0.11418795226754032] (9,-1; 9,-1), time: 30.0224s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_90, [-inf,inf]=>[-0.017443044579952736,0.23463812021245595] (9,-1; 9,-1), time: 30.0280s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_197, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2806s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_179, [-inf,inf]=>[-0.06998246220691419,0.20752756395616756] (9,-1; 9,-1), time: 30.0205s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_93, [-inf,inf]=>[-0.3399199639534742,0.13771982429557642] (9,-1; 9,-1), time: 30.0154s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2957s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_150, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3054s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5652s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2720s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2664s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_153, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5562s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2816s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_115, [-inf,inf]=>[-0.2256595420921042,0.04714479206477833] (9,-1; 9,-1), time: 30.0194s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.4080s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[1e-05,0.3509202067576796] (15,-1; 9,-1), time: 15.2816s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2982s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3017s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3319s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_23, [-inf,inf]=>[-0.14499150847579378,0.19154583443274806] (9,-1; 9,-1), time: 30.0160s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_172, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3084s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2754s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3090s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_180, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2650s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_0, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.2484s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3247s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.7792s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2845s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_163, [-inf,inf]=>[1e-05,0.5943730178051236] (15,-1; 2,-1), time: 7.3473s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_173, [-inf,inf]=>[-0.18984530111717096,0.0700109663841642] (9,-1; 9,-1), time: 30.0328s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_128, [-inf,inf]=>[1e-05,0.3968476674399434] (15,-1; 2,-1), time: 10.3741s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_78, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5730s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_166, [-inf,inf]=>[1e-05,0.48783988737248307] (15,-1; 9,-1), time: 15.3225s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-0.21855567568344894,0.08010338725628124] (9,-1; 9,-1), time: 30.0196s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_45, [-inf,inf]=>[1e-05,0.32603173271259944] (15,-1; 9,-1), time: 15.3072s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3014s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2637s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_113, [-inf,inf]=>[-0.09151010172678516,0.2972711397141908] (9,-1; 9,-1), time: 30.0490s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_191, [-inf,inf]=>[-0.15064886732643698,0.32238419224736986] (9,-1; 9,-1), time: 30.0176s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_29, [-inf,inf]=>[-0.17032640772727078,0.1506048312412633] (9,-1; 9,-1), time: 30.0213s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_117, [-inf,inf]=>[-0.2584751775679186,0.10332609618444172] (9,-1; 9,-1), time: 30.0190s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_51, [-inf,inf]=>[-0.28160539991877936,0.00543955127176653] (9,-1; 9,-1), time: 30.0163s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2852s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3231s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_94, [-inf,inf]=>[-0.17705471006676995,0.10583323556228325] (9,-1; 9,-1), time: 30.0193s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_101, [-inf,inf]=>[-0.22765671842896493,0.06576464368685007] (9,-1; 9,-1), time: 30.0185s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_36, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6144s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_75, [-inf,inf]=>[-0.292251576057335,0.041254165611064604] (9,-1; 9,-1), time: 30.0302s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-0.27726053905688636,0.008261767281226417] (9,-1; 9,-1), time: 30.0329s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6264s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2705s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_121, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3019s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2841s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_84, [-inf,inf]=>[1e-05,0.7381172393071078] (15,-1; 9,-1), time: 15.2959s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_68, [-inf,inf]=>[-0.32098573838191335,0.00635248983470386] (9,-1; 9,-1), time: 30.0280s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_41, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1892s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_151, [-inf,inf]=>[1e-05,0.5466124622857796] (15,-1; 9,-1), time: 15.3292s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_148, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4169s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[-0.37364073193683345,0.027855466447929564] (9,-1; 9,-1), time: 30.0275s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3154s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_159, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3128s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_146, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.1989s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_106, [-inf,inf]=>[1e-05,0.28270963419529477] (15,-1; 9,-1), time: 19.8541s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2889s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_27, [-inf,inf]=>[1e-05,0.29505992601761133] (15,-1; 9,-1), time: 17.1187s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2953s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2773s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_49, [-inf,inf]=>[-0.205921540363053,0.28350541314330696] (2,-1; 9,-1), time: 29.7669s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.1441s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_134, [-inf,inf]=>[1e-05,0.5240015331347158] (15,-1; 9,-1), time: 15.2836s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_20, [-inf,inf]=>[1e-05,0.5290383734734463] (15,-1; 9,-1), time: 15.2829s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2760s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_183, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6847s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_13, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2624s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_116, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3087s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_190, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2797s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_182, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7231s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_16, [-inf,inf]=>[1e-05,0.4870647850148748] (15,-1; 9,-1), time: 15.5802s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_110, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2719s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2944s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_194, [-inf,inf]=>[-0.07648936945026899,0.5583628012580887] (9,-1; 2,-1), time: 23.2924s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.20835972921273885,0.07948184274686507] (9,-1; 9,-1), time: 30.0585s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_167, [-inf,inf]=>[1e-05,0.6815741601730951] (15,-1; 9,-1), time: 15.2758s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2275s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2918s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2751s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2615s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2514s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_164, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2801s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2609s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2850s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2598s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_120, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2661s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2496s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_126, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2692s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.2628s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_158, [-inf,inf]=>[1e-05,0.36892491088208823] (15,-1; 9,-1), time: 22.2031s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-0.17033653651781788,0.16076269319419906] (9,-1; 9,-1), time: 30.0209s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_1, [-inf,inf]=>[-0.17980501768552232,0.12122769743279985] (9,-1; 9,-1), time: 30.0341s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_186, [-inf,inf]=>[-0.4146495947051736,0.01422072015841843] (9,-1; 9,-1), time: 30.0253s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_81, [-inf,inf]=>[-0.334171169908093,0.02697311937764774] (9,-1; 9,-1), time: 30.0190s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[1e-05,0.42194801310813024] (15,-1; 9,-1), time: 15.2487s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_141, [-inf,inf]=>[-0.05294426719608232,0.3107792999776841] (9,-1; 9,-1), time: 30.0238s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_147, [-inf,inf]=>[1e-05,0.30684029765730053] (15,-1; 9,-1), time: 19.1725s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_55, [-inf,inf]=>[-0.2737467056787386,0.0006920446721462972] (9,-1; 9,-1), time: 30.0228s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[1e-05,0.9197582785244857] (15,-1; 2,-1), time: 13.4804s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_137, [-inf,inf]=>[-0.20432315354343428,0.11476170890541307] (9,-1; 9,-1), time: 30.0140s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_57, [-inf,inf]=>[-0.14168304252186026,0.18574359534872917] (9,-1; 9,-1), time: 30.0255s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_187, [-inf,inf]=>[-0.3059929494059395,0.04795593015698214] (9,-1; 9,-1), time: 30.0179s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_122, [-inf,inf]=>[-0.2766348037599632,0.010566453875634109] (9,-1; 9,-1), time: 30.0135s, #vars: 1807, #constrs: 1133, improved: True
Solving MIP for lay8_109, [-inf,inf]=>[-0.013558652312477383,0.3774329666614882] (9,-1; 9,-1), time: 30.0179s, #vars: 1807, #constrs: 1133, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(97, -1), (172, -1), (39, -1), (117, -1), (193, -1), (45, 1), (179, -1), (67, 1), (154, -1), (8, -1), (169, -1), (79, 1), (32, -1), (171, 1), (21, -1), (190, -1), (114, -1), (5, -1), (143, -1), (134, -1), (10, 1), (84, -1), (142, -1), (41, -1), (101, -1), (96, 1), (94, -1), (118, 1), (186, -1), (78, 1), (85, -1), (122, -1), (126, -1), (65, 1), (86, -1), (34, 1), (144, -1), (194, -1), (175, -1), (95, -1), (77, 1), (55, -1), (29, -1), (90, -1), (72, 1), (150, 1), (13, -1), (9, 1), (28, -1), (165, -1), (24, -1)]
best_l after optimization: -96.26532745361328
beta sum per layer: []
alpha/beta optimization time: 19.76494860649109
alpha-CROWN with intermediate bounds by MIP: tensor([[ -8.36984921, -11.10675907, -11.82750607, -12.35641003, -12.30244446,
         -10.55686378, -11.40325451,  -7.05636120, -11.28588104]],
       device='cuda:0') None
MIP improved 145 nodes out of 145 unstable nodes, lb improved 19.5460205078125, ub improved 32.9315185546875, time 115.0599
maximum relu layer improved by MIP so far 3
Linear(in_features=200, out_features=200, bias=True) 4 10 torch.Size([200])
sorted candidates ['lay10_123', 'lay10_132', 'lay10_50', 'lay10_69', 'lay10_127', 'lay10_95', 'lay10_163', 'lay10_177', 'lay10_88', 'lay10_97', 'lay10_11', 'lay10_76', 'lay10_107', 'lay10_116', 'lay10_124', 'lay10_106', 'lay10_23', 'lay10_14', 'lay10_26', 'lay10_70', 'lay10_198', 'lay10_160', 'lay10_38', 'lay10_56', 'lay10_42', 'lay10_7', 'lay10_43', 'lay10_52', 'lay10_10', 'lay10_144', 'lay10_31', 'lay10_158', 'lay10_117', 'lay10_169', 'lay10_196', 'lay10_68', 'lay10_118', 'lay10_102', 'lay10_122', 'lay10_53', 'lay10_114', 'lay10_171', 'lay10_168', 'lay10_47', 'lay10_65', 'lay10_140', 'lay10_59', 'lay10_90', 'lay10_21', 'lay10_1', 'lay10_190', 'lay10_16', 'lay10_46', 'lay10_77', 'lay10_6', 'lay10_186', 'lay10_74', 'lay10_130', 'lay10_85', 'lay10_125', 'lay10_115', 'lay10_193', 'lay10_141', 'lay10_2', 'lay10_162', 'lay10_111', 'lay10_131', 'lay10_185', 'lay10_167', 'lay10_48', 'lay10_182', 'lay10_109', 'lay10_19', 'lay10_86', 'lay10_134', 'lay10_4', 'lay10_35', 'lay10_83', 'lay10_91', 'lay10_39', 'lay10_191', 'lay10_28', 'lay10_165', 'lay10_20', 'lay10_166', 'lay10_199', 'lay10_73', 'lay10_87', 'lay10_175', 'lay10_82', 'lay10_128', 'lay10_45', 'lay10_164', 'lay10_151', 'lay10_71', 'lay10_174', 'lay10_55', 'lay10_142', 'lay10_120', 'lay10_34', 'lay10_143', 'lay10_173', 'lay10_194', 'lay10_75', 'lay10_149', 'lay10_135', 'lay10_72', 'lay10_24', 'lay10_67', 'lay10_148', 'lay10_60', 'lay10_62', 'lay10_33', 'lay10_96', 'lay10_157', 'lay10_41', 'lay10_146', 'lay10_181', 'lay10_3', 'lay10_197', 'lay10_189', 'lay10_98', 'lay10_64', 'lay10_8', 'lay10_93', 'lay10_63', 'lay10_184', 'lay10_138', 'lay10_176', 'lay10_126', 'lay10_79', 'lay10_110', 'lay10_108', 'lay10_81', 'lay10_22', 'lay10_5', 'lay10_18', 'lay10_29', 'lay10_156', 'lay10_147', 'lay10_36', 'lay10_44', 'lay10_155', 'lay10_103', 'lay10_13', 'lay10_54', 'lay10_152', 'lay10_99', 'lay10_0', 'lay10_104', 'lay10_61', 'lay10_9', 'lay10_129', 'lay10_105', 'lay10_37', 'lay10_12', 'lay10_27', 'lay10_15', 'lay10_178', 'lay10_136', 'lay10_161', 'lay10_192', 'lay10_154', 'lay10_139', 'lay10_94', 'lay10_80', 'lay10_113', 'lay10_32', 'lay10_40', 'lay10_119', 'lay10_172', 'lay10_180', 'lay10_179', 'lay10_100', 'lay10_153', 'lay10_101', 'lay10_188', 'lay10_112', 'lay10_57', 'lay10_84', 'lay10_30', 'lay10_78', 'lay10_51', 'lay10_92', 'lay10_145', 'lay10_195', 'lay10_89', 'lay10_187', 'lay10_58', 'lay10_159', 'lay10_170', 'lay10_183', 'lay10_66', 'lay10_150', 'lay10_49', 'lay10_137', 'lay10_25', 'lay10_121', 'lay10_17'] filter: 1.0
Solving MIP for lay10_177, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4680s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_124, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4873s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_107, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5000s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5526s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_127, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5614s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6272s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6202s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_116, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6098s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6326s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6493s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6773s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_106, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7015s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4742s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4983s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5605s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5711s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5762s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5819s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_43, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5244s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5439s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5333s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6434s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_10, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4925s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6471s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_196, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4810s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_68, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5322s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_118, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5320s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6147s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_122, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4703s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4804s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_140, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5157s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4840s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4729s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_97, [-inf,inf]=>[1e-05,1.2708276842477577] (15,-1; 9,-1), time: 15.5633s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5097s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_190, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5312s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4849s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_171, [-inf,inf]=>[1e-05,0.5860276286241272] (15,-1; 9,-1), time: 15.5063s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_168, [-inf,inf]=>[1e-05,0.6109455372777778] (15,-1; 9,-1), time: 15.5037s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_53, [-inf,inf]=>[1e-05,0.4729309826631074] (15,-1; 9,-1), time: 15.6388s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_47, [-inf,inf]=>[1e-05,0.6533596096276593] (15,-1; 9,-1), time: 15.5602s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4956s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4742s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_130, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4872s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_123, [-inf,inf]=>[1e-05,0.4861319868443866] (15,-1; 9,-1), time: 23.9701s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_115, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5678s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5124s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_141, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5512s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_95, [-inf,inf]=>[-0.10092500483522632,0.14324882345342363] (9,-1; 9,-1), time: 30.0197s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_50, [-inf,inf]=>[-0.24870816530697873,0.17967061820342387] (9,-1; 9,-1), time: 30.0573s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_38, [-inf,inf]=>[-0.21716436219238824,0.06097151436955436] (9,-1; 9,-1), time: 30.0159s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_42, [-inf,inf]=>[-0.2490819358283276,0.10282433432691539] (9,-1; 9,-1), time: 30.0208s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_144, [-inf,inf]=>[-0.18638948111489673,0.0647281896018636] (9,-1; 9,-1), time: 30.0185s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4949s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_158, [-inf,inf]=>[-0.1568710868839888,0.25157433896274384] (9,-1; 9,-1), time: 30.0185s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_117, [-inf,inf]=>[-0.29844419962432794,0.027256597578194118] (9,-1; 9,-1), time: 30.0176s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_102, [-inf,inf]=>[-0.09525072318839474,0.1790811584889534] (9,-1; 9,-1), time: 30.0434s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_48, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4661s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_109, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5372s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_114, [-inf,inf]=>[-0.022266826629662156,0.26377233925089655] (9,-1; 9,-1), time: 30.0508s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_134, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5263s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_74, [-inf,inf]=>[1e-05,0.33601005807020656] (15,-1; 9,-1), time: 15.5220s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4706s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_125, [-inf,inf]=>[1e-05,0.7055320104833083] (15,-1; 9,-1), time: 15.5213s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_21, [-inf,inf]=>[-0.1207336198336691,0.24646722346362504] (9,-1; 9,-1), time: 30.0203s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5176s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5001s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4842s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5008s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_111, [-inf,inf]=>[1e-05,0.46634957241681896] (15,-1; 9,-1), time: 15.5486s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_182, [-inf,inf]=>[1e-05,0.6581056591911939] (15,-1; 9,-1), time: 15.5114s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_19, [-inf,inf]=>[1e-05,1.4240743403001954] (15,-1; 2,-1), time: 15.4774s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_86, [-inf,inf]=>[1e-05,0.4797408900166916] (15,-1; 9,-1), time: 15.5820s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_77, [-inf,inf]=>[-0.04999126475304974,0.23713967026946567] (9,-1; 9,-1), time: 30.0161s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_186, [-inf,inf]=>[-0.1876196066824887,0.15407427872246857] (9,-1; 9,-1), time: 30.0175s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_175, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5074s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_85, [-inf,inf]=>[-0.05180453476677412,0.28106364913614645] (9,-1; 9,-1), time: 30.0270s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_128, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5702s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_151, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5649s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5910s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_28, [-inf,inf]=>[1e-05,0.35791280650234264] (15,-1; 9,-1), time: 15.5727s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6215s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5749s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_166, [-inf,inf]=>[1e-05,0.591153281479152] (15,-1; 9,-1), time: 15.5044s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_2, [-inf,inf]=>[1e-05,0.47008059252122664] (15,-1; 9,-1), time: 28.8346s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_162, [-inf,inf]=>[1e-05,0.2833514223813965] (15,-1; 9,-1), time: 29.5473s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_185, [-inf,inf]=>[-0.15467913446785778,0.2517943757036725] (9,-1; 9,-1), time: 30.0409s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_167, [-inf,inf]=>[-0.337056436340732,0.047533428182550304] (9,-1; 9,-1), time: 30.0357s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_4, [-inf,inf]=>[-0.15719274229282634,0.1060496398723955] (9,-1; 9,-1), time: 30.0179s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_73, [-inf,inf]=>[1e-05,1.0881425187310791] (15,-1; 9,-1), time: 15.4845s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_35, [-inf,inf]=>[-0.23526837985704926,0.039746547786348264] (9,-1; 9,-1), time: 30.0161s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_87, [-inf,inf]=>[1e-05,0.8465712295907247] (15,-1; 9,-1), time: 15.5393s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_45, [-inf,inf]=>[1e-05,0.5268386146328321] (15,-1; 9,-1), time: 15.5060s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_164, [-inf,inf]=>[1e-05,0.38179415562358693] (15,-1; 9,-1), time: 15.4771s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_91, [-inf,inf]=>[-0.25342452799519066,0.034185469052256605] (9,-1; 9,-1), time: 30.0151s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_143, [-inf,inf]=>[1e-05,0.8084666404331676] (15,-1; 9,-1), time: 15.4817s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_199, [-inf,inf]=>[-0.1423080087415994,0.13306516487834685] (9,-1; 9,-1), time: 30.0165s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_82, [-inf,inf]=>[-0.3352458531518828,0.007664555161854037] (9,-1; 9,-1), time: 30.0231s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_55, [-inf,inf]=>[-0.12485028658039696,0.2262445625815641] (9,-1; 9,-1), time: 30.0606s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_120, [-inf,inf]=>[-0.07159616206485114,0.2816605894299894] (9,-1; 9,-1), time: 30.0302s, #vars: 2085, #constrs: 1450, improved: True
Solving MIP for lay10_34, [-inf,inf]=>[-0.11085782656379288,0.1931024615469327] (9,-1; 9,-1), time: 30.0168s, #vars: 2085, #constrs: 1450, improved: True
PGD done for relu layer 5
Run alpha-CROWN after refining layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 3 has unstable to stable neurons: [(176, -1), (189, -1), (192, -1), (79, 1), (48, -1), (12, -1), (65, -1), (22, -1), (168, 1), (131, -1), (149, -1), (157, -1), (196, -1), (37, 1), (76, -1), (127, -1), (181, 1), (171, -1), (32, -1), (17, -1), (6, -1), (107, -1), (154, 1), (198, -1), (82, -1), (199, -1), (39, -1), (70, -1), (19, -1), (140, -1), (162, -1), (8, -1), (197, -1), (150, -1), (144, -1), (178, -1), (163, 1), (153, -1), (0, -1), (169, -1), (142, -1), (33, -1), (53, -1), (152, -1), (34, -1), (172, -1), (174, -1), (47, -1), (180, -1), (166, 1), (97, -1), (61, -1), (45, 1), (128, 1), (78, -1), (84, 1), (151, 1), (106, 1), (35, -1), (7, -1), (27, 1), (99, -1), (125, -1), (134, 1), (36, -1), (20, 1), (118, -1), (10, -1), (121, -1), (60, -1), (146, -1), (41, -1), (16, 1), (148, -1), (188, -1), (158, 1), (159, -1), (167, 1), (43, -1), (14, -1), (3, -1), (135, -1), (183, -1), (5, -1), (182, -1), (13, -1), (116, -1), (190, -1), (147, 1), (91, 1), (110, -1), (175, -1), (25, -1), (74, -1), (77, -1), (88, -1), (86, -1), (164, -1), (2, -1), (132, -1), (139, -1), (120, -1), (54, -1), (56, 1), (126, -1), (89, -1)]
best_l after optimization: 5.962130546569824
beta sum per layer: []
alpha/beta optimization time: 20.399739503860474
alpha-CROWN with intermediate bounds by MIP: tensor([[ 0.98347265,  0.66185868,  0.51312536,  0.22569370,  0.57402253,
          0.59283745,  1.30441105,  1.41484237, -0.30813384]], device='cuda:0') None
MIP improved 101 nodes out of 199 unstable nodes, lb improved 37.69987106323242, ub improved 59.92311477661133, time 82.7379
maximum relu layer improved by MIP so far 4
MIP finished with 263.52287459373474s
Run final alpha-CROWN after MIP solving on layer 10 and relu idx 4
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: 12.495691299438477
beta sum per layer: []
alpha/beta optimization time: 0.06381011009216309
alpha-CROWN with intermediate bounds improved by MIP: tensor([[1.62276900, 1.41645932, 1.23641062, 0.95770735, 1.42851448, 1.28933263,
         2.06414819, 2.03850269, 0.44184697]], device='cuda:0') None
Split layers:
  BoundLinear(name=/input.7, inputs=[/41, /23, /24]): [(BoundRelu(name=/43, inputs=[/input.7]), 0)]
  BoundLinear(name=/input, inputs=[/37, /19, /20]): [(BoundRelu(name=/39, inputs=[/input]), 0)]
  BoundLinear(name=/input.19, inputs=[/47, /29, /30]): [(BoundRelu(name=/49, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.3, inputs=[/39, /21, /22]): [(BoundRelu(name=/41, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.11, inputs=[/43, /25, /26]): [(BoundRelu(name=/45, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.23, inputs=[/49, /31, /32]): [(BoundRelu(name=/51, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.27, inputs=[/51, /33, /34]): [(BoundRelu(name=/53, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.15, inputs=[/45, /27, /28]): [(BoundRelu(name=/47, inputs=[/input.15]), 0)]
refined global lb: tensor([[1.62276900],
        [1.41645932],
        [1.23641062],
        [0.95770735],
        [1.42851448],
        [1.28933263],
        [2.06414819],
        [2.03850269],
        [0.44184697]], device='cuda:0') min: tensor(0.44184697, device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
Result: safe-incomplete-refine in 286.7241 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):286.7212109662961, max time: 286.72407817840576
mean time for verified SAFE instances(total 1): 286.72407817840576, max time: 286.72407817840576
safe-incomplete-refine (total 1), index: [0]
