Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: eran_instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2021/benchmarks/eran
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: 'remove_ineffective_layers, remove_relu_in_last_layer'
data:
  start: 1
  end: 2
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 500
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 13:38:07 2023 on zeratul
customized start/end sample from instance 1 to 2 in eran_instances.csv
Internal results will be saved to a-b-crown_[eran_instances]_start=1_end=2_iter=20_b=500_timeout=360_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_initial_max_domains=1.npz.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx nets/mnist_relu_9_200.onnx
Using vnnlib specs/mnist/mnist_spec_idx_4424_eps_0.01500.vnnlib
Precompiled vnnlib file found at ../../vnncomp2021/benchmarks/eran/specs/mnist/mnist_spec_idx_4424_eps_0.01500.vnnlib.compiled
Loading onnx ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx wih quirks {}
Onnx optimization with flag: remove_ineffective_layers, remove_relu_in_last_layer
Found existed optimized onnx model at ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx.optimized
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750002011656761, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.94294739, -2.96485305, -2.42806029,  0.65498954,  3.50166965,
         -0.80452728, -4.59059048,  2.46427226,  0.34438497,  9.75536251]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.39014053, -2.67807341, -2.19047117,  0.50824046,  3.29351163,
          -0.68972754, -4.13489008,  2.11830926,  0.39380386,  8.84125042],
         [-5.39014053, -2.67807341, -2.19047117,  0.50824046,  3.29351163,
          -0.68972754, -4.13489008,  2.11830926,  0.39380386,  8.84125042]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[14.23139095, 11.51932335, 11.03172112,  8.33300972,  5.54773903,
           9.53097820, 12.97614098,  6.72294140,  8.44744682]]],
       device='cuda:0')
number of violation:  0
Attack finished in 2.2032 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/19): BoundParams(name=/19, inputs=[])
  (/20): BoundParams(name=/20, inputs=[])
  (/21): BoundParams(name=/21, inputs=[])
  (/22): BoundParams(name=/22, inputs=[])
  (/23): BoundParams(name=/23, inputs=[])
  (/24): BoundParams(name=/24, inputs=[])
  (/25): BoundParams(name=/25, inputs=[])
  (/26): BoundParams(name=/26, inputs=[])
  (/27): BoundParams(name=/27, inputs=[])
  (/28): BoundParams(name=/28, inputs=[])
  (/29): BoundParams(name=/29, inputs=[])
  (/30): BoundParams(name=/30, inputs=[])
  (/31): BoundParams(name=/31, inputs=[])
  (/32): BoundParams(name=/32, inputs=[])
  (/33): BoundParams(name=/33, inputs=[])
  (/34): BoundParams(name=/34, inputs=[])
  (/35): BoundParams(name=/35, inputs=[])
  (/36): BoundParams(name=/36, inputs=[])
  (/37): BoundFlatten(name=/37, inputs=[/0])
  (/input): BoundLinear(name=/input, inputs=[/37, /19, /20])
  (/39): BoundRelu(name=/39, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/39, /21, /22])
  (/41): BoundRelu(name=/41, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/41, /23, /24])
  (/43): BoundRelu(name=/43, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/43, /25, /26])
  (/45): BoundRelu(name=/45, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/45, /27, /28])
  (/47): BoundRelu(name=/47, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/47, /29, /30])
  (/49): BoundRelu(name=/49, inputs=[/input.19])
  (/input.23): BoundLinear(name=/input.23, inputs=[/49, /31, /32])
  (/51): BoundRelu(name=/51, inputs=[/input.23])
  (/input.27): BoundLinear(name=/input.27, inputs=[/51, /33, /34])
  (/53): BoundRelu(name=/53, inputs=[/input.27])
  (/54): BoundLinear(name=/54, inputs=[/53, /35, /36])
)
Model prediction is: tensor([[-5.94294739, -2.96485305, -2.42806029,  0.65498954,  3.50166965,
         -0.80452728, -4.59059048,  2.46427226,  0.34438497,  9.75536251]],
       device='cuda:0')
layer /39 using sparse-features alpha with shape [51]; unstable size 51; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 84 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 83 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using sparse-spec alpha with unstable size 162 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [84]; unstable size 84; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 83 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using sparse-spec alpha with unstable size 162 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [83]; unstable size 83; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using sparse-spec alpha with unstable size 162 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using sparse-features alpha with shape [162]; unstable size 162; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ -716.11596680, -1041.36389160, -1249.61682129, -1241.50219727,
          -922.24804688,  -998.13928223, -1176.54113770,  -579.04040527,
          -824.42541504]], device='cuda:0') None
best_l after optimization: -4990.0419921875
alpha/beta optimization time: 14.641486644744873
initial alpha-CROWN bounds: tensor([[-416.38726807, -584.94055176, -718.14160156, -700.23303223,
         -528.85424805, -573.44287109, -673.04962158, -323.95391846,
         -471.03854370]], device='cuda:0')
Worst class: (+ rhs) -718.1416015625
Split layers:
  BoundLinear(name=/input.27, inputs=[/51, /33, /34]): [(BoundRelu(name=/53, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.23, inputs=[/49, /31, /32]): [(BoundRelu(name=/51, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.7, inputs=[/41, /23, /24]): [(BoundRelu(name=/43, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.11, inputs=[/43, /25, /26]): [(BoundRelu(name=/45, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.15, inputs=[/45, /27, /28]): [(BoundRelu(name=/47, inputs=[/input.15]), 0)]
  BoundLinear(name=/input, inputs=[/37, /19, /20]): [(BoundRelu(name=/39, inputs=[/input]), 0)]
  BoundLinear(name=/input.19, inputs=[/47, /29, /30]): [(BoundRelu(name=/49, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.3, inputs=[/39, /21, /22]): [(BoundRelu(name=/41, inputs=[/input.3]), 0)]
Start solving intermediate bounds with MIP...
layer /39 using sparse-features alpha with shape [51]; unstable size 51; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 84 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 83 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using sparse-spec alpha with unstable size 162 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [84]; unstable size 84; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 83 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using sparse-spec alpha with unstable size 162 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [83]; unstable size 83; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using sparse-spec alpha with unstable size 162 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using sparse-features alpha with shape [162]; unstable size 162; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2024-02-29
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_97', 'lay4_167', 'lay4_70', 'lay4_160', 'lay4_76', 'lay4_109', 'lay4_182', 'lay4_148', 'lay4_54', 'lay4_115', 'lay4_14', 'lay4_16', 'lay4_157', 'lay4_29', 'lay4_162', 'lay4_144', 'lay4_183', 'lay4_92', 'lay4_17', 'lay4_57', 'lay4_45', 'lay4_55', 'lay4_189', 'lay4_173', 'lay4_102', 'lay4_161', 'lay4_12', 'lay4_129', 'lay4_37', 'lay4_81', 'lay4_116', 'lay4_143', 'lay4_86', 'lay4_88', 'lay4_187', 'lay4_178', 'lay4_99', 'lay4_95', 'lay4_91', 'lay4_31', 'lay4_139', 'lay4_169', 'lay4_198', 'lay4_168', 'lay4_123', 'lay4_101', 'lay4_195', 'lay4_171', 'lay4_43', 'lay4_28', 'lay4_199', 'lay4_112', 'lay4_65', 'lay4_131', 'lay4_6', 'lay4_44', 'lay4_114', 'lay4_137', 'lay4_196', 'lay4_153', 'lay4_77', 'lay4_176', 'lay4_152', 'lay4_140', 'lay4_155', 'lay4_3', 'lay4_1', 'lay4_145', 'lay4_138', 'lay4_26', 'lay4_47', 'lay4_151', 'lay4_53', 'lay4_80', 'lay4_48', 'lay4_32', 'lay4_24', 'lay4_90', 'lay4_163', 'lay4_175', 'lay4_11', 'lay4_82', 'lay4_104', 'lay4_52'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/convert/model.py:154: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  "Using experimental implementation that allows 'batch_size > 1'."
Solving MIP for lay4_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5102s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4990s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2893s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_144, [-inf,inf]=>[1e-05,0.5936340610458308] (15,-1; 2,-1), time: 4.9972s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_29, [-inf,inf]=>[-inf,-0.0015042648298153717] (-1,-1; 2,-1), time: 5.1828s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_182, [-inf,inf]=>[-0.34419542539144904,0.31152364083688366] (2,-1; 2,-1), time: 5.1879s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_109, [-inf,inf]=>[-0.3358844719149974,0.33951391193245556] (2,-1; 2,-1), time: 5.2306s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_115, [-inf,inf]=>[-0.29481487108341664,0.28510670762597135] (2,-1; 2,-1), time: 5.5126s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-0.5881630566949366,0.10888448009856348] (2,-1; 2,-1), time: 5.6279s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4928s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5294s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-0.12658100683655193,0.6116561832941123] (2,-1; 2,-1), time: 6.1428s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_14, [-inf,inf]=>[-0.19570705729832166,0.3075842585580469] (2,-1; 2,-1), time: 6.1521s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_161, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4822s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5912s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_183, [-inf,inf]=>[-0.3109682264492497,0.24290865337561873] (2,-1; 2,-1), time: 6.0459s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[-0.5717404820082173,0.01752692889607932] (2,-1; 2,-1), time: 6.7611s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7135s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_97, [-inf,inf]=>[-0.5544501377645374,0.4453772512449243] (2,-1; 2,-1), time: 7.1543s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_148, [-inf,inf]=>[-0.19606173138739233,0.311798238923102] (2,-1; 2,-1), time: 7.8089s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6827s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_17, [-inf,inf]=>[-0.44665663722180177,0.11715106439043833] (2,-1; 2,-1), time: 5.6627s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-0.3869740848147112,0.11479987625413235] (2,-1; 2,-1), time: 9.1629s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_129, [-inf,inf]=>[1e-05,0.6299571949026912] (15,-1; 2,-1), time: 3.1284s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_167, [-inf,inf]=>[-0.5430859427903227,0.027675084048646] (2,-1; 2,-1), time: 9.5857s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_31, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4719s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_95, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3256s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4510s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_173, [-inf,inf]=>[1e-05,0.7119445847872793] (15,-1; 2,-1), time: 4.6135s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-0.4554199690633363,0.15402873503388448] (2,-1; 2,-1), time: 4.3703s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_86, [-inf,inf]=>[-0.540871226366201,0.007335343449997103] (2,-1; 2,-1), time: 5.5737s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_143, [-inf,inf]=>[-0.5651144523808346,0.019417732340686014] (2,-1; 2,-1), time: 6.7543s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-0.03242257785527717,0.5877044525936311] (2,-1; 2,-1), time: 5.6128s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-0.3903476782453167,0.09213133352051354] (2,-1; 2,-1), time: 13.8432s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_116, [-inf,inf]=>[-0.3727145769664909,0.12749643787206927] (2,-1; 2,-1), time: 8.0641s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-0.029991369558255446,0.4887320595252711] (2,-1; 2,-1), time: 9.0734s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_169, [-inf,inf]=>[-0.23180139556774518,0.4235537630332388] (2,-1; 2,-1), time: 5.5716s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-0.1785957662131951,0.3422591998416126] (2,-1; 2,-1), time: 6.4077s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[-0.3484998379835214,0.26125796816190505] (2,-1; 2,-1), time: 10.5169s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_198, [-inf,inf]=>[-0.3340432506752175,0.41373003164347005] (2,-1; 2,-1), time: 6.1459s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4878s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_88, [-inf,inf]=>[-0.26657275571948985,0.2359427200802702] (2,-1; 2,-1), time: 9.3892s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5362s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0258s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_137, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1089s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_153, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5132s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[1e-05,0.6272832525698698] (15,-1; 2,-1), time: 3.6709s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_102, [-inf,inf]=>[-0.2655557855348068,0.23862000588601912] (2,-1; 2,-1), time: 12.6065s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_171, [-inf,inf]=>[-0.060293196725173054,0.4171408265725439] (2,-1; 2,-1), time: 4.9888s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_123, [-inf,inf]=>[-0.09460755976481196,0.3896264854502677] (2,-1; 2,-1), time: 9.5131s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.25786128907586536,0.3094613510809165] (2,-1; 2,-1), time: 6.4231s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4612s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_195, [-inf,inf]=>[-0.3879867259543268,0.07435724539727723] (2,-1; 2,-1), time: 7.9810s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_1, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4454s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4974s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[-0.48884464760209323,0.07623274823999485] (2,-1; 2,-1), time: 5.8643s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-0.3363792527288998,0.16029128426319605] (9,-1; 2,-1), time: 16.2426s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[1e-05,0.550581818510544] (15,-1; 2,-1), time: 11.6717s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_199, [-inf,inf]=>[1e-05,0.7282402943588461] (15,-1; 2,-1), time: 7.7155s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5910s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_151, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4344s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4615s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_77, [-inf,inf]=>[-0.12154050319787378,0.41312086318585556] (2,-1; 2,-1), time: 6.2823s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_152, [-inf,inf]=>[-0.2193981875024898,0.38585383969314696] (2,-1; 2,-1), time: 6.1911s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4508s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_24, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6959s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_145, [-inf,inf]=>[1e-05,0.5918518426837355] (15,-1; 2,-1), time: 4.1353s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3720s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_140, [-inf,inf]=>[-0.26595025562498514,0.2985814161668409] (2,-1; 2,-1), time: 6.6564s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_101, [-inf,inf]=>[-0.07746628832651783,0.3968174300005909] (2,-1; 2,-1), time: 12.7667s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_196, [-inf,inf]=>[-0.3429047510561301,0.1741561235494808] (2,-1; 2,-1), time: 8.6197s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_176, [-inf,inf]=>[-0.22299712149976206,0.2625617661207985] (2,-1; 2,-1), time: 7.9971s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_131, [-inf,inf]=>[-0.06769490949516806,0.42047967835427025] (2,-1; 2,-1), time: 10.3215s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3311s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_90, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5510s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_138, [-inf,inf]=>[-0.31496692484645106,0.17370409521328675] (2,-1; 2,-1), time: 6.3253s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[-0.49134489694772576,0.1547016664192647] (2,-1; 2,-1), time: 5.9098s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[1e-05,0.5289807303456739] (15,-1; 2,-1), time: 3.9434s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_175, [-inf,inf]=>[1e-05,0.8893798541151672] (15,-1; 2,-1), time: 4.8889s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_155, [-inf,inf]=>[-0.3838531682156141,0.1033615545732682] (2,-1; 2,-1), time: 10.5443s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_65, [-inf,inf]=>[-0.3195651256383303,0.12552227604143354] (2,-1; 2,-1), time: 13.6622s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_11, [-inf,inf]=>[-0.6130556435734158,0.007926501282287526] (2,-1; 2,-1), time: 5.6994s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-0.4091670363581956,0.08206292767626341] (2,-1; 2,-1), time: 8.7773s, #vars: 1287, #constrs: 553, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-0.5954905450499192,0.021243807809028944] (2,-1; 2,-1), time: 10.3442s, #vars: 1287, #constrs: 553, improved: True
PGD done for relu layer 2
MIP improved 84 nodes out of 84 unstable nodes, lb improved 12.311184883117676, ub improved 13.968985557556152, time 34.2975
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_62', 'lay6_3', 'lay6_34', 'lay6_124', 'lay6_63', 'lay6_144', 'lay6_96', 'lay6_121', 'lay6_67', 'lay6_171', 'lay6_161', 'lay6_115', 'lay6_179', 'lay6_100', 'lay6_97', 'lay6_167', 'lay6_197', 'lay6_60', 'lay6_198', 'lay6_73', 'lay6_8', 'lay6_44', 'lay6_65', 'lay6_58', 'lay6_154', 'lay6_55', 'lay6_79', 'lay6_125', 'lay6_27', 'lay6_132', 'lay6_16', 'lay6_71', 'lay6_38', 'lay6_77', 'lay6_139', 'lay6_7', 'lay6_160', 'lay6_146', 'lay6_135', 'lay6_131', 'lay6_21', 'lay6_120', 'lay6_40', 'lay6_41', 'lay6_10', 'lay6_165', 'lay6_47', 'lay6_29', 'lay6_48', 'lay6_122', 'lay6_69', 'lay6_57', 'lay6_50', 'lay6_195', 'lay6_106', 'lay6_70', 'lay6_64', 'lay6_75', 'lay6_156', 'lay6_117', 'lay6_83', 'lay6_42', 'lay6_20', 'lay6_170', 'lay6_102', 'lay6_39', 'lay6_186', 'lay6_110', 'lay6_136', 'lay6_137', 'lay6_127', 'lay6_116', 'lay6_189', 'lay6_53', 'lay6_61', 'lay6_147', 'lay6_92', 'lay6_107'] filter: 1.0
Solving MIP for lay6_144, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4695s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4716s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5086s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3896s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_197, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3977s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1477s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4026s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4444s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7663s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_179, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8401s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9643s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4544s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4764s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4330s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6125s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9451s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5245s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_38, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4610s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.3534s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9613s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4667s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.2009s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_132, [-inf,inf]=>[1e-05,0.7101969000415893] (15,-1; 9,-1), time: 15.4038s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4294s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5335s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-0.4851297066011747,0.008781763449418393] (9,-1; 2,-1), time: 22.1353s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.64585594533833,0.06655991744689264] (2,-1; 9,-1), time: 26.1377s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4299s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_58, [-inf,inf]=>[-0.5542219099912599,0.04033289492688522] (9,-1; 2,-1), time: 25.0931s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-0.3336022466909994,0.19904734971948748] (9,-1; 2,-1), time: 26.2929s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5173s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4173s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4084s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[-0.5070406315620068,0.026475672730559202] (9,-1; 9,-1), time: 30.0152s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[-0.3921564186519211,0.1165506031687751] (9,-1; 9,-1), time: 30.0167s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_161, [-inf,inf]=>[-0.21951169294063297,0.22498985489554174] (9,-1; 9,-1), time: 30.0201s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_115, [-inf,inf]=>[-0.28103102698696725,0.23811844682126398] (9,-1; 9,-1), time: 30.0276s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[-0.7382668993285376,0.03365010788964476] (9,-1; 9,-1), time: 30.0327s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.5112344520596545,0.026115701412306923] (9,-1; 9,-1), time: 30.0431s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4330s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_57, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4979s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3983s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4077s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0072s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1021s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4242s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4166s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5189s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4921s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_154, [-inf,inf]=>[-0.3629849156363811,0.4120310979582821] (9,-1; 9,-1), time: 30.0191s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.6301s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-0.13220009630499718,0.3830685664222063] (9,-1; 9,-1), time: 30.0219s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-0.14278872584536131,0.2992641630672364] (9,-1; 9,-1), time: 30.0263s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5411s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6898s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_137, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4462s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0563s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[-0.43976714853289545,0.041234751279670454] (9,-1; 9,-1), time: 30.0246s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_189, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5251s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[-0.21998854817449978,0.35815867973243626] (9,-1; 9,-1), time: 30.0154s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_147, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4289s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5102s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-0.4193695305501587,0.08434944768335843] (9,-1; 9,-1), time: 30.0902s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[1e-05,0.543858600510489] (15,-1; 9,-1), time: 18.7287s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_116, [-inf,inf]=>[1e-05,1.077098276410512] (15,-1; 9,-1), time: 15.5483s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_120, [-inf,inf]=>[-0.43923023365015945,0.2227222782475398] (9,-1; 9,-1), time: 30.0731s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[1e-05,1.0039977077668842] (15,-1; 9,-1), time: 16.0515s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.44074750947643876,0.07226998798437205] (9,-1; 2,-1), time: 26.9931s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-0.23975509841662448,0.21052274155140033] (9,-1; 9,-1), time: 30.0231s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_48, [-inf,inf]=>[-0.4070365035121291,0.22460073372972425] (9,-1; 9,-1), time: 30.0277s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_195, [-inf,inf]=>[-0.536074670776895,0.1026439240873054] (9,-1; 9,-1), time: 30.0277s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-0.46057211602774417,0.14758494457442975] (9,-1; 9,-1), time: 30.2482s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-0.3311254961900993,0.1290569420506787] (2,-1; 9,-1), time: 28.7835s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_39, [-inf,inf]=>[-0.1282484849970693,0.5600990755354434] (9,-1; 2,-1), time: 29.6925s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.20358907799919013,0.17485037443762352] (9,-1; 9,-1), time: 30.0156s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_127, [-inf,inf]=>[-0.06512854695386436,0.4709985796346739] (9,-1; 9,-1), time: 30.0108s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.5455132271830239,0.00994956654786627] (9,-1; 9,-1), time: 30.0302s, #vars: 1579, #constrs: 891, improved: True
Solving MIP for lay6_107, [-inf,inf]=>[-0.11242087493774507,0.32088971679279676] (9,-1; 9,-1), time: 30.0183s, #vars: 1579, #constrs: 891, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(160, -1), (157, -1), (29, -1), (144, 1), (92, -1), (55, -1), (189, -1), (173, 1), (161, -1), (12, -1), (129, 1), (81, -1), (187, -1), (95, -1), (31, -1), (139, -1), (168, 1), (28, 1), (199, 1), (6, -1), (44, -1), (114, -1), (137, -1), (153, -1), (3, -1), (1, -1), (145, 1), (26, -1), (47, -1), (151, -1), (32, -1), (24, -1), (90, -1), (163, -1), (175, 1), (82, -1), (104, 1), (52, -1)]
best_l after optimization: -71.34956359863281
beta sum per layer: []
alpha/beta optimization time: 15.960108280181885
alpha-CROWN with intermediate bounds by MIP: tensor([[-5.71925163, -7.66121674, -9.69868183, -9.74111843, -8.92637157,
         -8.52435017, -8.39403725, -4.44993734, -8.23459435]], device='cuda:0') None
MIP improved 78 nodes out of 78 unstable nodes, lb improved 14.08145809173584, ub improved 22.709821701049805, time 73.9023
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_160', 'lay8_162', 'lay8_115', 'lay8_157', 'lay8_35', 'lay8_93', 'lay8_149', 'lay8_118', 'lay8_61', 'lay8_23', 'lay8_165', 'lay8_60', 'lay8_37', 'lay8_59', 'lay8_76', 'lay8_79', 'lay8_92', 'lay8_14', 'lay8_179', 'lay8_49', 'lay8_53', 'lay8_33', 'lay8_126', 'lay8_11', 'lay8_56', 'lay8_191', 'lay8_169', 'lay8_21', 'lay8_164', 'lay8_44', 'lay8_171', 'lay8_100', 'lay8_156', 'lay8_158', 'lay8_50', 'lay8_12', 'lay8_129', 'lay8_133', 'lay8_177', 'lay8_166', 'lay8_102', 'lay8_147', 'lay8_85', 'lay8_89', 'lay8_168', 'lay8_172', 'lay8_103', 'lay8_150', 'lay8_170', 'lay8_123', 'lay8_180', 'lay8_176', 'lay8_119', 'lay8_54', 'lay8_31', 'lay8_194', 'lay8_144', 'lay8_190', 'lay8_146', 'lay8_128', 'lay8_137', 'lay8_36', 'lay8_151', 'lay8_94', 'lay8_28', 'lay8_66', 'lay8_68', 'lay8_70', 'lay8_84', 'lay8_116', 'lay8_71', 'lay8_8', 'lay8_10', 'lay8_183', 'lay8_24', 'lay8_101', 'lay8_185', 'lay8_154', 'lay8_34', 'lay8_39', 'lay8_121', 'lay8_58', 'lay8_40', 'lay8_130', 'lay8_99', 'lay8_141', 'lay8_117', 'lay8_48', 'lay8_19', 'lay8_95', 'lay8_20', 'lay8_134', 'lay8_163', 'lay8_27', 'lay8_184', 'lay8_6', 'lay8_124', 'lay8_43', 'lay8_74', 'lay8_187', 'lay8_195', 'lay8_189', 'lay8_193', 'lay8_173', 'lay8_107', 'lay8_81', 'lay8_109', 'lay8_69', 'lay8_143', 'lay8_65', 'lay8_75', 'lay8_106', 'lay8_91', 'lay8_127', 'lay8_96', 'lay8_192', 'lay8_0', 'lay8_78', 'lay8_7', 'lay8_51', 'lay8_57', 'lay8_1', 'lay8_41', 'lay8_17', 'lay8_86', 'lay8_112', 'lay8_82', 'lay8_153', 'lay8_98', 'lay8_3', 'lay8_159', 'lay8_197', 'lay8_181', 'lay8_72', 'lay8_161', 'lay8_122', 'lay8_148', 'lay8_9', 'lay8_77', 'lay8_30', 'lay8_5', 'lay8_88', 'lay8_63', 'lay8_178', 'lay8_139', 'lay8_80'] filter: 1.0
Solving MIP for lay8_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6371s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6413s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6454s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6487s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_61, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6558s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6724s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7157s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7109s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7296s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6125s, #vars: 1835, #constrs: 1175, improved: True
Solving MIP for lay8_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6198s, #vars: 1835, #constrs: 1175, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(62, -1), (3, -1), (34, -1), (63, -1), (144, -1), (179, -1), (100, -1), (97, -1), (197, -1), (60, -1), (198, -1), (73, -1), (8, -1), (65, -1), (55, -1), (79, -1), (125, -1), (27, -1), (132, 1), (16, -1), (71, -1), (38, -1), (139, -1), (135, -1), (131, -1), (40, -1), (165, -1), (47, -1), (29, -1), (122, -1), (69, -1), (57, -1), (106, -1), (70, -1), (64, -1), (75, -1), (156, -1), (117, -1), (83, -1), (42, -1), (20, 1), (186, -1), (110, -1), (136, -1), (137, -1), (116, 1), (189, -1), (53, 1), (147, -1), (92, -1)]

all verified at 0th iter
best_l after optimization: 53.802757263183594
beta sum per layer: []
alpha/beta optimization time: 0.0843191146850586
alpha-CROWN with intermediate bounds by MIP: tensor([[8.31833076, 7.51392698, 7.00562191, 5.24881029, 2.44754553, 5.94322157,
         8.30665588, 4.40502405, 4.61362171]], device='cuda:0') None
min of alpha-CROWN bounds 2.4475455284118652>=0, verified!
MIP finished with 114.45941972732544s
Run final alpha-CROWN after MIP solving on layer 7 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])

all verified at 0th iter
best_l after optimization: 53.802757263183594
beta sum per layer: []
alpha/beta optimization time: 0.07202816009521484
alpha-CROWN with intermediate bounds improved by MIP: tensor([[8.31833076, 7.51392698, 7.00562191, 5.24881029, 2.44754553, 5.94322157,
         8.30665588, 4.40502405, 4.61362171]], device='cuda:0') None
Split layers:
  BoundLinear(name=/input.27, inputs=[/51, /33, /34]): [(BoundRelu(name=/53, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.23, inputs=[/49, /31, /32]): [(BoundRelu(name=/51, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.7, inputs=[/41, /23, /24]): [(BoundRelu(name=/43, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.11, inputs=[/43, /25, /26]): [(BoundRelu(name=/45, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.15, inputs=[/45, /27, /28]): [(BoundRelu(name=/47, inputs=[/input.15]), 0)]
  BoundLinear(name=/input, inputs=[/37, /19, /20]): [(BoundRelu(name=/39, inputs=[/input]), 0)]
  BoundLinear(name=/input.19, inputs=[/47, /29, /30]): [(BoundRelu(name=/49, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.3, inputs=[/39, /21, /22]): [(BoundRelu(name=/41, inputs=[/input.3]), 0)]
refined global lb: tensor([[8.31833076],
        [7.51392698],
        [7.00562191],
        [5.24881029],
        [2.44754553],
        [5.94322157],
        [8.30665588],
        [4.40502405],
        [4.61362171]], device='cuda:0') min: tensor(2.44754553, device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
Result: safe-incomplete-refine in 137.2293 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):137.22793012700976, max time: 137.22930240631104
mean time for verified SAFE instances(total 1): 137.22930240631104, max time: 137.22930240631104
safe-incomplete-refine (total 1), index: [0]
