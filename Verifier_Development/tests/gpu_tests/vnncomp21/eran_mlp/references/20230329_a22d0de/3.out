Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: eran_instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2021/benchmarks/eran
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: 'remove_ineffective_layers, remove_relu_in_last_layer'
data:
  start: 17
  end: 18
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 500
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 13:45:01 2023 on zeratul
customized start/end sample from instance 17 to 18 in eran_instances.csv
Internal results will be saved to a-b-crown_[eran_instances]_start=17_end=18_iter=20_b=500_timeout=360_branching=kfsb-min-3_lra-init=0.1_lra=0.01_lrb=0.05_PGD=before_cplex_cuts=False_initial_max_domains=1.npz.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx nets/mnist_relu_9_200.onnx
Using vnnlib specs/mnist/mnist_spec_idx_969_eps_0.01500.vnnlib
Precompiled vnnlib file found at ../../vnncomp2021/benchmarks/eran/specs/mnist/mnist_spec_idx_969_eps_0.01500.vnnlib.compiled
Loading onnx ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx wih quirks {}
Onnx optimization with flag: remove_ineffective_layers, remove_relu_in_last_layer
Found existed optimized onnx model at ../../vnncomp2021/benchmarks/eran/nets/mnist_relu_9_200.onnx.optimized
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.003750002011656761, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.74227256, -1.45069611,  0.57550186, -2.76694155,  5.53834867,
         -0.84460747,  0.35401791, -0.27449414, -0.16281110,  1.33919895]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.92145532, -1.20564020,  0.20320828, -2.08004713,  4.40658283,
          -0.63109434,  0.03165475, -0.17879954,  0.03442112,  1.67058682],
         [-0.92145532, -1.20564020,  0.20320828, -2.08004713,  4.40658283,
          -0.63109434,  0.03165475, -0.17879954,  0.03442112,  1.67058682]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[5.32803822, 5.61222315, 4.20337439, 6.48662996, 5.03767729,
          4.37492800, 4.58538246, 4.37216187, 2.73599601]]], device='cuda:0')
number of violation:  0
Attack finished in 2.3556 seconds.
PGD attack failed
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/19): BoundParams(name=/19, inputs=[])
  (/20): BoundParams(name=/20, inputs=[])
  (/21): BoundParams(name=/21, inputs=[])
  (/22): BoundParams(name=/22, inputs=[])
  (/23): BoundParams(name=/23, inputs=[])
  (/24): BoundParams(name=/24, inputs=[])
  (/25): BoundParams(name=/25, inputs=[])
  (/26): BoundParams(name=/26, inputs=[])
  (/27): BoundParams(name=/27, inputs=[])
  (/28): BoundParams(name=/28, inputs=[])
  (/29): BoundParams(name=/29, inputs=[])
  (/30): BoundParams(name=/30, inputs=[])
  (/31): BoundParams(name=/31, inputs=[])
  (/32): BoundParams(name=/32, inputs=[])
  (/33): BoundParams(name=/33, inputs=[])
  (/34): BoundParams(name=/34, inputs=[])
  (/35): BoundParams(name=/35, inputs=[])
  (/36): BoundParams(name=/36, inputs=[])
  (/37): BoundFlatten(name=/37, inputs=[/0])
  (/input): BoundLinear(name=/input, inputs=[/37, /19, /20])
  (/39): BoundRelu(name=/39, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/39, /21, /22])
  (/41): BoundRelu(name=/41, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/41, /23, /24])
  (/43): BoundRelu(name=/43, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/43, /25, /26])
  (/45): BoundRelu(name=/45, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/45, /27, /28])
  (/47): BoundRelu(name=/47, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/47, /29, /30])
  (/49): BoundRelu(name=/49, inputs=[/input.19])
  (/input.23): BoundLinear(name=/input.23, inputs=[/49, /31, /32])
  (/51): BoundRelu(name=/51, inputs=[/input.23])
  (/input.27): BoundLinear(name=/input.27, inputs=[/51, /33, /34])
  (/53): BoundRelu(name=/53, inputs=[/input.27])
  (/54): BoundLinear(name=/54, inputs=[/53, /35, /36])
)
Model prediction is: tensor([[-0.74227256, -1.45069611,  0.57550186, -2.76694155,  5.53834867,
         -0.84460747,  0.35401791, -0.27449414, -0.16281110,  1.33919895]],
       device='cuda:0')
layer /39 using sparse-features alpha with shape [56]; unstable size 56; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 75 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 164 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [75]; unstable size 75; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 164 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [164]; unstable size 164; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1907.28613281, -3161.19042969, -3760.02099609, -4179.31835938,
         -3599.85034180, -3069.29150391, -2890.16015625, -3741.15893555,
         -3152.86352539]], device='cuda:0') None
best_l after optimization: -20894.45703125
alpha/beta optimization time: 14.591562032699585
initial alpha-CROWN bounds: tensor([[-1399.15173340, -2176.92187500, -2689.25781250, -2930.01513672,
         -2591.23364258, -2211.00659180, -2018.26965332, -2630.13867188,
         -2248.46313477]], device='cuda:0')
Worst class: (+ rhs) -2930.01513671875
Split layers:
  BoundLinear(name=/input.19, inputs=[/47, /29, /30]): [(BoundRelu(name=/49, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.11, inputs=[/43, /25, /26]): [(BoundRelu(name=/45, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.15, inputs=[/45, /27, /28]): [(BoundRelu(name=/47, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.7, inputs=[/41, /23, /24]): [(BoundRelu(name=/43, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.27, inputs=[/51, /33, /34]): [(BoundRelu(name=/53, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.3, inputs=[/39, /21, /22]): [(BoundRelu(name=/41, inputs=[/input.3]), 0)]
  BoundLinear(name=/input, inputs=[/37, /19, /20]): [(BoundRelu(name=/39, inputs=[/input]), 0)]
  BoundLinear(name=/input.23, inputs=[/49, /31, /32]): [(BoundRelu(name=/51, inputs=[/input.23]), 0)]
Start solving intermediate bounds with MIP...
layer /39 using sparse-features alpha with shape [56]; unstable size 56; total size 200 (torch.Size([1, 200]))
layer /39 start_node /input.3 using sparse-spec alpha with unstable size 75 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.7 using sparse-spec alpha with unstable size 164 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /39 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using sparse-features alpha with shape [75]; unstable size 75; total size 200 (torch.Size([1, 200]))
layer /41 start_node /input.7 using sparse-spec alpha with unstable size 164 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /41 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /43 using sparse-features alpha with shape [164]; unstable size 164; total size 200 (torch.Size([1, 200]))
layer /43 start_node /input.11 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /43 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /45 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /45 start_node /input.15 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /45 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /47 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /47 start_node /input.19 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /47 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /49 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /49 start_node /input.23 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /49 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /51 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /51 start_node /input.27 using full alpha with unstable size 200 total_size 200 output_shape torch.Size([200])
layer /51 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
layer /53 using full alpha with shape torch.Size([200]); unstable size 200; total size 200 (torch.Size([1, 200]))
layer /53 start_node /54 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2024-02-29
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=200, bias=True) 0 2 torch.Size([200])
Linear(in_features=200, out_features=200, bias=True) 1 4 torch.Size([200])
sorted candidates ['lay4_55', 'lay4_69', 'lay4_128', 'lay4_193', 'lay4_143', 'lay4_6', 'lay4_142', 'lay4_195', 'lay4_89', 'lay4_151', 'lay4_140', 'lay4_148', 'lay4_44', 'lay4_129', 'lay4_2', 'lay4_115', 'lay4_137', 'lay4_43', 'lay4_99', 'lay4_186', 'lay4_191', 'lay4_15', 'lay4_45', 'lay4_139', 'lay4_12', 'lay4_123', 'lay4_101', 'lay4_9', 'lay4_59', 'lay4_141', 'lay4_169', 'lay4_192', 'lay4_145', 'lay4_170', 'lay4_112', 'lay4_120', 'lay4_28', 'lay4_102', 'lay4_52', 'lay4_13', 'lay4_121', 'lay4_175', 'lay4_85', 'lay4_172', 'lay4_7', 'lay4_92', 'lay4_147', 'lay4_198', 'lay4_67', 'lay4_187', 'lay4_178', 'lay4_174', 'lay4_30', 'lay4_20', 'lay4_188', 'lay4_176', 'lay4_150', 'lay4_168', 'lay4_199', 'lay4_82', 'lay4_73', 'lay4_111', 'lay4_56', 'lay4_32', 'lay4_162', 'lay4_173', 'lay4_38', 'lay4_104', 'lay4_158', 'lay4_16', 'lay4_48', 'lay4_58', 'lay4_103', 'lay4_106', 'lay4_160'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/convert/model.py:154: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  "Using experimental implementation that allows 'batch_size > 1'."
Solving MIP for lay4_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5828s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9489s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_148, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5996s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_89, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6732s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3350s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6603s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_137, [-inf,inf]=>[-0.6076930874646618,0.07402231910007008] (2,-1; 2,-1), time: 3.1296s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4310s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_15, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.0976s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_129, [-inf,inf]=>[-0.40040858825183784,0.29048996760494167] (2,-1; 2,-1), time: 4.7940s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_55, [-inf,inf]=>[-0.286416463415313,0.4142290502934896] (2,-1; 2,-1), time: 4.8152s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_2, [-inf,inf]=>[-0.6424950303926314,0.06976315773220612] (2,-1; 2,-1), time: 4.9188s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_151, [-inf,inf]=>[-0.11010852488116396,0.6376207492089551] (2,-1; 2,-1), time: 5.4635s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6504s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_195, [-inf,inf]=>[-0.3117827791030027,0.2698066530074872] (2,-1; 2,-1), time: 5.5480s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_6, [-inf,inf]=>[-0.4863428897813516,0.09502297634626813] (2,-1; 2,-1), time: 5.5519s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_193, [-inf,inf]=>[-0.488578419473474,0.2788132680975173] (2,-1; 2,-1), time: 5.8427s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_140, [-inf,inf]=>[-0.23577572087164544,0.40800245826250364] (2,-1; 2,-1), time: 6.0489s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5434s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_128, [-inf,inf]=>[-0.15767488905252044,0.6530723226527003] (2,-1; 2,-1), time: 6.1201s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-0.14570153763368865,0.45956509204229373] (2,-1; 2,-1), time: 5.1939s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6813s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_44, [-inf,inf]=>[-0.49097338869553847,0.19342064064053865] (2,-1; 2,-1), time: 6.4812s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[-0.42833572306933754,0.3168913598913383] (2,-1; 2,-1), time: 6.5646s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_186, [-inf,inf]=>[-0.7689129149668548,0.02004144716129122] (2,-1; 2,-1), time: 5.2298s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_141, [-inf,inf]=>[-0.6344628329784227,0.04363175202212535] (2,-1; 2,-1), time: 2.7327s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_145, [-inf,inf]=>[-0.5095073579590059,0.10127925960767337] (2,-1; 2,-1), time: 2.6078s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_115, [-inf,inf]=>[-0.11255073036283694,0.46696614949779763] (2,-1; 2,-1), time: 8.5943s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_102, [-inf,inf]=>[1e-05,0.8168585122410575] (15,-1; 2,-1), time: 2.6461s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_9, [-inf,inf]=>[-0.634264141822443,0.011691826665425217] (2,-1; 2,-1), time: 4.5457s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_12, [-inf,inf]=>[-0.6587900752654015,0.07902507036100201] (2,-1; 2,-1), time: 4.7697s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_170, [-inf,inf]=>[-0.48200029597071914,0.3329718449339725] (2,-1; 2,-1), time: 4.2189s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_139, [-inf,inf]=>[-0.08017965004540803,0.47656474830918577] (2,-1; 2,-1), time: 6.1604s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_198, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4932s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_120, [-inf,inf]=>[-0.4794365791532017,0.17516890725261405] (2,-1; 2,-1), time: 4.9228s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_123, [-inf,inf]=>[-0.4302329977285219,0.17112875616115944] (2,-1; 2,-1), time: 6.4879s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5942s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5913s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_52, [-inf,inf]=>[-0.180096581266619,0.46761443801565233] (2,-1; 2,-1), time: 5.4218s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_28, [-inf,inf]=>[-0.09047209162799846,0.5844884481516832] (2,-1; 2,-1), time: 5.8551s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_121, [-inf,inf]=>[-0.09270364498747434,0.6674779934873936] (2,-1; 2,-1), time: 5.5184s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_20, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5729s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_169, [-inf,inf]=>[-0.6364306718902993,0.06454501291976388] (2,-1; 2,-1), time: 7.0930s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_112, [-inf,inf]=>[-0.11976133292337515,0.5129833547260213] (2,-1; 2,-1), time: 6.5514s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_172, [-inf,inf]=>[-inf,-0.0023469005161761702] (-1,-1; 2,-1), time: 4.3273s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5084s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[1e-05,0.770299353906386] (15,-1; 2,-1), time: 2.2685s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_111, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6336s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_30, [-inf,inf]=>[-0.9419294721279685,0.026149168381172094] (2,-1; 2,-1), time: 2.0731s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_85, [-inf,inf]=>[-0.5101461377898544,0.12405786649922779] (2,-1; 2,-1), time: 5.3089s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5087s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_147, [-inf,inf]=>[1e-05,0.7990973391253973] (15,-1; 2,-1), time: 4.4569s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_92, [-inf,inf]=>[-0.03752250901216109,0.7816633668024863] (2,-1; 2,-1), time: 4.5985s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_175, [-inf,inf]=>[-0.4001208578158084,0.5098415137295055] (2,-1; 2,-1), time: 6.0600s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4902s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_7, [-inf,inf]=>[-0.49712153792539604,0.0926527981353544] (2,-1; 2,-1), time: 5.6581s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4473s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[0.00024643057142859776,0.6371518023946656] (2,-1; 2,-1), time: 9.0478s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_150, [-inf,inf]=>[1e-05,0.7449303449483589] (15,-1; 2,-1), time: 3.5966s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_158, [-inf,inf]=>[1e-05,1.0135045509630027] (15,-1; 2,-1), time: 2.2152s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_73, [-inf,inf]=>[-0.5991736608904641,0.12993736229969213] (2,-1; 2,-1), time: 3.4495s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_176, [-inf,inf]=>[-0.4312717867416932,0.22079529912689363] (2,-1; 2,-1), time: 4.9142s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_160, [-inf,inf]=>[1e-05,1.2540796197822157] (15,-1; 2,-1), time: 1.3447s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_199, [-inf,inf]=>[-0.6668263635801623,0.23501525137894286] (2,-1; 2,-1), time: 6.0778s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_188, [-inf,inf]=>[-0.39348504067630724,0.20273702650811917] (2,-1; 2,-1), time: 7.2081s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_48, [-inf,inf]=>[-0.6263270293377142,0.0649206984462607] (2,-1; 2,-1), time: 4.7425s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_162, [-inf,inf]=>[-0.589433244022983,0.0690532443041599] (2,-1; 2,-1), time: 5.8109s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_56, [-inf,inf]=>[-0.41888517887938537,0.28202730188441594] (2,-1; 2,-1), time: 6.5361s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_82, [-inf,inf]=>[-0.942139031343859,0.05725332214762076] (2,-1; 2,-1), time: 7.0397s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_103, [-inf,inf]=>[-0.2196317747087176,0.40360849998482295] (2,-1; 2,-1), time: 5.0151s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_38, [-inf,inf]=>[-0.1978043646778428,0.3664892983521736] (2,-1; 2,-1), time: 6.1178s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_173, [-inf,inf]=>[-0.44006844536239703,0.25499760567130075] (2,-1; 2,-1), time: 6.9002s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_16, [-inf,inf]=>[-0.017008242709514645,0.6298306858803987] (2,-1; 2,-1), time: 6.8024s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_32, [-inf,inf]=>[-0.4641291449377941,0.1857407468453885] (2,-1; 2,-1), time: 8.6177s, #vars: 1297, #constrs: 568, improved: True
Solving MIP for lay4_106, [-inf,inf]=>[-0.5781090407035494,0.06080257244891007] (2,-1; 2,-1), time: 6.9090s, #vars: 1297, #constrs: 568, improved: True
PGD done for relu layer 2
MIP improved 75 nodes out of 75 unstable nodes, lb improved 11.893495559692383, ub improved 13.557999610900879, time 24.6719
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=200, out_features=200, bias=True) 2 6 torch.Size([200])
sorted candidates ['lay6_143', 'lay6_139', 'lay6_34', 'lay6_158', 'lay6_159', 'lay6_43', 'lay6_17', 'lay6_118', 'lay6_16', 'lay6_187', 'lay6_127', 'lay6_60', 'lay6_59', 'lay6_112', 'lay6_166', 'lay6_190', 'lay6_131', 'lay6_68', 'lay6_33', 'lay6_41', 'lay6_125', 'lay6_142', 'lay6_123', 'lay6_7', 'lay6_119', 'lay6_172', 'lay6_28', 'lay6_54', 'lay6_10', 'lay6_164', 'lay6_197', 'lay6_30', 'lay6_106', 'lay6_178', 'lay6_160', 'lay6_62', 'lay6_169', 'lay6_26', 'lay6_152', 'lay6_75', 'lay6_162', 'lay6_67', 'lay6_94', 'lay6_183', 'lay6_23', 'lay6_50', 'lay6_95', 'lay6_40', 'lay6_5', 'lay6_45', 'lay6_78', 'lay6_87', 'lay6_96', 'lay6_163', 'lay6_148', 'lay6_111', 'lay6_46', 'lay6_77', 'lay6_155', 'lay6_99', 'lay6_73', 'lay6_71', 'lay6_52', 'lay6_81', 'lay6_124', 'lay6_64', 'lay6_102', 'lay6_55', 'lay6_146', 'lay6_44', 'lay6_185', 'lay6_63', 'lay6_193', 'lay6_85', 'lay6_100', 'lay6_174', 'lay6_156', 'lay6_72', 'lay6_79', 'lay6_115', 'lay6_199', 'lay6_65', 'lay6_1', 'lay6_42', 'lay6_101', 'lay6_132', 'lay6_167', 'lay6_22', 'lay6_74', 'lay6_35', 'lay6_188', 'lay6_3', 'lay6_130', 'lay6_18', 'lay6_9', 'lay6_195', 'lay6_168', 'lay6_135', 'lay6_121', 'lay6_19', 'lay6_136', 'lay6_133', 'lay6_141', 'lay6_114', 'lay6_8', 'lay6_88', 'lay6_97', 'lay6_147', 'lay6_12', 'lay6_149', 'lay6_157', 'lay6_194', 'lay6_6', 'lay6_14', 'lay6_25', 'lay6_145', 'lay6_129', 'lay6_140', 'lay6_69', 'lay6_83', 'lay6_98', 'lay6_109', 'lay6_82', 'lay6_4', 'lay6_47', 'lay6_2', 'lay6_116', 'lay6_20', 'lay6_170', 'lay6_53', 'lay6_186', 'lay6_70', 'lay6_161', 'lay6_191', 'lay6_120', 'lay6_56', 'lay6_171', 'lay6_107', 'lay6_184', 'lay6_0', 'lay6_11', 'lay6_179', 'lay6_29', 'lay6_92', 'lay6_138', 'lay6_117', 'lay6_122', 'lay6_173', 'lay6_86', 'lay6_150', 'lay6_15', 'lay6_51', 'lay6_165', 'lay6_192', 'lay6_151', 'lay6_61', 'lay6_110', 'lay6_21', 'lay6_137', 'lay6_144', 'lay6_104'] filter: 1.0
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8730s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0225s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.1753s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_33, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5197s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_17, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.7280s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5244s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_142, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8892s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.4567s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 6.5357s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_119, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.8356s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_158, [-inf,inf]=>[-0.44077998329273793,0.11272816586750847] (9,-1; 2,-1), time: 25.9189s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_159, [-inf,inf]=>[-0.5575663938103141,0.0774341868453746] (9,-1; 2,-1), time: 27.3664s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_43, [-inf,inf]=>[-0.21754953400737825,0.27263284614339595] (9,-1; 2,-1), time: 27.5653s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_28, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7190s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_131, [-inf,inf]=>[-0.49607596831434975,0.11410159627822941] (2,-1; 9,-1), time: 27.3090s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_172, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.6931s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_190, [-inf,inf]=>[-0.6077895053952271,0.0512356642091122] (9,-1; 2,-1), time: 29.6477s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_139, [-inf,inf]=>[-0.22166649412572456,0.8396848077114244] (9,-1; 2,-1), time: 29.9622s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_118, [-inf,inf]=>[-0.42364202910152393,0.0014003523545631014] (9,-1; 9,-1), time: 30.0235s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_112, [-inf,inf]=>[-0.17932053193612146,0.38169194033723236] (9,-1; 9,-1), time: 30.0194s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_59, [-inf,inf]=>[-0.3935074750191639,0.16291262057856162] (9,-1; 9,-1), time: 30.0260s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_166, [-inf,inf]=>[-0.5204188123114774,0.023872970370506043] (9,-1; 9,-1), time: 30.0235s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_127, [-inf,inf]=>[-0.16290819270780926,0.35588017038561676] (9,-1; 9,-1), time: 30.1144s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_34, [-inf,inf]=>[-0.5958690536677664,0.0005493032782212277] (9,-1; 9,-1), time: 30.2040s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_68, [-inf,inf]=>[-0.2606395933588659,0.22748321464255195] (9,-1; 2,-1), time: 29.0062s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_26, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2530s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_152, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3340s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_160, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5912s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_183, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4736s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_169, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.5380s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_41, [-inf,inf]=>[-0.45439082869826164,0.027346974862131522] (9,-1; 9,-1), time: 30.0342s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_125, [-inf,inf]=>[-0.36534354866278296,0.08206682865558164] (9,-1; 9,-1), time: 30.1505s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.4200s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_40, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4019s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_50, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9818s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_45, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5359s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_87, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5719s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_62, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.4171s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_23, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.1265s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_94, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.7790s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_67, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 11.1607s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_96, [-inf,inf]=>[1e-05,1.0324435001011243] (15,-1; 2,-1), time: 9.0332s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_77, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5448s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_163, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.2254s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.9025s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_54, [-inf,inf]=>[-0.3482937148195035,0.0770799983566078] (9,-1; 2,-1), time: 27.2428s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_75, [-inf,inf]=>[-0.5256577310662335,0.0922543898088056] (2,-1; 9,-1), time: 26.0594s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_52, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6322s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_164, [-inf,inf]=>[-0.5510812371729896,0.012315992496969868] (9,-1; 9,-1), time: 30.0284s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_10, [-inf,inf]=>[-0.37761564633312644,0.2627774847011969] (9,-1; 9,-1), time: 30.1660s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_197, [-inf,inf]=>[-0.4286195656124228,0.088322354173132] (9,-1; 9,-1), time: 30.0485s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_30, [-inf,inf]=>[-0.018877677350982485,0.5026426943892219] (9,-1; 9,-1), time: 30.0187s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_106, [-inf,inf]=>[-0.26485266389251105,0.24415604113358377] (9,-1; 9,-1), time: 30.0190s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_55, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6549s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_162, [-inf,inf]=>[-0.5301406067619551,0.05204964590044674] (9,-1; 9,-1), time: 30.2236s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_95, [-inf,inf]=>[-0.4128722886681463,0.24295854462866337] (9,-1; 9,-1), time: 30.0315s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_63, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3327s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_78, [-inf,inf]=>[-0.17179923366042277,0.3558875996527324] (9,-1; 9,-1), time: 30.0361s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_193, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5402s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_5, [-inf,inf]=>[-0.4896438320584593,0.029853552144875083] (9,-1; 9,-1), time: 31.4602s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6873s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_174, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4858s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_102, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.1940s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_148, [-inf,inf]=>[-0.4593003316562839,0.08415566745803768] (9,-1; 2,-1), time: 26.2950s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_111, [-inf,inf]=>[-0.4771067714918444,0.06864373727337152] (9,-1; 9,-1), time: 30.0139s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-0.5850218043229257,0.006359605285376483] (9,-1; 9,-1), time: 30.0177s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_155, [-inf,inf]=>[-0.9155239603286693,0.0016251938566585918] (2,-1; 9,-1), time: 26.5658s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4129s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_79, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 8.8752s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[1e-05,0.7065615002891698] (15,-1; 9,-1), time: 16.2914s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.5039s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_132, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.2187s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_1, [-inf,inf]=>[1e-05,1.0983400303623827] (15,-1; 2,-1), time: 9.5652s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_73, [-inf,inf]=>[-0.30211246803437114,0.24814606014432286] (9,-1; 9,-1), time: 30.2426s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 7.7445s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2970s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-0.4453864284223512,0.13146982261779175] (9,-1; 9,-1), time: 30.0154s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_64, [-inf,inf]=>[-0.49931238197192146,0.08540160670501354] (2,-1; 9,-1), time: 28.1517s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5585s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_188, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.5187s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_81, [-inf,inf]=>[-0.20554053680934892,0.25816229103626553] (9,-1; 2,-1), time: 29.8085s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_9, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5567s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_168, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5519s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_124, [-inf,inf]=>[-0.03225526176271356,0.48997686742636126] (9,-1; 9,-1), time: 30.0213s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_156, [-inf,inf]=>[-0.16027532149379345,0.31501112395359276] (9,-1; 2,-1), time: 22.4494s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_135, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3017s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_133, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5841s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_136, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.8959s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-0.5974182134151779,0.028520683927061245] (9,-1; 9,-1), time: 30.4204s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_185, [-inf,inf]=>[-0.5095681821426992,0.0466050665832422] (9,-1; 9,-1), time: 30.0143s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_88, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5883s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_97, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5667s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_115, [-inf,inf]=>[-0.017945015582747515,0.47212086917995716] (9,-1; 2,-1), time: 27.0253s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_85, [-inf,inf]=>[-0.35987236106063064,0.15520530051029863] (9,-1; 9,-1), time: 30.0927s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_130, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.1430s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_12, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3370s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7046s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_8, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.9041s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5512s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_72, [-inf,inf]=>[-0.17337870597118876,0.3540453988005666] (9,-1; 9,-1), time: 30.0203s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_149, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6847s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_14, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5602s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_129, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6562s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 9.8031s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_83, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.2331s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_199, [-inf,inf]=>[-0.12380872614702675,0.27328998802801724] (9,-1; 9,-1), time: 30.1169s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_98, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5833s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_82, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5687s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[1e-05,1.054918056770182] (15,-1; 9,-1), time: 15.7001s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_167, [-inf,inf]=>[-0.3622360301336707,0.28046123903106196] (2,-1; 9,-1), time: 24.7563s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_2, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6241s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_140, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.2223s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_22, [-inf,inf]=>[-0.24419866924587966,0.28228153561389235] (9,-1; 9,-1), time: 30.0350s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-0.48354144358486834,0.023638885076349245] (9,-1; 9,-1), time: 30.0175s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_69, [-inf,inf]=>[1e-05,0.7335134451607658] (15,-1; 9,-1), time: 15.6162s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_3, [-inf,inf]=>[-0.4727950215863598,0.06853827842899739] (9,-1; 9,-1), time: 30.0292s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_47, [-inf,inf]=>[1e-05,0.8381177593001358] (15,-1; 2,-1), time: 11.4518s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_195, [-inf,inf]=>[-0.502338178855346,0.021835564696738773] (9,-1; 9,-1), time: 30.0207s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_19, [-inf,inf]=>[-0.5459854756699117,0.018145152141305625] (9,-1; 9,-1), time: 30.1714s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3323s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_141, [-inf,inf]=>[-0.24264007668262877,0.26434135554505583] (9,-1; 2,-1), time: 29.1965s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_116, [-inf,inf]=>[1e-05,0.823042367383428] (15,-1; 2,-1), time: 14.4769s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5803s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_194, [-inf,inf]=>[-0.5550260667460637,0.013526046352254645] (9,-1; 2,-1), time: 23.7011s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_25, [-inf,inf]=>[-0.3846710741727508,0.11498045465423411] (9,-1; 2,-1), time: 22.6325s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_107, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5191s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_11, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7038s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_184, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.4961s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_147, [-inf,inf]=>[-0.13694385907702555,0.39636892051528133] (9,-1; 9,-1), time: 30.1687s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_145, [-inf,inf]=>[-0.09234884907813644,0.4717476732023301] (2,-1; 9,-1), time: 26.4124s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.6369s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_138, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5883s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_173, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6514s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_4, [-inf,inf]=>[-0.5914321413235832,0.3778471688480747] (2,-1; 9,-1), time: 22.5145s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_186, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 12.4358s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_120, [-inf,inf]=>[1e-05,0.9047823084594434] (15,-1; 2,-1), time: 9.4401s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_51, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6549s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_165, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.5213s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_0, [-inf,inf]=>[1e-05,1.0152387245868348] (15,-1; 2,-1), time: 11.3214s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_151, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5656s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_109, [-inf,inf]=>[-0.23571474202102263,0.2841448668058065] (9,-1; 9,-1), time: 30.0230s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_171, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 13.7735s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_117, [-inf,inf]=>[1e-05,0.7330221708014812] (15,-1; 2,-1), time: 9.5926s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_20, [-inf,inf]=>[1e-05,0.5103184054578671] (15,-1; 9,-1), time: 25.8478s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_179, [-inf,inf]=>[1e-05,0.9119853409536253] (15,-1; 9,-1), time: 15.5801s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_170, [-inf,inf]=>[-0.32616418914975476,0.11396035218342129] (9,-1; 2,-1), time: 25.4839s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_70, [-inf,inf]=>[-0.459232959499695,0.09242679814809425] (2,-1; 9,-1), time: 23.1718s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_122, [-inf,inf]=>[1e-05,0.8197343824239594] (15,-1; 2,-1), time: 14.3182s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_53, [-inf,inf]=>[-0.13320366137923742,0.4759387760747069] (9,-1; 9,-1), time: 30.0774s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_161, [-inf,inf]=>[-0.33029657663945855,0.16445200687910344] (9,-1; 9,-1), time: 30.0257s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_144, [-inf,inf]=>[1e-05,1.1565332401301627] (15,-1; 2,-1), time: 13.5756s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_92, [-inf,inf]=>[-0.5986404172707597,0.1283504293213495] (2,-1; 9,-1), time: 26.3416s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_110, [-inf,inf]=>[1e-05,0.7572968517465722] (15,-1; 9,-1), time: 17.9655s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_86, [-inf,inf]=>[-0.43045243736152355,0.08471520788230649] (9,-1; 9,-1), time: 30.0982s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-0.10500511017514554,0.5699600150415636] (9,-1; 2,-1), time: 24.6186s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[1e-05,0.5867686189850897] (15,-1; 2,-1), time: 22.4756s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_15, [-inf,inf]=>[-0.5619424752246465,0.0097335922721894] (9,-1; 2,-1), time: 29.7407s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_150, [-inf,inf]=>[-0.3554842948513175,0.13749195580678925] (9,-1; 9,-1), time: 30.0347s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_61, [-inf,inf]=>[-0.1586391982981916,0.3822454530877928] (2,-1; 2,-1), time: 26.6470s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_137, [-inf,inf]=>[-0.39931418827499227,0.13035287051501457] (9,-1; 9,-1), time: 30.3853s, #vars: 1591, #constrs: 909, improved: True
Solving MIP for lay6_104, [-inf,inf]=>[-0.1591632839475029,0.28921747281553306] (9,-1; 9,-1), time: 30.4615s, #vars: 1591, #constrs: 909, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 1 has unstable to stable neurons: [(143, -1), (142, -1), (89, -1), (148, -1), (99, -1), (191, -1), (15, -1), (45, -1), (101, -1), (59, -1), (192, -1), (102, 1), (13, 1), (172, -1), (147, 1), (198, -1), (67, -1), (187, 1), (178, -1), (174, -1), (20, -1), (150, 1), (168, -1), (111, -1), (104, -1), (158, 1), (58, -1), (160, 1)]
best_l after optimization: -7709.6162109375
beta sum per layer: []
alpha/beta optimization time: 16.66210412979126
alpha-CROWN with intermediate bounds by MIP: tensor([[ -516.49090576,  -802.89819336,  -992.05352783, -1080.89025879,
          -956.51202393,  -815.55169678,  -744.52288818,  -970.85595703,
          -829.84094238]], device='cuda:0') None
MIP improved 161 nodes out of 161 unstable nodes, lb improved 36.89356231689453, ub improved 50.784969329833984, time 166.7317
maximum relu layer improved by MIP so far 2
Linear(in_features=200, out_features=200, bias=True) 3 8 torch.Size([200])
sorted candidates ['lay8_15', 'lay8_140', 'lay8_85', 'lay8_102', 'lay8_35', 'lay8_70', 'lay8_118', 'lay8_25', 'lay8_156', 'lay8_76', 'lay8_146', 'lay8_34', 'lay8_42', 'lay8_100', 'lay8_134', 'lay8_60', 'lay8_170', 'lay8_109', 'lay8_6', 'lay8_21', 'lay8_189', 'lay8_54', 'lay8_113', 'lay8_149', 'lay8_122', 'lay8_19', 'lay8_40', 'lay8_155', 'lay8_91', 'lay8_56', 'lay8_92', 'lay8_162', 'lay8_105', 'lay8_144', 'lay8_86', 'lay8_53', 'lay8_142', 'lay8_182', 'lay8_24', 'lay8_37', 'lay8_125', 'lay8_154', 'lay8_190', 'lay8_32', 'lay8_115', 'lay8_150', 'lay8_73', 'lay8_84', 'lay8_94', 'lay8_120', 'lay8_39', 'lay8_66', 'lay8_74', 'lay8_157', 'lay8_4', 'lay8_117', 'lay8_192', 'lay8_178', 'lay8_124', 'lay8_188', 'lay8_45', 'lay8_63', 'lay8_71', 'lay8_62', 'lay8_83', 'lay8_187', 'lay8_69', 'lay8_195', 'lay8_77', 'lay8_171', 'lay8_138', 'lay8_3', 'lay8_104', 'lay8_96', 'lay8_116', 'lay8_176', 'lay8_163', 'lay8_29', 'lay8_31', 'lay8_173', 'lay8_36', 'lay8_112', 'lay8_23', 'lay8_50', 'lay8_49', 'lay8_64', 'lay8_151', 'lay8_168', 'lay8_14', 'lay8_184', 'lay8_59', 'lay8_167', 'lay8_87', 'lay8_61', 'lay8_132', 'lay8_106', 'lay8_130', 'lay8_44', 'lay8_186', 'lay8_185', 'lay8_48', 'lay8_89', 'lay8_153', 'lay8_13', 'lay8_46', 'lay8_158', 'lay8_38', 'lay8_26', 'lay8_174', 'lay8_133', 'lay8_197', 'lay8_18', 'lay8_93', 'lay8_75', 'lay8_101', 'lay8_114', 'lay8_27', 'lay8_22', 'lay8_41', 'lay8_128', 'lay8_68', 'lay8_129', 'lay8_131', 'lay8_199', 'lay8_12', 'lay8_194', 'lay8_126', 'lay8_198', 'lay8_90', 'lay8_10', 'lay8_191', 'lay8_135', 'lay8_88', 'lay8_17', 'lay8_103', 'lay8_107', 'lay8_16', 'lay8_181', 'lay8_1', 'lay8_137', 'lay8_143', 'lay8_8', 'lay8_52', 'lay8_51', 'lay8_166', 'lay8_164', 'lay8_67', 'lay8_160', 'lay8_79', 'lay8_147', 'lay8_111', 'lay8_177', 'lay8_30', 'lay8_141', 'lay8_183', 'lay8_175', 'lay8_145', 'lay8_119', 'lay8_47', 'lay8_65', 'lay8_98', 'lay8_148', 'lay8_78', 'lay8_179', 'lay8_97', 'lay8_58', 'lay8_7', 'lay8_165', 'lay8_110', 'lay8_82', 'lay8_81', 'lay8_43', 'lay8_28', 'lay8_33', 'lay8_5', 'lay8_169', 'lay8_20', 'lay8_0', 'lay8_172', 'lay8_196', 'lay8_180', 'lay8_11', 'lay8_159', 'lay8_123', 'lay8_57', 'lay8_108', 'lay8_127', 'lay8_193', 'lay8_121', 'lay8_136', 'lay8_99', 'lay8_2', 'lay8_161', 'lay8_55', 'lay8_95', 'lay8_139', 'lay8_152', 'lay8_72', 'lay8_9', 'lay8_80'] filter: 1.0
Solving MIP for lay8_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7412s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_100, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7796s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_42, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8598s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_6, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6303s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.0606s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.4728s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_156, [-inf,inf]=>[1e-05,0.9926060459750723] (15,-1; 9,-1), time: 15.8782s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_85, [-inf,inf]=>[-0.5044057057580743,0.07911432654219235] (9,-1; 9,-1), time: 30.0156s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_76, [-inf,inf]=>[-0.6423316415998884,0.10158473054045986] (9,-1; 9,-1), time: 30.0178s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_146, [-inf,inf]=>[-0.6425172813660942,0.067291407900041] (9,-1; 9,-1), time: 30.0203s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_118, [-inf,inf]=>[-0.28502040117375255,0.22475770007516135] (9,-1; 9,-1), time: 30.0160s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_25, [-inf,inf]=>[-0.43560698385035196,0.1505839939639952] (9,-1; 9,-1), time: 30.0334s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_70, [-inf,inf]=>[-0.7710361903382256,0.10877100896770478] (9,-1; 9,-1), time: 30.0391s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_15, [-inf,inf]=>[-0.5479624587512649,0.07262014141542258] (9,-1; 9,-1), time: 30.0631s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_140, [-inf,inf]=>[-0.13610606975096665,0.4317005359501979] (9,-1; 9,-1), time: 30.0647s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_102, [-inf,inf]=>[-0.146136612452367,0.5208432375114461] (9,-1; 9,-1), time: 30.0505s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_134, [-inf,inf]=>[-0.392953573565168,0.23725036392619417] (9,-1; 9,-1), time: 30.1773s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_170, [-inf,inf]=>[-0.05852402446069475,0.5291707169911295] (9,-1; 9,-1), time: 30.0173s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_109, [-inf,inf]=>[-0.04490378866636635,0.9487443076134502] (9,-1; 9,-1), time: 30.0638s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_56, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8392s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.8143s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_21, [-inf,inf]=>[-0.4789042801469776,0.11302040675730719] (9,-1; 9,-1), time: 30.0202s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_189, [-inf,inf]=>[-0.38514632581327496,0.16737538027883364] (9,-1; 9,-1), time: 30.0547s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_54, [-inf,inf]=>[-0.2504402225359258,0.3253774516781245] (9,-1; 9,-1), time: 30.0177s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6425s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_91, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.6012s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_122, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.8018s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_125, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9180s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_32, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6740s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_162, [-inf,inf]=>[1e-05,1.8594177187523706] (15,-1; 9,-1), time: 15.8087s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_113, [-inf,inf]=>[-0.45631172555864563,0.34656924177458437] (9,-1; 9,-1), time: 30.0337s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_92, [-inf,inf]=>[1e-05,1.2142299504220015] (15,-1; 9,-1), time: 17.5316s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_155, [-inf,inf]=>[1e-05,0.894448377453747] (15,-1; 9,-1), time: 17.6636s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_40, [-inf,inf]=>[-0.3079228052046131,0.3457334461056349] (9,-1; 9,-1), time: 30.0194s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_149, [-inf,inf]=>[-0.2957141586997119,0.3988691518782682] (9,-1; 9,-1), time: 30.0571s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_19, [-inf,inf]=>[-0.6893580694263244,0.038468802951094005] (9,-1; 9,-1), time: 30.0558s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_144, [-inf,inf]=>[-0.5014880298847817,0.1549040672292743] (9,-1; 9,-1), time: 30.0473s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_86, [-inf,inf]=>[-0.4355887095286768,0.15454823307125515] (9,-1; 9,-1), time: 30.0442s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_53, [-inf,inf]=>[-0.26318476691758985,0.45847432423110634] (9,-1; 9,-1), time: 30.1010s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_142, [-inf,inf]=>[-0.3470417848871785,0.4146895785503857] (9,-1; 9,-1), time: 30.0261s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_182, [-inf,inf]=>[-0.3442360766139599,0.18738558195143423] (9,-1; 9,-1), time: 30.0212s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_24, [-inf,inf]=>[-0.24570503109781616,0.2970917916669996] (9,-1; 9,-1), time: 30.0238s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_154, [-inf,inf]=>[-0.31049313513952304,0.28250566022037654] (9,-1; 9,-1), time: 30.0382s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_190, [-inf,inf]=>[-0.21771947960168525,0.6676091969620989] (9,-1; 9,-1), time: 30.0160s, #vars: 1925, #constrs: 1310, improved: True
Solving MIP for lay8_115, [-inf,inf]=>[-0.006206248888073393,0.7530539691032122] (9,-1; 9,-1), time: 30.0134s, #vars: 1925, #constrs: 1310, improved: True
PGD done for relu layer 4
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
relu layer: 2 has unstable to stable neurons: [(143, -1), (17, -1), (16, -1), (187, -1), (60, -1), (33, -1), (142, -1), (123, -1), (7, -1), (119, -1), (172, -1), (28, -1), (178, -1), (160, -1), (62, -1), (169, -1), (26, -1), (152, -1), (67, -1), (94, -1), (183, -1), (23, -1), (50, -1), (40, -1), (45, -1), (87, -1), (96, 1), (163, -1), (77, -1), (99, -1), (52, -1), (102, -1), (55, -1), (146, 1), (63, -1), (193, -1), (100, -1), (174, -1), (79, -1), (65, -1), (1, 1), (42, -1), (101, -1), (132, -1), (35, -1), (188, -1), (130, -1), (18, -1), (9, -1), (168, -1), (135, -1), (121, 1), (136, -1), (133, -1), (114, -1), (8, -1), (88, -1), (97, -1), (12, -1), (149, -1), (157, -1), (6, -1), (14, -1), (129, -1), (140, -1), (69, 1), (83, -1), (98, -1), (82, -1), (47, 1), (2, -1), (116, 1), (20, 1), (186, -1), (191, -1), (120, 1), (56, -1), (171, -1), (107, -1), (184, -1), (0, 1), (11, -1), (179, 1), (29, -1), (138, -1), (117, 1), (122, 1), (173, -1), (51, -1), (165, -1), (151, -1), (110, 1), (21, 1), (144, 1)]
best_l after optimization: -2309.50537109375
beta sum per layer: []
alpha/beta optimization time: 16.39000415802002
alpha-CROWN with intermediate bounds by MIP: tensor([[-154.96543884, -240.22300720, -296.89920044, -323.51095581,
         -286.93270874, -244.03524780, -222.82090759, -291.27291870,
         -248.84503174]], device='cuda:0') None
MIP improved 45 nodes out of 200 unstable nodes, lb improved 43.07963943481445, ub improved 48.82630157470703, time 67.6550
maximum relu layer improved by MIP so far 3
MIP finished with 263.55574679374695s
Run final alpha-CROWN after MIP solving on layer 8 and relu idx 3
0 /input torch.Size([1, 200])
1 /input.3 torch.Size([1, 200])
2 /input.7 torch.Size([1, 200])
3 /input.11 torch.Size([1, 200])
4 /input.15 torch.Size([1, 200])
5 /input.19 torch.Size([1, 200])
6 /input.23 torch.Size([1, 200])
7 /input.27 torch.Size([1, 200])
best_l after optimization: -2107.61279296875
beta sum per layer: []
alpha/beta optimization time: 2.262219190597534
alpha-CROWN with intermediate bounds improved by MIP: tensor([[-141.44215393, -219.19007874, -270.91293335, -295.19528198,
         -261.88732910, -222.66455078, -203.31910706, -265.87280273,
         -227.12857056]], device='cuda:0') None
Split layers:
  BoundLinear(name=/input.19, inputs=[/47, /29, /30]): [(BoundRelu(name=/49, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.11, inputs=[/43, /25, /26]): [(BoundRelu(name=/45, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.15, inputs=[/45, /27, /28]): [(BoundRelu(name=/47, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.7, inputs=[/41, /23, /24]): [(BoundRelu(name=/43, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.27, inputs=[/51, /33, /34]): [(BoundRelu(name=/53, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.3, inputs=[/39, /21, /22]): [(BoundRelu(name=/41, inputs=[/input.3]), 0)]
  BoundLinear(name=/input, inputs=[/37, /19, /20]): [(BoundRelu(name=/39, inputs=[/input]), 0)]
  BoundLinear(name=/input.23, inputs=[/49, /31, /32]): [(BoundRelu(name=/51, inputs=[/input.23]), 0)]
refined global lb: tensor([[-141.44215393],
        [-219.19007874],
        [-270.91293335],
        [-295.19528198],
        [-261.88732910],
        [-222.66455078],
        [-203.31910706],
        [-265.87280273],
        [-227.12857056]], device='cuda:0') min: tensor(-295.19528198, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200]), torch.Size([1, 9, 200])]

Properties batch 0, size 1
Remaining timeout: 11.85969090461731
##### Instance 0 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: [0.] ######
Remaining spec index [0] with bounds tensor([[-141.44215393]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/19): BoundParams(name=/19, inputs=[])
  (/20): BoundParams(name=/20, inputs=[])
  (/21): BoundParams(name=/21, inputs=[])
  (/22): BoundParams(name=/22, inputs=[])
  (/23): BoundParams(name=/23, inputs=[])
  (/24): BoundParams(name=/24, inputs=[])
  (/25): BoundParams(name=/25, inputs=[])
  (/26): BoundParams(name=/26, inputs=[])
  (/27): BoundParams(name=/27, inputs=[])
  (/28): BoundParams(name=/28, inputs=[])
  (/29): BoundParams(name=/29, inputs=[])
  (/30): BoundParams(name=/30, inputs=[])
  (/31): BoundParams(name=/31, inputs=[])
  (/32): BoundParams(name=/32, inputs=[])
  (/33): BoundParams(name=/33, inputs=[])
  (/34): BoundParams(name=/34, inputs=[])
  (/35): BoundParams(name=/35, inputs=[])
  (/36): BoundParams(name=/36, inputs=[])
  (/37): BoundFlatten(name=/37, inputs=[/0])
  (/input): BoundLinear(name=/input, inputs=[/37, /19, /20])
  (/39): BoundRelu(name=/39, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/39, /21, /22])
  (/41): BoundRelu(name=/41, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/41, /23, /24])
  (/43): BoundRelu(name=/43, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/43, /25, /26])
  (/45): BoundRelu(name=/45, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/45, /27, /28])
  (/47): BoundRelu(name=/47, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/47, /29, /30])
  (/49): BoundRelu(name=/49, inputs=[/input.19])
  (/input.23): BoundLinear(name=/input.23, inputs=[/49, /31, /32])
  (/51): BoundRelu(name=/51, inputs=[/input.23])
  (/input.27): BoundLinear(name=/input.27, inputs=[/51, /33, /34])
  (/53): BoundRelu(name=/53, inputs=[/input.27])
  (/54): BoundLinear(name=/54, inputs=[/53, /35, /36])
)
Model prediction is: tensor([-0.74227256, -1.45069611,  0.57550186, -2.76694155,  5.53834867,
        -0.84460747,  0.35401791, -0.27449414, -0.16281110,  1.33919895],
       device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /39 start_node /54 with alignment adjustment
setting alpha for layer /41 start_node /54 with alignment adjustment
setting alpha for layer /43 start_node /54 with alignment adjustment
setting alpha for layer /45 start_node /54 with alignment adjustment
setting alpha for layer /47 start_node /54 with alignment adjustment
setting alpha for layer /49 start_node /54 with alignment adjustment
setting alpha for layer /51 start_node /54 with alignment adjustment
setting alpha for layer /53 start_node /54 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200]), torch.Size([1, 1, 200])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-141.44215393]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input.19,/input.11,/input.15,/input.7,/input.27,/input.3,/input,/input.23,/54
Split layers:
  BoundLinear(name=/input.11, inputs=[/43, /25, /26]): [(BoundRelu(name=/45, inputs=[/input.11]), 0)]
  BoundLinear(name=/input, inputs=[/37, /19, /20]): [(BoundRelu(name=/39, inputs=[/input]), 0)]
  BoundLinear(name=/input.27, inputs=[/51, /33, /34]): [(BoundRelu(name=/53, inputs=[/input.27]), 0)]
  BoundLinear(name=/input.19, inputs=[/47, /29, /30]): [(BoundRelu(name=/49, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.15, inputs=[/45, /27, /28]): [(BoundRelu(name=/47, inputs=[/input.15]), 0)]
  BoundLinear(name=/input.3, inputs=[/39, /21, /22]): [(BoundRelu(name=/41, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.23, inputs=[/49, /31, /32]): [(BoundRelu(name=/51, inputs=[/input.23]), 0)]
  BoundLinear(name=/input.7, inputs=[/41, /23, /24]): [(BoundRelu(name=/43, inputs=[/input.7]), 0)]
Keeping slopes for these layers: ['/54']
Keeping slopes for these layers: ['/54']
Node /39 input 0: size torch.Size([200]) unstable 56
Node /41 input 0: size torch.Size([200]) unstable 47
Node /43 input 0: size torch.Size([200]) unstable 67
Node /45 input 0: size torch.Size([200]) unstable 127
Node /47 input 0: size torch.Size([200]) unstable 192
Node /49 input 0: size torch.Size([200]) unstable 200
Node /51 input 0: size torch.Size([200]) unstable 200
Node /53 input 0: size torch.Size([200]) unstable 200
-----------------
# of unstable neurons: 1089
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.27, 92] 
split level 1: [/input.27, 17] 
split level 2: [/input.27, 113] 
split level 3: [/input.27, 15] 
split level 4: [/input.27, 140] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 32 = 0.0
pruning-in-iteration extra time: 0.0002434253692626953
Time: prepare 0.0193    beta_bound 1.0977    bound 1.0979    transfer 0.0006    finalize 0.0084    func 1.1262    
Accumulated time: func 1.1262    prepare 0.0209    bound 1.0979    beta_bound 1.0977    transfer 0.0006    finalize 0.0084    
batch bounding time:  1.126344919204712
Current worst splitting domains lb-rhs (depth):
-120.22159 (5), -119.27067 (5), -117.54680 (5), -116.82133 (5), -116.17120 (5), -116.09724 (5), -115.79890 (5), -115.53377 (5), -114.21177 (5), -114.14855 (5), -113.26174 (5), -113.10621 (5), -111.82066 (5), -110.87221 (5), -109.90759 (5), -109.88121 (5), -105.68959 (5), -103.94411 (5), -103.53283 (5), -102.63470 (5), 
length of domains: 32
Time: pickout 0.0074    decision 0.4621    set_bounds 0.0036    solve 1.1264    add 0.0038    
Accumulated time: pickout 0.0074    decision 0.4621    set_bounds 0.0036    solve 1.1264    add 0.0038    
Current (lb-rhs): -120.22158813476562
32 domains visited
Cumulative time: 1.9046900272369385

BaB round 2
batch: 32
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/input.27, 107] [/input.27, 59] [/input.27, 59] [/input.27, 100] [/input.27, 107] [/input.27, 107] [/input.27, 107] [/input.27, 100] [/input.27, 59] [/input.27, 59] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 64 = 0.0
pruning-in-iteration extra time: 0.0003762245178222656
Time: prepare 0.0223    beta_bound 0.7521    bound 0.7522    transfer 0.0007    finalize 0.0120    func 0.7873    
Accumulated time: func 1.9136    prepare 0.0444    bound 1.8501    beta_bound 1.8498    transfer 0.0013    finalize 0.0204    
batch bounding time:  0.7875034809112549
Current worst splitting domains lb-rhs (depth):
-116.49381 (6), -115.71408 (6), -115.54337 (6), -114.68981 (6), -113.93546 (6), -113.08271 (6), -112.89314 (6), -112.59805 (6), -112.40718 (6), -112.28197 (6), -112.12832 (6), -112.08294 (6), -111.34785 (6), -111.12301 (6), -110.92054 (6), -110.44905 (6), -110.31075 (6), -110.28006 (6), -109.70132 (6), -109.67030 (6), 
length of domains: 64
Time: pickout 0.0036    decision 0.0794    set_bounds 0.0035    solve 0.7875    add 0.0039    
Accumulated time: pickout 0.0110    decision 0.5415    set_bounds 0.0071    solve 1.9139    add 0.0077    
Current (lb-rhs): -116.49381256103516
96 domains visited
Cumulative time: 2.783607006072998

BaB round 3
batch: 64
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/input.27, 54] [/input.27, 54] [/input.27, 54] [/input.27, 59] [/input.27, 54] [/input.27, 100] [/input.27, 54] [/input.27, 54] [/input.27, 54] [/input.27, 54] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 128 = 0.0
pruning-in-iteration extra time: 0.0001766681671142578
Time: prepare 0.0462    beta_bound 0.6900    bound 0.6902    transfer 0.0010    finalize 0.0293    func 0.7669    
Accumulated time: func 2.6804    prepare 0.0915    bound 2.5403    beta_bound 2.5398    transfer 0.0023    finalize 0.0497    
batch bounding time:  0.7671141624450684
Current worst splitting domains lb-rhs (depth):
-113.09430 (7), -112.16561 (7), -112.07750 (7), -111.77410 (7), -111.22994 (7), -111.12523 (7), -110.85544 (7), -110.41397 (7), -110.08303 (7), -109.80241 (7), -109.44205 (7), -109.28063 (7), -109.02281 (7), -108.87188 (7), -108.84052 (7), -108.59183 (7), -108.56195 (7), -108.39047 (7), -108.35822 (7), -108.35562 (7), 
length of domains: 128
Time: pickout 0.0030    decision 0.0964    set_bounds 0.0067    solve 0.7672    add 0.0065    
Accumulated time: pickout 0.0140    decision 0.6379    set_bounds 0.0137    solve 2.6811    add 0.0142    
Current (lb-rhs): -113.09429931640625
224 domains visited
Cumulative time: 3.664940595626831

BaB round 4
batch: 128
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/input.27, 82] [/input.27, 82] [/input.27, 82] [/input.27, 82] [/input.27, 100] [/input.27, 54] [/input.27, 100] [/input.27, 107] [/input.27, 82] [/input.27, 82] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 256 = 0.0
pruning-in-iteration extra time: 0.0001919269561767578
Time: prepare 0.0736    beta_bound 0.6453    bound 0.6454    transfer 0.0013    finalize 0.0451    func 0.7657    
Accumulated time: func 3.4462    prepare 0.1662    bound 3.1857    beta_bound 3.1851    transfer 0.0036    finalize 0.0948    
batch bounding time:  0.7660510540008545
Current worst splitting domains lb-rhs (depth):
-109.61743 (8), -108.96319 (8), -108.79836 (8), -108.60319 (8), -108.51902 (8), -107.90509 (8), -107.74114 (8), -107.48711 (8), -107.45068 (8), -107.38298 (8), -107.22182 (8), -106.93386 (8), -106.83532 (8), -106.71102 (8), -106.55580 (8), -106.54841 (8), -106.12265 (8), -106.09498 (8), -105.88277 (8), -105.82767 (8), 
length of domains: 256
Time: pickout 0.0033    decision 0.1005    set_bounds 0.0101    solve 0.7661    add 0.0083    
Accumulated time: pickout 0.0173    decision 0.7384    set_bounds 0.0238    solve 3.4472    add 0.0225    
Current (lb-rhs): -109.617431640625
480 domains visited
Cumulative time: 4.554999351501465

BaB round 5
batch: 256
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/input.27, 59] [/input.27, 100] [/input.27, 100] [/input.27, 54] [/input.27, 61] [/input.27, 59] [/input.27, 61] [/input.27, 59] [/input.27, 107] [/input.27, 100] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 512 = 0.0
pruning-in-iteration extra time: 0.0001506805419921875
Time: prepare 0.1373    beta_bound 0.5916    bound 0.5917    transfer 0.0014    finalize 0.0909    func 0.8216    
Accumulated time: func 4.2677    prepare 0.3043    bound 3.7773    beta_bound 3.7767    transfer 0.0051    finalize 0.1857    
batch bounding time:  0.8222002983093262
Current worst splitting domains lb-rhs (depth):
-106.34206 (9), -105.68110 (9), -105.45789 (9), -105.24466 (9), -105.17039 (9), -105.16074 (9), -104.71516 (9), -104.61198 (9), -104.42271 (9), -104.32932 (9), -104.12859 (9), -104.12696 (9), -103.94330 (9), -103.85931 (9), -103.70929 (9), -103.69979 (9), -103.58597 (9), -103.50663 (9), -103.42152 (9), -103.38815 (9), 
length of domains: 512
Time: pickout 0.0029    decision 0.1193    set_bounds 0.0162    solve 0.8222    add 0.0122    
Accumulated time: pickout 0.0202    decision 0.8577    set_bounds 0.0400    solve 4.2694    add 0.0346    
Current (lb-rhs): -106.34205627441406
992 domains visited
Cumulative time: 5.5293965339660645

BaB round 6
batch: 500
Average branched neurons at iteration 6:  1.0000
splitting decisions: 
split level 0: [/input.27, 54] [/input.27, 54] [/input.27, 61] [/input.27, 100] [/input.27, 181] [/input.27, 181] [/input.27, 181] [/input.27, 181] [/input.27, 100] [/input.27, 61] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1000 = 0.0
pruning-in-iteration extra time: 0.0002193450927734375
Time: prepare 0.2729    beta_bound 0.6150    bound 0.6151    transfer 0.0030    finalize 0.1840    func 1.0755    
Accumulated time: func 5.3433    prepare 0.5779    bound 4.3925    beta_bound 4.3917    transfer 0.0081    finalize 0.3698    
batch bounding time:  1.1968622207641602
Current worst splitting domains lb-rhs (depth):
-103.20975 (10), -102.58121 (10), -102.23506 (10), -102.20199 (10), -102.15958 (10), -102.05923 (10), -101.75877 (10), -101.63163 (10), -101.42816 (10), -101.42792 (10), -101.37789 (10), -101.19543 (10), -101.18378 (10), -100.92596 (10), -100.89919 (10), -100.84970 (10), -100.84363 (10), -100.70156 (10), -100.65086 (10), -100.61655 (10), 
length of domains: 1012
Time: pickout 0.0050    decision 0.1118    set_bounds 0.0172    solve 1.1969    add 0.0157    
Accumulated time: pickout 0.0252    decision 0.9695    set_bounds 0.0572    solve 5.4663    add 0.0503    
Current (lb-rhs): -103.20974731445312
1992 domains visited
Cumulative time: 6.8790247440338135

BaB round 7
batch: 500
Average branched neurons at iteration 7:  1.0000
splitting decisions: 
split level 0: [/input.27, 181] [/input.27, 61] [/input.27, 82] [/input.27, 54] [/input.27, 107] [/input.27, 107] [/input.27, 107] [/input.27, 107] [/input.27, 61] [/input.27, 181] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1000 = 0.0
pruning-in-iteration extra time: 0.000370025634765625
Time: prepare 0.2848    beta_bound 0.5995    bound 0.5996    transfer 0.0028    finalize 0.1720    func 1.0594    
Accumulated time: func 6.4027    prepare 0.8635    bound 4.9920    beta_bound 4.9911    transfer 0.0108    finalize 0.5418    
batch bounding time:  1.0600430965423584
Current worst splitting domains lb-rhs (depth):
-103.20975 (10), -102.58121 (10), -102.23506 (10), -101.75877 (10), -101.63163 (10), -101.37789 (10), -101.19543 (10), -100.89919 (10), -100.84363 (10), -100.70156 (10), -100.54596 (10), -100.37767 (10), -100.35854 (10), -100.25072 (10), -100.17417 (10), -100.05360 (10), -100.05358 (10), -99.98283 (10), -99.96043 (10), -99.91501 (10), 
length of domains: 1512
Time: pickout 0.0058    decision 0.1349    set_bounds 0.0255    solve 1.0601    add 0.1211    
Accumulated time: pickout 0.0310    decision 1.1044    set_bounds 0.0826    solve 6.5264    add 0.1714    
Current (lb-rhs): -103.20974731445312
2992 domains visited
Cumulative time: 8.231463432312012

BaB round 8
batch: 500
Average branched neurons at iteration 8:  1.0000
splitting decisions: 
split level 0: [/input.27, 100] [/input.27, 181] [/input.27, 181] [/input.27, 181] [/input.27, 95] [/input.27, 95] [/input.27, 61] [/input.27, 61] [/input.27, 154] [/input.27, 154] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1000 = 0.0
pruning-in-iteration extra time: 0.0002505779266357422
Time: prepare 0.2808    beta_bound 0.5865    bound 0.5867    transfer 0.0030    finalize 0.2996    func 1.1706    
Accumulated time: func 7.5733    prepare 1.1452    bound 5.5787    beta_bound 5.5776    transfer 0.0138    finalize 0.8414    
batch bounding time:  1.1716759204864502
Current worst splitting domains lb-rhs (depth):
-103.20975 (10), -102.58121 (10), -102.23506 (10), -101.75877 (10), -101.63163 (10), -101.37789 (10), -101.19543 (10), -100.89919 (10), -100.84363 (10), -100.70156 (10), -100.54596 (10), -100.37767 (10), -100.35854 (10), -100.25072 (10), -100.17417 (10), -100.05360 (10), -100.05358 (10), -99.98283 (10), -99.96043 (10), -99.91501 (10), 
length of domains: 2012
Time: pickout 0.0056    decision 0.1412    set_bounds 0.0226    solve 1.1717    add 0.0177    
Accumulated time: pickout 0.0365    decision 1.2456    set_bounds 0.1052    solve 7.6981    add 0.1891    
Current (lb-rhs): -103.20974731445312
3992 domains visited
Cumulative time: 9.594399690628052

BaB round 9
batch: 500
Average branched neurons at iteration 9:  1.0000
splitting decisions: 
split level 0: [/input.27, 154] [/input.27, 154] [/input.27, 154] [/input.27, 154] [/input.27, 147] [/input.27, 61] [/input.27, 154] [/input.27, 95] [/input.27, 181] [/input.27, 82] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1000 = 0.0
pruning-in-iteration extra time: 0.00017547607421875
Time: prepare 0.2710    beta_bound 0.6033    bound 0.6034    transfer 0.0027    finalize 0.1470    func 1.0246    
Accumulated time: func 8.5979    prepare 1.4172    bound 6.1821    beta_bound 6.1809    transfer 0.0165    finalize 0.9884    
batch bounding time:  1.0274672508239746
Current worst splitting domains lb-rhs (depth):
-103.20975 (10), -102.58121 (10), -102.23506 (10), -101.75877 (10), -101.63163 (10), -101.37789 (10), -101.19543 (10), -100.89919 (10), -100.84363 (10), -100.70156 (10), -100.54596 (10), -100.37767 (10), -100.35854 (10), -100.25072 (10), -100.17417 (10), -100.05360 (10), -100.05358 (10), -99.98283 (10), -99.96043 (10), -99.91501 (10), 
length of domains: 2512
Time: pickout 0.0049    decision 0.1379    set_bounds 0.0275    solve 1.0275    add 0.2689    
Accumulated time: pickout 0.0414    decision 1.3835    set_bounds 0.1327    solve 8.7256    add 0.4580    
Current (lb-rhs): -103.20974731445312
4992 domains visited
Cumulative time: 11.064897775650024

BaB round 10
batch: 500
Average branched neurons at iteration 10:  1.0000
splitting decisions: 
split level 0: [/input.27, 147] [/input.27, 147] [/input.27, 147] [/input.27, 147] [/input.27, 61] [/input.27, 147] [/input.27, 95] [/input.27, 154] [/input.27, 147] [/input.27, 147] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 1000 = 0.0
pruning-in-iteration extra time: 0.0001552104949951172
Time: prepare 0.3242    beta_bound 0.6194    bound 0.6195    transfer 0.0040    finalize 0.3509    func 1.2990    
Accumulated time: func 9.8969    prepare 1.7423    bound 6.8016    beta_bound 6.8003    transfer 0.0205    finalize 1.3394    
batch bounding time:  1.300098180770874
Current worst splitting domains lb-rhs (depth):
-103.20975 (10), -102.58121 (10), -102.23506 (10), -101.75877 (10), -101.63163 (10), -101.37789 (10), -101.19543 (10), -100.89919 (10), -100.84363 (10), -100.70156 (10), -100.54596 (10), -100.37767 (10), -100.35854 (10), -100.25072 (10), -100.17417 (10), -100.05360 (10), -100.05358 (10), -99.98283 (10), -99.96043 (10), -99.91501 (10), 
length of domains: 3012
Time: pickout 0.0097    decision 0.1268    set_bounds 0.0292    solve 1.3001    add 0.0213    
Accumulated time: pickout 0.0511    decision 1.5102    set_bounds 0.1620    solve 10.0258    add 0.4793    
Current (lb-rhs): -103.20974731445312
5992 domains visited
Time out!!!!!!!!
Result: unknown in 301.1590 seconds
############# Summary #############
Final verified acc: 0.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 0 , total falsified (unsafe/sat): 0 , timeout: 1
mean time for ALL instances (total 1):301.15594711400604, max time: 301.1589586734772
unknown (total 1), index: [0]
