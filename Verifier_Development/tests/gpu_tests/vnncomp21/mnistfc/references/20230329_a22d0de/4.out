Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: mnistfc_instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2021/benchmarks/mnistfc
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: [-1, 1, 28, 28]
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 76
  end: 77
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 500
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.03
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 0.25
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 5
    reduceop: max
    sb_coeff_thresh: 0.001
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    nonlinear_split:
      method: babsr_like
      branching_point_method: middle
      num_branches: 2
      branching_point_refinement: false
      naive_branching_score: false
      filter: false
      prioritize_mul: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: skip
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Tue Mar 28 14:07:50 2023 on zeratul
customized start/end sample from instance 76 to 77 in mnistfc_instances.csv
Internal results will be saved to a-b-crown_[mnistfc_instances]_start=76_end=77_iter=20_b=500_timeout=360_branching=kfsb-max-5_lra-init=0.1_lra=0.01_lrb=0.03_PGD=skip_cplex_cuts=False_initial_max_domains=1.npz.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 76 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x6.onnx
Using vnnlib prop_1_0.05.vnnlib
Precompiled vnnlib file found at ../../vnncomp2021/benchmarks/mnistfc/prop_1_0.05.vnnlib.compiled
Loading onnx ../../vnncomp2021/benchmarks/mnistfc/mnist-net_256x6.onnx wih quirks {}

*************Error traceback*************
Traceback (most recent call last):
  File "/home/zhouxingshi/gputest/Verifier_Development/complete_verifier/load_model.py", line 134, in load_model_onnx
    output_onnx = inference_onnx(path, dummy.numpy())[0]
  File "/home/zhouxingshi/gputest/Verifier_Development/complete_verifier/load_model.py", line 76, in inference_onnx
    res = sess.run(None, inp)
  File "/home/zhouxingshi/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnxruntime/capi/onnxruntime_inference_collection.py", line 200, in run
    return self._sess.run(output_names, input_feed, run_options)
onnxruntime.capi.onnxruntime_pybind11_state.InvalidArgument: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Invalid rank for input: 0 Got: 4 Expected: 3 Please fix either the inputs or the model.

*****************************************

Scaling timeout: 300.0 -> 75.0
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/15): BoundParams(name=/15, inputs=[])
  (/16): BoundParams(name=/16, inputs=[])
  (/17): BoundParams(name=/17, inputs=[])
  (/18): BoundParams(name=/18, inputs=[])
  (/19): BoundParams(name=/19, inputs=[])
  (/20): BoundParams(name=/20, inputs=[])
  (/21): BoundParams(name=/21, inputs=[])
  (/22): BoundParams(name=/22, inputs=[])
  (/23): BoundParams(name=/23, inputs=[])
  (/24): BoundParams(name=/24, inputs=[])
  (/25): BoundParams(name=/25, inputs=[])
  (/26): BoundParams(name=/26, inputs=[])
  (/27): BoundParams(name=/27, inputs=[])
  (/28): BoundParams(name=/28, inputs=[])
  (/29): BoundFlatten(name=/29, inputs=[/0])
  (/input): BoundLinear(name=/input, inputs=[/29, /15, /16])
  (/31): BoundRelu(name=/31, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/31, /17, /18])
  (/33): BoundRelu(name=/33, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/33, /19, /20])
  (/35): BoundRelu(name=/35, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/35, /21, /22])
  (/37): BoundRelu(name=/37, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/37, /23, /24])
  (/39): BoundRelu(name=/39, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/39, /25, /26])
  (/41): BoundRelu(name=/41, inputs=[/input.19])
  (/42): BoundLinear(name=/42, inputs=[/41, /27, /28])
)
Model prediction is: tensor([[-3.17712873e-03,  9.80182588e-01, -3.64300609e-03,  1.28671899e-03,
         -2.83546001e-03, -4.62295115e-03,  9.14499164e-03,  1.28584355e-02,
          3.57436389e-03, -4.01936471e-04]], device='cuda:0')
layer /31 using sparse-features alpha with shape [126]; unstable size 126; total size 256 (torch.Size([1, 256]))
layer /31 start_node /input.3 using full alpha with unstable size 240 total_size 256 output_shape torch.Size([256])
layer /31 start_node /input.7 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /31 start_node /input.11 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /31 start_node /input.15 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /31 start_node /input.19 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /31 start_node /42 using full alpha with unstable size None total_size 9 output_shape 9
layer /33 using full alpha with shape torch.Size([256]); unstable size 240; total size 256 (torch.Size([1, 256]))
layer /33 start_node /input.7 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /33 start_node /input.11 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /33 start_node /input.15 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /33 start_node /input.19 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /33 start_node /42 using full alpha with unstable size None total_size 9 output_shape 9
layer /35 using full alpha with shape torch.Size([256]); unstable size 256; total size 256 (torch.Size([1, 256]))
layer /35 start_node /input.11 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /35 start_node /input.15 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /35 start_node /input.19 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /35 start_node /42 using full alpha with unstable size None total_size 9 output_shape 9
layer /37 using full alpha with shape torch.Size([256]); unstable size 256; total size 256 (torch.Size([1, 256]))
layer /37 start_node /input.15 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /37 start_node /input.19 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /37 start_node /42 using full alpha with unstable size None total_size 9 output_shape 9
layer /39 using full alpha with shape torch.Size([256]); unstable size 256; total size 256 (torch.Size([1, 256]))
layer /39 start_node /input.19 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /39 start_node /42 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using full alpha with shape torch.Size([256]); unstable size 256; total size 256 (torch.Size([1, 256]))
layer /41 start_node /42 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-15206.40136719, -18818.71679688, -18079.59570312, -14783.23144531,
         -18534.59960938, -18802.58984375, -16765.80859375, -17909.17187500,
         -20137.67187500]], device='cuda:0') None
best_l after optimization: -121961.25
alpha/beta optimization time: 10.244685649871826
initial alpha-CROWN bounds: tensor([[-11688.42285156, -14423.49316406, -13884.76660156, -11333.87109375,
         -14170.74316406, -14438.32324219, -12893.86425781, -13662.34667969,
         -15465.41699219]], device='cuda:0')
Worst class: (+ rhs) -15465.4169921875
Split layers:
  BoundLinear(name=/input.3, inputs=[/31, /17, /18]): [(BoundRelu(name=/33, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.19, inputs=[/39, /25, /26]): [(BoundRelu(name=/41, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.7, inputs=[/33, /19, /20]): [(BoundRelu(name=/35, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.11, inputs=[/35, /21, /22]): [(BoundRelu(name=/37, inputs=[/input.11]), 0)]
  BoundLinear(name=/input, inputs=[/29, /15, /16]): [(BoundRelu(name=/31, inputs=[/input]), 0)]
  BoundLinear(name=/input.15, inputs=[/37, /23, /24]): [(BoundRelu(name=/39, inputs=[/input.15]), 0)]
Start solving intermediate bounds with MIP...
layer /31 using sparse-features alpha with shape [126]; unstable size 126; total size 256 (torch.Size([1, 256]))
layer /31 start_node /input.3 using full alpha with unstable size 240 total_size 256 output_shape torch.Size([256])
layer /31 start_node /input.7 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /31 start_node /input.11 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /31 start_node /input.15 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /31 start_node /input.19 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /31 start_node /42 using full alpha with unstable size None total_size 9 output_shape 9
layer /33 using full alpha with shape torch.Size([256]); unstable size 240; total size 256 (torch.Size([1, 256]))
layer /33 start_node /input.7 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /33 start_node /input.11 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /33 start_node /input.15 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /33 start_node /input.19 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /33 start_node /42 using full alpha with unstable size None total_size 9 output_shape 9
layer /35 using full alpha with shape torch.Size([256]); unstable size 256; total size 256 (torch.Size([1, 256]))
layer /35 start_node /input.11 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /35 start_node /input.15 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /35 start_node /input.19 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /35 start_node /42 using full alpha with unstable size None total_size 9 output_shape 9
layer /37 using full alpha with shape torch.Size([256]); unstable size 256; total size 256 (torch.Size([1, 256]))
layer /37 start_node /input.15 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /37 start_node /input.19 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /37 start_node /42 using full alpha with unstable size None total_size 9 output_shape 9
layer /39 using full alpha with shape torch.Size([256]); unstable size 256; total size 256 (torch.Size([1, 256]))
layer /39 start_node /input.19 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /39 start_node /42 using full alpha with unstable size None total_size 9 output_shape 9
layer /41 using full alpha with shape torch.Size([256]); unstable size 256; total size 256 (torch.Size([1, 256]))
layer /41 start_node /42 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2024-02-29
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 60.0]

Linear(in_features=784, out_features=256, bias=True) 0 2 torch.Size([256])
Linear(in_features=256, out_features=256, bias=True) 1 4 torch.Size([256])
sorted candidates ['lay4_237', 'lay4_102', 'lay4_59', 'lay4_135', 'lay4_130', 'lay4_121', 'lay4_49', 'lay4_139', 'lay4_214', 'lay4_53', 'lay4_254', 'lay4_51', 'lay4_145', 'lay4_93', 'lay4_60', 'lay4_31', 'lay4_245', 'lay4_69', 'lay4_27', 'lay4_127', 'lay4_80', 'lay4_226', 'lay4_141', 'lay4_29', 'lay4_57', 'lay4_172', 'lay4_142', 'lay4_248', 'lay4_242', 'lay4_39', 'lay4_217', 'lay4_188', 'lay4_198', 'lay4_153', 'lay4_10', 'lay4_170', 'lay4_75', 'lay4_83', 'lay4_90', 'lay4_125', 'lay4_23', 'lay4_150', 'lay4_85', 'lay4_63', 'lay4_143', 'lay4_215', 'lay4_11', 'lay4_96', 'lay4_103', 'lay4_166', 'lay4_46', 'lay4_94', 'lay4_249', 'lay4_105', 'lay4_227', 'lay4_41', 'lay4_178', 'lay4_176', 'lay4_4', 'lay4_134', 'lay4_209', 'lay4_91', 'lay4_234', 'lay4_54', 'lay4_113', 'lay4_136', 'lay4_255', 'lay4_213', 'lay4_156', 'lay4_55', 'lay4_120', 'lay4_193', 'lay4_26', 'lay4_101', 'lay4_218', 'lay4_201', 'lay4_174', 'lay4_71', 'lay4_67', 'lay4_14', 'lay4_18', 'lay4_116', 'lay4_208', 'lay4_65', 'lay4_34', 'lay4_232', 'lay4_76', 'lay4_37', 'lay4_117', 'lay4_110', 'lay4_186', 'lay4_22', 'lay4_219', 'lay4_131', 'lay4_246', 'lay4_182', 'lay4_12', 'lay4_64', 'lay4_250', 'lay4_126', 'lay4_2', 'lay4_162', 'lay4_175', 'lay4_45', 'lay4_251', 'lay4_180', 'lay4_43', 'lay4_133', 'lay4_77', 'lay4_52', 'lay4_203', 'lay4_185', 'lay4_48', 'lay4_124', 'lay4_195', 'lay4_243', 'lay4_5', 'lay4_151', 'lay4_168', 'lay4_21', 'lay4_154', 'lay4_0', 'lay4_30', 'lay4_42', 'lay4_87', 'lay4_6', 'lay4_68', 'lay4_239', 'lay4_147', 'lay4_179', 'lay4_82', 'lay4_228', 'lay4_17', 'lay4_109', 'lay4_212', 'lay4_211', 'lay4_224', 'lay4_7', 'lay4_25', 'lay4_28', 'lay4_252', 'lay4_205', 'lay4_99', 'lay4_230', 'lay4_112', 'lay4_177', 'lay4_36', 'lay4_119', 'lay4_144', 'lay4_20', 'lay4_73', 'lay4_155', 'lay4_115', 'lay4_92', 'lay4_56', 'lay4_190', 'lay4_78', 'lay4_118', 'lay4_8', 'lay4_231', 'lay4_70', 'lay4_32', 'lay4_173', 'lay4_3', 'lay4_33', 'lay4_62', 'lay4_196', 'lay4_194', 'lay4_104', 'lay4_122', 'lay4_98', 'lay4_204', 'lay4_40', 'lay4_95', 'lay4_197', 'lay4_207', 'lay4_86', 'lay4_44', 'lay4_138', 'lay4_97', 'lay4_184', 'lay4_89', 'lay4_210', 'lay4_200', 'lay4_61', 'lay4_165', 'lay4_158', 'lay4_137', 'lay4_81', 'lay4_35', 'lay4_220', 'lay4_206', 'lay4_15', 'lay4_13', 'lay4_19', 'lay4_84', 'lay4_253', 'lay4_38', 'lay4_229', 'lay4_161', 'lay4_164', 'lay4_58', 'lay4_169', 'lay4_187', 'lay4_146', 'lay4_221', 'lay4_235', 'lay4_236', 'lay4_114', 'lay4_72', 'lay4_163', 'lay4_24', 'lay4_9', 'lay4_1', 'lay4_199', 'lay4_222', 'lay4_157', 'lay4_244', 'lay4_238', 'lay4_123', 'lay4_149', 'lay4_148', 'lay4_171', 'lay4_216', 'lay4_233', 'lay4_16', 'lay4_132'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/convert/layer.py:30: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_numpy.cpp:178.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
/home/zhouxingshi/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnx2pytorch/convert/model.py:154: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  "Using experimental implementation that allows 'batch_size > 1'."
/home/zhouxingshi/gputest/Verifier_Development/complete_verifier/load_model.py:140: UserWarning: Not able to check model's conversion correctness
  warnings.warn('Not able to check model\'s conversion correctness')
Solving MIP for lay4_31, [-inf,inf]=>[-12.719370274005747,2.545933919677136] (9,-1; 2,-1), time: 29.1885s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_135, [-inf,inf]=>[-19.27988422515591,0.28633195733689826] (9,-1; 9,-1), time: 30.0190s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_102, [-inf,inf]=>[-5.755921879821122,9.978337880744037] (9,-1; 9,-1), time: 30.0202s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-8.881857251541932,6.206236001850924] (9,-1; 9,-1), time: 30.0185s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[-12.654019038837248,4.498457380313122] (9,-1; 9,-1), time: 30.0379s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_130, [-inf,inf]=>[-10.263788555037191,6.122983699001437] (9,-1; 9,-1), time: 30.0363s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_254, [-inf,inf]=>[-10.13939221813616,7.491816246143413] (9,-1; 9,-1), time: 30.0277s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_60, [-inf,inf]=>[-13.371663880383226,4.3828587643008925] (9,-1; 9,-1), time: 30.0224s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_51, [-inf,inf]=>[-14.205129173762002,2.862913712506706] (9,-1; 9,-1), time: 30.0393s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_53, [-inf,inf]=>[-11.594620685508701,4.216433905618507] (9,-1; 9,-1), time: 30.0582s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_145, [-inf,inf]=>[-8.131702305402722,7.368118152507654] (9,-1; 9,-1), time: 30.0525s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_237, [-inf,inf]=>[-7.973018026571207,6.033502156896858] (9,-1; 9,-1), time: 30.0809s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_139, [-inf,inf]=>[-15.041309248766483,1.8481877313536736] (9,-1; 9,-1), time: 30.0756s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_214, [-inf,inf]=>[-9.903457173499135,4.041783892272875] (9,-1; 9,-1), time: 30.0758s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-8.750222563820335,6.23696612837671] (9,-1; 9,-1), time: 30.0550s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_121, [-inf,inf]=>[-16.431082460520287,2.481384365515315] (9,-1; 9,-1), time: 30.1160s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_248, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 2.2585s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_188, [-inf,inf]=>[-15.758315227727921,0.5955658560481156] (9,-1; 2,-1), time: 20.6653s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_127, [-inf,inf]=>[-15.49504651850273,0.70881861364474] (9,-1; 2,-1), time: 23.1322s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_141, [-inf,inf]=>[-15.2857453774394,3.83727892218984] (9,-1; 2,-1), time: 24.7310s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_39, [-inf,inf]=>[-13.845671762851628,1.8547847017738575] (2,-1; 9,-1), time: 25.4744s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_245, [-inf,inf]=>[-5.886250132857025,9.776558510991611] (9,-1; 9,-1), time: 30.0185s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_69, [-inf,inf]=>[-15.890628702871668,4.084498974500003] (9,-1; 2,-1), time: 29.7243s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_27, [-inf,inf]=>[-13.71183115983436,1.208598214427043] (9,-1; 9,-1), time: 30.0384s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_80, [-inf,inf]=>[-13.17277120365773,6.088666616333409] (9,-1; 9,-1), time: 30.0221s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_29, [-inf,inf]=>[-6.643991505538526,8.579545418357014] (9,-1; 9,-1), time: 30.0172s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_142, [-inf,inf]=>[-12.351497712075345,2.56855332471838] (9,-1; 9,-1), time: 30.0261s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_242, [-inf,inf]=>[-18.275823531783406,0.18436039874777785] (9,-1; 9,-1), time: 30.0208s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_217, [-inf,inf]=>[-8.169072250465977,10.091499500539294] (9,-1; 9,-1), time: 30.0276s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_172, [-inf,inf]=>[-13.537695945104314,2.741824856087676] (9,-1; 9,-1), time: 30.0543s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_226, [-inf,inf]=>[-13.785291175918342,4.601066411450425] (9,-1; 9,-1), time: 30.0923s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-12.818377822659366,4.2412238705708205] (9,-1; 9,-1), time: 30.0936s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_198, [-inf,inf]=>[-11.693573179187881,5.968912598978832] (9,-1; 9,-1), time: 30.0339s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_153, [-inf,inf]=>[-12.064876616347345,2.239380945121695] (9,-1; 9,-1), time: 30.0686s, #vars: 1549, #constrs: 890, improved: True
Solving MIP for lay4_10, [-inf,inf]=>[-11.411815432728572,1.3717174292336338] (9,-1; 9,-1), time: 30.0574s, #vars: 1549, #constrs: 890, improved: True
PGD done for relu layer 2
MIP improved 35 nodes out of 227 unstable nodes, lb improved 150.54202270507812, ub improved 139.76434326171875, time 85.8612
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
MIP finished with 90.13943552970886s
Run final alpha-CROWN after MIP solving on layer 4 and relu idx 1
0 /input torch.Size([1, 256])
1 /input.3 torch.Size([1, 256])
2 /input.7 torch.Size([1, 256])
3 /input.11 torch.Size([1, 256])
4 /input.15 torch.Size([1, 256])
5 /input.19 torch.Size([1, 256])
best_l after optimization: -109275.875
alpha/beta optimization time: 8.143531084060669
alpha-CROWN with intermediate bounds improved by MIP: tensor([[-10472.75488281, -12923.27734375, -12440.66699219, -10154.98144531,
         -12696.60839844, -12936.61035156, -11552.85351562, -12241.38476562,
         -13856.73730469]], device='cuda:0') None
Split layers:
  BoundLinear(name=/input.3, inputs=[/31, /17, /18]): [(BoundRelu(name=/33, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.19, inputs=[/39, /25, /26]): [(BoundRelu(name=/41, inputs=[/input.19]), 0)]
  BoundLinear(name=/input.7, inputs=[/33, /19, /20]): [(BoundRelu(name=/35, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.11, inputs=[/35, /21, /22]): [(BoundRelu(name=/37, inputs=[/input.11]), 0)]
  BoundLinear(name=/input, inputs=[/29, /15, /16]): [(BoundRelu(name=/31, inputs=[/input]), 0)]
  BoundLinear(name=/input.15, inputs=[/37, /23, /24]): [(BoundRelu(name=/39, inputs=[/input.15]), 0)]
refined global lb: tensor([[-10472.75488281],
        [-12923.27734375],
        [-12440.66699219],
        [-10154.98144531],
        [-12696.60839844],
        [-12936.61035156],
        [-11552.85351562],
        [-12241.38476562],
        [-13856.73730469]], device='cuda:0') min: tensor(-13856.73730469, device='cuda:0')
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 256]), torch.Size([1, 9, 256]), torch.Size([1, 9, 256]), torch.Size([1, 9, 256]), torch.Size([1, 9, 256]), torch.Size([1, 9, 256])]

Properties batch 0, size 1
Remaining timeout: -40.85035419464111
##### Instance 0 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: [0.] ######
Remaining spec index [0] with bounds tensor([[-10472.75488281]], device='cuda:0') need to verify.
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[])
  (/15): BoundParams(name=/15, inputs=[])
  (/16): BoundParams(name=/16, inputs=[])
  (/17): BoundParams(name=/17, inputs=[])
  (/18): BoundParams(name=/18, inputs=[])
  (/19): BoundParams(name=/19, inputs=[])
  (/20): BoundParams(name=/20, inputs=[])
  (/21): BoundParams(name=/21, inputs=[])
  (/22): BoundParams(name=/22, inputs=[])
  (/23): BoundParams(name=/23, inputs=[])
  (/24): BoundParams(name=/24, inputs=[])
  (/25): BoundParams(name=/25, inputs=[])
  (/26): BoundParams(name=/26, inputs=[])
  (/27): BoundParams(name=/27, inputs=[])
  (/28): BoundParams(name=/28, inputs=[])
  (/29): BoundFlatten(name=/29, inputs=[/0])
  (/input): BoundLinear(name=/input, inputs=[/29, /15, /16])
  (/31): BoundRelu(name=/31, inputs=[/input])
  (/input.3): BoundLinear(name=/input.3, inputs=[/31, /17, /18])
  (/33): BoundRelu(name=/33, inputs=[/input.3])
  (/input.7): BoundLinear(name=/input.7, inputs=[/33, /19, /20])
  (/35): BoundRelu(name=/35, inputs=[/input.7])
  (/input.11): BoundLinear(name=/input.11, inputs=[/35, /21, /22])
  (/37): BoundRelu(name=/37, inputs=[/input.11])
  (/input.15): BoundLinear(name=/input.15, inputs=[/37, /23, /24])
  (/39): BoundRelu(name=/39, inputs=[/input.15])
  (/input.19): BoundLinear(name=/input.19, inputs=[/39, /25, /26])
  (/41): BoundRelu(name=/41, inputs=[/input.19])
  (/42): BoundLinear(name=/42, inputs=[/41, /27, /28])
)
Model prediction is: tensor([-3.17712873e-03,  9.80182588e-01, -3.64300609e-03,  1.28671899e-03,
        -2.83546001e-03, -4.62295115e-03,  9.14499164e-03,  1.28584355e-02,
         3.57436389e-03, -4.01936471e-04], device='cuda:0')
build_with_refined_bounds batch [0/1]
setting alpha for layer /31 start_node /42 with alignment adjustment
setting alpha for layer /33 start_node /42 with alignment adjustment
setting alpha for layer /35 start_node /42 with alignment adjustment
setting alpha for layer /37 start_node /42 with alignment adjustment
setting alpha for layer /39 start_node /42 with alignment adjustment
setting alpha for layer /41 start_node /42 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 256]), torch.Size([1, 1, 256]), torch.Size([1, 1, 256]), torch.Size([1, 1, 256]), torch.Size([1, 1, 256]), torch.Size([1, 1, 256])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-10472.75488281]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input.3,/input.19,/input.7,/input.11,/input,/input.15,/42
Split layers:
  BoundLinear(name=/input.11, inputs=[/35, /21, /22]): [(BoundRelu(name=/37, inputs=[/input.11]), 0)]
  BoundLinear(name=/input.3, inputs=[/31, /17, /18]): [(BoundRelu(name=/33, inputs=[/input.3]), 0)]
  BoundLinear(name=/input.19, inputs=[/39, /25, /26]): [(BoundRelu(name=/41, inputs=[/input.19]), 0)]
  BoundLinear(name=/input, inputs=[/29, /15, /16]): [(BoundRelu(name=/31, inputs=[/input]), 0)]
  BoundLinear(name=/input.7, inputs=[/33, /19, /20]): [(BoundRelu(name=/35, inputs=[/input.7]), 0)]
  BoundLinear(name=/input.15, inputs=[/37, /23, /24]): [(BoundRelu(name=/39, inputs=[/input.15]), 0)]
Keeping slopes for these layers: ['/42']
Keeping slopes for these layers: ['/42']
Node /31 input 0: size torch.Size([256]) unstable 126
Node /33 input 0: size torch.Size([256]) unstable 226
Node /35 input 0: size torch.Size([256]) unstable 256
Node /37 input 0: size torch.Size([256]) unstable 256
Node /39 input 0: size torch.Size([256]) unstable 256
Node /41 input 0: size torch.Size([256]) unstable 256
-----------------
# of unstable neurons: 1376
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/input.3, 0] 
split level 1: [/input, 0] 
split level 2: [/input.15, 0] 
split level 3: [/input.3, 1] 
split level 4: [/input.15, 1] 
pruning_in_iteration open status: False
ratio of positive domain = 0 / 32 = 0.0
pruning-in-iteration extra time: 0.00018143653869628906
Time: prepare 0.0059    beta_bound 0.7293    bound 0.7294    transfer 0.0002    finalize 0.0041    func 0.7397    
Accumulated time: func 0.7397    prepare 0.0070    bound 0.7294    beta_bound 0.7293    transfer 0.0002    finalize 0.0041    
batch bounding time:  0.7401494979858398
Current worst splitting domains lb-rhs (depth):
-10472.75488 (5), -10472.75488 (5), -10472.75488 (5), -10472.75488 (5), -10472.75488 (5), -10472.75488 (5), -10472.75488 (5), -10472.75488 (5), -10472.75488 (5), -10472.75488 (5), -10472.75488 (5), -10472.75488 (5), -10472.75488 (5), -10472.75488 (5), -10472.75488 (5), -10472.75488 (5), -10470.60254 (5), -10470.60254 (5), -10470.60254 (5), -10470.59863 (5), 
length of domains: 32
Time: pickout 0.0020    decision 0.3334    set_bounds 0.0018    solve 0.7402    add 0.0036    
Accumulated time: pickout 0.0020    decision 0.3334    set_bounds 0.0018    solve 0.7402    add 0.0036    
Current (lb-rhs): -10472.7548828125
32 domains visited
Time out!!!!!!!!
Result: unknown in 117.3052 seconds
############# Summary #############
Final verified acc: 0.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 0 , total falsified (unsafe/sat): 0 , timeout: 1
mean time for ALL instances (total 1):117.30399988022825, max time: 117.30517292022705
unknown (total 1), index: [0]
