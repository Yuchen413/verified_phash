Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab-refine
  enable_incomplete_verification: true
  csv_name: mnistfc_instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2021/benchmarks/mnistfc
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: [-1, 1, 28, 28]
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 39
  end: 40
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 500
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.03
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: 16
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 5
    reduceop: max
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Sun Jan 15 22:55:36 2023 on diablo.cs.ucla.edu
customized start/end sample from instance 39 to 40 in mnistfc_instances.csv
Internal results will be saved to a-b-crown_[mnistfc_instances]_start=39_end=40_iter=20_b=500_timeout=360_branching=kfsb-max-5_lra-init=0.1_lra=0.01_lrb=0.03_PGD=before_cplex_cuts=False_initial_max_domains=1.npz.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 39 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx mnist-net_256x4.onnx
Using vnnlib prop_9_0.03.vnnlib
Precompiled vnnlib file found at ../../vnncomp2021/benchmarks/mnistfc/prop_9_0.03.vnnlib.compiled
Loading onnx ../../vnncomp2021/benchmarks/mnistfc/mnist-net_256x4.onnx wih quirks {}

*************Error traceback*************
Traceback (most recent call last):
  File "/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/load_model.py", line 109, in load_model_onnx
    output_onnx = inference_onnx(path, dummy.numpy())[0]
  File "/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/load_model.py", line 55, in inference_onnx
    res = sess.run(None, inp)
  File "/home/zhouxingshi/miniconda3/envs/alpha-beta-crown/lib/python3.7/site-packages/onnxruntime/capi/onnxruntime_inference_collection.py", line 192, in run
    return self._sess.run(output_names, input_feed, run_options)
onnxruntime.capi.onnxruntime_pybind11_state.InvalidArgument: [ONNXRuntimeError] : 2 : INVALID_ARGUMENT : Invalid rank for input: 0 Got: 4 Expected: 3 Please fix either the inputs or the model.

*****************************************

Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.007500000298023224, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.00279531,  0.00172615,  0.01281443, -0.00142720, -0.00249193,
          0.00647154,  0.00337687, -0.00715575,  0.98417330, -0.00152081]],
       device='cuda:0')
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.93120742e-04, -5.20199537e-05,  1.64179206e-02,  1.71867758e-03,
          -2.79431790e-03,  9.65370238e-03,  9.28986073e-03, -1.93565860e-02,
           9.68331933e-01,  6.96042180e-03],
         [-2.93120742e-04, -5.20199537e-05,  1.64179206e-02,  1.71867758e-03,
          -2.79431790e-03,  9.65370238e-03,  9.28986073e-03, -1.93565860e-02,
           9.68331933e-01,  6.96042180e-03]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.96862507, 0.96838397, 0.95191401, 0.96661323, 0.97112626,
          0.95867825, 0.95904207, 0.98768854, 0.96137154]]], device='cuda:0')
number of violation:  0
Attack finished in 1.1617 seconds.
PGD attack failed
Model prediction is: tensor([[ 0.00279531,  0.00172615,  0.01281443, -0.00142720, -0.00249193,
          0.00647154,  0.00337687, -0.00715575,  0.98417330, -0.00152081]],
       device='cuda:0')
layer /23 using sparse-features alpha with shape [43]; unstable size 43; total size 256 (torch.Size([1, 256]))
layer /23 start_node /input.3 using sparse-spec alpha with unstable size 85 total_size 256 output_shape torch.Size([256])
layer /23 start_node /input.7 using sparse-spec alpha with unstable size 114 total_size 256 output_shape torch.Size([256])
layer /23 start_node /input.11 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /23 start_node /30 using full alpha with unstable size None total_size 9 output_shape 9
layer /25 using sparse-features alpha with shape [85]; unstable size 85; total size 256 (torch.Size([1, 256]))
layer /25 start_node /input.7 using sparse-spec alpha with unstable size 114 total_size 256 output_shape torch.Size([256])
layer /25 start_node /input.11 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /25 start_node /30 using full alpha with unstable size None total_size 9 output_shape 9
layer /27 using sparse-features alpha with shape [114]; unstable size 114; total size 256 (torch.Size([1, 256]))
layer /27 start_node /input.11 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /27 start_node /30 using full alpha with unstable size None total_size 9 output_shape 9
layer /29 using full alpha with shape torch.Size([256]); unstable size 256; total size 256 (torch.Size([1, 256]))
layer /29 start_node /30 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-23.71783829, -23.90351677, -23.03585243, -20.72111893, -22.38746262,
         -24.09617043, -25.96800041, -25.51655960, -26.10804176]],
       device='cuda:0') None
best_l after optimization: -29.743539810180664 with beta sum per layer: []
alpha/beta optimization time: 4.849666357040405
initial alpha-CROWN bounds: tensor([[-3.45051742, -3.11085320, -3.36048865, -3.22913408, -2.97444320,
         -3.57376051, -3.58472061, -3.05363321, -3.40598941]], device='cuda:0')
Worst class: (+ rhs) -3.5847206115722656
Start solving intermediate bounds with MIP...
layer /23 using sparse-features alpha with shape [43]; unstable size 43; total size 256 (torch.Size([1, 256]))
layer /23 start_node /input.3 using sparse-spec alpha with unstable size 85 total_size 256 output_shape torch.Size([256])
layer /23 start_node /input.7 using sparse-spec alpha with unstable size 114 total_size 256 output_shape torch.Size([256])
layer /23 start_node /input.11 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /23 start_node /30 using full alpha with unstable size None total_size 9 output_shape 9
layer /25 using sparse-features alpha with shape [85]; unstable size 85; total size 256 (torch.Size([1, 256]))
layer /25 start_node /input.7 using sparse-spec alpha with unstable size 114 total_size 256 output_shape torch.Size([256])
layer /25 start_node /input.11 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /25 start_node /30 using full alpha with unstable size None total_size 9 output_shape 9
layer /27 using sparse-features alpha with shape [114]; unstable size 114; total size 256 (torch.Size([1, 256]))
layer /27 start_node /input.11 using full alpha with unstable size 256 total_size 256 output_shape torch.Size([256])
layer /27 start_node /30 using full alpha with unstable size None total_size 9 output_shape 9
layer /29 using full alpha with shape torch.Size([256]); unstable size 256; total size 256 (torch.Size([1, 256]))
layer /29 start_node /30 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
Set parameter Username
Academic license - for non-commercial use only - expires 2023-08-09
mip_multi_proc: 16, mip_threads: 1,total threads used: 16, mip_perneuron_refine_timeout: 15
[total time budget for MIP: 240.0]

Linear(in_features=784, out_features=256, bias=True) 0 2 torch.Size([256])
Linear(in_features=256, out_features=256, bias=True) 1 4 torch.Size([256])
sorted candidates ['lay4_5', 'lay4_104', 'lay4_101', 'lay4_205', 'lay4_196', 'lay4_73', 'lay4_115', 'lay4_174', 'lay4_206', 'lay4_44', 'lay4_254', 'lay4_128', 'lay4_49', 'lay4_255', 'lay4_99', 'lay4_70', 'lay4_186', 'lay4_7', 'lay4_58', 'lay4_76', 'lay4_193', 'lay4_91', 'lay4_43', 'lay4_214', 'lay4_114', 'lay4_42', 'lay4_118', 'lay4_122', 'lay4_95', 'lay4_225', 'lay4_83', 'lay4_244', 'lay4_13', 'lay4_187', 'lay4_121', 'lay4_18', 'lay4_240', 'lay4_208', 'lay4_215', 'lay4_81', 'lay4_135', 'lay4_71', 'lay4_180', 'lay4_134', 'lay4_29', 'lay4_34', 'lay4_223', 'lay4_93', 'lay4_148', 'lay4_190', 'lay4_103', 'lay4_37', 'lay4_21', 'lay4_252', 'lay4_204', 'lay4_142', 'lay4_132', 'lay4_212', 'lay4_249', 'lay4_181', 'lay4_96', 'lay4_72', 'lay4_39', 'lay4_3', 'lay4_230', 'lay4_65', 'lay4_245', 'lay4_139', 'lay4_177', 'lay4_59', 'lay4_154', 'lay4_242', 'lay4_250', 'lay4_191', 'lay4_54', 'lay4_156', 'lay4_57', 'lay4_123', 'lay4_211'] filter: 1.0
PGD done for relu layer 1
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/layer.py:30: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_numpy.cpp:178.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/model.py:154: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  "Using experimental implementation that allows 'batch_size > 1'."
/home/zhouxingshi/gputest/CROWN-GENERAL/complete_verifier/load_model.py:115: UserWarning: Not able to check model's conversion correctness
  warnings.warn('Not able to check model\'s conversion correctness')
Solving MIP for lay4_99, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4703s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_101, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6544s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_73, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6674s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_255, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.7464s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_128, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.1169s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_7, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5647s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_254, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3311s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_5, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.4123s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_205, [-inf,inf]=>[-3.9270748851417587,1.0695037458346397] (2,-1; 2,-1), time: 3.9886s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_49, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.9995s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_174, [-inf,inf]=>[-4.560629875950278,1.2437917831880396] (2,-1; 2,-1), time: 4.2223s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_44, [-inf,inf]=>[-4.946839029152268,0.8876607749031671] (2,-1; 2,-1), time: 4.2951s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_70, [-inf,inf]=>[-4.739336505358452,1.1104217554674607] (2,-1; 2,-1), time: 4.3730s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_114, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5667s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_206, [-inf,inf]=>[-3.236830002126007,2.049278710975146] (2,-1; 2,-1), time: 4.9686s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_104, [-inf,inf]=>[-5.414273043768124,0.1279569668872145] (2,-1; 2,-1), time: 5.4231s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_196, [-inf,inf]=>[1e-05,4.33991096188163] (15,-1; 2,-1), time: 5.6458s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_186, [-inf,inf]=>[-3.635646836608331,0.12069575467708313] (2,-1; 2,-1), time: 5.3563s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_115, [-inf,inf]=>[-1.6862962043096776,2.7385859374286463] (2,-1; 2,-1), time: 5.9363s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_244, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5285s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_91, [-inf,inf]=>[-5.830532143670819,0.24895952655322995] (2,-1; 2,-1), time: 4.8078s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4059s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_18, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3849s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_208, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3938s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_58, [-inf,inf]=>[-4.154867153252451,0.7245276481641516] (2,-1; 2,-1), time: 6.0431s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_193, [-inf,inf]=>[-4.218709217755119,1.1534571743716064] (2,-1; 2,-1), time: 5.5683s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_76, [-inf,inf]=>[-3.287562703932921,0.2955699803826689] (2,-1; 2,-1), time: 5.9478s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_43, [-inf,inf]=>[-3.0975575572915526,1.682909156718383] (2,-1; 2,-1), time: 5.6045s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_121, [-inf,inf]=>[1e-05,6.550453891066257] (15,-1; 2,-1), time: 2.5036s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_42, [-inf,inf]=>[-2.3324841769178333,2.805260394642371] (2,-1; 2,-1), time: 4.6719s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_29, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3654s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_118, [-inf,inf]=>[-0.9536343606461605,2.4600159314725842] (2,-1; 2,-1), time: 4.6267s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_34, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3594s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_122, [-inf,inf]=>[-3.105552047954353,2.1713875366160895] (2,-1; 2,-1), time: 4.9237s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_71, [-inf,inf]=>[1e-05,5.071030769396954] (15,-1; 2,-1), time: 2.8534s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_148, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5792s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_225, [-inf,inf]=>[-2.5723487967051097,1.9017071243269432] (2,-1; 2,-1), time: 5.2916s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_37, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3465s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_214, [-inf,inf]=>[-1.196627288804688,2.121436138706148] (2,-1; 2,-1), time: 6.6762s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_83, [-inf,inf]=>[-2.2458365939789307,2.8361415409235393] (2,-1; 2,-1), time: 5.5777s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_95, [-inf,inf]=>[-3.355693067151547,1.4180944820253083] (2,-1; 2,-1), time: 6.3618s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_240, [-inf,inf]=>[-1.6428086990655395,3.692658148325948] (2,-1; 2,-1), time: 5.0034s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_13, [-inf,inf]=>[-4.197836141415206,0.6576111808201139] (2,-1; 2,-1), time: 5.5527s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_134, [-inf,inf]=>[-3.9554294408360287,0.4737192073031129] (2,-1; 2,-1), time: 4.2555s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_215, [-inf,inf]=>[-3.836366550280133,1.154271521508179] (2,-1; 2,-1), time: 5.3266s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_249, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.6355s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_135, [-inf,inf]=>[-3.979395310986947,1.189400845647433] (2,-1; 2,-1), time: 5.2320s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_180, [-inf,inf]=>[-1.934015583048864,2.280851272777289] (2,-1; 2,-1), time: 5.3556s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_39, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3803s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_81, [-inf,inf]=>[-0.8467568842354892,3.9834748853569337] (2,-1; 2,-1), time: 5.6727s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_3, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4175s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_190, [-inf,inf]=>[-2.453859332411532,2.5714069834662765] (2,-1; 2,-1), time: 3.6422s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_181, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.6937s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_103, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 3.4723s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_223, [-inf,inf]=>[-3.573365134194282,0.5968048901430325] (2,-1; 2,-1), time: 4.3307s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_177, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.5592s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_93, [-inf,inf]=>[-4.748732170875063,0.10054512363457291] (2,-1; 2,-1), time: 4.7683s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_154, [-inf,inf]=>[1e-05,7.87556462316534] (15,-1; 2,-1), time: 0.9790s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_65, [-inf,inf]=>[1e-05,8.377329597308453] (15,-1; 2,-1), time: 2.3724s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_142, [-inf,inf]=>[-3.0846299299994993,0.754920732458514] (2,-1; 2,-1), time: 4.5696s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_54, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3305s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_204, [-inf,inf]=>[-3.558567696098043,0.6125389489845485] (2,-1; 2,-1), time: 5.2625s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_245, [-inf,inf]=>[1e-05,5.232401513100095] (15,-1; 2,-1), time: 3.1200s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_123, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3704s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_212, [-inf,inf]=>[-3.094566318201885,1.8390598499341062] (2,-1; 2,-1), time: 4.8334s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_21, [-inf,inf]=>[-1.131871247475704,3.463138257723146] (2,-1; 2,-1), time: 6.0741s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_211, [-inf,inf]=>[-inf,-0.1726329717104917] (-1,-1; 2,-1), time: 0.2691s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_132, [-inf,inf]=>[-1.1718191045807798,2.845754051015093] (2,-1; 2,-1), time: 5.2632s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_252, [-inf,inf]=>[-3.4881403884523876,0.15816169335717123] (2,-1; 2,-1), time: 6.1641s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_230, [-inf,inf]=>[-6.2019612307259075,0.6962921600133289] (2,-1; 2,-1), time: 4.0951s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_72, [-inf,inf]=>[-1.4904029967931463,3.0909289852805144] (2,-1; 2,-1), time: 4.9401s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_191, [-inf,inf]=>[1e-05,3.9392772651779886] (15,-1; 2,-1), time: 2.7851s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_59, [-inf,inf]=>[1e-05,5.735305932355416] (15,-1; 2,-1), time: 3.9208s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_57, [-inf,inf]=>[-5.126591159405847,0.35711437930936046] (2,-1; 2,-1), time: 1.8671s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_96, [-inf,inf]=>[-2.0869661675715943,2.937924548454668] (2,-1; 2,-1), time: 5.4711s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_139, [-inf,inf]=>[1e-05,3.890788463207689] (15,-1; 2,-1), time: 4.8703s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_250, [-inf,inf]=>[-2.060413779608725,1.7390728903250432] (2,-1; 2,-1), time: 4.4414s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_242, [-inf,inf]=>[-2.4161696509364203,1.1274373117431788] (2,-1; 2,-1), time: 5.0418s, #vars: 1383, #constrs: 641, improved: True
Solving MIP for lay4_156, [-inf,inf]=>[-2.3111513842480704,1.4082927288479001] (2,-1; 2,-1), time: 5.0883s, #vars: 1383, #constrs: 641, improved: True
PGD done for relu layer 2
MIP improved 79 nodes out of 79 unstable nodes, lb improved 92.10482788085938, ub improved 89.86321258544922, time 21.7567
maximum relu layer improved by MIP so far 1 last_relu_layer_refined: True
Linear(in_features=256, out_features=256, bias=True) 2 6 torch.Size([256])
sorted candidates ['lay6_107', 'lay6_66', 'lay6_195', 'lay6_192', 'lay6_205', 'lay6_211', 'lay6_121', 'lay6_183', 'lay6_27', 'lay6_105', 'lay6_146', 'lay6_203', 'lay6_157', 'lay6_35', 'lay6_194', 'lay6_178', 'lay6_46', 'lay6_74', 'lay6_112', 'lay6_191', 'lay6_60', 'lay6_200', 'lay6_21', 'lay6_16', 'lay6_149', 'lay6_133', 'lay6_254', 'lay6_172', 'lay6_65', 'lay6_143', 'lay6_187', 'lay6_71', 'lay6_44', 'lay6_219', 'lay6_84'] filter: 1.0
Solving MIP for lay6_195, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3865s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_121, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3962s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_203, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3776s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_194, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3933s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_157, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4217s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_178, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4003s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_146, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4301s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_183, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4558s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_46, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3862s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_112, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3867s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_60, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3766s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_21, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3729s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_16, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3845s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_191, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4767s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_149, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3420s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_133, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4117s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_254, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3901s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_172, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4119s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_143, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3777s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_187, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3557s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_44, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4022s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_219, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.3791s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_71, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4466s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_192, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7091s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_84, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.4295s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_65, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 0.9248s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_200, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.3723s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_66, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.9156s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_74, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 1.7763s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_35, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 4.4885s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_211, [-inf,inf]=>[1e-05,15.504239926925333] (15,-1; 2,-1), time: 5.3511s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_27, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 5.6366s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_105, [-inf,inf]=>[-inf,-1e-05] (-1,-1; 15,-1), time: 10.0197s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_107, [-inf,inf]=>[-5.646517884192406,0.8406758703878366] (9,-1; 9,-1), time: 30.0304s, #vars: 1725, #constrs: 1026, improved: True
Solving MIP for lay6_205, [-inf,inf]=>[-5.739325886332492,1.6701159552510523] (9,-1; 9,-1), time: 30.0233s, #vars: 1725, #constrs: 1026, improved: True
PGD done for relu layer 3
Run alpha-CROWN after refining layer 4 and relu idx 1
0 /input torch.Size([1, 256])
1 /input.3 torch.Size([1, 256])
2 /input.7 torch.Size([1, 256])
3 /input.11 torch.Size([1, 256])
relu layer: 1 has unstable to stable neurons: [(5, -1), (101, -1), (196, 1), (73, -1), (254, -1), (128, -1), (49, -1), (255, -1), (99, -1), (7, -1), (114, -1), (244, -1), (187, -1), (121, 1), (18, -1), (208, -1), (71, 1), (29, -1), (34, -1), (148, -1), (103, -1), (37, -1), (249, -1), (181, -1), (39, -1), (3, -1), (65, 1), (245, 1), (139, 1), (177, -1), (59, 1), (154, 1), (191, 1), (54, -1), (123, -1), (211, -1)]
best_l after optimization: -5.631433486938477 with beta sum per layer: [0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 3.55171537399292
alpha-CROWN with intermediate bounds by MIP: tensor([[-0.66027582, -0.54496092, -0.54147112, -0.72084224, -0.49880937,
         -0.76772660, -0.76181948, -0.45345929, -0.68206841]], device='cuda:0') None
MIP improved 35 nodes out of 35 unstable nodes, lb improved 22.19110870361328, ub improved 46.33427047729492, time 30.6995
maximum relu layer improved by MIP so far 2
Linear(in_features=256, out_features=256, bias=True) 3 8 torch.Size([256])
sorted candidates ['lay8_69', 'lay8_169', 'lay8_74', 'lay8_196', 'lay8_183', 'lay8_25', 'lay8_36', 'lay8_106', 'lay8_86', 'lay8_76', 'lay8_2', 'lay8_46', 'lay8_235', 'lay8_239', 'lay8_53', 'lay8_197', 'lay8_226', 'lay8_38', 'lay8_142', 'lay8_144', 'lay8_93', 'lay8_107', 'lay8_37', 'lay8_143', 'lay8_90', 'lay8_241', 'lay8_75', 'lay8_24', 'lay8_21', 'lay8_150', 'lay8_191', 'lay8_157', 'lay8_135', 'lay8_55', 'lay8_89', 'lay8_14', 'lay8_217', 'lay8_248', 'lay8_43', 'lay8_198', 'lay8_124', 'lay8_120', 'lay8_81', 'lay8_204', 'lay8_201', 'lay8_9', 'lay8_189', 'lay8_73', 'lay8_147', 'lay8_57', 'lay8_129', 'lay8_181', 'lay8_209', 'lay8_112', 'lay8_0', 'lay8_153', 'lay8_243', 'lay8_225', 'lay8_216', 'lay8_71', 'lay8_111', 'lay8_214', 'lay8_91', 'lay8_238', 'lay8_40', 'lay8_250', 'lay8_148', 'lay8_49', 'lay8_174', 'lay8_254', 'lay8_122', 'lay8_79', 'lay8_166', 'lay8_138', 'lay8_31', 'lay8_3', 'lay8_23', 'lay8_68', 'lay8_130', 'lay8_82', 'lay8_60', 'lay8_172', 'lay8_139', 'lay8_63', 'lay8_171', 'lay8_213', 'lay8_62', 'lay8_193', 'lay8_88', 'lay8_128', 'lay8_30', 'lay8_83', 'lay8_190', 'lay8_149', 'lay8_66', 'lay8_41', 'lay8_167', 'lay8_11', 'lay8_26', 'lay8_7', 'lay8_173', 'lay8_127', 'lay8_202', 'lay8_34', 'lay8_67', 'lay8_64', 'lay8_114', 'lay8_103', 'lay8_80', 'lay8_18', 'lay8_131', 'lay8_42', 'lay8_156', 'lay8_160', 'lay8_203', 'lay8_28', 'lay8_211', 'lay8_61', 'lay8_56', 'lay8_47', 'lay8_194', 'lay8_208', 'lay8_176', 'lay8_168', 'lay8_154', 'lay8_70', 'lay8_236', 'lay8_192', 'lay8_141', 'lay8_251', 'lay8_97', 'lay8_99', 'lay8_4', 'lay8_178', 'lay8_98', 'lay8_52', 'lay8_108', 'lay8_35', 'lay8_94', 'lay8_44', 'lay8_212', 'lay8_205', 'lay8_136', 'lay8_39', 'lay8_27', 'lay8_206', 'lay8_16', 'lay8_175', 'lay8_137', 'lay8_179', 'lay8_223', 'lay8_240', 'lay8_10', 'lay8_115', 'lay8_33', 'lay8_54', 'lay8_123', 'lay8_185', 'lay8_199', 'lay8_92', 'lay8_159', 'lay8_252', 'lay8_237', 'lay8_51', 'lay8_246', 'lay8_104', 'lay8_32', 'lay8_95', 'lay8_101', 'lay8_22', 'lay8_158', 'lay8_78', 'lay8_102', 'lay8_84', 'lay8_132', 'lay8_195', 'lay8_59', 'lay8_232', 'lay8_19', 'lay8_45', 'lay8_210', 'lay8_17', 'lay8_231', 'lay8_77', 'lay8_163', 'lay8_207', 'lay8_87', 'lay8_233', 'lay8_50', 'lay8_116', 'lay8_134', 'lay8_118', 'lay8_188', 'lay8_58', 'lay8_117', 'lay8_249'] filter: 1.0
Run alpha-CROWN after refining layer 6 and relu idx 2
0 /input torch.Size([1, 256])
1 /input.3 torch.Size([1, 256])
2 /input.7 torch.Size([1, 256])
3 /input.11 torch.Size([1, 256])
relu layer: 2 has unstable to stable neurons: [(66, -1), (195, -1), (192, -1), (211, 1), (121, -1), (183, -1), (27, -1), (105, -1), (146, -1), (203, -1), (157, -1), (35, -1), (194, -1), (178, -1), (46, -1), (74, -1), (112, -1), (191, -1), (60, -1), (200, -1), (21, -1), (16, -1), (149, -1), (133, -1), (254, -1), (172, -1), (65, -1), (143, -1), (187, -1), (71, -1), (44, -1), (219, -1), (84, -1)]

all verified at 0th iter
best_l after optimization: 4.228449821472168 with beta sum per layer: [0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.04223442077636719
alpha-CROWN with intermediate bounds by MIP: tensor([[0.43358827, 0.52239585, 0.47060695, 0.46503213, 0.52991557, 0.43820098,
         0.44063598, 0.52237433, 0.40569997]], device='cuda:0') None
min of alpha-CROWN bounds 0.4056999683380127>=0, verified!
MIP finished with 58.420302867889404s
Run final alpha-CROWN after MIP solving on layer 7 and relu idx 3
0 /input torch.Size([1, 256])
1 /input.3 torch.Size([1, 256])
2 /input.7 torch.Size([1, 256])
3 /input.11 torch.Size([1, 256])

all verified at 0th iter
best_l after optimization: 4.228449821472168 with beta sum per layer: [0.0, 0.0, 0.0, 0.0]
alpha/beta optimization time: 0.027667999267578125
alpha-CROWN with intermediate bounds improved by MIP: tensor([[0.43358827, 0.52239585, 0.47060695, 0.46503213, 0.52991557, 0.43820098,
         0.44063598, 0.52237433, 0.40569997]], device='cuda:0') None
refined global lb: tensor([[0.43358827],
        [0.52239585],
        [0.47060695],
        [0.46503213],
        [0.52991557],
        [0.43820098],
        [0.44063598],
        [0.52237433],
        [0.40569997]], device='cuda:0') min: tensor(0.40569997, device='cuda:0')
Verified safe using alpha-CROWN with MIP improved bounds!
Result: safe-incomplete-refine in 67.3954 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):67.39469319860633, max time: 67.39536714553833
mean time for verified SAFE instances(total 1): 67.39536714553833, max time: 67.39536714553833
safe-incomplete-refine (total 1), index: [0]
