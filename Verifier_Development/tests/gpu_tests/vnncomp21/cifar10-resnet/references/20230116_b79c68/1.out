Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  save_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: cifar10_resnet_instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2021/benchmarks/cifar10_resnet
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
data:
  start: 62
  end: 63
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  vnnlib_path: null
  vnnlib_path_prefix: ''
solver:
  batch_size: 2000
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_slopes: false
    no_joint_opt: false
    lr_decay: 0.98
    full_conv_alpha: true
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.01
    lr_decay: 0.98
    optimizer: adam
    iteration: 50
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_intermediate_layers: ''
  interm_transfer: true
  cut:
    enabled: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 100
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    sb_coeff_thresh: 0.001
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sort_domain_interval: -1
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: skip
  pgd_steps: 100
  pgd_restarts: 30
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  cex_path: ./test_cex.txt
  attack_mode: PGD
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 5000000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
debug:
  lp_test: null

Experiments at Sun Jan 15 22:18:17 2023 on diablo.cs.ucla.edu
customized start/end sample from instance 62 to 63 in cifar10_resnet_instances.csv
Internal results will be saved to a-b-crown_[cifar10_resnet_instances]_start=62_end=63_iter=50_b=2000_timeout=360_branching=kfsb-max-3_lra-init=0.1_lra=0.01_lrb=0.01_PGD=skip_cplex_cuts=False_initial_max_domains=1.npz.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 62 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx onnx/resnet_4b.onnx
Using vnnlib vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib
Precompiled vnnlib file found at ../../vnncomp2021/benchmarks/cifar10_resnet/vnnlib_properties_pgd_filtered/resnet4b_pgd_filtered/prop_14_eps_0.004.vnnlib.compiled
Loading onnx ../../vnncomp2021/benchmarks/cifar10_resnet/onnx/resnet_4b.onnx wih quirks {}
Model prediction is: tensor([[ 1.13689613, -1.69910789, -0.77371281,  0.36231560, -1.27489316,
         -0.52829909, -1.23018956, -0.75381315,  5.67982817, -0.81278414]],
       device='cuda:0')
layer /54 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 (torch.Size([1, 16, 16, 16]))
layer /54 start_node /input.4 using sparse-spec alpha with unstable size 196 total_size 2048 output_shape (32, 8, 8)
layer /54 start_node /59 using sparse-spec alpha with unstable size 189 total_size 2048 output_shape (32, 8, 8)
layer /54 start_node /input.12 using sparse-spec alpha with unstable size 242 total_size 2048 output_shape (32, 8, 8)
layer /54 start_node /64 using sparse-spec alpha with unstable size 385 total_size 2048 output_shape (32, 8, 8)
layer /54 start_node /input.20 using sparse-spec alpha with unstable size 106 total_size 512 output_shape torch.Size([32, 4, 4])
layer /54 start_node /70 using sparse-spec alpha with unstable size 144 total_size 512 output_shape torch.Size([32, 4, 4])
layer /54 start_node /input.28 using sparse-spec alpha with unstable size 152 total_size 512 output_shape torch.Size([32, 4, 4])
layer /54 start_node /75 using sparse-spec alpha with unstable size 267 total_size 512 output_shape torch.Size([32, 4, 4])
layer /54 start_node /input.32 using sparse-spec alpha with unstable size 79 total_size 100 output_shape torch.Size([100])
layer /54 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /56 using sparse-features alpha with shape [196]; unstable size 196; total size 2048 (torch.Size([1, 32, 8, 8]))
layer /56 start_node /59 using sparse-spec alpha with unstable size 189 total_size 2048 output_shape (32, 8, 8)
layer /56 start_node /input.12 using sparse-spec alpha with unstable size 242 total_size 2048 output_shape (32, 8, 8)
layer /56 start_node /64 using sparse-spec alpha with unstable size 385 total_size 2048 output_shape (32, 8, 8)
layer /56 start_node /input.20 using sparse-spec alpha with unstable size 106 total_size 512 output_shape torch.Size([32, 4, 4])
layer /56 start_node /70 using sparse-spec alpha with unstable size 144 total_size 512 output_shape torch.Size([32, 4, 4])
layer /56 start_node /input.28 using sparse-spec alpha with unstable size 152 total_size 512 output_shape torch.Size([32, 4, 4])
layer /56 start_node /75 using sparse-spec alpha with unstable size 267 total_size 512 output_shape torch.Size([32, 4, 4])
layer /56 start_node /input.32 using sparse-spec alpha with unstable size 79 total_size 100 output_shape torch.Size([100])
layer /56 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [189]; unstable size 189; total size 2048 (torch.Size([1, 32, 8, 8]))
layer /input.8 start_node /input.12 using sparse-spec alpha with unstable size 242 total_size 2048 output_shape (32, 8, 8)
layer /input.8 start_node /64 using sparse-spec alpha with unstable size 385 total_size 2048 output_shape (32, 8, 8)
layer /input.8 start_node /input.20 using sparse-spec alpha with unstable size 106 total_size 512 output_shape (32, 4, 4)
layer /input.8 start_node /70 using sparse-spec alpha with unstable size 144 total_size 512 output_shape torch.Size([32, 4, 4])
layer /input.8 start_node /input.28 using sparse-spec alpha with unstable size 152 total_size 512 output_shape torch.Size([32, 4, 4])
layer /input.8 start_node /75 using sparse-spec alpha with unstable size 267 total_size 512 output_shape torch.Size([32, 4, 4])
layer /input.8 start_node /input.32 using sparse-spec alpha with unstable size 79 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /62 using sparse-features alpha with shape [242]; unstable size 242; total size 2048 (torch.Size([1, 32, 8, 8]))
layer /62 start_node /64 using sparse-spec alpha with unstable size 385 total_size 2048 output_shape (32, 8, 8)
layer /62 start_node /input.20 using sparse-spec alpha with unstable size 106 total_size 512 output_shape (32, 4, 4)
layer /62 start_node /70 using sparse-spec alpha with unstable size 144 total_size 512 output_shape torch.Size([32, 4, 4])
layer /62 start_node /input.28 using sparse-spec alpha with unstable size 152 total_size 512 output_shape torch.Size([32, 4, 4])
layer /62 start_node /75 using sparse-spec alpha with unstable size 267 total_size 512 output_shape torch.Size([32, 4, 4])
layer /62 start_node /input.32 using sparse-spec alpha with unstable size 79 total_size 100 output_shape torch.Size([100])
layer /62 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.16 using sparse-features alpha with shape [385]; unstable size 385; total size 2048 (torch.Size([1, 32, 8, 8]))
layer /input.16 start_node /input.20 using sparse-spec alpha with unstable size 106 total_size 512 output_shape (32, 4, 4)
layer /input.16 start_node /70 using sparse-spec alpha with unstable size 144 total_size 512 output_shape (32, 4, 4)
layer /input.16 start_node /input.28 using sparse-spec alpha with unstable size 152 total_size 512 output_shape torch.Size([32, 4, 4])
layer /input.16 start_node /75 using sparse-spec alpha with unstable size 267 total_size 512 output_shape torch.Size([32, 4, 4])
layer /input.16 start_node /input.32 using sparse-spec alpha with unstable size 79 total_size 100 output_shape torch.Size([100])
layer /input.16 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /67 using sparse-features alpha with shape [106]; unstable size 106; total size 512 (torch.Size([1, 32, 4, 4]))
layer /67 start_node /70 using sparse-spec alpha with unstable size 144 total_size 512 output_shape (32, 4, 4)
layer /67 start_node /input.28 using sparse-spec alpha with unstable size 152 total_size 512 output_shape torch.Size([32, 4, 4])
layer /67 start_node /75 using sparse-spec alpha with unstable size 267 total_size 512 output_shape torch.Size([32, 4, 4])
layer /67 start_node /input.32 using sparse-spec alpha with unstable size 79 total_size 100 output_shape torch.Size([100])
layer /67 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /input.24 using sparse-features alpha with shape [144]; unstable size 144; total size 512 (torch.Size([1, 32, 4, 4]))
layer /input.24 start_node /input.28 using sparse-spec alpha with unstable size 152 total_size 512 output_shape (32, 4, 4)
layer /input.24 start_node /75 using sparse-spec alpha with unstable size 267 total_size 512 output_shape torch.Size([32, 4, 4])
layer /input.24 start_node /input.32 using sparse-spec alpha with unstable size 79 total_size 100 output_shape torch.Size([100])
layer /input.24 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /73 using sparse-features alpha with shape [152]; unstable size 152; total size 512 (torch.Size([1, 32, 4, 4]))
layer /73 start_node /75 using sparse-spec alpha with unstable size 267 total_size 512 output_shape (32, 4, 4)
layer /73 start_node /input.32 using sparse-spec alpha with unstable size 79 total_size 100 output_shape torch.Size([100])
layer /73 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /76 using sparse-features alpha with shape [267]; unstable size 267; total size 512 (torch.Size([1, 32, 4, 4]))
layer /76 start_node /input.32 using sparse-spec alpha with unstable size 79 total_size 100 output_shape torch.Size([100])
layer /76 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
layer /79 using sparse-features alpha with shape [79]; unstable size 79; total size 100 (torch.Size([1, 100]))
layer /79 start_node /80 using full alpha with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.10904527, -0.41920114, -3.07417774, -2.59466600, -2.29754019,
         -2.28992414, -1.32546949, -3.86168671, -2.47135091]], device='cuda:0') None
best_l after optimization: 0.46553242206573486 with beta sum per layer: []
alpha/beta optimization time: 36.98297429084778
initial alpha-CROWN bounds: tensor([[-0.23666906,  1.51479363, -0.30379534, -0.43293047,  0.08094263,
          0.11561728,  1.05317593, -1.09977293, -0.22582924]], device='cuda:0')
Worst class: (+ rhs) -1.0997729301452637
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([1, 9, 16, 16, 16]), torch.Size([1, 9, 32, 8, 8]), torch.Size([1, 9, 32, 8, 8]), torch.Size([1, 9, 32, 8, 8]), torch.Size([1, 9, 32, 8, 8]), torch.Size([1, 9, 32, 4, 4]), torch.Size([1, 9, 32, 4, 4]), torch.Size([1, 9, 32, 4, 4]), torch.Size([1, 9, 32, 4, 4]), torch.Size([1, 9, 100])]

Properties batch 0, size 1
Remaining timeout: 256.68527841567993
##### Instance 0 first 10 spec matrices: [[[-1.  0.  0.  0.  0.  0.  0.  0.  1.  0.]]]
thresholds: [0.] ######
Remaining spec index [0] with bounds tensor([[-0.23666906]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.13689613, -1.69910789, -0.77371281,  0.36231560, -1.27489316,
        -0.52829909, -1.23018956, -0.75381315,  5.67982817, -0.81278414],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /54 start_node /80 with alignment adjustment
setting alpha for layer /56 start_node /80 with alignment adjustment
setting alpha for layer /input.8 start_node /80 with alignment adjustment
setting alpha for layer /62 start_node /80 with alignment adjustment
setting alpha for layer /input.16 start_node /80 with alignment adjustment
setting alpha for layer /67 start_node /80 with alignment adjustment
setting alpha for layer /input.24 start_node /80 with alignment adjustment
setting alpha for layer /73 start_node /80 with alignment adjustment
setting alpha for layer /76 start_node /80 with alignment adjustment
setting alpha for layer /79 start_node /80 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.23666906]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/80']
Keeping slopes for these layers: ['/80']
layer 0 name BoundConv(name="/input") size torch.Size([4096]) unstable 445
layer 1 name BoundConv(name="/input.4") size torch.Size([2048]) unstable 194
layer 2 name BoundAdd(name="/59") size torch.Size([2048]) unstable 187
layer 3 name BoundConv(name="/input.12") size torch.Size([2048]) unstable 239
layer 4 name BoundAdd(name="/64") size torch.Size([2048]) unstable 367
layer 5 name BoundConv(name="/input.20") size torch.Size([512]) unstable 101
layer 6 name BoundAdd(name="/70") size torch.Size([512]) unstable 132
layer 7 name BoundConv(name="/input.28") size torch.Size([512]) unstable 143
layer 8 name BoundAdd(name="/75") size torch.Size([512]) unstable 237
layer 9 name BoundLinear(name="/input.32") size torch.Size([100]) unstable 72
-----------------
# of unstable neurons: 2117
-----------------

batch:  torch.Size([1, 16, 16, 16]) pre split depth:  7
post split depth:  7
splitting decisions: 
split level 0: [9, 36] 
split level 1: [9, 8] 
split level 2: [9, 51] 
split level 3: [9, 38] 
split level 4: [9, 82] 
split level 5: [9, 89] 
split level 6: [9, 81] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 0.00013208389282226562
Time: prepare 0.0486    beta_bound 0.0336    bound 0.0337    transfer 0.0016    finalize 0.0404    func 0.1243    
Accumulated time: func 0.1243    prepare 0.0604    bound 0.0337    beta_bound 0.0336    transfer 0.0016    finalize 0.0404    
batch bounding time:  0.12443900108337402
length of domains: 0
Time: pickout 0.0035    decision 0.5736    solve 0.1655    add 0.0041    
Accumulated time: pickout 0.0035    decision 0.5736    solve 0.1655    add 0.0041    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.8710825443267822


Properties batch 1, size 1
Remaining timeout: 255.3804874420166
##### Instance 0 first 10 spec matrices: [[[ 0. -1.  0.  0.  0.  0.  0.  0.  1.  0.]]]
thresholds: [0.] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.5147936344146729.

Properties batch 2, size 1
Remaining timeout: 255.331152677536
##### Instance 0 first 10 spec matrices: [[[ 0.  0. -1.  0.  0.  0.  0.  0.  1.  0.]]]
thresholds: [0.] ######
Remaining spec index [0] with bounds tensor([[-0.30379534]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.13689613, -1.69910789, -0.77371281,  0.36231560, -1.27489316,
        -0.52829909, -1.23018956, -0.75381315,  5.67982817, -0.81278414],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /54 start_node /80 with alignment adjustment
setting alpha for layer /56 start_node /80 with alignment adjustment
setting alpha for layer /input.8 start_node /80 with alignment adjustment
setting alpha for layer /62 start_node /80 with alignment adjustment
setting alpha for layer /input.16 start_node /80 with alignment adjustment
setting alpha for layer /67 start_node /80 with alignment adjustment
setting alpha for layer /input.24 start_node /80 with alignment adjustment
setting alpha for layer /73 start_node /80 with alignment adjustment
setting alpha for layer /76 start_node /80 with alignment adjustment
setting alpha for layer /79 start_node /80 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.30379534]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/80']
Keeping slopes for these layers: ['/80']
layer 0 name BoundConv(name="/input") size torch.Size([4096]) unstable 445
layer 1 name BoundConv(name="/input.4") size torch.Size([2048]) unstable 194
layer 2 name BoundAdd(name="/59") size torch.Size([2048]) unstable 187
layer 3 name BoundConv(name="/input.12") size torch.Size([2048]) unstable 239
layer 4 name BoundAdd(name="/64") size torch.Size([2048]) unstable 367
layer 5 name BoundConv(name="/input.20") size torch.Size([512]) unstable 101
layer 6 name BoundAdd(name="/70") size torch.Size([512]) unstable 132
layer 7 name BoundConv(name="/input.28") size torch.Size([512]) unstable 143
layer 8 name BoundAdd(name="/75") size torch.Size([512]) unstable 237
layer 9 name BoundLinear(name="/input.32") size torch.Size([100]) unstable 72
-----------------
# of unstable neurons: 2117
-----------------

batch:  torch.Size([1, 16, 16, 16]) pre split depth:  7
post split depth:  7
splitting decisions: 
split level 0: [9, 76] 
split level 1: [9, 14] 
split level 2: [9, 96] 
split level 3: [9, 74] 
split level 4: [9, 31] 
split level 5: [9, 82] 
split level 6: [9, 51] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 0.00012993812561035156
Time: prepare 0.0554    beta_bound 0.0260    bound 0.0261    transfer 0.0016    finalize 0.0310    func 0.1142    
Accumulated time: func 0.1142    prepare 0.0673    bound 0.0261    beta_bound 0.0260    transfer 0.0016    finalize 0.0310    
batch bounding time:  0.11435294151306152
length of domains: 0
Time: pickout 0.0028    decision 0.1351    solve 0.1553    add 0.0040    
Accumulated time: pickout 0.0028    decision 0.1351    solve 0.1553    add 0.0040    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.3122386932373047


Properties batch 3, size 1
Remaining timeout: 254.6471962928772
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0. -1.  0.  0.  0.  0.  1.  0.]]]
thresholds: [0.] ######
Remaining spec index [0] with bounds tensor([[-0.43293047]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.13689613, -1.69910789, -0.77371281,  0.36231560, -1.27489316,
        -0.52829909, -1.23018956, -0.75381315,  5.67982817, -0.81278414],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /54 start_node /80 with alignment adjustment
setting alpha for layer /56 start_node /80 with alignment adjustment
setting alpha for layer /input.8 start_node /80 with alignment adjustment
setting alpha for layer /62 start_node /80 with alignment adjustment
setting alpha for layer /input.16 start_node /80 with alignment adjustment
setting alpha for layer /67 start_node /80 with alignment adjustment
setting alpha for layer /input.24 start_node /80 with alignment adjustment
setting alpha for layer /73 start_node /80 with alignment adjustment
setting alpha for layer /76 start_node /80 with alignment adjustment
setting alpha for layer /79 start_node /80 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.43293047]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/80']
Keeping slopes for these layers: ['/80']
layer 0 name BoundConv(name="/input") size torch.Size([4096]) unstable 445
layer 1 name BoundConv(name="/input.4") size torch.Size([2048]) unstable 194
layer 2 name BoundAdd(name="/59") size torch.Size([2048]) unstable 187
layer 3 name BoundConv(name="/input.12") size torch.Size([2048]) unstable 239
layer 4 name BoundAdd(name="/64") size torch.Size([2048]) unstable 367
layer 5 name BoundConv(name="/input.20") size torch.Size([512]) unstable 101
layer 6 name BoundAdd(name="/70") size torch.Size([512]) unstable 132
layer 7 name BoundConv(name="/input.28") size torch.Size([512]) unstable 143
layer 8 name BoundAdd(name="/75") size torch.Size([512]) unstable 237
layer 9 name BoundLinear(name="/input.32") size torch.Size([100]) unstable 72
-----------------
# of unstable neurons: 2117
-----------------

batch:  torch.Size([1, 16, 16, 16]) pre split depth:  7
post split depth:  7
splitting decisions: 
split level 0: [9, 74] 
split level 1: [9, 47] 
split level 2: [9, 51] 
split level 3: [9, 59] 
split level 4: [9, 20] 
split level 5: [9, 96] 
split level 6: [9, 38] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 0.00013327598571777344
Time: prepare 0.0449    beta_bound 0.0268    bound 0.0269    transfer 0.0019    finalize 0.0315    func 0.1053    
Accumulated time: func 0.1053    prepare 0.0569    bound 0.0269    beta_bound 0.0268    transfer 0.0019    finalize 0.0315    
batch bounding time:  0.10547566413879395
length of domains: 0
Time: pickout 0.0028    decision 0.1366    solve 0.1469    add 0.0041    
Accumulated time: pickout 0.0028    decision 0.1366    solve 0.1469    add 0.0041    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.3057219982147217


Properties batch 4, size 1
Remaining timeout: 253.95354509353638
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0. -1.  0.  0.  0.  1.  0.]]]
thresholds: [0.] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.08094263076782227.

Properties batch 5, size 1
Remaining timeout: 253.8983702659607
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0. -1.  0.  0.  1.  0.]]]
thresholds: [0.] ######
Initial alpha-CROWN verified for spec index [0] with bound 0.11561727523803711.

Properties batch 6, size 1
Remaining timeout: 253.84866094589233
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0. -1.  0.  1.  0.]]]
thresholds: [0.] ######
Initial alpha-CROWN verified for spec index [0] with bound 1.053175926208496.

Properties batch 7, size 1
Remaining timeout: 253.79891753196716
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0.  0. -1.  1.  0.]]]
thresholds: [0.] ######
Remaining spec index [0] with bounds tensor([[-1.09977293]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.13689613, -1.69910789, -0.77371281,  0.36231560, -1.27489316,
        -0.52829909, -1.23018956, -0.75381315,  5.67982817, -0.81278414],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /54 start_node /80 with alignment adjustment
setting alpha for layer /56 start_node /80 with alignment adjustment
setting alpha for layer /input.8 start_node /80 with alignment adjustment
setting alpha for layer /62 start_node /80 with alignment adjustment
setting alpha for layer /input.16 start_node /80 with alignment adjustment
setting alpha for layer /67 start_node /80 with alignment adjustment
setting alpha for layer /input.24 start_node /80 with alignment adjustment
setting alpha for layer /73 start_node /80 with alignment adjustment
setting alpha for layer /76 start_node /80 with alignment adjustment
setting alpha for layer /79 start_node /80 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-1.09977293]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/80']
Keeping slopes for these layers: ['/80']
layer 0 name BoundConv(name="/input") size torch.Size([4096]) unstable 445
layer 1 name BoundConv(name="/input.4") size torch.Size([2048]) unstable 194
layer 2 name BoundAdd(name="/59") size torch.Size([2048]) unstable 187
layer 3 name BoundConv(name="/input.12") size torch.Size([2048]) unstable 239
layer 4 name BoundAdd(name="/64") size torch.Size([2048]) unstable 367
layer 5 name BoundConv(name="/input.20") size torch.Size([512]) unstable 101
layer 6 name BoundAdd(name="/70") size torch.Size([512]) unstable 132
layer 7 name BoundConv(name="/input.28") size torch.Size([512]) unstable 143
layer 8 name BoundAdd(name="/75") size torch.Size([512]) unstable 237
layer 9 name BoundLinear(name="/input.32") size torch.Size([100]) unstable 72
-----------------
# of unstable neurons: 2117
-----------------

batch:  torch.Size([1, 16, 16, 16]) pre split depth:  7
post split depth:  7
splitting decisions: 
split level 0: [9, 26] 
split level 1: [9, 31] 
split level 2: [9, 76] 
split level 3: [9, 66] 
split level 4: [9, 74] 
split level 5: [9, 97] 
split level 6: [9, 88] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 0.00013208389282226562
Time: prepare 0.0560    beta_bound 0.0269    bound 0.0270    transfer 0.0016    finalize 0.0313    func 0.1161    
Accumulated time: func 0.1161    prepare 0.0676    bound 0.0270    beta_bound 0.0269    transfer 0.0016    finalize 0.0313    
batch bounding time:  0.11623001098632812
length of domains: 0
Time: pickout 0.0028    decision 0.1326    solve 0.1795    add 0.0041    
Accumulated time: pickout 0.0028    decision 0.1326    solve 0.1795    add 0.0041    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.3339724540710449


Properties batch 8, size 1
Remaining timeout: 253.11824679374695
##### Instance 0 first 10 spec matrices: [[[ 0.  0.  0.  0.  0.  0.  0.  0.  1. -1.]]]
thresholds: [0.] ######
Remaining spec index [0] with bounds tensor([[-0.22582924]], device='cuda:0') need to verify.
Model prediction is: tensor([ 1.13689613, -1.69910789, -0.77371281,  0.36231560, -1.27489316,
        -0.52829909, -1.23018956, -0.75381315,  5.67982817, -0.81278414],
       device='cuda:0')
build_the_model_with_refined_bounds batch [0/1]
setting alpha for layer /54 start_node /80 with alignment adjustment
setting alpha for layer /56 start_node /80 with alignment adjustment
setting alpha for layer /input.8 start_node /80 with alignment adjustment
setting alpha for layer /62 start_node /80 with alignment adjustment
setting alpha for layer /input.16 start_node /80 with alignment adjustment
setting alpha for layer /67 start_node /80 with alignment adjustment
setting alpha for layer /input.24 start_node /80 with alignment adjustment
setting alpha for layer /73 start_node /80 with alignment adjustment
setting alpha for layer /76 start_node /80 with alignment adjustment
setting alpha for layer /79 start_node /80 with alignment adjustment
all slope initialized
directly get lb and ub from refined bounds
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 32, 4, 4]), torch.Size([1, 1, 100])]
c shape: torch.Size([1, 1, 10])
alpha-CROWN with fixed intermediate bounds: tensor([[-0.22582924]], device='cuda:0') tensor([[inf]], device='cuda:0')
Keeping slopes for these layers: ['/80']
Keeping slopes for these layers: ['/80']
layer 0 name BoundConv(name="/input") size torch.Size([4096]) unstable 445
layer 1 name BoundConv(name="/input.4") size torch.Size([2048]) unstable 194
layer 2 name BoundAdd(name="/59") size torch.Size([2048]) unstable 187
layer 3 name BoundConv(name="/input.12") size torch.Size([2048]) unstable 239
layer 4 name BoundAdd(name="/64") size torch.Size([2048]) unstable 367
layer 5 name BoundConv(name="/input.20") size torch.Size([512]) unstable 101
layer 6 name BoundAdd(name="/70") size torch.Size([512]) unstable 132
layer 7 name BoundConv(name="/input.28") size torch.Size([512]) unstable 143
layer 8 name BoundAdd(name="/75") size torch.Size([512]) unstable 237
layer 9 name BoundLinear(name="/input.32") size torch.Size([100]) unstable 72
-----------------
# of unstable neurons: 2117
-----------------

batch:  torch.Size([1, 16, 16, 16]) pre split depth:  7
post split depth:  7
splitting decisions: 
split level 0: [9, 76] 
split level 1: [9, 48] 
split level 2: [9, 85] 
split level 3: [9, 75] 
split level 4: [9, 22] 
split level 5: [9, 69] 
split level 6: [9, 38] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 0.00013136863708496094
Time: prepare 0.0440    beta_bound 0.0258    bound 0.0259    transfer 0.0016/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/layer.py:30: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at  /opt/conda/conda-bld/pytorch_1646755953518/work/torch/csrc/utils/tensor_numpy.cpp:178.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/convert/model.py:154: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  "Using experimental implementation that allows 'batch_size > 1'."
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/utils.py:21: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  return value.ndim == 0 or value.shape == torch.Size([1])
/home/zhouxingshi/onnx2pytorch/onnx2pytorch/operations/add.py:34: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  elif all(x == 1 for x in input[0].shape):
    finalize 0.0309    func 0.1025    
Accumulated time: func 0.1025    prepare 0.0555    bound 0.0259    beta_bound 0.0258    transfer 0.0016    finalize 0.0309    
batch bounding time:  0.10275578498840332
length of domains: 0
Time: pickout 0.0028    decision 0.1326    solve 0.1435    add 0.0047    
Accumulated time: pickout 0.0028    decision 0.1326    solve 0.1435    add 0.0047    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.29832029342651367

Result: safe in 47.5368 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):47.53634027990775, max time: 47.53681564331055
mean time for verified SAFE instances(total 1): 47.53681564331055, max time: 47.53681564331055
safe (total 1), index: [0]
