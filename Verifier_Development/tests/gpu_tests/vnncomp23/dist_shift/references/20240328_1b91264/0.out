/home/hongjixu/miniconda3/envs/alpha-beta-crown/lib/python3.11/site-packages/onnx2pytorch/convert/layer.py:29: UserWarning: The given NumPy array is not writable, and PyTorch does not support non-writable tensors. This means writing to this tensor will result in undefined behavior. You may want to copy the array to protect its data or make it writable before converting it to a tensor. This type of warning will be suppressed for the rest of this program. (Triggered internally at /opt/conda/conda-bld/pytorch_1708025845868/work/torch/csrc/utils/tensor_numpy.cpp:206.)
  layer.weight.data = torch.from_numpy(numpy_helper.to_array(weight))
/home/hongjixu/miniconda3/envs/alpha-beta-crown/lib/python3.11/site-packages/onnx2pytorch/convert/model.py:151: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  warnings.warn(
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: false
  csv_name: instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2023_benchmarks/benchmarks/dist_shift
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: true
  output_file: /home/hongjixu/Verifier_Development/tests/gpu_tests/vnncomp23/dist_shift/master_outputs/0.pkl
  return_optimized_model: false
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: '''Reshape'': ''fix_batch_size'': True'
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
  onnx_vnnlib_joint_optimization_flags: none
  check_optmized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 27
  end: 28
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 192
  auto_enlarge_batch_size: false
  min_batch_size_ratio: 1.0
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: true
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    relu_option: adaptive
  alpha-crown:
    alpha: true
    lr_alpha: 0.25
    iteration: 5
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: false
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: []
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.05
    lr_beta: 0.1
    lr_decay: 0.98
    optimizer: adam
    iteration: 5
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
    reset_threshold: 1.0
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
bab:
  initial_max_domains: 128
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: true
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: sb
    candidates: 3
    reduceop: min
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      branching_point_node: ''
      branching_point_db: []
      num_branches: 2
      branching_point_refinement: false
      filter: false
      filter_beta: false
      filter_batch_size: 10000
      filter_iterations: 25
      use_min: false
      loose_tanh_threshold: null
      dynamic: false
      dynamic_bbps: false
      dynamic_beta_heuristic: false
      beta_heuristic: false
      dynamic_options: [uniform, three_left, three_right]
    input_split:
      enable: true
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_primary_spec: null
      sb_primary_spec_iter: 1
      sb_sum: false
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_zero_crossing_score: false
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 1.0
      sort_index: null
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: after
  pgd_steps: 20
  pgd_restarts: 300
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  adv_saver: default_adv_saver
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: diversed_PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 20
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 1
    pgd_restarts: 10
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false

Experiments at Wed Mar 27 04:28:19 2024 on huan-c4140-server
customized start/end sample from instance 27 to 28 in instances.csv
Internal results will be saved to out.txt.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 27 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx onnx/mnist_concat.onnx
Using vnnlib vnnlib/index3363_delta0.13.vnnlib
Precompiled vnnlib file found at ../../vnncomp2023_benchmarks/benchmarks/dist_shift/vnnlib/index3363_delta0.13.vnnlib.compiled
Loading onnx ../../vnncomp2023_benchmarks/benchmarks/dist_shift/onnx/mnist_concat.onnx wih quirks {'Reshape': {'fix_batch_size': True}}
Attack parameters: initialization=osi, steps=20, restarts=300, alpha=3.251894474029541, initialization=osi, GAMA=False
Model output of first 5 examples:
 tensor([[-1.30446024e+01, -4.23116350e+00, -1.49745016e+01,  4.21888638e+00,
         -2.73519878e+01,  3.22372270e+00, -3.18027515e+01, -2.25203967e+00,
          1.25950485e-01, -2.14841925e-02]], device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  1.51it/s]100%|██████████| 1/1 [00:00<00:00,  1.51it/s]
/home/hongjixu/miniconda3/envs/alpha-beta-crown/lib/python3.11/site-packages/onnx2pytorch/operations/reshape.py:36: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if shape[0] == 1 and len(shape) in [2, 3, 4, 5] and self.quirks.get("fix_batch_size") is True:
/home/hongjixu/miniconda3/envs/alpha-beta-crown/lib/python3.11/site-packages/onnx2pytorch/operations/reshape.py:54: TracerWarning: torch.tensor results are registered as constants in the trace. You can safely ignore this warning if you use this function to create tensors out of constant variables that would be the same every time you call this function. In any other case, this might cause the trace to be incorrect.
  if (torch.prod(torch.tensor(input.shape)) != torch.prod(shape) and len(input.size()) == len(shape) + 1
/home/hongjixu/miniconda3/envs/alpha-beta-crown/lib/python3.11/site-packages/onnx2pytorch/operations/reshape.py:54: TracerWarning: Using len to get tensor shape might cause the trace to be incorrect. Recommended usage would be tensor.shape[0]. Passing a tensor of different shape might lead to errors or silently give incorrect results.
  if (torch.prod(torch.tensor(input.shape)) != torch.prod(shape) and len(input.size()) == len(shape) + 1
/home/hongjixu/miniconda3/envs/alpha-beta-crown/lib/python3.11/site-packages/onnx2pytorch/operations/reshape.py:58: TracerWarning: Iterating over a tensor might cause the trace to be incorrect. Passing a tensor of different shape won't change the number of iterations executed (and might lead to errors or silently give incorrect results).
  shape = [x if x != 0 else input.size(i) for i, x in enumerate(shape)]
/home/hongjixu/Verifier_Development/complete_verifier/auto_LiRPA/operators/leaf.py:176: UserWarning: The "has_batchdim" option for BoundBuffers is deprecated. It may be removed from the next release.
  warnings.warn('The "has_batchdim" option for BoundBuffers is deprecated.'
diversed PGD initialization time: 0.1280
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.09933567,  -5.47291422, -22.32921410,   4.56695175, -32.55060196,
            4.29686260, -32.40989304,  -3.46625638,  -0.29737827,  -0.22868940]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.27008915]]], device='cuda:0')
number of violation:  0
Attack finished in 1.4186 seconds.
PGD attack failed
Total VNNLIB file length: 1, max property batch size: 128, total number of batches: 1

Properties batch 0, size 1
Remaining timeout: 298.3896780014038
##### Instance 0 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.]]],
       dtype=torch.float64)
thresholds: tensor([0.], device='cuda:0') ######
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=False)
  (/shape.1): BoundBuffers(name=/shape.1, inputs=[], perturbed=False)
  (/shape): BoundBuffers(name=/shape, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundParams(name=/17, inputs=[], perturbed=False)
  (/18): BoundParams(name=/18, inputs=[], perturbed=False)
  (/19): BoundParams(name=/19, inputs=[], perturbed=False)
  (/20): BoundParams(name=/20, inputs=[], perturbed=False)
  (/21): BoundParams(name=/21, inputs=[], perturbed=False)
  (/22): BoundParams(name=/22, inputs=[], perturbed=False)
  (/input): BoundLinear(name=/input, inputs=[/0, /13, /14], perturbed=False)
  (/24): BoundRelu(name=/24, inputs=[/input], perturbed=False)
  (/25): BoundLinear(name=/25, inputs=[/24, /15, /16], perturbed=False)
  (/26): BoundSigmoid(name=/26, inputs=[/25], perturbed=False)
  (/27): BoundConstant(name=/27, inputs=[], perturbed=False)
  (/28): BoundSplit(name=/28, inputs=[/shape.1, /27], perturbed=False)
  (/29): BoundSplit(name=/29, inputs=[/shape.1, /27], perturbed=False)
  (/30): BoundSplit(name=/30, inputs=[/shape.1, /27], perturbed=False)
  (/31): BoundSplit(name=/31, inputs=[/shape.1, /27], perturbed=False)
  (/32): BoundConstant(name=/32, value=tensor([0], device='cuda:0'))
  (/33): BoundSqueeze(name=/33, inputs=[/28, /32], perturbed=False)
  (/34): BoundConstant(name=/34, value=tensor([0], device='cuda:0'))
  (/35): BoundSqueeze(name=/35, inputs=[/29, /34], perturbed=False)
  (/36): BoundConstant(name=/36, value=tensor([0], device='cuda:0'))
  (/37): BoundSqueeze(name=/37, inputs=[/30, /36], perturbed=False)
  (/38): BoundConstant(name=/38, value=tensor([0], device='cuda:0'))
  (/39): BoundSqueeze(name=/39, inputs=[/31, /38], perturbed=False)
  (/40): BoundConstant(name=/40, value=tensor([0], device='cuda:0'))
  (/41): BoundUnsqueeze(name=/41, inputs=[/33, /40], perturbed=False)
  (/42): BoundConstant(name=/42, value=tensor([0], device='cuda:0'))
  (/43): BoundUnsqueeze(name=/43, inputs=[/35, /42], perturbed=False)
  (/44): BoundConstant(name=/44, value=tensor([0], device='cuda:0'))
  (/45): BoundUnsqueeze(name=/45, inputs=[/37, /44], perturbed=False)
  (/46): BoundConstant(name=/46, value=tensor([0], device='cuda:0'))
  (/47): BoundUnsqueeze(name=/47, inputs=[/39, /46], perturbed=False)
  (/48): BoundConcat(name=/48, inputs=[/41, /43, /45, /47], perturbed=False)
  (/49): BoundReshape(name=/49, inputs=[/26, /48], perturbed=False)
  (/50): BoundConstant(name=/50, inputs=[], perturbed=False)
  (/51): BoundSplit(name=/51, inputs=[/shape, /50], perturbed=False)
  (/52): BoundSplit(name=/52, inputs=[/shape, /50], perturbed=False)
  (/53): BoundConstant(name=/53, value=tensor([0], device='cuda:0'))
  (/54): BoundSqueeze(name=/54, inputs=[/51, /53], perturbed=False)
  (/55): BoundConstant(name=/55, value=tensor([0], device='cuda:0'))
  (/56): BoundSqueeze(name=/56, inputs=[/52, /55], perturbed=False)
  (/57): BoundConstant(name=/57, value=tensor([0], device='cuda:0'))
  (/58): BoundUnsqueeze(name=/58, inputs=[/54, /57], perturbed=False)
  (/59): BoundConstant(name=/59, value=tensor([0], device='cuda:0'))
  (/60): BoundUnsqueeze(name=/60, inputs=[/56, /59], perturbed=False)
  (/61): BoundConcat(name=/61, inputs=[/58, /60], perturbed=False)
  (/62): BoundReshape(name=/62, inputs=[/49, /61], perturbed=False)
  (/input.3): BoundLinear(name=/input.3, inputs=[/62, /17, /18], perturbed=False)
  (/64): BoundRelu(name=/64, inputs=[/input.3], perturbed=False)
  (/input.7): BoundLinear(name=/input.7, inputs=[/64, /19, /20], perturbed=False)
  (/66): BoundRelu(name=/66, inputs=[/input.7], perturbed=False)
  (/67): BoundLinear(name=/67, inputs=[/66, /21, /22], perturbed=False)
)
Model prediction is: tensor([-1.30446005e+01, -4.23116255e+00, -1.49744978e+01,  4.21888590e+00,
        -2.73519840e+01,  3.22372198e+00, -3.18027477e+01, -2.25203919e+00,
         1.25950724e-01, -2.14841329e-02], device='cuda:0')
Split layers:
  BoundLinear(name=/input, inputs=[/0, /13, /14], perturbed=True): [(BoundRelu(name=/24, inputs=[/input], perturbed=True), 0)]
  BoundLinear(name=/input.7, inputs=[/64, /19, /20], perturbed=True): [(BoundRelu(name=/66, inputs=[/input.7], perturbed=True), 0)]
  BoundLinear(name=/25, inputs=[/24, /15, /16], perturbed=True): [(BoundSigmoid(name=/26, inputs=[/25], perturbed=True), 0)]
  BoundLinear(name=/input.3, inputs=[/62, /17, /18], perturbed=True): [(BoundRelu(name=/64, inputs=[/input.3], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/24, inputs=[/input], perturbed=True)
   BoundSigmoid(name=/26, inputs=[/25], perturbed=True)
   BoundRelu(name=/64, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/66, inputs=[/input.7], perturbed=True)
layer /24 using sparse-features alpha with shape [7]; unstable size 7; total size 200 ([1, 200])
layer /24 start_node /25 using full alpha [2, 784, 1, 7] with unstable size None total_size 784 output_shape torch.Size([784])
layer /24 start_node /input.3 using sparse-spec alpha [2, 9, 1, 7] with unstable size 8 total_size 32 output_shape torch.Size([32])
layer /24 start_node /input.7 using sparse-spec alpha [2, 11, 1, 7] with unstable size 10 total_size 32 output_shape torch.Size([32])
layer /24 start_node /67 using full alpha [2, 1, 1, 7] with unstable size None total_size 1 output_shape 1
layer /64 using sparse-features alpha with shape [8]; unstable size 8; total size 32 ([1, 32])
layer /64 start_node /input.7 using sparse-spec alpha [2, 11, 1, 8] with unstable size 10 total_size 32 output_shape torch.Size([32])
layer /64 start_node /67 using full alpha [2, 1, 1, 8] with unstable size None total_size 1 output_shape 1
layer /66 using sparse-features alpha with shape [10]; unstable size 10; total size 32 ([1, 32])
layer /66 start_node /67 using full alpha [2, 1, 1, 10] with unstable size None total_size 1 output_shape 1
Optimizable variables initialized.
initial CROWN bounds: tensor([[-31.83671951]], device='cuda:0') None
prune_after_crown optimization in use: original label size = 1 pruned label size = 1
best_l after optimization: -11.245368003845215
alpha/beta optimization time: 3.443091869354248
initial alpha-crown bounds: tensor([[-11.24536800]], device='cuda:0')
Worst class: (+ rhs) -11.245368003845215
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.09933567,  -5.47291422, -22.32921410,   4.56695175, -32.55060196,
            4.29686260, -32.40989304,  -3.46625638,  -0.29737827,  -0.22868940]]],
       device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.27008915]]], device='cuda:0')
number of violation:  0
Iteration 1
Batch size: 192
best_l after optimization: -116.129150390625
alpha/beta optimization time: 1.5721709728240967
Total time: 1.7349  pickout: 0.0088 decision: 0.0066  bounding: 1.6529 add_domain: 0.0665
length of domains: 124
128 branch and bound domains visited
Current (lb-rhs): -3.126325845718384
Cumulative time: 7.229864597320557

Iteration 2
Adv attack time: 0.0102s
Batch size: 192
best_l after optimization: -37.88225173950195
alpha/beta optimization time: 1.239713191986084
Total time: 1.5936  pickout: 0.1445 decision: 0.0018  bounding: 1.3940 add_domain: 0.0533
length of domains: 102
376 branch and bound domains visited
Current (lb-rhs): -1.773692011833191
Cumulative time: 8.851760387420654

Iteration 3
Adv attack time: 0.0094s
Batch size: 192
best_l after optimization: -39.74989700317383
alpha/beta optimization time: 1.031982660293579
Total time: 1.3241  pickout: 0.0963 decision: 0.0016  bounding: 1.1625 add_domain: 0.0636
length of domains: 111
580 branch and bound domains visited
Current (lb-rhs): -1.1094568967819214
Cumulative time: 10.200021266937256

Iteration 4
Adv attack time: 0.0098s
Batch size: 192
best_l after optimization: -14.407569885253906
alpha/beta optimization time: 1.1261186599731445
Total time: 1.4356  pickout: 0.1087 decision: 0.0016  bounding: 1.2643 add_domain: 0.0611
length of domains: 112
802 branch and bound domains visited
Current (lb-rhs): -0.7759953737258911
Cumulative time: 11.661515474319458

Iteration 5
Adv attack time: 0.0093s
Batch size: 192
best_l after optimization: -22.992027282714844
alpha/beta optimization time: 1.102179765701294
Total time: 1.4321  pickout: 0.1156 decision: 0.0016  bounding: 1.2414 add_domain: 0.0735
length of domains: 140
1026 branch and bound domains visited
Current (lb-rhs): -0.5764781832695007
Cumulative time: 13.119032621383667

Iteration 6
Adv attack time: 0.0095s
Batch size: 192
best_l after optimization: -8.195982933044434
alpha/beta optimization time: 1.278160810470581
Total time: 1.6729  pickout: 0.1327 decision: 0.0017  bounding: 1.4540 add_domain: 0.0845
length of domains: 145
1306 branch and bound domains visited
Current (lb-rhs): -0.3434891402721405
Cumulative time: 14.820699214935303

Iteration 7
Adv attack time: 0.0231s
Batch size: 192
best_l after optimization: 15.105971336364746
alpha/beta optimization time: 1.3029091358184814
Total time: 1.6468  pickout: 0.1509 decision: 0.0016  bounding: 1.4829 add_domain: 0.0114
length of domains: 23
1596 branch and bound domains visited
Current (lb-rhs): -0.19315901398658752
Cumulative time: 16.51041841506958

Iteration 8
Adv attack time: 0.0257s
Batch size: 192

all verified at 1th iter
best_l after optimization: 14.073375701904297
alpha/beta optimization time: 0.2622044086456299
Total time: 0.3291  pickout: 0.0234 decision: 0.0023  bounding: 0.3027 add_domain: 0.0008
length of domains: 0
1688 branch and bound domains visited
No domains left, verification finished!
The lower bound of last batch is 0.003116428852081299
Cumulative time: 16.867963314056396

Result: safe in 18.8061 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):18.805939965655273, max time: 18.80612802505493
mean time for verified SAFE instances(total 1): 18.80612802505493, max time: 18.80612802505493
safe (total 1), index: [0]
Result dict saved to /home/hongjixu/Verifier_Development/tests/gpu_tests/vnncomp23/dist_shift/master_outputs/0.pkl.
