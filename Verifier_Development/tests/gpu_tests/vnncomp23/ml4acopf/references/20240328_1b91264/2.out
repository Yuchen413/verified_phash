/home/hongjixu/miniconda3/envs/alpha-beta-crown/lib/python3.11/site-packages/onnx2pytorch/convert/model.py:151: UserWarning: Using experimental implementation that allows 'batch_size > 1'.Batchnorm layers could potentially produce false outputs.
  warnings.warn(
Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: matrix
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: false
  sparse_interm: false
  save_adv_example: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: instances.csv
  results_file: out.txt
  root_path: ../../vnncomp2023_benchmarks/benchmarks/ml4acopf
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: true
  output_file: /home/hongjixu/Verifier_Development/tests/gpu_tests/vnncomp23/ml4acopf/master_outputs/2.pkl
  return_optimized_model: false
model:
  name: null
  path: null
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: [remove_matmul_inplace]
  onnx_vnnlib_joint_optimization_flags: none
  check_optmized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 16
  end: 17
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 512
  auto_enlarge_batch_size: false
  min_batch_size_ratio: 0.0
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    relu_option: adaptive
  alpha-crown:
    alpha: true
    lr_alpha: 0.5
    iteration: 40
    share_alphas: false
    lr_decay: 0.99
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: [sin, cos]
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.5
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 10
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
    reset_threshold: 1.0
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 360
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: false
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: true
  recompute_interm: false
  sort_domain_interval: 1
  vanilla_crown: false
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
  branching:
    method: nonlinear
    candidates: 3
    reduceop: min
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      branching_point_node: ''
      branching_point_db: []
      num_branches: 2
      branching_point_refinement: false
      filter: true
      filter_beta: false
      filter_batch_size: 10000
      filter_iterations: 25
      use_min: false
      loose_tanh_threshold: null
      dynamic: false
      dynamic_bbps: false
      dynamic_beta_heuristic: false
      beta_heuristic: false
      dynamic_options: [uniform, three_left, three_right]
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_primary_spec: null
      sb_primary_spec_iter: 1
      sb_sum: false
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_zero_crossing_score: false
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 0.001
      sort_index: null
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 100
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  adv_saver: default_adv_saver
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0001
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false

Experiments at Wed Mar 27 05:26:24 2024 on huan-c4140-server
customized start/end sample from instance 16 to 17 in instances.csv
Internal results will be saved to out.txt.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 16 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Using onnx onnx/14_ieee_ml4acopf.onnx
Using vnnlib vnnlib/14_ieee_prop14.vnnlib
Precompiled vnnlib file found at ../../vnncomp2023_benchmarks/benchmarks/ml4acopf/vnnlib/14_ieee_prop14.vnnlib.compiled
Loading onnx ../../vnncomp2023_benchmarks/benchmarks/ml4acopf/onnx/14_ieee_ml4acopf.onnx wih quirks {}
Onnx optimization with flag: ['remove_matmul_inplace']
Found existed optimized onnx model at ../../vnncomp2023_benchmarks/benchmarks/ml4acopf/onnx/14_ieee_ml4acopf.onnx.optimized
Automatic inference of operator: cos
Automatic inference of operator: sin
Automatic inference of operator: neg
Attack parameters: initialization=uniform, steps=100, restarts=100, alpha=0.0011665299534797668, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 2.72188473e+00,  1.18996459e-05,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  8.66953284e-03,  2.99999416e-01,  3.39128315e-01,
          1.42723531e-01,  1.04879484e-01,  1.05998588e+00,  1.03292096e+00,
          1.00704122e+00,  1.00748634e+00,  1.01018953e+00,  1.05999255e+00,
          1.04261136e+00,  1.05998933e+00,  1.03947401e+00,  1.03567684e+00,
          1.04420221e+00,  1.04504585e+00,  1.03994310e+00,  1.02218390e+00,
         -9.35276039e-05, -1.03861019e-01, -2.40479857e-01, -1.94098085e-01,
         -1.65838256e-01, -2.62287855e-01, -2.47477949e-01, -2.47466981e-01,
         -2.75302172e-01, -2.77998745e-01, -2.72382557e-01, -2.77064890e-01,
         -2.78348446e-01, -2.93846518e-01,  1.90383577e+00,  8.17381322e-01,
          7.18781233e-01,  5.31188250e-01,  3.79026324e-01, -2.37166286e-01,
         -6.36400044e-01,  2.74030149e-01,  1.57621026e-01,  4.39017326e-01,
          7.85761103e-02,  7.63468742e-02,  1.74338847e-01, -6.88080472e-05,
          2.74075985e-01,  4.55080234e-02,  8.55342299e-02, -4.33171839e-02,
          1.64170228e-02,  5.92806078e-02, -1.84128952e+00, -7.84728587e-01,
         -6.96018934e-01, -5.15819669e-01, -3.71331006e-01,  2.41500497e-01,
          6.42009556e-01, -2.74030149e-01, -1.57621026e-01, -4.39017326e-01,
         -7.78684840e-02, -7.56367445e-02, -1.72212154e-01,  6.88080472e-05,
         -2.74075985e-01, -4.54212390e-02, -8.45883042e-02,  4.35179323e-02,
         -1.63469277e-02, -5.86315133e-02, -6.88441396e-02,  7.68023282e-02,
         -9.98710096e-03, -2.01864839e-02,  3.95854563e-03,  9.01905894e-02,
          1.46733359e-01, -5.40719032e-02,  6.85858727e-03,  1.23985291e-01,
          4.69123796e-02,  2.57240105e-02,  7.57033229e-02, -1.02858067e-01,
          3.35464478e-02,  2.96249650e-02,  2.69364081e-02, -2.73773968e-02,
          8.53921659e-03,  2.43189782e-02,  2.01980889e-01,  5.24751842e-03,
          6.03096336e-02,  3.14250588e-02, -1.65747032e-02, -9.21151042e-02,
         -1.29035071e-01,  6.94460869e-02,  5.94806671e-03, -7.93428421e-02,
         -4.54294160e-02, -2.42465306e-02, -7.15147853e-02,  1.04572773e-01,
         -2.58321762e-02, -2.93960832e-02, -2.49241553e-02,  2.78470814e-02,
         -8.47579725e-03, -2.29976624e-02, -1.86490707e+01, -9.64389145e-01,
         -1.58575380e+00, -2.21383166e+00, -2.44842339e+00, -2.49561787e+00,
         -4.36630630e+01, -1.91008377e+00, -2.56008565e-01, -1.16079140e+00,
         -1.78722513e+00, -1.07510936e+00, -4.00397491e+00, -2.77832007e+00,
         -7.05265713e+00, -1.05595512e+01, -9.72058296e-01, -1.98547411e+00,
         -9.79757547e-01, -5.73494375e-01, -1.88472576e+01, -1.02257347e+00,
         -1.61442041e+00, -2.22934270e+00, -2.45393848e+00, -2.49319220e+00,
         -4.36607742e+01, -1.90818477e+00, -2.56020248e-01, -1.16986847e+00,
         -1.78747272e+00, -1.07529116e+00, -4.00532866e+00, -2.77796435e+00,
         -7.05311489e+00, -1.05595732e+01, -9.72323596e-01, -1.98543084e+00,
         -9.79760885e-01, -5.73633432e-01,  6.67572021e-04,  3.62396240e-05,
         -3.91006470e-05, -4.11272049e-06, -4.39286232e-05, -1.41143799e-04,
          2.29775906e-05, -6.88080472e-05, -3.50251794e-04,  6.81113452e-04,
          3.72808427e-04,  7.99797475e-04, -7.12890178e-04, -4.52980399e-04,
          7.11344182e-04,  2.12341547e-06,  3.98114324e-04,  2.57477164e-04,
          5.71355224e-04,  1.35168433e-04, -1.34468079e-04,  3.06710601e-04,
         -7.60152936e-04,  2.54362822e-05,  1.08066946e-04,  3.84055078e-04,
         -1.76541507e-04, -2.90531665e-04]], device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:02<00:00,  2.03s/it]100%|██████████| 1/1 [00:02<00:00,  2.03s/it]
/home/hongjixu/miniconda3/envs/alpha-beta-crown/lib/python3.11/site-packages/onnx2pytorch/operations/slice.py:73: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  assert (steps == 1 or steps == -1) and axes == int(axes) and start == int(start) and end == int(end)
/home/hongjixu/miniconda3/envs/alpha-beta-crown/lib/python3.11/site-packages/onnx2pytorch/operations/slice.py:73: TracerWarning: Converting a tensor to a Python integer might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  assert (steps == 1 or steps == -1) and axes == int(axes) and start == int(start) and end == int(end)
/home/hongjixu/miniconda3/envs/alpha-beta-crown/lib/python3.11/site-packages/onnx2pytorch/utils.py:21: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  return value.ndim == 0 or value.shape == torch.Size([1])
/home/hongjixu/miniconda3/envs/alpha-beta-crown/lib/python3.11/site-packages/onnx2pytorch/operations/add.py:34: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  elif all(x == 1 for x in input[0].shape):
/home/hongjixu/miniconda3/envs/alpha-beta-crown/lib/python3.11/site-packages/onnx2pytorch/operations/gather.py:14: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if indices.numel() == 1 and indices == -1:
/home/hongjixu/miniconda3/envs/alpha-beta-crown/lib/python3.11/site-packages/onnx2pytorch/operations/constantofshape.py:16: TracerWarning: Iterating over a tensor might cause the trace to be incorrect. Passing a tensor of different shape won't change the number of iterations executed (and might lead to errors or silently give incorrect results).
  return self.constant.expand(*shape).to(shape.device)
/home/hongjixu/miniconda3/envs/alpha-beta-crown/lib/python3.11/site-packages/onnx2pytorch/operations/constantofshape.py:16: TracerWarning: Using len to get tensor shape might cause the trace to be incorrect. Recommended usage would be tensor.shape[0]. Passing a tensor of different shape might lead to errors or silently give incorrect results.
  return self.constant.expand(*shape).to(shape.device)
/home/hongjixu/miniconda3/envs/alpha-beta-crown/lib/python3.11/site-packages/onnx2pytorch/operations/expand.py:7: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if isinstance(shape, torch.Tensor) and (shape == 1).all():
/home/hongjixu/miniconda3/envs/alpha-beta-crown/lib/python3.11/site-packages/onnx2pytorch/operations/expand.py:9: TracerWarning: Iterating over a tensor might cause the trace to be incorrect. Passing a tensor of different shape won't change the number of iterations executed (and might lead to errors or silently give incorrect results).
  torch.Size(shape), dtype=input.dtype, device=input.device)
/home/hongjixu/miniconda3/envs/alpha-beta-crown/lib/python3.11/site-packages/onnx2pytorch/operations/expand.py:9: TracerWarning: Using len to get tensor shape might cause the trace to be incorrect. Recommended usage would be tensor.shape[0]. Passing a tensor of different shape might lead to errors or silently give incorrect results.
  torch.Size(shape), dtype=input.dtype, device=input.device)
/home/hongjixu/Verifier_Development/complete_verifier/auto_LiRPA/operators/leaf.py:176: UserWarning: The "has_batchdim" option for BoundBuffers is deprecated. It may be removed from the next release.
  warnings.warn('The "has_batchdim" option for BoundBuffers is deprecated.'
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 2.72351217e+00,  1.18102307e-05,  0.00000000e+00,  0.00000000e+00,
           0.00000000e+00,  8.62934813e-03,  2.99999416e-01,  3.40142071e-01,
           1.43334821e-01,  1.05033711e-01,  1.05998600e+00,  1.03289545e+00,
           1.00695813e+00,  1.00745523e+00,  1.01016331e+00,  1.05999255e+00,
           1.04257691e+00,  1.05998945e+00,  1.03942394e+00,  1.03562820e+00,
           1.04417443e+00,  1.04500902e+00,  1.03987455e+00,  1.02193081e+00,
          -8.65287147e-05, -1.03936478e-01, -2.40876019e-01, -1.94187969e-01,
          -1.65908456e-01, -2.62551546e-01, -2.47654170e-01, -2.47639209e-01,
          -2.75526583e-01, -2.78227031e-01, -2.72623777e-01, -2.77377248e-01,
          -2.78675437e-01, -2.94300288e-01,  1.90534532e+00,  8.17749500e-01,
           7.20405757e-01,  5.31248331e-01,  3.78980070e-01, -2.38787830e-01,
          -6.36826932e-01,  2.74455428e-01,  1.57869086e-01,  4.39883888e-01,
           7.85302967e-02,  7.65769035e-02,  1.74986124e-01, -9.38600642e-05,
           2.74528265e-01,  4.55417112e-02,  8.65600780e-02, -4.32936847e-02,
           1.65345296e-02,  5.97994886e-02, -1.84270132e+00, -7.85067081e-01,
          -6.97539270e-01, -5.15875936e-01, -3.71286780e-01,  2.43179262e-01,
           6.42442644e-01, -2.74455428e-01, -1.57869086e-01, -4.39883888e-01,
          -7.78217167e-02, -7.58629590e-02, -1.72843933e-01,  9.38600642e-05,
          -2.74528265e-01, -4.54549268e-02, -8.55911449e-02,  4.34946716e-02,
          -1.64637193e-02, -5.91384731e-02, -6.87240362e-02,  7.68974274e-02,
          -9.85044241e-03, -2.01709569e-02,  3.97151709e-03,  9.06047076e-02,
           1.46761894e-01, -5.40342331e-02,  6.91270828e-03,  1.23945713e-01,
           4.70807925e-02,  2.57690027e-02,  7.59408772e-02, -1.03059769e-01,
           3.37076187e-02,  2.95926016e-02,  2.72480026e-02, -2.74980068e-02,
           8.57389905e-03,  2.46175285e-02,  2.02162147e-01,  5.27639687e-03,
           6.06164336e-02,  3.14228833e-02, -1.65924430e-02, -9.23828334e-02,
          -1.29048347e-01,  6.94546700e-02,  5.93519211e-03, -7.91401863e-02,
          -4.55973521e-02, -2.42831782e-02, -7.17222989e-02,  1.04780197e-01,
          -2.59647369e-02, -2.93637197e-02, -2.51871124e-02,  2.79686451e-02,
          -8.51024128e-03, -2.32716557e-02, -1.86433372e+01, -9.63772535e-01,
          -1.58341849e+00, -2.21376848e+00, -2.44845819e+00, -2.49477100e+00,
          -4.36625137e+01, -1.90985453e+00, -2.55929559e-01, -1.16003954e+00,
          -1.78721642e+00, -1.07507193e+00, -4.00371313e+00, -2.77827859e+00,
          -7.05239820e+00, -1.05595503e+01, -9.71864879e-01, -1.98546958e+00,
          -9.79753077e-01, -5.73418021e-01, -1.88419838e+01, -1.02204180e+00,
          -1.61226463e+00, -2.22928476e+00, -2.45397067e+00, -2.49232912e+00,
          -4.36602135e+01, -1.90795028e+00, -2.55942136e-01, -1.16913891e+00,
          -1.78746474e+00, -1.07525504e+00, -4.00508118e+00, -2.77792096e+00,
          -7.05286026e+00, -1.05595713e+01, -9.72139716e-01, -1.98542607e+00,
          -9.79756474e-01, -5.73561072e-01,  4.17232513e-04,  8.70823860e-04,
          -1.56337023e-03,  5.22300601e-04, -1.42470002e-03, -6.55531883e-04,
           2.10106373e-05, -9.38600642e-05,  7.95617700e-04,  2.51017511e-04,
           5.19189984e-04,  6.16405159e-04, -1.13315508e-03,  3.38450074e-04,
           4.55956906e-04, -9.65446234e-04,  1.63210928e-03,  6.02498651e-04,
           6.92106783e-04,  4.60803509e-04, -1.02519989e-04,  2.53513455e-04,
          -1.76063180e-03,  3.97423282e-04,  6.70682639e-05,  4.62637283e-04,
           4.61060554e-05,  4.87480313e-04],
         [ 2.72351217e+00,  1.18102307e-05,  0.00000000e+00,  0.00000000e+00,
           0.00000000e+00,  8.62934813e-03,  2.99999416e-01,  3.40142071e-01,
           1.43334821e-01,  1.05033711e-01,  1.05998600e+00,  1.03289545e+00,
           1.00695813e+00,  1.00745523e+00,  1.01016331e+00,  1.05999255e+00,
           1.04257691e+00,  1.05998945e+00,  1.03942394e+00,  1.03562820e+00,
           1.04417443e+00,  1.04500902e+00,  1.03987455e+00,  1.02193081e+00,
          -8.65287147e-05, -1.03936478e-01, -2.40876019e-01, -1.94187969e-01,
          -1.65908456e-01, -2.62551546e-01, -2.47654170e-01, -2.47639209e-01,
          -2.75526583e-01, -2.78227031e-01, -2.72623777e-01, -2.77377248e-01,
          -2.78675437e-01, -2.94300288e-01,  1.90534532e+00,  8.17749500e-01,
           7.20405757e-01,  5.31248331e-01,  3.78980070e-01, -2.38787830e-01,
          -6.36826932e-01,  2.74455428e-01,  1.57869086e-01,  4.39883888e-01,
           7.85302967e-02,  7.65769035e-02,  1.74986124e-01, -9.38600642e-05,
           2.74528265e-01,  4.55417112e-02,  8.65600780e-02, -4.32936847e-02,
           1.65345296e-02,  5.97994886e-02, -1.84270132e+00, -7.85067081e-01,
          -6.97539270e-01, -5.15875936e-01, -3.71286780e-01,  2.43179262e-01,
           6.42442644e-01, -2.74455428e-01, -1.57869086e-01, -4.39883888e-01,
          -7.78217167e-02, -7.58629590e-02, -1.72843933e-01,  9.38600642e-05,
          -2.74528265e-01, -4.54549268e-02, -8.55911449e-02,  4.34946716e-02,
          -1.64637193e-02, -5.91384731e-02, -6.87240362e-02,  7.68974274e-02,
          -9.85044241e-03, -2.01709569e-02,  3.97151709e-03,  9.06047076e-02,
           1.46761894e-01, -5.40342331e-02,  6.91270828e-03,  1.23945713e-01,
           4.70807925e-02,  2.57690027e-02,  7.59408772e-02, -1.03059769e-01,
           3.37076187e-02,  2.95926016e-02,  2.72480026e-02, -2.74980068e-02,
           8.57389905e-03,  2.46175285e-02,  2.02162147e-01,  5.27639687e-03,
           6.06164336e-02,  3.14228833e-02, -1.65924430e-02, -9.23828334e-02,
          -1.29048347e-01,  6.94546700e-02,  5.93519211e-03, -7.91401863e-02,
          -4.55973521e-02, -2.42831782e-02, -7.17222989e-02,  1.04780197e-01,
          -2.59647369e-02, -2.93637197e-02, -2.51871124e-02,  2.79686451e-02,
          -8.51024128e-03, -2.32716557e-02, -1.86433372e+01, -9.63772535e-01,
          -1.58341849e+00, -2.21376848e+00, -2.44845819e+00, -2.49477100e+00,
          -4.36625137e+01, -1.90985453e+00, -2.55929559e-01, -1.16003954e+00,
          -1.78721642e+00, -1.07507193e+00, -4.00371313e+00, -2.77827859e+00,
          -7.05239820e+00, -1.05595503e+01, -9.71864879e-01, -1.98546958e+00,
          -9.79753077e-01, -5.73418021e-01, -1.88419838e+01, -1.02204180e+00,
          -1.61226463e+00, -2.22928476e+00, -2.45397067e+00, -2.49232912e+00,
          -4.36602135e+01, -1.90795028e+00, -2.55942136e-01, -1.16913891e+00,
          -1.78746474e+00, -1.07525504e+00, -4.00508118e+00, -2.77792096e+00,
          -7.05286026e+00, -1.05595713e+01, -9.72139716e-01, -1.98542607e+00,
          -9.79756474e-01, -5.73561072e-01,  4.17232513e-04,  8.70823860e-04,
          -1.56337023e-03,  5.22300601e-04, -1.42470002e-03, -6.55531883e-04,
           2.10106373e-05, -9.38600642e-05,  7.95617700e-04,  2.51017511e-04,
           5.19189984e-04,  6.16405159e-04, -1.13315508e-03,  3.38450074e-04,
           4.55956906e-04, -9.65446234e-04,  1.63210928e-03,  6.02498651e-04,
           6.92106783e-04,  4.60803509e-04, -1.02519989e-04,  2.53513455e-04,
          -1.76063180e-03,  3.97423282e-04,  6.70682639e-05,  4.62637283e-04,
           4.61060554e-05,  4.87480313e-04]]], device='cuda:0')
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.01142470, 0.00857530]]], device='cuda:0')
number of violation:  0
Attack finished in 2.8597 seconds.
PGD attack failed
torch allclose failed: norm 2.60890374192968e-06
Model: BoundedModule(
  (/0): BoundInput(name=/0, inputs=[], perturbed=True)
  (/9): BoundBuffers(name=/9, inputs=[], perturbed=False)
  (/10): BoundBuffers(name=/10, inputs=[], perturbed=False)
  (/19): BoundParams(name=/19, inputs=[], perturbed=False)
  (/20): BoundParams(name=/20, inputs=[], perturbed=False)
  (/21): BoundParams(name=/21, inputs=[], perturbed=False)
  (/22): BoundParams(name=/22, inputs=[], perturbed=False)
  (/23): BoundParams(name=/23, inputs=[], perturbed=False)
  (/24): BoundParams(name=/24, inputs=[], perturbed=False)
  (/25): BoundParams(name=/25, inputs=[], perturbed=False)
  (/26): BoundParams(name=/26, inputs=[], perturbed=False)
  (/59): BoundBuffers(name=/59, inputs=[], perturbed=False)
  (/60): BoundBuffers(name=/60, inputs=[], perturbed=False)
  (/61): BoundBuffers(name=/61, inputs=[], perturbed=False)
  (/62): BoundBuffers(name=/62, inputs=[], perturbed=False)
  (/63): BoundBuffers(name=/63, inputs=[], perturbed=False)
  (/64): BoundBuffers(name=/64, inputs=[], perturbed=False)
  (/65): BoundBuffers(name=/65, inputs=[], perturbed=False)
  (/66): BoundBuffers(name=/66, inputs=[], perturbed=False)
  (/67): BoundBuffers(name=/67, inputs=[], perturbed=False)
  (/68): BoundBuffers(name=/68, inputs=[], perturbed=False)
  (/69): BoundBuffers(name=/69, inputs=[], perturbed=False)
  (/70): BoundBuffers(name=/70, inputs=[], perturbed=False)
  (/71): BoundBuffers(name=/71, inputs=[], perturbed=False)
  (/72): BoundBuffers(name=/72, inputs=[], perturbed=False)
  (/73): BoundBuffers(name=/73, inputs=[], perturbed=False)
  (/74): BoundBuffers(name=/74, inputs=[], perturbed=False)
  (/shape.1): BoundBuffers(name=/shape.1, inputs=[], perturbed=False)
  (/76): BoundBuffers(name=/76, inputs=[], perturbed=False)
  (/77): BoundBuffers(name=/77, inputs=[], perturbed=False)
  (/78): BoundBuffers(name=/78, inputs=[], perturbed=False)
  (/shape.5): BoundBuffers(name=/shape.5, inputs=[], perturbed=False)
  (/80): BoundBuffers(name=/80, inputs=[], perturbed=False)
  (/81): BoundBuffers(name=/81, inputs=[], perturbed=False)
  (/82): BoundBuffers(name=/82, inputs=[], perturbed=False)
  (/83): BoundBuffers(name=/83, inputs=[], perturbed=False)
  (/84): BoundBuffers(name=/84, inputs=[], perturbed=False)
  (/85): BoundBuffers(name=/85, inputs=[], perturbed=False)
  (/86): BoundParams(name=/86, inputs=[], perturbed=False)
  (/87): BoundParams(name=/87, inputs=[], perturbed=False)
  (/88): BoundParams(name=/88, inputs=[], perturbed=False)
  (/89): BoundParams(name=/89, inputs=[], perturbed=False)
  (/90): BoundParams(name=/90, inputs=[], perturbed=False)
  (/91): BoundParams(name=/91, inputs=[], perturbed=False)
  (/92): BoundParams(name=/92, inputs=[], perturbed=False)
  (/93): BoundParams(name=/93, inputs=[], perturbed=False)
  (/94): BoundBuffers(name=/94, inputs=[], perturbed=False)
  (/95): BoundBuffers(name=/95, inputs=[], perturbed=False)
  (/96): BoundBuffers(name=/96, inputs=[], perturbed=False)
  (/input): BoundLinear(name=/input, inputs=[/0, /19, /20], perturbed=True)
  (/98): BoundRelu(name=/98, inputs=[/input], perturbed=True)
  (/input.3): BoundLinear(name=/input.3, inputs=[/98, /21, /22], perturbed=True)
  (/100): BoundRelu(name=/100, inputs=[/input.3], perturbed=True)
  (/input.7): BoundLinear(name=/input.7, inputs=[/100, /23, /24], perturbed=True)
  (/102): BoundRelu(name=/102, inputs=[/input.7], perturbed=True)
  (/103): BoundLinear(name=/103, inputs=[/102, /25, /26], perturbed=True)
  (/104): BoundConstant(name=/104, value=1)
  (/105): BoundConstant(name=/105, value=0)
  (/106): BoundConstant(name=/106, value=24)
  (/107): BoundConstant(name=/107, value=0)
  (/108): BoundConstant(name=/108, value=24)
  (/109): BoundAdd(name=/109, inputs=[/107, /108], perturbed=False)
  (/110): BoundConstant(name=/110, value=tensor([0], device='cuda:0'))
  (/111): BoundUnsqueeze(name=/111, inputs=[/104, /110], perturbed=False)
  (/112): BoundConstant(name=/112, value=tensor([0], device='cuda:0'))
  (/113): BoundUnsqueeze(name=/113, inputs=[/105, /112], perturbed=False)
  (/114): BoundConstant(name=/114, value=tensor([0], device='cuda:0'))
  (/115): BoundUnsqueeze(name=/115, inputs=[/109, /114], perturbed=False)
  (/116): BoundSlice(name=/116, inputs=[/103, /113, /115, /111], perturbed=True)
  (/117): BoundSigmoid(name=/117, inputs=[/116], perturbed=True)
  (/118): BoundMul(name=/118, inputs=[/117, /9], perturbed=True)
  (/119): BoundAdd(name=/119, inputs=[/118, /10], perturbed=True)
  (/120): BoundConstant(name=/120, value=24)
  (/121): BoundConstant(name=/121, value=14)
  (/122): BoundAdd(name=/122, inputs=[/120, /121], perturbed=False)
  (/123): BoundConstant(name=/123, value=tensor([0], device='cuda:0'))
  (/124): BoundUnsqueeze(name=/124, inputs=[/104, /123], perturbed=False)
  (/125): BoundConstant(name=/125, value=tensor([0], device='cuda:0'))
  (/126): BoundUnsqueeze(name=/126, inputs=[/106, /125], perturbed=False)
  (/127): BoundConstant(name=/127, value=tensor([0], device='cuda:0'))
  (/128): BoundUnsqueeze(name=/128, inputs=[/122, /127], perturbed=False)
  (/129): BoundSlice(name=/129, inputs=[/103, /126, /128, /124], perturbed=True)
  (/130): BoundConcat(name=/130, inputs=[/119, /129], perturbed=True)
  (/131): BoundConstant(name=/131, value=11)
  (/132): BoundConstant(name=/132, value=0)
  (/133): BoundConstant(name=/133, value=11)
  (/134): BoundAdd(name=/134, inputs=[/132, /133], perturbed=False)
  (/135): BoundConstant(name=/135, value=tensor([0], device='cuda:0'))
  (/136): BoundUnsqueeze(name=/136, inputs=[/104, /135], perturbed=False)
  (/137): BoundConstant(name=/137, value=tensor([0], device='cuda:0'))
  (/138): BoundUnsqueeze(name=/138, inputs=[/105, /137], perturbed=False)
  (/139): BoundConstant(name=/139, value=tensor([0], device='cuda:0'))
  (/140): BoundUnsqueeze(name=/140, inputs=[/134, /139], perturbed=False)
  (/141): BoundSlice(name=/141, inputs=[/0, /138, /140, /136], perturbed=True)
  (/142): BoundConstant(name=/142, value=11)
  (/143): BoundAdd(name=/143, inputs=[/142, /142], perturbed=False)
  (/144): BoundConstant(name=/144, value=tensor([0], device='cuda:0'))
  (/145): BoundUnsqueeze(name=/145, inputs=[/104, /144], perturbed=False)
  (/146): BoundConstant(name=/146, value=tensor([0], device='cuda:0'))
  (/147): BoundUnsqueeze(name=/147, inputs=[/131, /146], perturbed=False)
  (/148): BoundConstant(name=/148, value=tensor([0], device='cuda:0'))
  (/149): BoundUnsqueeze(name=/149, inputs=[/143, /148], perturbed=False)
  (/150): BoundSlice(name=/150, inputs=[/0, /147, /149, /145], perturbed=True)
  (/151): BoundConstant(name=/151, value=5)
  (/152): BoundConstant(name=/152, value=0)
  (/153): BoundConstant(name=/153, value=5)
  (/154): BoundAdd(name=/154, inputs=[/152, /153], perturbed=False)
  (/155): BoundConstant(name=/155, value=tensor([0], device='cuda:0'))
  (/156): BoundUnsqueeze(name=/156, inputs=[/104, /155], perturbed=False)
  (/157): BoundConstant(name=/157, value=tensor([0], device='cuda:0'))
  (/158): BoundUnsqueeze(name=/158, inputs=[/105, /157], perturbed=False)
  (/159): BoundConstant(name=/159, value=tensor([0], device='cuda:0'))
  (/160): BoundUnsqueeze(name=/160, inputs=[/154, /159], perturbed=False)
  (/161): BoundSlice(name=/161, inputs=[/130, /158, /160, /156], perturbed=True)
  (/162): BoundConstant(name=/162, value=5)
  (/163): BoundAdd(name=/163, inputs=[/162, /162], perturbed=False)
  (/164): BoundConstant(name=/164, value=tensor([0], device='cuda:0'))
  (/165): BoundUnsqueeze(name=/165, inputs=[/104, /164], perturbed=False)
  (/166): BoundConstant(name=/166, value=tensor([0], device='cuda:0'))
  (/167): BoundUnsqueeze(name=/167, inputs=[/151, /166], perturbed=False)
  (/168): BoundConstant(name=/168, value=tensor([0], device='cuda:0'))
  (/169): BoundUnsqueeze(name=/169, inputs=[/163, /168], perturbed=False)
  (/170): BoundSlice(name=/170, inputs=[/130, /167, /169, /165], perturbed=True)
  (/171): BoundConstant(name=/171, value=10)
  (/172): BoundConstant(name=/172, value=10)
  (/173): BoundConstant(name=/173, value=14)
  (/174): BoundAdd(name=/174, inputs=[/172, /173], perturbed=False)
  (/175): BoundConstant(name=/175, value=tensor([0], device='cuda:0'))
  (/176): BoundUnsqueeze(name=/176, inputs=[/104, /175], perturbed=False)
  (/177): BoundConstant(name=/177, value=tensor([0], device='cuda:0'))
  (/178): BoundUnsqueeze(name=/178, inputs=[/171, /177], perturbed=False)
  (/179): BoundConstant(name=/179, value=tensor([0], device='cuda:0'))
  (/180): BoundUnsqueeze(name=/180, inputs=[/174, /179], perturbed=False)
  (/181): BoundSlice(name=/181, inputs=[/130, /178, /180, /176], perturbed=True)
  (/182): BoundConstant(name=/182, value=24)
  (/183): BoundConstant(name=/183, value=14)
  (/184): BoundAdd(name=/184, inputs=[/182, /183], perturbed=False)
  (/185): BoundConstant(name=/185, value=tensor([0], device='cuda:0'))
  (/186): BoundUnsqueeze(name=/186, inputs=[/104, /185], perturbed=False)
  (/187): BoundConstant(name=/187, value=tensor([0], device='cuda:0'))
  (/188): BoundUnsqueeze(name=/188, inputs=[/106, /187], perturbed=False)
  (/189): BoundConstant(name=/189, value=tensor([0], device='cuda:0'))
  (/190): BoundUnsqueeze(name=/190, inputs=[/184, /189], perturbed=False)
  (/191): BoundSlice(name=/191, inputs=[/130, /188, /190, /186], perturbed=True)
  (/192): BoundCast(name=/192, inputs=[/59], perturbed=False)
  (/193): BoundGather(name=/193, inputs=[/191, /192], perturbed=True)
  (/194): BoundCast(name=/194, inputs=[/60], perturbed=False)
  (/195): BoundGather(name=/195, inputs=[/191, /194], perturbed=True)
  (/196): BoundSub(name=/196, inputs=[/193, /195], perturbed=True)
  (/197): BoundCast(name=/197, inputs=[/192], perturbed=False)
  (/198): BoundGather(name=/198, inputs=[/181, /197], perturbed=True)
  (/199): BoundCast(name=/199, inputs=[/194], perturbed=False)
  (/200): BoundGather(name=/200, inputs=[/181, /199], perturbed=True)
  (/203): BoundCos(name=/203, inputs=[/196], perturbed=True)
  (/204): BoundSin(name=/204, inputs=[/196], perturbed=True)
  (/205): BoundMul(name=/205, inputs=[/198, /200], perturbed=True)
  (/206): BoundMul(name=/206, inputs=[/205, /203], perturbed=True)
  (/207): BoundMul(name=/207, inputs=[/205, /204], perturbed=True)
  (/208): BoundNeg(name=/208, inputs=[/207], perturbed=True)
  (/209): BoundMul(name=/209, inputs=[/63, /201/sqr], perturbed=True)
  (/210): BoundMul(name=/210, inputs=[/64, /206], perturbed=True)
  (/211): BoundAdd(name=/211, inputs=[/209, /210], perturbed=True)
  (/212): BoundMul(name=/212, inputs=[/65, /207], perturbed=True)
  (/213): BoundAdd(name=/213, inputs=[/211, /212], perturbed=True)
  (/214): BoundMul(name=/214, inputs=[/66, /201/sqr], perturbed=True)
  (/215): BoundMul(name=/215, inputs=[/67, /206], perturbed=True)
  (/216): BoundSub(name=/216, inputs=[/214, /215], perturbed=True)
  (/217): BoundMul(name=/217, inputs=[/68, /207], perturbed=True)
  (/218): BoundAdd(name=/218, inputs=[/216, /217], perturbed=True)
  (/219): BoundMul(name=/219, inputs=[/69, /202/sqr], perturbed=True)
  (/220): BoundAdd(name=/220, inputs=[/219, /210], perturbed=True)
  (/221): BoundMul(name=/221, inputs=[/70, /208], perturbed=True)
  (/222): BoundAdd(name=/222, inputs=[/220, /221], perturbed=True)
  (/223): BoundMul(name=/223, inputs=[/71, /202/sqr], perturbed=True)
  (/224): BoundSub(name=/224, inputs=[/223, /215], perturbed=True)
  (/225): BoundMul(name=/225, inputs=[/72, /208], perturbed=True)
  (/226): BoundAdd(name=/226, inputs=[/224, /225], perturbed=True)
  (/227): BoundConstant(name=/227, value=tensor([1], device='cuda:0'))
  (/228): BoundSplit(name=/228, inputs=[/shape.1, /227], perturbed=False)
  (/229): BoundConstant(name=/229, value=tensor([0], device='cuda:0'))
  (/230): BoundSqueeze(name=/230, inputs=[/228, /229], perturbed=False)
  (/231): BoundConstant(name=/231, value=tensor([0], device='cuda:0'))
  (/232): BoundUnsqueeze(name=/232, inputs=[/230, /231], perturbed=False)
  (/233): BoundConcat(name=/233, inputs=[/232], perturbed=False)
  (/234): BoundConstant(name=/234, value=tensor([-1], device='cuda:0'))
  (/235): BoundReshape(name=/235, inputs=[/233, /234], perturbed=False)
  (/236): BoundShape(name=/236, inputs=[/235], perturbed=False)
  (/237): BoundConstantOfShape(name=/237, inputs=[/236], perturbed=False)
  (/238): BoundConstant(name=/238, value=-1)
  (/239): BoundMul(name=/239, inputs=[/237, /238], perturbed=False)
  (/240): BoundEqual(name=/240, inputs=[/235, /239], perturbed=False)
  (/241): BoundWhere(name=/241, inputs=[/240, /237, /235], perturbed=False)
  (/242): BoundExpand(name=/242, inputs=[/76, /241], perturbed=False)
  (/243): BoundCast(name=/243, inputs=[/242], perturbed=False)
  (/244): BoundMul(name=/244, inputs=[/243, /77], perturbed=False)
  (/245): BoundEqual(name=/245, inputs=[/74, /244], perturbed=False)
  (/246): BoundCast(name=/246, inputs=[/243], perturbed=False)
  (/247): BoundCast(name=/247, inputs=[/74], perturbed=False)
  (/shape): BoundWhere(name=/shape, inputs=[/245, /246, /247], perturbed=False)
  (/249): BoundConstant(name=/249, inputs=[], perturbed=False)
  (/250): BoundSplit(name=/250, inputs=[/shape, /249], perturbed=False)
  (/251): BoundSplit(name=/251, inputs=[/shape, /249], perturbed=False)
  (/252): BoundConstant(name=/252, value=tensor([0], device='cuda:0'))
  (/253): BoundSqueeze(name=/253, inputs=[/250, /252], perturbed=False)
  (/254): BoundConstant(name=/254, value=tensor([0], device='cuda:0'))
  (/255): BoundSqueeze(name=/255, inputs=[/251, /254], perturbed=False)
  (/256): BoundConstant(name=/256, value=tensor([0], device='cuda:0'))
  (/257): BoundUnsqueeze(name=/257, inputs=[/253, /256], perturbed=False)
  (/258): BoundConstant(name=/258, value=tensor([0], device='cuda:0'))
  (/259): BoundUnsqueeze(name=/259, inputs=[/255, /258], perturbed=False)
  (/260): BoundConcat(name=/260, inputs=[/257, /259], perturbed=False)
  (/261): BoundConstantOfShape(name=/261, inputs=[/260], perturbed=False)
  (/262): BoundMul(name=/262, inputs=[/73, /261], perturbed=False)
  (/263): BoundConstant(name=/263, value=tensor([1], device='cuda:0'))
  (/264): BoundSplit(name=/264, inputs=[/shape.5, /263], perturbed=False)
  (/265): BoundConstant(name=/265, value=tensor([0], device='cuda:0'))
  (/266): BoundSqueeze(name=/266, inputs=[/264, /265], perturbed=False)
  (/267): BoundConstant(name=/267, value=tensor([0], device='cuda:0'))
  (/268): BoundUnsqueeze(name=/268, inputs=[/266, /267], perturbed=False)
  (/269): BoundConcat(name=/269, inputs=[/268], perturbed=False)
  (/270): BoundConstant(name=/270, value=tensor([-1], device='cuda:0'))
  (/271): BoundReshape(name=/271, inputs=[/269, /270], perturbed=False)
  (/272): BoundShape(name=/272, inputs=[/271], perturbed=False)
  (/273): BoundConstantOfShape(name=/273, inputs=[/272], perturbed=False)
  (/274): BoundConstant(name=/274, value=-1)
  (/275): BoundMul(name=/275, inputs=[/273, /274], perturbed=False)
  (/276): BoundEqual(name=/276, inputs=[/271, /275], perturbed=False)
  (/277): BoundWhere(name=/277, inputs=[/276, /273, /271], perturbed=False)
  (/278): BoundExpand(name=/278, inputs=[/80, /277], perturbed=False)
  (/279): BoundCast(name=/279, inputs=[/278], perturbed=False)
  (/280): BoundMul(name=/280, inputs=[/279, /81], perturbed=False)
  (/281): BoundEqual(name=/281, inputs=[/78, /280], perturbed=False)
  (/282): BoundCast(name=/282, inputs=[/279], perturbed=False)
  (/283): BoundCast(name=/283, inputs=[/78], perturbed=False)
  (/shape.4): BoundWhere(name=/shape.4, inputs=[/281, /282, /283], perturbed=False)
  (/285): BoundConstant(name=/285, inputs=[], perturbed=False)
  (/286): BoundSplit(name=/286, inputs=[/shape.4, /285], perturbed=False)
  (/287): BoundSplit(name=/287, inputs=[/shape.4, /285], perturbed=False)
  (/288): BoundConstant(name=/288, value=tensor([0], device='cuda:0'))
  (/289): BoundSqueeze(name=/289, inputs=[/286, /288], perturbed=False)
  (/290): BoundConstant(name=/290, value=tensor([0], device='cuda:0'))
  (/291): BoundSqueeze(name=/291, inputs=[/287, /290], perturbed=False)
  (/292): BoundConstant(name=/292, value=tensor([0], device='cuda:0'))
  (/293): BoundUnsqueeze(name=/293, inputs=[/289, /292], perturbed=False)
  (/294): BoundConstant(name=/294, value=tensor([0], device='cuda:0'))
  (/295): BoundUnsqueeze(name=/295, inputs=[/291, /294], perturbed=False)
  (/296): BoundConcat(name=/296, inputs=[/293, /295], perturbed=False)
  (/297): BoundConstantOfShape(name=/297, inputs=[/296], perturbed=False)
  (/298): BoundMul(name=/298, inputs=[/73, /297], perturbed=False)
  (/301): BoundAdd(name=/301, inputs=[/299/sqr, /300/sqr], perturbed=True)
  (/302): BoundSub(name=/302, inputs=[/301, /262], perturbed=True)
  (/305): BoundAdd(name=/305, inputs=[/303/sqr, /304/sqr], perturbed=True)
  (/306): BoundSub(name=/306, inputs=[/305, /298], perturbed=True)
  (/307): BoundTranspose(name=/307, inputs=[/86], perturbed=False)
  (/308): BoundMatMul(name=/308, inputs=[/141, /307], perturbed=True)
  (/309): BoundTranspose(name=/309, inputs=[/87], perturbed=False)
  (/310): BoundMatMul(name=/310, inputs=[/150, /309], perturbed=True)
  (/311): BoundTranspose(name=/311, inputs=[/88], perturbed=False)
  (/312): BoundMatMul(name=/312, inputs=[/161, /311], perturbed=True)
  (/313): BoundTranspose(name=/313, inputs=[/89], perturbed=False)
  (/314): BoundMatMul(name=/314, inputs=[/170, /313], perturbed=True)
  (/315): BoundTranspose(name=/315, inputs=[/90], perturbed=False)
  (/316): BoundMatMul(name=/316, inputs=[/213, /315], perturbed=True)
  (/317): BoundTranspose(name=/317, inputs=[/91], perturbed=False)
  (/318): BoundMatMul(name=/318, inputs=[/222, /317], perturbed=True)
  (/319): BoundTranspose(name=/319, inputs=[/92], perturbed=False)
  (/320): BoundMatMul(name=/320, inputs=[/218, /319], perturbed=True)
  (/321): BoundTranspose(name=/321, inputs=[/93], perturbed=False)
  (/322): BoundMatMul(name=/322, inputs=[/226, /321], perturbed=True)
  (/324): BoundSub(name=/324, inputs=[/312, /308], perturbed=True)
  (/325): BoundSub(name=/325, inputs=[/324, /318], perturbed=True)
  (/326): BoundSub(name=/326, inputs=[/325, /316], perturbed=True)
  (/327): BoundMul(name=/327, inputs=[/95, /323/sqr], perturbed=True)
  (/328): BoundSub(name=/328, inputs=[/326, /327], perturbed=True)
  (/329): BoundSub(name=/329, inputs=[/314, /310], perturbed=True)
  (/330): BoundSub(name=/330, inputs=[/329, /322], perturbed=True)
  (/331): BoundSub(name=/331, inputs=[/330, /320], perturbed=True)
  (/332): BoundMul(name=/332, inputs=[/96, /323/sqr], perturbed=True)
  (/333): BoundAdd(name=/333, inputs=[/331, /332], perturbed=True)
  (/334): BoundConcat(name=/334, inputs=[/130, /213, /222, /218, /226, /302, /306, /328, /333], perturbed=True)
  (/201/sqr): BoundSqr(name=/201/sqr, inputs=[/198], perturbed=True)
  (/202/sqr): BoundSqr(name=/202/sqr, inputs=[/200], perturbed=True)
  (/299/sqr): BoundSqr(name=/299/sqr, inputs=[/213], perturbed=True)
  (/300/sqr): BoundSqr(name=/300/sqr, inputs=[/218], perturbed=True)
  (/303/sqr): BoundSqr(name=/303/sqr, inputs=[/222], perturbed=True)
  (/304/sqr): BoundSqr(name=/304/sqr, inputs=[/226], perturbed=True)
  (/323/sqr): BoundSqr(name=/323/sqr, inputs=[/181], perturbed=True)
)
Original output: tensor([[ 2.72188473e+00,  1.18996459e-05,  0.00000000e+00,  0.00000000e+00,
          0.00000000e+00,  8.66952073e-03,  2.99999416e-01,  3.39128315e-01,
          1.42723486e-01,  1.04879484e-01,  1.05998588e+00,  1.03292096e+00,
          1.00704122e+00,  1.00748634e+00,  1.01018953e+00,  1.05999255e+00,
          1.04261136e+00,  1.05998933e+00,  1.03947401e+00,  1.03567684e+00,
          1.04420221e+00,  1.04504585e+00,  1.03994310e+00,  1.02218390e+00,
         -9.35234129e-05, -1.03861019e-01, -2.40479857e-01, -1.94098085e-01,
         -1.65838242e-01, -2.62287855e-01, -2.47477949e-01, -2.47466981e-01,
         -2.75302172e-01, -2.77998745e-01, -2.72382557e-01, -2.77064890e-01,
         -2.78348446e-01, -2.93846518e-01,  1.90383589e+00,  8.17381322e-01,
          7.18781114e-01,  5.31188011e-01,  3.79026026e-01, -2.37166286e-01,
         -6.36400402e-01,  2.74030149e-01,  1.57621026e-01,  4.39017385e-01,
          7.85761103e-02,  7.63468742e-02,  1.74338847e-01, -6.88080472e-05,
          2.74075985e-01,  4.55080234e-02,  8.55342299e-02, -4.33171839e-02,
          1.64170228e-02,  5.92806078e-02, -1.84129059e+00, -7.84728587e-01,
         -6.96018934e-01, -5.15819669e-01, -3.71330947e-01,  2.41500497e-01,
          6.42009914e-01, -2.74030149e-01, -1.57621026e-01, -4.39017385e-01,
         -7.78684840e-02, -7.56367445e-02, -1.72212154e-01,  6.88080472e-05,
         -2.74075985e-01, -4.54212390e-02, -8.45883042e-02,  4.35179323e-02,
         -1.63469277e-02, -5.86315133e-02, -6.88441396e-02,  7.68023282e-02,
         -9.98757780e-03, -2.01869607e-02,  3.95809859e-03,  9.01905894e-02,
          1.46733463e-01, -5.40719032e-02,  6.85858727e-03,  1.23985291e-01,
          4.69123796e-02,  2.57240105e-02,  7.57033229e-02, -1.02858067e-01,
          3.35464478e-02,  2.96249650e-02,  2.69364081e-02, -2.73773968e-02,
          8.53921659e-03,  2.43189782e-02,  2.01978981e-01,  5.24751842e-03,
          6.03096336e-02,  3.14250588e-02, -1.65747330e-02, -9.21151042e-02,
         -1.29035175e-01,  6.94460869e-02,  5.94806671e-03, -7.93428421e-02,
         -4.54294160e-02, -2.42465306e-02, -7.15147853e-02,  1.04572773e-01,
         -2.58321762e-02, -2.93960832e-02, -2.49241553e-02,  2.78470814e-02,
         -8.47579725e-03, -2.29976624e-02, -1.86490707e+01, -9.64389145e-01,
         -1.58575392e+00, -2.21383190e+00, -2.44842362e+00, -2.49561787e+00,
         -4.36630630e+01, -1.91008377e+00, -2.56008565e-01, -1.16079128e+00,
         -1.78722513e+00, -1.07510936e+00, -4.00397491e+00, -2.77832007e+00,
         -7.05265713e+00, -1.05595512e+01, -9.72058296e-01, -1.98547411e+00,
         -9.79757547e-01, -5.73494375e-01, -1.88472538e+01, -1.02257347e+00,
         -1.61442041e+00, -2.22934270e+00, -2.45393848e+00, -2.49319220e+00,
         -4.36607742e+01, -1.90818477e+00, -2.56020248e-01, -1.16986835e+00,
         -1.78747272e+00, -1.07529116e+00, -4.00532866e+00, -2.77796435e+00,
         -7.05311489e+00, -1.05595732e+01, -9.72323596e-01, -1.98543084e+00,
         -9.79760885e-01, -5.73633432e-01,  6.67572021e-04,  3.79085541e-05,
         -3.91006470e-05, -3.75509262e-06, -4.43458557e-05, -1.41084194e-04,
          2.29775906e-05, -6.88080472e-05, -3.50251794e-04,  6.81113452e-04,
          3.72808427e-04,  7.99797475e-04, -7.12890178e-04, -4.52980399e-04,
          7.11332075e-04,  5.43147326e-06,  3.98114324e-04,  2.57372856e-04,
          5.71504235e-04,  1.35123730e-04, -1.34468079e-04,  3.06710601e-04,
         -7.60152936e-04,  2.54362822e-05,  1.08066946e-04,  3.84055078e-04,
         -1.76541507e-04, -2.90531665e-04]], device='cuda:0')
Split layers:
  BoundLinear(name=/input.7, inputs=[/100, /23, /24], perturbed=True): [(BoundRelu(name=/102, inputs=[/input.7], perturbed=True), 0)]
  BoundMul(name=/205, inputs=[/198, /200], perturbed=True): [(BoundMul(name=/206, inputs=[/205, /203], perturbed=True), 0), (BoundMul(name=/207, inputs=[/205, /204], perturbed=True), 0)]
  BoundSin(name=/204, inputs=[/196], perturbed=True): [(BoundMul(name=/207, inputs=[/205, /204], perturbed=True), 1)]
  BoundSlice(name=/181, inputs=[/130, /178, /180, /176], perturbed=True): [(BoundSqr(name=/323/sqr, inputs=[/181], perturbed=True), 0)]
  BoundSlice(name=/116, inputs=[/103, /113, /115, /111], perturbed=True): [(BoundSigmoid(name=/117, inputs=[/116], perturbed=True), 0)]
  BoundLinear(name=/input, inputs=[/0, /19, /20], perturbed=True): [(BoundRelu(name=/98, inputs=[/input], perturbed=True), 0)]
  BoundGather(name=/200, inputs=[/181, /199], perturbed=True): [(BoundMul(name=/205, inputs=[/198, /200], perturbed=True), 1), (BoundSqr(name=/202/sqr, inputs=[/200], perturbed=True), 0)]
  BoundAdd(name=/218, inputs=[/216, /217], perturbed=True): [(BoundSqr(name=/300/sqr, inputs=[/218], perturbed=True), 0)]
  BoundAdd(name=/222, inputs=[/220, /221], perturbed=True): [(BoundSqr(name=/303/sqr, inputs=[/222], perturbed=True), 0)]
  BoundAdd(name=/226, inputs=[/224, /225], perturbed=True): [(BoundSqr(name=/304/sqr, inputs=[/226], perturbed=True), 0)]
  BoundSub(name=/196, inputs=[/193, /195], perturbed=True): [(BoundCos(name=/203, inputs=[/196], perturbed=True), 0), (BoundSin(name=/204, inputs=[/196], perturbed=True), 0)]
  BoundGather(name=/198, inputs=[/181, /197], perturbed=True): [(BoundMul(name=/205, inputs=[/198, /200], perturbed=True), 0), (BoundSqr(name=/201/sqr, inputs=[/198], perturbed=True), 0)]
  BoundCos(name=/203, inputs=[/196], perturbed=True): [(BoundMul(name=/206, inputs=[/205, /203], perturbed=True), 1)]
  BoundLinear(name=/input.3, inputs=[/98, /21, /22], perturbed=True): [(BoundRelu(name=/100, inputs=[/input.3], perturbed=True), 0)]
  BoundAdd(name=/213, inputs=[/211, /212], perturbed=True): [(BoundSqr(name=/299/sqr, inputs=[/213], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/98, inputs=[/input], perturbed=True)
   BoundRelu(name=/100, inputs=[/input.3], perturbed=True)
   BoundRelu(name=/102, inputs=[/input.7], perturbed=True)
   BoundSigmoid(name=/117, inputs=[/116], perturbed=True)
   BoundCos(name=/203, inputs=[/196], perturbed=True)
   BoundSin(name=/204, inputs=[/196], perturbed=True)
   BoundMul(name=/205, inputs=[/198, /200], perturbed=True)
   BoundMul(name=/206, inputs=[/205, /203], perturbed=True)
   BoundMul(name=/207, inputs=[/205, /204], perturbed=True)
   BoundSqr(name=/201/sqr, inputs=[/198], perturbed=True)
   BoundSqr(name=/202/sqr, inputs=[/200], perturbed=True)
   BoundSqr(name=/299/sqr, inputs=[/213], perturbed=True)
   BoundSqr(name=/300/sqr, inputs=[/218], perturbed=True)
   BoundSqr(name=/303/sqr, inputs=[/222], perturbed=True)
   BoundSqr(name=/304/sqr, inputs=[/226], perturbed=True)
   BoundSqr(name=/323/sqr, inputs=[/181], perturbed=True)
layer /98 start_node /input.3 using full alpha [2, 32, 1, 32] with unstable size None total_size 32 output_shape torch.Size([32])
layer /98 start_node /input.7 using full alpha [2, 32, 1, 32] with unstable size None total_size 32 output_shape torch.Size([32])
layer /98 start_node /116 using full alpha [2, 24, 1, 32] with unstable size None total_size 24 output_shape torch.Size([24])
layer /98 start_node /198 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /98 start_node /200 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /98 start_node /196 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /98 start_node /205 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /98 start_node /213 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /98 start_node /218 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /98 start_node /222 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /98 start_node /226 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /98 start_node /181 using full alpha [2, 14, 1, 32] with unstable size None total_size 14 output_shape torch.Size([14])
layer /98 start_node /334 using full alpha [2, 2, 1, 32] with unstable size None total_size 2 output_shape 2
layer /100 start_node /input.7 using full alpha [2, 32, 1, 32] with unstable size None total_size 32 output_shape torch.Size([32])
layer /100 start_node /116 using full alpha [2, 24, 1, 32] with unstable size None total_size 24 output_shape torch.Size([24])
layer /100 start_node /198 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /100 start_node /200 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /100 start_node /196 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /100 start_node /205 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /100 start_node /213 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /100 start_node /218 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /100 start_node /222 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /100 start_node /226 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /100 start_node /181 using full alpha [2, 14, 1, 32] with unstable size None total_size 14 output_shape torch.Size([14])
layer /100 start_node /334 using full alpha [2, 2, 1, 32] with unstable size None total_size 2 output_shape 2
layer /102 start_node /116 using full alpha [2, 24, 1, 32] with unstable size None total_size 24 output_shape torch.Size([24])
layer /102 start_node /198 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /102 start_node /200 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /102 start_node /196 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /102 start_node /205 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /102 start_node /213 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /102 start_node /218 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /102 start_node /222 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /102 start_node /226 using full alpha [2, 20, 1, 32] with unstable size None total_size 20 output_shape torch.Size([20])
layer /102 start_node /181 using full alpha [2, 14, 1, 32] with unstable size None total_size 14 output_shape torch.Size([14])
layer /102 start_node /334 using full alpha [2, 2, 1, 32] with unstable size None total_size 2 output_shape 2
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.00134285, -0.00143523]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 4.5134 seconds
############# Summary #############
Final verified acc: 100.0% (total 1 examples)
Problem instances count: 1 , total verified (safe/unsat): 1 , total falsified (unsafe/sat): 0 , timeout: 0
mean time for ALL instances (total 1):4.51338093163563, max time: 4.513426065444946
mean time for verified SAFE instances(total 1): 4.513426065444946, max time: 4.513426065444946
safe-incomplete (total 1), index: [0]
Result dict saved to /home/hongjixu/Verifier_Development/tests/gpu_tests/vnncomp23/ml4acopf/master_outputs/2.pkl.
